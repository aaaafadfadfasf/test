// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cdb_admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cdb_admin {

namespace {

const ::google::protobuf::Descriptor* AdminStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AdminStatus_ReturnCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FormatDiskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormatDiskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaServerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaServerConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChunkServerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkServerConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatMetaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatMetaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminLoginReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MetaState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cdb_5fadmin_2eproto() {
  protobuf_AddDesc_cdb_5fadmin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cdb_admin.proto");
  GOOGLE_CHECK(file != NULL);
  AdminStatus_descriptor_ = file->message_type(0);
  static const int AdminStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminStatus, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminStatus, error_),
  };
  AdminStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminStatus_descriptor_,
      AdminStatus::default_instance_,
      AdminStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminStatus));
  AdminStatus_ReturnCode_descriptor_ = AdminStatus_descriptor_->enum_type(0);
  FormatDiskReq_descriptor_ = file->message_type(1);
  static const int FormatDiskReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDiskReq, cluster_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDiskReq, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDiskReq, disk_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDiskReq, disk_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDiskReq, force_format_),
  };
  FormatDiskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormatDiskReq_descriptor_,
      FormatDiskReq::default_instance_,
      FormatDiskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDiskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDiskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormatDiskReq));
  MetaNode_descriptor_ = file->message_type(2);
  static const int MetaNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNode, meta_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNode, election_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNode, primary_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNode, secondary_ip_),
  };
  MetaNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaNode_descriptor_,
      MetaNode::default_instance_,
      MetaNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaNode));
  MetaCluster_descriptor_ = file->message_type(3);
  static const int MetaCluster_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCluster, cluster_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCluster, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCluster, meta_service_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCluster, node_),
  };
  MetaCluster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCluster_descriptor_,
      MetaCluster::default_instance_,
      MetaCluster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCluster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCluster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCluster));
  MetaServerConf_descriptor_ = file->message_type(4);
  static const int MetaServerConf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaServerConf, cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaServerConf, my_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaServerConf, db_disk_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaServerConf, db_ram_cache_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaServerConf, local_backup_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaServerConf, has_bbu_),
  };
  MetaServerConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaServerConf_descriptor_,
      MetaServerConf::default_instance_,
      MetaServerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaServerConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaServerConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaServerConf));
  ChunkServerConf_descriptor_ = file->message_type(5);
  static const int ChunkServerConf_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, chunk_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, chunk_ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, db_disk_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, db_ram_cache_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, local_backup_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, has_bbu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, zone_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, machine_id_),
  };
  ChunkServerConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkServerConf_descriptor_,
      ChunkServerConf::default_instance_,
      ChunkServerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkServerConf));
  StatMetaReq_descriptor_ = file->message_type(6);
  static const int StatMetaReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatMetaReq, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatMetaReq, password_),
  };
  StatMetaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatMetaReq_descriptor_,
      StatMetaReq::default_instance_,
      StatMetaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatMetaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatMetaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatMetaReq));
  MetaStat_descriptor_ = file->message_type(7);
  static const int MetaStat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaStat, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaStat, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaStat, meta_disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaStat, internal_cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaStat, version_),
  };
  MetaStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaStat_descriptor_,
      MetaStat::default_instance_,
      MetaStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaStat));
  AdminReq_descriptor_ = file->message_type(8);
  static const int AdminReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminReq, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminReq, bbu_power_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminReq, backup_path_),
  };
  AdminReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminReq_descriptor_,
      AdminReq::default_instance_,
      AdminReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminReq));
  AdminLoginReq_descriptor_ = file->message_type(9);
  static const int AdminLoginReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminLoginReq, version_),
  };
  AdminLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminLoginReq_descriptor_,
      AdminLoginReq::default_instance_,
      AdminLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminLoginReq));
  MetaState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cdb_5fadmin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminStatus_descriptor_, &AdminStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormatDiskReq_descriptor_, &FormatDiskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaNode_descriptor_, &MetaNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCluster_descriptor_, &MetaCluster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaServerConf_descriptor_, &MetaServerConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkServerConf_descriptor_, &ChunkServerConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatMetaReq_descriptor_, &StatMetaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaStat_descriptor_, &MetaStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminReq_descriptor_, &AdminReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminLoginReq_descriptor_, &AdminLoginReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cdb_5fadmin_2eproto() {
  delete AdminStatus::default_instance_;
  delete AdminStatus_reflection_;
  delete FormatDiskReq::default_instance_;
  delete FormatDiskReq_reflection_;
  delete MetaNode::default_instance_;
  delete MetaNode_reflection_;
  delete MetaCluster::default_instance_;
  delete MetaCluster_reflection_;
  delete MetaServerConf::default_instance_;
  delete MetaServerConf_reflection_;
  delete ChunkServerConf::default_instance_;
  delete ChunkServerConf_reflection_;
  delete StatMetaReq::default_instance_;
  delete StatMetaReq_reflection_;
  delete MetaStat::default_instance_;
  delete MetaStat_reflection_;
  delete AdminReq::default_instance_;
  delete AdminReq_reflection_;
  delete AdminLoginReq::default_instance_;
  delete AdminLoginReq_reflection_;
}

void protobuf_AddDesc_cdb_5fadmin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_cdb_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cdb_admin.proto\022\tcdb_admin\032\020cdb_common"
    ".proto\"\222\003\n\013AdminStatus\0223\n\004code\030\001 \002(\0162!.c"
    "db_admin.AdminStatus.ReturnCode:\002OK\022\r\n\005e"
    "rror\030\002 \001(\t\"\276\002\n\nReturnCode\022\006\n\002OK\020\001\022\014\n\010TIM"
    "E_OUT\020\002\022\025\n\021FAILED_TO_CONNECT\020\003\022\024\n\020FAILED"
    "_OPEN_DISK\020\004\022\022\n\016DISK_TOO_SMALL\020\005\022!\n\035DISK"
    "_NOT_BELONGING_TO_CLUSTER\020\006\022\022\n\016DISK_FORM"
    "ATTED\020e\022\034\n\030DISK_EXISTING_IN_CLUSTER\020f\022\027\n"
    "\022DISK_NOT_FORMATTED\020\311\001\022\'\n\"DISK_NOT_BELON"
    "GING_TO_CHUNK_SERVER\020\312\001\022\023\n\016DISK_CORRUPTE"
    "D\020\313\001\022\026\n\021HAVE_DISK_RUNNING\020\241\006\022\025\n\020INVALID_"
    "ARGUMENT\020\205\007\"~\n\rFormatDiskReq\022\024\n\014cluster_"
    "name\030\001 \002(\t\022\024\n\014cluster_uuid\030\002 \002(\014\022\021\n\tdisk"
    "_uuid\030\003 \002(\t\022\021\n\tdisk_name\030\004 \002(\t\022\033\n\014force_"
    "format\030\005 \002(\010:\005false\"j\n\010MetaNode\022\n\n\002id\030\001 "
    "\002(\r\022\021\n\tmeta_port\030\002 \002(\r\022\025\n\relection_port\030"
    "\003 \002(\r\022\022\n\nprimary_ip\030\004 \002(\t\022\024\n\014secondary_i"
    "p\030\005 \001(\t\"w\n\013MetaCluster\022\024\n\014cluster_name\030\001"
    " \002(\t\022\024\n\014cluster_uuid\030\002 \002(\014\022\031\n\021meta_servi"
    "ce_port\030\003 \002(\r\022!\n\004node\030\004 \003(\0132\023.cdb_admin."
    "MetaNode\"\243\001\n\016MetaServerConf\022\'\n\007cluster\030\001"
    " \002(\0132\026.cdb_admin.MetaCluster\022\r\n\005my_id\030\002 "
    "\002(\r\022\024\n\014db_disk_name\030\003 \002(\t\022\030\n\020db_ram_cach"
    "e_dir\030\005 \002(\t\022\030\n\020local_backup_dir\030\006 \001(\t\022\017\n"
    "\007has_bbu\030\007 \001(\010\"\343\001\n\017ChunkServerConf\022\'\n\007cl"
    "uster\030\001 \002(\0132\026.cdb_admin.MetaCluster\022\022\n\nc"
    "hunk_port\030\002 \002(\r\022\021\n\tchunk_ips\030\003 \003(\t\022\024\n\014db"
    "_disk_name\030\004 \002(\t\022\030\n\020db_ram_cache_dir\030\005 \002"
    "(\t\022\030\n\020local_backup_dir\030\006 \001(\t\022\017\n\007has_bbu\030"
    "\007 \001(\010\022\021\n\tzone_name\030\010 \001(\t\022\022\n\nmachine_id\030\t"
    " \001(\t\"-\n\013StatMetaReq\022\014\n\004user\030\001 \002(\t\022\020\n\010pas"
    "sword\030\002 \002(\t\"\224\001\n\010MetaStat\022#\n\005state\030\001 \002(\0162"
    "\024.cdb_admin.MetaState\022\021\n\tleader_id\030\002 \001(\r"
    "\022 \n\tmeta_disk\030\003 \001(\0132\r.MetaDiskStat\022\035\n\025in"
    "ternal_cluster_uuid\030\004 \001(\014\022\017\n\007version\030\005 \001"
    "(\014\"D\n\010AdminReq\022\014\n\004stop\030\001 \001(\010\022\025\n\rbbu_powe"
    "r_off\030\002 \001(\010\022\023\n\013backup_path\030\003 \001(\014\" \n\rAdmi"
    "nLoginReq\022\017\n\007version\030\001 \002(\014*8\n\tMetaState\022"
    "\t\n\005SLAVE\020\001\022\024\n\020MASTER_CANDIDATE\020\002\022\n\n\006MAST"
    "ER\020\003", 1564);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cdb_admin.proto", &protobuf_RegisterTypes);
  AdminStatus::default_instance_ = new AdminStatus();
  FormatDiskReq::default_instance_ = new FormatDiskReq();
  MetaNode::default_instance_ = new MetaNode();
  MetaCluster::default_instance_ = new MetaCluster();
  MetaServerConf::default_instance_ = new MetaServerConf();
  ChunkServerConf::default_instance_ = new ChunkServerConf();
  StatMetaReq::default_instance_ = new StatMetaReq();
  MetaStat::default_instance_ = new MetaStat();
  AdminReq::default_instance_ = new AdminReq();
  AdminLoginReq::default_instance_ = new AdminLoginReq();
  AdminStatus::default_instance_->InitAsDefaultInstance();
  FormatDiskReq::default_instance_->InitAsDefaultInstance();
  MetaNode::default_instance_->InitAsDefaultInstance();
  MetaCluster::default_instance_->InitAsDefaultInstance();
  MetaServerConf::default_instance_->InitAsDefaultInstance();
  ChunkServerConf::default_instance_->InitAsDefaultInstance();
  StatMetaReq::default_instance_->InitAsDefaultInstance();
  MetaStat::default_instance_->InitAsDefaultInstance();
  AdminReq::default_instance_->InitAsDefaultInstance();
  AdminLoginReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cdb_5fadmin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cdb_5fadmin_2eproto {
  StaticDescriptorInitializer_cdb_5fadmin_2eproto() {
    protobuf_AddDesc_cdb_5fadmin_2eproto();
  }
} static_descriptor_initializer_cdb_5fadmin_2eproto_;

const ::google::protobuf::EnumDescriptor* MetaState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaState_descriptor_;
}
bool MetaState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AdminStatus_ReturnCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminStatus_ReturnCode_descriptor_;
}
bool AdminStatus_ReturnCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 101:
    case 102:
    case 201:
    case 202:
    case 203:
    case 801:
    case 901:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AdminStatus_ReturnCode AdminStatus::OK;
const AdminStatus_ReturnCode AdminStatus::TIME_OUT;
const AdminStatus_ReturnCode AdminStatus::FAILED_TO_CONNECT;
const AdminStatus_ReturnCode AdminStatus::FAILED_OPEN_DISK;
const AdminStatus_ReturnCode AdminStatus::DISK_TOO_SMALL;
const AdminStatus_ReturnCode AdminStatus::DISK_NOT_BELONGING_TO_CLUSTER;
const AdminStatus_ReturnCode AdminStatus::DISK_FORMATTED;
const AdminStatus_ReturnCode AdminStatus::DISK_EXISTING_IN_CLUSTER;
const AdminStatus_ReturnCode AdminStatus::DISK_NOT_FORMATTED;
const AdminStatus_ReturnCode AdminStatus::DISK_NOT_BELONGING_TO_CHUNK_SERVER;
const AdminStatus_ReturnCode AdminStatus::DISK_CORRUPTED;
const AdminStatus_ReturnCode AdminStatus::HAVE_DISK_RUNNING;
const AdminStatus_ReturnCode AdminStatus::INVALID_ARGUMENT;
const AdminStatus_ReturnCode AdminStatus::ReturnCode_MIN;
const AdminStatus_ReturnCode AdminStatus::ReturnCode_MAX;
const int AdminStatus::ReturnCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AdminStatus::kCodeFieldNumber;
const int AdminStatus::kErrorFieldNumber;
#endif  // !_MSC_VER

AdminStatus::AdminStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdminStatus::InitAsDefaultInstance() {
}

AdminStatus::AdminStatus(const AdminStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdminStatus::SharedCtor() {
  _cached_size_ = 0;
  code_ = 1;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminStatus::~AdminStatus() {
  SharedDtor();
}

void AdminStatus::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void AdminStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminStatus_descriptor_;
}

const AdminStatus& AdminStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

AdminStatus* AdminStatus::default_instance_ = NULL;

AdminStatus* AdminStatus::New() const {
  return new AdminStatus;
}

void AdminStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 1;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cdb_admin.AdminStatus.ReturnCode code = 1 [default = OK];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cdb_admin::AdminStatus_ReturnCode_IsValid(value)) {
            set_code(static_cast< ::cdb_admin::AdminStatus_ReturnCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdminStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cdb_admin.AdminStatus.ReturnCode code = 1 [default = OK];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }
  
  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdminStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cdb_admin.AdminStatus.ReturnCode code = 1 [default = OK];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }
  
  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdminStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cdb_admin.AdminStatus.ReturnCode code = 1 [default = OK];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminStatus::MergeFrom(const AdminStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminStatus::CopyFrom(const AdminStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AdminStatus::Swap(AdminStatus* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminStatus_descriptor_;
  metadata.reflection = AdminStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormatDiskReq::kClusterNameFieldNumber;
const int FormatDiskReq::kClusterUuidFieldNumber;
const int FormatDiskReq::kDiskUuidFieldNumber;
const int FormatDiskReq::kDiskNameFieldNumber;
const int FormatDiskReq::kForceFormatFieldNumber;
#endif  // !_MSC_VER

FormatDiskReq::FormatDiskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormatDiskReq::InitAsDefaultInstance() {
}

FormatDiskReq::FormatDiskReq(const FormatDiskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormatDiskReq::SharedCtor() {
  _cached_size_ = 0;
  cluster_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  disk_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  disk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  force_format_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormatDiskReq::~FormatDiskReq() {
  SharedDtor();
}

void FormatDiskReq::SharedDtor() {
  if (cluster_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cluster_name_;
  }
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cluster_uuid_;
  }
  if (disk_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_uuid_;
  }
  if (disk_name_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_name_;
  }
  if (this != default_instance_) {
  }
}

void FormatDiskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormatDiskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormatDiskReq_descriptor_;
}

const FormatDiskReq& FormatDiskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

FormatDiskReq* FormatDiskReq::default_instance_ = NULL;

FormatDiskReq* FormatDiskReq::New() const {
  return new FormatDiskReq;
}

void FormatDiskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cluster_name()) {
      if (cluster_name_ != &::google::protobuf::internal::kEmptyString) {
        cluster_name_->clear();
      }
    }
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        cluster_uuid_->clear();
      }
    }
    if (has_disk_uuid()) {
      if (disk_uuid_ != &::google::protobuf::internal::kEmptyString) {
        disk_uuid_->clear();
      }
    }
    if (has_disk_name()) {
      if (disk_name_ != &::google::protobuf::internal::kEmptyString) {
        disk_name_->clear();
      }
    }
    force_format_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormatDiskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cluster_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cluster_uuid;
        break;
      }
      
      // required bytes cluster_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cluster_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disk_uuid;
        break;
      }
      
      // required string disk_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_uuid().data(), this->disk_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_disk_name;
        break;
      }
      
      // required string disk_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_name().data(), this->disk_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_force_format;
        break;
      }
      
      // required bool force_format = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_format_)));
          set_has_force_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormatDiskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cluster_name = 1;
  if (has_cluster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cluster_name(), output);
  }
  
  // required bytes cluster_uuid = 2;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cluster_uuid(), output);
  }
  
  // required string disk_uuid = 3;
  if (has_disk_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_uuid().data(), this->disk_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->disk_uuid(), output);
  }
  
  // required string disk_name = 4;
  if (has_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_name().data(), this->disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->disk_name(), output);
  }
  
  // required bool force_format = 5 [default = false];
  if (has_force_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_format(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormatDiskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cluster_name = 1;
  if (has_cluster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_name(), target);
  }
  
  // required bytes cluster_uuid = 2;
  if (has_cluster_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cluster_uuid(), target);
  }
  
  // required string disk_uuid = 3;
  if (has_disk_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_uuid().data(), this->disk_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->disk_uuid(), target);
  }
  
  // required string disk_name = 4;
  if (has_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_name().data(), this->disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->disk_name(), target);
  }
  
  // required bool force_format = 5 [default = false];
  if (has_force_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_format(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormatDiskReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cluster_name = 1;
    if (has_cluster_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_name());
    }
    
    // required bytes cluster_uuid = 2;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cluster_uuid());
    }
    
    // required string disk_uuid = 3;
    if (has_disk_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_uuid());
    }
    
    // required string disk_name = 4;
    if (has_disk_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_name());
    }
    
    // required bool force_format = 5 [default = false];
    if (has_force_format()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormatDiskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormatDiskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormatDiskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormatDiskReq::MergeFrom(const FormatDiskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_name()) {
      set_cluster_name(from.cluster_name());
    }
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_disk_uuid()) {
      set_disk_uuid(from.disk_uuid());
    }
    if (from.has_disk_name()) {
      set_disk_name(from.disk_name());
    }
    if (from.has_force_format()) {
      set_force_format(from.force_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormatDiskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormatDiskReq::CopyFrom(const FormatDiskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatDiskReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void FormatDiskReq::Swap(FormatDiskReq* other) {
  if (other != this) {
    std::swap(cluster_name_, other->cluster_name_);
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(disk_uuid_, other->disk_uuid_);
    std::swap(disk_name_, other->disk_name_);
    std::swap(force_format_, other->force_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormatDiskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormatDiskReq_descriptor_;
  metadata.reflection = FormatDiskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaNode::kIdFieldNumber;
const int MetaNode::kMetaPortFieldNumber;
const int MetaNode::kElectionPortFieldNumber;
const int MetaNode::kPrimaryIpFieldNumber;
const int MetaNode::kSecondaryIpFieldNumber;
#endif  // !_MSC_VER

MetaNode::MetaNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaNode::InitAsDefaultInstance() {
}

MetaNode::MetaNode(const MetaNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  meta_port_ = 0u;
  election_port_ = 0u;
  primary_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secondary_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaNode::~MetaNode() {
  SharedDtor();
}

void MetaNode::SharedDtor() {
  if (primary_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete primary_ip_;
  }
  if (secondary_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete secondary_ip_;
  }
  if (this != default_instance_) {
  }
}

void MetaNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaNode_descriptor_;
}

const MetaNode& MetaNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

MetaNode* MetaNode::default_instance_ = NULL;

MetaNode* MetaNode::New() const {
  return new MetaNode;
}

void MetaNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    meta_port_ = 0u;
    election_port_ = 0u;
    if (has_primary_ip()) {
      if (primary_ip_ != &::google::protobuf::internal::kEmptyString) {
        primary_ip_->clear();
      }
    }
    if (has_secondary_ip()) {
      if (secondary_ip_ != &::google::protobuf::internal::kEmptyString) {
        secondary_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_meta_port;
        break;
      }
      
      // required uint32 meta_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_port_)));
          set_has_meta_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_election_port;
        break;
      }
      
      // required uint32 election_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_election_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &election_port_)));
          set_has_election_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_primary_ip;
        break;
      }
      
      // required string primary_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_primary_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->primary_ip().data(), this->primary_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_secondary_ip;
        break;
      }
      
      // optional string secondary_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondary_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secondary_ip().data(), this->secondary_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 meta_port = 2;
  if (has_meta_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->meta_port(), output);
  }
  
  // required uint32 election_port = 3;
  if (has_election_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->election_port(), output);
  }
  
  // required string primary_ip = 4;
  if (has_primary_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primary_ip().data(), this->primary_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->primary_ip(), output);
  }
  
  // optional string secondary_ip = 5;
  if (has_secondary_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secondary_ip().data(), this->secondary_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->secondary_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 meta_port = 2;
  if (has_meta_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->meta_port(), target);
  }
  
  // required uint32 election_port = 3;
  if (has_election_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->election_port(), target);
  }
  
  // required string primary_ip = 4;
  if (has_primary_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primary_ip().data(), this->primary_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->primary_ip(), target);
  }
  
  // optional string secondary_ip = 5;
  if (has_secondary_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secondary_ip().data(), this->secondary_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->secondary_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 meta_port = 2;
    if (has_meta_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_port());
    }
    
    // required uint32 election_port = 3;
    if (has_election_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->election_port());
    }
    
    // required string primary_ip = 4;
    if (has_primary_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_ip());
    }
    
    // optional string secondary_ip = 5;
    if (has_secondary_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaNode::MergeFrom(const MetaNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_meta_port()) {
      set_meta_port(from.meta_port());
    }
    if (from.has_election_port()) {
      set_election_port(from.election_port());
    }
    if (from.has_primary_ip()) {
      set_primary_ip(from.primary_ip());
    }
    if (from.has_secondary_ip()) {
      set_secondary_ip(from.secondary_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaNode::CopyFrom(const MetaNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MetaNode::Swap(MetaNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(meta_port_, other->meta_port_);
    std::swap(election_port_, other->election_port_);
    std::swap(primary_ip_, other->primary_ip_);
    std::swap(secondary_ip_, other->secondary_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaNode_descriptor_;
  metadata.reflection = MetaNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaCluster::kClusterNameFieldNumber;
const int MetaCluster::kClusterUuidFieldNumber;
const int MetaCluster::kMetaServicePortFieldNumber;
const int MetaCluster::kNodeFieldNumber;
#endif  // !_MSC_VER

MetaCluster::MetaCluster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCluster::InitAsDefaultInstance() {
}

MetaCluster::MetaCluster(const MetaCluster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCluster::SharedCtor() {
  _cached_size_ = 0;
  cluster_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meta_service_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCluster::~MetaCluster() {
  SharedDtor();
}

void MetaCluster::SharedDtor() {
  if (cluster_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cluster_name_;
  }
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
  }
}

void MetaCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCluster_descriptor_;
}

const MetaCluster& MetaCluster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

MetaCluster* MetaCluster::default_instance_ = NULL;

MetaCluster* MetaCluster::New() const {
  return new MetaCluster;
}

void MetaCluster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cluster_name()) {
      if (cluster_name_ != &::google::protobuf::internal::kEmptyString) {
        cluster_name_->clear();
      }
    }
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        cluster_uuid_->clear();
      }
    }
    meta_service_port_ = 0u;
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cluster_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cluster_uuid;
        break;
      }
      
      // required bytes cluster_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cluster_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_meta_service_port;
        break;
      }
      
      // required uint32 meta_service_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_service_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_service_port_)));
          set_has_meta_service_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_node;
        break;
      }
      
      // repeated .cdb_admin.MetaNode node = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cluster_name = 1;
  if (has_cluster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cluster_name(), output);
  }
  
  // required bytes cluster_uuid = 2;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cluster_uuid(), output);
  }
  
  // required uint32 meta_service_port = 3;
  if (has_meta_service_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->meta_service_port(), output);
  }
  
  // repeated .cdb_admin.MetaNode node = 4;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->node(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCluster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cluster_name = 1;
  if (has_cluster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_name(), target);
  }
  
  // required bytes cluster_uuid = 2;
  if (has_cluster_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cluster_uuid(), target);
  }
  
  // required uint32 meta_service_port = 3;
  if (has_meta_service_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->meta_service_port(), target);
  }
  
  // repeated .cdb_admin.MetaNode node = 4;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->node(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCluster::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cluster_name = 1;
    if (has_cluster_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_name());
    }
    
    // required bytes cluster_uuid = 2;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cluster_uuid());
    }
    
    // required uint32 meta_service_port = 3;
    if (has_meta_service_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_service_port());
    }
    
  }
  // repeated .cdb_admin.MetaNode node = 4;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCluster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCluster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCluster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCluster::MergeFrom(const MetaCluster& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_name()) {
      set_cluster_name(from.cluster_name());
    }
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_meta_service_port()) {
      set_meta_service_port(from.meta_service_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCluster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCluster::CopyFrom(const MetaCluster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCluster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  return true;
}

void MetaCluster::Swap(MetaCluster* other) {
  if (other != this) {
    std::swap(cluster_name_, other->cluster_name_);
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(meta_service_port_, other->meta_service_port_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCluster_descriptor_;
  metadata.reflection = MetaCluster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaServerConf::kClusterFieldNumber;
const int MetaServerConf::kMyIdFieldNumber;
const int MetaServerConf::kDbDiskNameFieldNumber;
const int MetaServerConf::kDbRamCacheDirFieldNumber;
const int MetaServerConf::kLocalBackupDirFieldNumber;
const int MetaServerConf::kHasBbuFieldNumber;
#endif  // !_MSC_VER

MetaServerConf::MetaServerConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaServerConf::InitAsDefaultInstance() {
  cluster_ = const_cast< ::cdb_admin::MetaCluster*>(&::cdb_admin::MetaCluster::default_instance());
}

MetaServerConf::MetaServerConf(const MetaServerConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaServerConf::SharedCtor() {
  _cached_size_ = 0;
  cluster_ = NULL;
  my_id_ = 0u;
  db_disk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  db_ram_cache_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_backup_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_bbu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaServerConf::~MetaServerConf() {
  SharedDtor();
}

void MetaServerConf::SharedDtor() {
  if (db_disk_name_ != &::google::protobuf::internal::kEmptyString) {
    delete db_disk_name_;
  }
  if (db_ram_cache_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete db_ram_cache_dir_;
  }
  if (local_backup_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete local_backup_dir_;
  }
  if (this != default_instance_) {
    delete cluster_;
  }
}

void MetaServerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaServerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaServerConf_descriptor_;
}

const MetaServerConf& MetaServerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

MetaServerConf* MetaServerConf::default_instance_ = NULL;

MetaServerConf* MetaServerConf::New() const {
  return new MetaServerConf;
}

void MetaServerConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cluster()) {
      if (cluster_ != NULL) cluster_->::cdb_admin::MetaCluster::Clear();
    }
    my_id_ = 0u;
    if (has_db_disk_name()) {
      if (db_disk_name_ != &::google::protobuf::internal::kEmptyString) {
        db_disk_name_->clear();
      }
    }
    if (has_db_ram_cache_dir()) {
      if (db_ram_cache_dir_ != &::google::protobuf::internal::kEmptyString) {
        db_ram_cache_dir_->clear();
      }
    }
    if (has_local_backup_dir()) {
      if (local_backup_dir_ != &::google::protobuf::internal::kEmptyString) {
        local_backup_dir_->clear();
      }
    }
    has_bbu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaServerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cdb_admin.MetaCluster cluster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_my_id;
        break;
      }
      
      // required uint32 my_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_id_)));
          set_has_my_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db_disk_name;
        break;
      }
      
      // required string db_disk_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_disk_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_disk_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_disk_name().data(), this->db_disk_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_db_ram_cache_dir;
        break;
      }
      
      // required string db_ram_cache_dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_ram_cache_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_ram_cache_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_ram_cache_dir().data(), this->db_ram_cache_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_local_backup_dir;
        break;
      }
      
      // optional string local_backup_dir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_backup_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_backup_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_backup_dir().data(), this->local_backup_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_bbu;
        break;
      }
      
      // optional bool has_bbu = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_bbu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_bbu_)));
          set_has_has_bbu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaServerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cdb_admin.MetaCluster cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cluster(), output);
  }
  
  // required uint32 my_id = 2;
  if (has_my_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->my_id(), output);
  }
  
  // required string db_disk_name = 3;
  if (has_db_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_disk_name().data(), this->db_disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->db_disk_name(), output);
  }
  
  // required string db_ram_cache_dir = 5;
  if (has_db_ram_cache_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_ram_cache_dir().data(), this->db_ram_cache_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->db_ram_cache_dir(), output);
  }
  
  // optional string local_backup_dir = 6;
  if (has_local_backup_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_backup_dir().data(), this->local_backup_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->local_backup_dir(), output);
  }
  
  // optional bool has_bbu = 7;
  if (has_has_bbu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_bbu(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaServerConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cdb_admin.MetaCluster cluster = 1;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cluster(), target);
  }
  
  // required uint32 my_id = 2;
  if (has_my_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->my_id(), target);
  }
  
  // required string db_disk_name = 3;
  if (has_db_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_disk_name().data(), this->db_disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_disk_name(), target);
  }
  
  // required string db_ram_cache_dir = 5;
  if (has_db_ram_cache_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_ram_cache_dir().data(), this->db_ram_cache_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->db_ram_cache_dir(), target);
  }
  
  // optional string local_backup_dir = 6;
  if (has_local_backup_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_backup_dir().data(), this->local_backup_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->local_backup_dir(), target);
  }
  
  // optional bool has_bbu = 7;
  if (has_has_bbu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_bbu(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaServerConf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cdb_admin.MetaCluster cluster = 1;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster());
    }
    
    // required uint32 my_id = 2;
    if (has_my_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_id());
    }
    
    // required string db_disk_name = 3;
    if (has_db_disk_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_disk_name());
    }
    
    // required string db_ram_cache_dir = 5;
    if (has_db_ram_cache_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_ram_cache_dir());
    }
    
    // optional string local_backup_dir = 6;
    if (has_local_backup_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_backup_dir());
    }
    
    // optional bool has_bbu = 7;
    if (has_has_bbu()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaServerConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaServerConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaServerConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaServerConf::MergeFrom(const MetaServerConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster()) {
      mutable_cluster()->::cdb_admin::MetaCluster::MergeFrom(from.cluster());
    }
    if (from.has_my_id()) {
      set_my_id(from.my_id());
    }
    if (from.has_db_disk_name()) {
      set_db_disk_name(from.db_disk_name());
    }
    if (from.has_db_ram_cache_dir()) {
      set_db_ram_cache_dir(from.db_ram_cache_dir());
    }
    if (from.has_local_backup_dir()) {
      set_local_backup_dir(from.local_backup_dir());
    }
    if (from.has_has_bbu()) {
      set_has_bbu(from.has_bbu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaServerConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaServerConf::CopyFrom(const MetaServerConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaServerConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_cluster()) {
    if (!this->cluster().IsInitialized()) return false;
  }
  return true;
}

void MetaServerConf::Swap(MetaServerConf* other) {
  if (other != this) {
    std::swap(cluster_, other->cluster_);
    std::swap(my_id_, other->my_id_);
    std::swap(db_disk_name_, other->db_disk_name_);
    std::swap(db_ram_cache_dir_, other->db_ram_cache_dir_);
    std::swap(local_backup_dir_, other->local_backup_dir_);
    std::swap(has_bbu_, other->has_bbu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaServerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaServerConf_descriptor_;
  metadata.reflection = MetaServerConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChunkServerConf::kClusterFieldNumber;
const int ChunkServerConf::kChunkPortFieldNumber;
const int ChunkServerConf::kChunkIpsFieldNumber;
const int ChunkServerConf::kDbDiskNameFieldNumber;
const int ChunkServerConf::kDbRamCacheDirFieldNumber;
const int ChunkServerConf::kLocalBackupDirFieldNumber;
const int ChunkServerConf::kHasBbuFieldNumber;
const int ChunkServerConf::kZoneNameFieldNumber;
const int ChunkServerConf::kMachineIdFieldNumber;
#endif  // !_MSC_VER

ChunkServerConf::ChunkServerConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkServerConf::InitAsDefaultInstance() {
  cluster_ = const_cast< ::cdb_admin::MetaCluster*>(&::cdb_admin::MetaCluster::default_instance());
}

ChunkServerConf::ChunkServerConf(const ChunkServerConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkServerConf::SharedCtor() {
  _cached_size_ = 0;
  cluster_ = NULL;
  chunk_port_ = 0u;
  db_disk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  db_ram_cache_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_backup_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_bbu_ = false;
  zone_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkServerConf::~ChunkServerConf() {
  SharedDtor();
}

void ChunkServerConf::SharedDtor() {
  if (db_disk_name_ != &::google::protobuf::internal::kEmptyString) {
    delete db_disk_name_;
  }
  if (db_ram_cache_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete db_ram_cache_dir_;
  }
  if (local_backup_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete local_backup_dir_;
  }
  if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_name_;
  }
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (this != default_instance_) {
    delete cluster_;
  }
}

void ChunkServerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkServerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkServerConf_descriptor_;
}

const ChunkServerConf& ChunkServerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

ChunkServerConf* ChunkServerConf::default_instance_ = NULL;

ChunkServerConf* ChunkServerConf::New() const {
  return new ChunkServerConf;
}

void ChunkServerConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cluster()) {
      if (cluster_ != NULL) cluster_->::cdb_admin::MetaCluster::Clear();
    }
    chunk_port_ = 0u;
    if (has_db_disk_name()) {
      if (db_disk_name_ != &::google::protobuf::internal::kEmptyString) {
        db_disk_name_->clear();
      }
    }
    if (has_db_ram_cache_dir()) {
      if (db_ram_cache_dir_ != &::google::protobuf::internal::kEmptyString) {
        db_ram_cache_dir_->clear();
      }
    }
    if (has_local_backup_dir()) {
      if (local_backup_dir_ != &::google::protobuf::internal::kEmptyString) {
        local_backup_dir_->clear();
      }
    }
    has_bbu_ = false;
    if (has_zone_name()) {
      if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
        zone_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
  }
  chunk_ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkServerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cdb_admin.MetaCluster cluster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chunk_port;
        break;
      }
      
      // required uint32 chunk_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_port_)));
          set_has_chunk_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chunk_ips;
        break;
      }
      
      // repeated string chunk_ips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunk_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_chunk_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chunk_ips(0).data(), this->chunk_ips(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chunk_ips;
        if (input->ExpectTag(34)) goto parse_db_disk_name;
        break;
      }
      
      // required string db_disk_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_disk_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_disk_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_disk_name().data(), this->db_disk_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_db_ram_cache_dir;
        break;
      }
      
      // required string db_ram_cache_dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_ram_cache_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_ram_cache_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_ram_cache_dir().data(), this->db_ram_cache_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_local_backup_dir;
        break;
      }
      
      // optional string local_backup_dir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_backup_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_backup_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_backup_dir().data(), this->local_backup_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_bbu;
        break;
      }
      
      // optional bool has_bbu = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_bbu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_bbu_)));
          set_has_has_bbu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_zone_name;
        break;
      }
      
      // optional string zone_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone_name().data(), this->zone_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_machine_id;
        break;
      }
      
      // optional string machine_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkServerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cdb_admin.MetaCluster cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cluster(), output);
  }
  
  // required uint32 chunk_port = 2;
  if (has_chunk_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chunk_port(), output);
  }
  
  // repeated string chunk_ips = 3;
  for (int i = 0; i < this->chunk_ips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->chunk_ips(i).data(), this->chunk_ips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->chunk_ips(i), output);
  }
  
  // required string db_disk_name = 4;
  if (has_db_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_disk_name().data(), this->db_disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->db_disk_name(), output);
  }
  
  // required string db_ram_cache_dir = 5;
  if (has_db_ram_cache_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_ram_cache_dir().data(), this->db_ram_cache_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->db_ram_cache_dir(), output);
  }
  
  // optional string local_backup_dir = 6;
  if (has_local_backup_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_backup_dir().data(), this->local_backup_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->local_backup_dir(), output);
  }
  
  // optional bool has_bbu = 7;
  if (has_has_bbu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_bbu(), output);
  }
  
  // optional string zone_name = 8;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->zone_name(), output);
  }
  
  // optional string machine_id = 9;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->machine_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkServerConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cdb_admin.MetaCluster cluster = 1;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cluster(), target);
  }
  
  // required uint32 chunk_port = 2;
  if (has_chunk_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chunk_port(), target);
  }
  
  // repeated string chunk_ips = 3;
  for (int i = 0; i < this->chunk_ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chunk_ips(i).data(), this->chunk_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->chunk_ips(i), target);
  }
  
  // required string db_disk_name = 4;
  if (has_db_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_disk_name().data(), this->db_disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->db_disk_name(), target);
  }
  
  // required string db_ram_cache_dir = 5;
  if (has_db_ram_cache_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_ram_cache_dir().data(), this->db_ram_cache_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->db_ram_cache_dir(), target);
  }
  
  // optional string local_backup_dir = 6;
  if (has_local_backup_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_backup_dir().data(), this->local_backup_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->local_backup_dir(), target);
  }
  
  // optional bool has_bbu = 7;
  if (has_has_bbu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_bbu(), target);
  }
  
  // optional string zone_name = 8;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->zone_name(), target);
  }
  
  // optional string machine_id = 9;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->machine_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkServerConf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cdb_admin.MetaCluster cluster = 1;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster());
    }
    
    // required uint32 chunk_port = 2;
    if (has_chunk_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_port());
    }
    
    // required string db_disk_name = 4;
    if (has_db_disk_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_disk_name());
    }
    
    // required string db_ram_cache_dir = 5;
    if (has_db_ram_cache_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_ram_cache_dir());
    }
    
    // optional string local_backup_dir = 6;
    if (has_local_backup_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_backup_dir());
    }
    
    // optional bool has_bbu = 7;
    if (has_has_bbu()) {
      total_size += 1 + 1;
    }
    
    // optional string zone_name = 8;
    if (has_zone_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string machine_id = 9;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }
    
  }
  // repeated string chunk_ips = 3;
  total_size += 1 * this->chunk_ips_size();
  for (int i = 0; i < this->chunk_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->chunk_ips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkServerConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkServerConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkServerConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkServerConf::MergeFrom(const ChunkServerConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunk_ips_.MergeFrom(from.chunk_ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster()) {
      mutable_cluster()->::cdb_admin::MetaCluster::MergeFrom(from.cluster());
    }
    if (from.has_chunk_port()) {
      set_chunk_port(from.chunk_port());
    }
    if (from.has_db_disk_name()) {
      set_db_disk_name(from.db_disk_name());
    }
    if (from.has_db_ram_cache_dir()) {
      set_db_ram_cache_dir(from.db_ram_cache_dir());
    }
    if (from.has_local_backup_dir()) {
      set_local_backup_dir(from.local_backup_dir());
    }
    if (from.has_has_bbu()) {
      set_has_bbu(from.has_bbu());
    }
    if (from.has_zone_name()) {
      set_zone_name(from.zone_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkServerConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkServerConf::CopyFrom(const ChunkServerConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkServerConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  if (has_cluster()) {
    if (!this->cluster().IsInitialized()) return false;
  }
  return true;
}

void ChunkServerConf::Swap(ChunkServerConf* other) {
  if (other != this) {
    std::swap(cluster_, other->cluster_);
    std::swap(chunk_port_, other->chunk_port_);
    chunk_ips_.Swap(&other->chunk_ips_);
    std::swap(db_disk_name_, other->db_disk_name_);
    std::swap(db_ram_cache_dir_, other->db_ram_cache_dir_);
    std::swap(local_backup_dir_, other->local_backup_dir_);
    std::swap(has_bbu_, other->has_bbu_);
    std::swap(zone_name_, other->zone_name_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkServerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkServerConf_descriptor_;
  metadata.reflection = ChunkServerConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatMetaReq::kUserFieldNumber;
const int StatMetaReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

StatMetaReq::StatMetaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatMetaReq::InitAsDefaultInstance() {
}

StatMetaReq::StatMetaReq(const StatMetaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatMetaReq::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatMetaReq::~StatMetaReq() {
  SharedDtor();
}

void StatMetaReq::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void StatMetaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatMetaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatMetaReq_descriptor_;
}

const StatMetaReq& StatMetaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

StatMetaReq* StatMetaReq::default_instance_ = NULL;

StatMetaReq* StatMetaReq::New() const {
  return new StatMetaReq;
}

void StatMetaReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatMetaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatMetaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatMetaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatMetaReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatMetaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatMetaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatMetaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatMetaReq::MergeFrom(const StatMetaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatMetaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatMetaReq::CopyFrom(const StatMetaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatMetaReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StatMetaReq::Swap(StatMetaReq* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatMetaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatMetaReq_descriptor_;
  metadata.reflection = StatMetaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaStat::kStateFieldNumber;
const int MetaStat::kLeaderIdFieldNumber;
const int MetaStat::kMetaDiskFieldNumber;
const int MetaStat::kInternalClusterUuidFieldNumber;
const int MetaStat::kVersionFieldNumber;
#endif  // !_MSC_VER

MetaStat::MetaStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaStat::InitAsDefaultInstance() {
  meta_disk_ = const_cast< ::MetaDiskStat*>(&::MetaDiskStat::default_instance());
}

MetaStat::MetaStat(const MetaStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaStat::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  leader_id_ = 0u;
  meta_disk_ = NULL;
  internal_cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaStat::~MetaStat() {
  SharedDtor();
}

void MetaStat::SharedDtor() {
  if (internal_cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete internal_cluster_uuid_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete meta_disk_;
  }
}

void MetaStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaStat_descriptor_;
}

const MetaStat& MetaStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

MetaStat* MetaStat::default_instance_ = NULL;

MetaStat* MetaStat::New() const {
  return new MetaStat;
}

void MetaStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
    leader_id_ = 0u;
    if (has_meta_disk()) {
      if (meta_disk_ != NULL) meta_disk_->::MetaDiskStat::Clear();
    }
    if (has_internal_cluster_uuid()) {
      if (internal_cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        internal_cluster_uuid_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cdb_admin.MetaState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (cdb_admin::MetaState_IsValid(value)) {
            set_state(static_cast< cdb_admin::MetaState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leader_id;
        break;
      }
      
      // optional uint32 leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_meta_disk;
        break;
      }
      
      // optional .MetaDiskStat meta_disk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta_disk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta_disk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_internal_cluster_uuid;
        break;
      }
      
      // optional bytes internal_cluster_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_internal_cluster_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional bytes version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cdb_admin.MetaState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // optional uint32 leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leader_id(), output);
  }
  
  // optional .MetaDiskStat meta_disk = 3;
  if (has_meta_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->meta_disk(), output);
  }
  
  // optional bytes internal_cluster_uuid = 4;
  if (has_internal_cluster_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->internal_cluster_uuid(), output);
  }
  
  // optional bytes version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cdb_admin.MetaState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // optional uint32 leader_id = 2;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leader_id(), target);
  }
  
  // optional .MetaDiskStat meta_disk = 3;
  if (has_meta_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->meta_disk(), target);
  }
  
  // optional bytes internal_cluster_uuid = 4;
  if (has_internal_cluster_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->internal_cluster_uuid(), target);
  }
  
  // optional bytes version = 5;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cdb_admin.MetaState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional uint32 leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_id());
    }
    
    // optional .MetaDiskStat meta_disk = 3;
    if (has_meta_disk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta_disk());
    }
    
    // optional bytes internal_cluster_uuid = 4;
    if (has_internal_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->internal_cluster_uuid());
    }
    
    // optional bytes version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaStat::MergeFrom(const MetaStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_meta_disk()) {
      mutable_meta_disk()->::MetaDiskStat::MergeFrom(from.meta_disk());
    }
    if (from.has_internal_cluster_uuid()) {
      set_internal_cluster_uuid(from.internal_cluster_uuid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaStat::CopyFrom(const MetaStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_meta_disk()) {
    if (!this->meta_disk().IsInitialized()) return false;
  }
  return true;
}

void MetaStat::Swap(MetaStat* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(meta_disk_, other->meta_disk_);
    std::swap(internal_cluster_uuid_, other->internal_cluster_uuid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaStat_descriptor_;
  metadata.reflection = MetaStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdminReq::kStopFieldNumber;
const int AdminReq::kBbuPowerOffFieldNumber;
const int AdminReq::kBackupPathFieldNumber;
#endif  // !_MSC_VER

AdminReq::AdminReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdminReq::InitAsDefaultInstance() {
}

AdminReq::AdminReq(const AdminReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdminReq::SharedCtor() {
  _cached_size_ = 0;
  stop_ = false;
  bbu_power_off_ = false;
  backup_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminReq::~AdminReq() {
  SharedDtor();
}

void AdminReq::SharedDtor() {
  if (backup_path_ != &::google::protobuf::internal::kEmptyString) {
    delete backup_path_;
  }
  if (this != default_instance_) {
  }
}

void AdminReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminReq_descriptor_;
}

const AdminReq& AdminReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

AdminReq* AdminReq::default_instance_ = NULL;

AdminReq* AdminReq::New() const {
  return new AdminReq;
}

void AdminReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stop_ = false;
    bbu_power_off_ = false;
    if (has_backup_path()) {
      if (backup_path_ != &::google::protobuf::internal::kEmptyString) {
        backup_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool stop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bbu_power_off;
        break;
      }
      
      // optional bool bbu_power_off = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bbu_power_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbu_power_off_)));
          set_has_bbu_power_off();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backup_path;
        break;
      }
      
      // optional bytes backup_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_backup_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdminReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool stop = 1;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->stop(), output);
  }
  
  // optional bool bbu_power_off = 2;
  if (has_bbu_power_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bbu_power_off(), output);
  }
  
  // optional bytes backup_path = 3;
  if (has_backup_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->backup_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdminReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool stop = 1;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->stop(), target);
  }
  
  // optional bool bbu_power_off = 2;
  if (has_bbu_power_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bbu_power_off(), target);
  }
  
  // optional bytes backup_path = 3;
  if (has_backup_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->backup_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdminReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool stop = 1;
    if (has_stop()) {
      total_size += 1 + 1;
    }
    
    // optional bool bbu_power_off = 2;
    if (has_bbu_power_off()) {
      total_size += 1 + 1;
    }
    
    // optional bytes backup_path = 3;
    if (has_backup_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->backup_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminReq::MergeFrom(const AdminReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop()) {
      set_stop(from.stop());
    }
    if (from.has_bbu_power_off()) {
      set_bbu_power_off(from.bbu_power_off());
    }
    if (from.has_backup_path()) {
      set_backup_path(from.backup_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminReq::CopyFrom(const AdminReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminReq::IsInitialized() const {
  
  return true;
}

void AdminReq::Swap(AdminReq* other) {
  if (other != this) {
    std::swap(stop_, other->stop_);
    std::swap(bbu_power_off_, other->bbu_power_off_);
    std::swap(backup_path_, other->backup_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminReq_descriptor_;
  metadata.reflection = AdminReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdminLoginReq::kVersionFieldNumber;
#endif  // !_MSC_VER

AdminLoginReq::AdminLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdminLoginReq::InitAsDefaultInstance() {
}

AdminLoginReq::AdminLoginReq(const AdminLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdminLoginReq::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminLoginReq::~AdminLoginReq() {
  SharedDtor();
}

void AdminLoginReq::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void AdminLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminLoginReq_descriptor_;
}

const AdminLoginReq& AdminLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fadmin_2eproto();  return *default_instance_;
}

AdminLoginReq* AdminLoginReq::default_instance_ = NULL;

AdminLoginReq* AdminLoginReq::New() const {
  return new AdminLoginReq;
}

void AdminLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdminLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdminLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes version = 1;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdminLoginReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminLoginReq::MergeFrom(const AdminLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminLoginReq::CopyFrom(const AdminLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AdminLoginReq::Swap(AdminLoginReq* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminLoginReq_descriptor_;
  metadata.reflection = AdminLoginReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cdb_admin

// @@protoc_insertion_point(global_scope)
