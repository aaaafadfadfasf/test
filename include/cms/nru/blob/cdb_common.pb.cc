// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cdb_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MetaDiskStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaDiskStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocatorStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocatorStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChunkDiskStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkDiskStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChunkDiskStat_DiskStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChunkServerStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkServerStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChunkServerStat_ServerStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cdb_5fcommon_2eproto() {
  protobuf_AddDesc_cdb_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cdb_common.proto");
  GOOGLE_CHECK(file != NULL);
  MetaDiskStat_descriptor_ = file->message_type(0);
  static const int MetaDiskStat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDiskStat, disk_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDiskStat, disk_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDiskStat, total_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDiskStat, free_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDiskStat, num_failed_writes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDiskStat, num_failed_reads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDiskStat, disk_id_),
  };
  MetaDiskStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaDiskStat_descriptor_,
      MetaDiskStat::default_instance_,
      MetaDiskStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDiskStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDiskStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaDiskStat));
  AllocatorStat_descriptor_ = file->message_type(1);
  static const int AllocatorStat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorStat, stripe_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorStat, block_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorStat, meta_total_stripes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorStat, meta_free_stripes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorStat, data_total_stripes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorStat, data_free_stripes_),
  };
  AllocatorStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocatorStat_descriptor_,
      AllocatorStat::default_instance_,
      AllocatorStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocatorStat));
  ChunkDiskStat_descriptor_ = file->message_type(2);
  static const int ChunkDiskStat_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, disk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, disk_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, disk_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, total_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, free_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, num_failed_writes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, num_failed_reads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, allocator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, normal_req_bytes_dropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, reserv_req_bytes_dropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, normal_req_bytes_dropped_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, reserv_req_bytes_dropped_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, req_pending_queue_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, aio_pending_queue_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, defer_queue_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, pending_reservations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, write_bytes_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, write_bytes_received_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, write_bytes_redirected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, flush_pending_queue_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, flush_queue_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, pending_chunk_file_writers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, num_disk_repair_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, num_pending_write_),
  };
  ChunkDiskStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkDiskStat_descriptor_,
      ChunkDiskStat::default_instance_,
      ChunkDiskStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkDiskStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkDiskStat));
  ChunkDiskStat_DiskStatus_descriptor_ = ChunkDiskStat_descriptor_->enum_type(0);
  ChunkServerStat_descriptor_ = file->message_type(3);
  static const int ChunkServerStat_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, cs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, cs_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, total_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, free_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, chunk_meta_disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, internal_cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, total_repair_read_),
  };
  ChunkServerStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkServerStat_descriptor_,
      ChunkServerStat::default_instance_,
      ChunkServerStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkServerStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkServerStat));
  ChunkServerStat_ServerStatus_descriptor_ = ChunkServerStat_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cdb_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaDiskStat_descriptor_, &MetaDiskStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocatorStat_descriptor_, &AllocatorStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkDiskStat_descriptor_, &ChunkDiskStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkServerStat_descriptor_, &ChunkServerStat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cdb_5fcommon_2eproto() {
  delete MetaDiskStat::default_instance_;
  delete MetaDiskStat_reflection_;
  delete AllocatorStat::default_instance_;
  delete AllocatorStat_reflection_;
  delete ChunkDiskStat::default_instance_;
  delete ChunkDiskStat_reflection_;
  delete ChunkServerStat::default_instance_;
  delete ChunkServerStat_reflection_;
}

void protobuf_AddDesc_cdb_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020cdb_common.proto\"\243\001\n\014MetaDiskStat\022\021\n\td"
    "isk_uuid\030\001 \002(\t\022\021\n\tdisk_name\030\002 \002(\t\022\023\n\013tot"
    "al_bytes\030\003 \001(\004\022\022\n\nfree_bytes\030\004 \001(\004\022\031\n\021nu"
    "m_failed_writes\030\005 \001(\004\022\030\n\020num_failed_read"
    "s\030\006 \001(\004\022\017\n\007disk_id\030\007 \001(\r\"\250\001\n\rAllocatorSt"
    "at\022\025\n\rstripe_blocks\030\001 \001(\r\022\022\n\nblock_size\030"
    "\002 \001(\r\022\032\n\022meta_total_stripes\030\003 \001(\r\022\031\n\021met"
    "a_free_stripes\030\004 \001(\r\022\032\n\022data_total_strip"
    "es\030\005 \001(\r\022\031\n\021data_free_stripes\030\006 \001(\r\"\336\006\n\r"
    "ChunkDiskStat\022\017\n\007disk_id\030\001 \002(\r\0222\n\006status"
    "\030\002 \002(\0162\031.ChunkDiskStat.DiskStatus:\007RUNNI"
    "NG\022\021\n\tdisk_uuid\030\003 \002(\t\022\021\n\tdisk_name\030\004 \002(\t"
    "\022\023\n\013total_bytes\030\005 \001(\004\022\022\n\nfree_bytes\030\006 \001("
    "\004\022\031\n\021num_failed_writes\030\007 \001(\004\022\030\n\020num_fail"
    "ed_reads\030\010 \001(\004\022!\n\tallocator\030\t \001(\0132\016.Allo"
    "catorStat\022 \n\030normal_req_bytes_dropped\030\n "
    "\001(\004\022 \n\030reserv_req_bytes_dropped\030\013 \001(\004\022)\n"
    "!normal_req_bytes_dropped_interval\030\014 \001(\004"
    "\022)\n!reserv_req_bytes_dropped_interval\030\r "
    "\001(\004\022\037\n\027req_pending_queue_depth\030\016 \001(\r\022\037\n\027"
    "aio_pending_queue_depth\030\017 \001(\r\022\031\n\021defer_q"
    "ueue_depth\030\020 \001(\r\022\034\n\024pending_reservations"
    "\030\021 \001(\r\022\034\n\024write_bytes_received\030\022 \001(\004\022%\n\035"
    "write_bytes_received_interval\030\023 \001(\004\022\036\n\026w"
    "rite_bytes_redirected\030\024 \001(\004\022!\n\031flush_pen"
    "ding_queue_depth\030\025 \001(\004\022\031\n\021flush_queue_de"
    "pth\030\026 \001(\004\022\"\n\032pending_chunk_file_writers\030"
    "\027 \001(\004\022\034\n\024num_disk_repair_read\030\030 \001(\r\022\031\n\021n"
    "um_pending_write\030\031 \001(\r\"L\n\nDiskStatus\022\014\n\010"
    "MOUNTING\020\001\022\013\n\007RUNNING\020\002\022\013\n\007EXITING\020\003\022\014\n\010"
    "DISABLED\020\004\022\010\n\004FULL\020\005\"\225\003\n\017ChunkServerStat"
    "\022-\n\006status\030\001 \002(\0162\035.ChunkServerStat.Serve"
    "rStatus\022\r\n\005cs_id\030\002 \002(\r\022\017\n\007cs_uuid\030\003 \002(\014\022"
    "\034\n\004stat\030\004 \003(\0132\016.ChunkDiskStat\022\023\n\013total_b"
    "ytes\030\005 \001(\003\022\022\n\nfree_bytes\030\006 \001(\003\022&\n\017chunk_"
    "meta_disk\030\007 \001(\0132\r.MetaDiskStat\022\030\n\020update"
    "_timestamp\030\010 \001(\004\022\014\n\004zone\030\t \001(\014\022\022\n\nmachin"
    "e_id\030\n \001(\014\022\035\n\025internal_cluster_uuid\030\013 \001("
    "\014\022\017\n\007version\030\014 \001(\014\022\031\n\021total_repair_read\030"
    "\r \001(\r\"=\n\014ServerStatus\022\026\n\022CONNECTING_TO_M"
    "ETA\020\001\022\025\n\021CONNECTED_TO_META\020\002", 1628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cdb_common.proto", &protobuf_RegisterTypes);
  MetaDiskStat::default_instance_ = new MetaDiskStat();
  AllocatorStat::default_instance_ = new AllocatorStat();
  ChunkDiskStat::default_instance_ = new ChunkDiskStat();
  ChunkServerStat::default_instance_ = new ChunkServerStat();
  MetaDiskStat::default_instance_->InitAsDefaultInstance();
  AllocatorStat::default_instance_->InitAsDefaultInstance();
  ChunkDiskStat::default_instance_->InitAsDefaultInstance();
  ChunkServerStat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cdb_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cdb_5fcommon_2eproto {
  StaticDescriptorInitializer_cdb_5fcommon_2eproto() {
    protobuf_AddDesc_cdb_5fcommon_2eproto();
  }
} static_descriptor_initializer_cdb_5fcommon_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MetaDiskStat::kDiskUuidFieldNumber;
const int MetaDiskStat::kDiskNameFieldNumber;
const int MetaDiskStat::kTotalBytesFieldNumber;
const int MetaDiskStat::kFreeBytesFieldNumber;
const int MetaDiskStat::kNumFailedWritesFieldNumber;
const int MetaDiskStat::kNumFailedReadsFieldNumber;
const int MetaDiskStat::kDiskIdFieldNumber;
#endif  // !_MSC_VER

MetaDiskStat::MetaDiskStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaDiskStat::InitAsDefaultInstance() {
}

MetaDiskStat::MetaDiskStat(const MetaDiskStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaDiskStat::SharedCtor() {
  _cached_size_ = 0;
  disk_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  disk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_bytes_ = GOOGLE_ULONGLONG(0);
  free_bytes_ = GOOGLE_ULONGLONG(0);
  num_failed_writes_ = GOOGLE_ULONGLONG(0);
  num_failed_reads_ = GOOGLE_ULONGLONG(0);
  disk_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaDiskStat::~MetaDiskStat() {
  SharedDtor();
}

void MetaDiskStat::SharedDtor() {
  if (disk_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_uuid_;
  }
  if (disk_name_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_name_;
  }
  if (this != default_instance_) {
  }
}

void MetaDiskStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaDiskStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaDiskStat_descriptor_;
}

const MetaDiskStat& MetaDiskStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fcommon_2eproto();  return *default_instance_;
}

MetaDiskStat* MetaDiskStat::default_instance_ = NULL;

MetaDiskStat* MetaDiskStat::New() const {
  return new MetaDiskStat;
}

void MetaDiskStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_disk_uuid()) {
      if (disk_uuid_ != &::google::protobuf::internal::kEmptyString) {
        disk_uuid_->clear();
      }
    }
    if (has_disk_name()) {
      if (disk_name_ != &::google::protobuf::internal::kEmptyString) {
        disk_name_->clear();
      }
    }
    total_bytes_ = GOOGLE_ULONGLONG(0);
    free_bytes_ = GOOGLE_ULONGLONG(0);
    num_failed_writes_ = GOOGLE_ULONGLONG(0);
    num_failed_reads_ = GOOGLE_ULONGLONG(0);
    disk_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaDiskStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string disk_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_uuid().data(), this->disk_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_disk_name;
        break;
      }
      
      // required string disk_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_name().data(), this->disk_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_bytes;
        break;
      }
      
      // optional uint64 total_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_)));
          set_has_total_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_free_bytes;
        break;
      }
      
      // optional uint64 free_bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_bytes_)));
          set_has_free_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_failed_writes;
        break;
      }
      
      // optional uint64 num_failed_writes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_failed_writes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_failed_writes_)));
          set_has_num_failed_writes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_failed_reads;
        break;
      }
      
      // optional uint64 num_failed_reads = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_failed_reads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_failed_reads_)));
          set_has_num_failed_reads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_disk_id;
        break;
      }
      
      // optional uint32 disk_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disk_id_)));
          set_has_disk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaDiskStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string disk_uuid = 1;
  if (has_disk_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_uuid().data(), this->disk_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->disk_uuid(), output);
  }
  
  // required string disk_name = 2;
  if (has_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_name().data(), this->disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->disk_name(), output);
  }
  
  // optional uint64 total_bytes = 3;
  if (has_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_bytes(), output);
  }
  
  // optional uint64 free_bytes = 4;
  if (has_free_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->free_bytes(), output);
  }
  
  // optional uint64 num_failed_writes = 5;
  if (has_num_failed_writes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->num_failed_writes(), output);
  }
  
  // optional uint64 num_failed_reads = 6;
  if (has_num_failed_reads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->num_failed_reads(), output);
  }
  
  // optional uint32 disk_id = 7;
  if (has_disk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->disk_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaDiskStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string disk_uuid = 1;
  if (has_disk_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_uuid().data(), this->disk_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->disk_uuid(), target);
  }
  
  // required string disk_name = 2;
  if (has_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_name().data(), this->disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->disk_name(), target);
  }
  
  // optional uint64 total_bytes = 3;
  if (has_total_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->total_bytes(), target);
  }
  
  // optional uint64 free_bytes = 4;
  if (has_free_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->free_bytes(), target);
  }
  
  // optional uint64 num_failed_writes = 5;
  if (has_num_failed_writes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->num_failed_writes(), target);
  }
  
  // optional uint64 num_failed_reads = 6;
  if (has_num_failed_reads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->num_failed_reads(), target);
  }
  
  // optional uint32 disk_id = 7;
  if (has_disk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->disk_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaDiskStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string disk_uuid = 1;
    if (has_disk_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_uuid());
    }
    
    // required string disk_name = 2;
    if (has_disk_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_name());
    }
    
    // optional uint64 total_bytes = 3;
    if (has_total_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes());
    }
    
    // optional uint64 free_bytes = 4;
    if (has_free_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->free_bytes());
    }
    
    // optional uint64 num_failed_writes = 5;
    if (has_num_failed_writes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_failed_writes());
    }
    
    // optional uint64 num_failed_reads = 6;
    if (has_num_failed_reads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_failed_reads());
    }
    
    // optional uint32 disk_id = 7;
    if (has_disk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disk_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaDiskStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaDiskStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaDiskStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaDiskStat::MergeFrom(const MetaDiskStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_disk_uuid()) {
      set_disk_uuid(from.disk_uuid());
    }
    if (from.has_disk_name()) {
      set_disk_name(from.disk_name());
    }
    if (from.has_total_bytes()) {
      set_total_bytes(from.total_bytes());
    }
    if (from.has_free_bytes()) {
      set_free_bytes(from.free_bytes());
    }
    if (from.has_num_failed_writes()) {
      set_num_failed_writes(from.num_failed_writes());
    }
    if (from.has_num_failed_reads()) {
      set_num_failed_reads(from.num_failed_reads());
    }
    if (from.has_disk_id()) {
      set_disk_id(from.disk_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaDiskStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaDiskStat::CopyFrom(const MetaDiskStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaDiskStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MetaDiskStat::Swap(MetaDiskStat* other) {
  if (other != this) {
    std::swap(disk_uuid_, other->disk_uuid_);
    std::swap(disk_name_, other->disk_name_);
    std::swap(total_bytes_, other->total_bytes_);
    std::swap(free_bytes_, other->free_bytes_);
    std::swap(num_failed_writes_, other->num_failed_writes_);
    std::swap(num_failed_reads_, other->num_failed_reads_);
    std::swap(disk_id_, other->disk_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaDiskStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaDiskStat_descriptor_;
  metadata.reflection = MetaDiskStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllocatorStat::kStripeBlocksFieldNumber;
const int AllocatorStat::kBlockSizeFieldNumber;
const int AllocatorStat::kMetaTotalStripesFieldNumber;
const int AllocatorStat::kMetaFreeStripesFieldNumber;
const int AllocatorStat::kDataTotalStripesFieldNumber;
const int AllocatorStat::kDataFreeStripesFieldNumber;
#endif  // !_MSC_VER

AllocatorStat::AllocatorStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllocatorStat::InitAsDefaultInstance() {
}

AllocatorStat::AllocatorStat(const AllocatorStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllocatorStat::SharedCtor() {
  _cached_size_ = 0;
  stripe_blocks_ = 0u;
  block_size_ = 0u;
  meta_total_stripes_ = 0u;
  meta_free_stripes_ = 0u;
  data_total_stripes_ = 0u;
  data_free_stripes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocatorStat::~AllocatorStat() {
  SharedDtor();
}

void AllocatorStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllocatorStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocatorStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocatorStat_descriptor_;
}

const AllocatorStat& AllocatorStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fcommon_2eproto();  return *default_instance_;
}

AllocatorStat* AllocatorStat::default_instance_ = NULL;

AllocatorStat* AllocatorStat::New() const {
  return new AllocatorStat;
}

void AllocatorStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stripe_blocks_ = 0u;
    block_size_ = 0u;
    meta_total_stripes_ = 0u;
    meta_free_stripes_ = 0u;
    data_total_stripes_ = 0u;
    data_free_stripes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocatorStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stripe_blocks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stripe_blocks_)));
          set_has_stripe_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_size;
        break;
      }
      
      // optional uint32 block_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_size_)));
          set_has_block_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_meta_total_stripes;
        break;
      }
      
      // optional uint32 meta_total_stripes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_total_stripes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_total_stripes_)));
          set_has_meta_total_stripes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_meta_free_stripes;
        break;
      }
      
      // optional uint32 meta_free_stripes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_free_stripes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_free_stripes_)));
          set_has_meta_free_stripes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_data_total_stripes;
        break;
      }
      
      // optional uint32 data_total_stripes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_total_stripes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_total_stripes_)));
          set_has_data_total_stripes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_data_free_stripes;
        break;
      }
      
      // optional uint32 data_free_stripes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_free_stripes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_free_stripes_)));
          set_has_data_free_stripes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllocatorStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stripe_blocks = 1;
  if (has_stripe_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stripe_blocks(), output);
  }
  
  // optional uint32 block_size = 2;
  if (has_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->block_size(), output);
  }
  
  // optional uint32 meta_total_stripes = 3;
  if (has_meta_total_stripes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->meta_total_stripes(), output);
  }
  
  // optional uint32 meta_free_stripes = 4;
  if (has_meta_free_stripes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->meta_free_stripes(), output);
  }
  
  // optional uint32 data_total_stripes = 5;
  if (has_data_total_stripes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data_total_stripes(), output);
  }
  
  // optional uint32 data_free_stripes = 6;
  if (has_data_free_stripes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->data_free_stripes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllocatorStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stripe_blocks = 1;
  if (has_stripe_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stripe_blocks(), target);
  }
  
  // optional uint32 block_size = 2;
  if (has_block_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->block_size(), target);
  }
  
  // optional uint32 meta_total_stripes = 3;
  if (has_meta_total_stripes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->meta_total_stripes(), target);
  }
  
  // optional uint32 meta_free_stripes = 4;
  if (has_meta_free_stripes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->meta_free_stripes(), target);
  }
  
  // optional uint32 data_total_stripes = 5;
  if (has_data_total_stripes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->data_total_stripes(), target);
  }
  
  // optional uint32 data_free_stripes = 6;
  if (has_data_free_stripes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->data_free_stripes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllocatorStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stripe_blocks = 1;
    if (has_stripe_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stripe_blocks());
    }
    
    // optional uint32 block_size = 2;
    if (has_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_size());
    }
    
    // optional uint32 meta_total_stripes = 3;
    if (has_meta_total_stripes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_total_stripes());
    }
    
    // optional uint32 meta_free_stripes = 4;
    if (has_meta_free_stripes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_free_stripes());
    }
    
    // optional uint32 data_total_stripes = 5;
    if (has_data_total_stripes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_total_stripes());
    }
    
    // optional uint32 data_free_stripes = 6;
    if (has_data_free_stripes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_free_stripes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocatorStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocatorStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocatorStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocatorStat::MergeFrom(const AllocatorStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stripe_blocks()) {
      set_stripe_blocks(from.stripe_blocks());
    }
    if (from.has_block_size()) {
      set_block_size(from.block_size());
    }
    if (from.has_meta_total_stripes()) {
      set_meta_total_stripes(from.meta_total_stripes());
    }
    if (from.has_meta_free_stripes()) {
      set_meta_free_stripes(from.meta_free_stripes());
    }
    if (from.has_data_total_stripes()) {
      set_data_total_stripes(from.data_total_stripes());
    }
    if (from.has_data_free_stripes()) {
      set_data_free_stripes(from.data_free_stripes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocatorStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocatorStat::CopyFrom(const AllocatorStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocatorStat::IsInitialized() const {
  
  return true;
}

void AllocatorStat::Swap(AllocatorStat* other) {
  if (other != this) {
    std::swap(stripe_blocks_, other->stripe_blocks_);
    std::swap(block_size_, other->block_size_);
    std::swap(meta_total_stripes_, other->meta_total_stripes_);
    std::swap(meta_free_stripes_, other->meta_free_stripes_);
    std::swap(data_total_stripes_, other->data_total_stripes_);
    std::swap(data_free_stripes_, other->data_free_stripes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocatorStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocatorStat_descriptor_;
  metadata.reflection = AllocatorStat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChunkDiskStat_DiskStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkDiskStat_DiskStatus_descriptor_;
}
bool ChunkDiskStat_DiskStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChunkDiskStat_DiskStatus ChunkDiskStat::MOUNTING;
const ChunkDiskStat_DiskStatus ChunkDiskStat::RUNNING;
const ChunkDiskStat_DiskStatus ChunkDiskStat::EXITING;
const ChunkDiskStat_DiskStatus ChunkDiskStat::DISABLED;
const ChunkDiskStat_DiskStatus ChunkDiskStat::FULL;
const ChunkDiskStat_DiskStatus ChunkDiskStat::DiskStatus_MIN;
const ChunkDiskStat_DiskStatus ChunkDiskStat::DiskStatus_MAX;
const int ChunkDiskStat::DiskStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChunkDiskStat::kDiskIdFieldNumber;
const int ChunkDiskStat::kStatusFieldNumber;
const int ChunkDiskStat::kDiskUuidFieldNumber;
const int ChunkDiskStat::kDiskNameFieldNumber;
const int ChunkDiskStat::kTotalBytesFieldNumber;
const int ChunkDiskStat::kFreeBytesFieldNumber;
const int ChunkDiskStat::kNumFailedWritesFieldNumber;
const int ChunkDiskStat::kNumFailedReadsFieldNumber;
const int ChunkDiskStat::kAllocatorFieldNumber;
const int ChunkDiskStat::kNormalReqBytesDroppedFieldNumber;
const int ChunkDiskStat::kReservReqBytesDroppedFieldNumber;
const int ChunkDiskStat::kNormalReqBytesDroppedIntervalFieldNumber;
const int ChunkDiskStat::kReservReqBytesDroppedIntervalFieldNumber;
const int ChunkDiskStat::kReqPendingQueueDepthFieldNumber;
const int ChunkDiskStat::kAioPendingQueueDepthFieldNumber;
const int ChunkDiskStat::kDeferQueueDepthFieldNumber;
const int ChunkDiskStat::kPendingReservationsFieldNumber;
const int ChunkDiskStat::kWriteBytesReceivedFieldNumber;
const int ChunkDiskStat::kWriteBytesReceivedIntervalFieldNumber;
const int ChunkDiskStat::kWriteBytesRedirectedFieldNumber;
const int ChunkDiskStat::kFlushPendingQueueDepthFieldNumber;
const int ChunkDiskStat::kFlushQueueDepthFieldNumber;
const int ChunkDiskStat::kPendingChunkFileWritersFieldNumber;
const int ChunkDiskStat::kNumDiskRepairReadFieldNumber;
const int ChunkDiskStat::kNumPendingWriteFieldNumber;
#endif  // !_MSC_VER

ChunkDiskStat::ChunkDiskStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkDiskStat::InitAsDefaultInstance() {
  allocator_ = const_cast< ::AllocatorStat*>(&::AllocatorStat::default_instance());
}

ChunkDiskStat::ChunkDiskStat(const ChunkDiskStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkDiskStat::SharedCtor() {
  _cached_size_ = 0;
  disk_id_ = 0u;
  status_ = 2;
  disk_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  disk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_bytes_ = GOOGLE_ULONGLONG(0);
  free_bytes_ = GOOGLE_ULONGLONG(0);
  num_failed_writes_ = GOOGLE_ULONGLONG(0);
  num_failed_reads_ = GOOGLE_ULONGLONG(0);
  allocator_ = NULL;
  normal_req_bytes_dropped_ = GOOGLE_ULONGLONG(0);
  reserv_req_bytes_dropped_ = GOOGLE_ULONGLONG(0);
  normal_req_bytes_dropped_interval_ = GOOGLE_ULONGLONG(0);
  reserv_req_bytes_dropped_interval_ = GOOGLE_ULONGLONG(0);
  req_pending_queue_depth_ = 0u;
  aio_pending_queue_depth_ = 0u;
  defer_queue_depth_ = 0u;
  pending_reservations_ = 0u;
  write_bytes_received_ = GOOGLE_ULONGLONG(0);
  write_bytes_received_interval_ = GOOGLE_ULONGLONG(0);
  write_bytes_redirected_ = GOOGLE_ULONGLONG(0);
  flush_pending_queue_depth_ = GOOGLE_ULONGLONG(0);
  flush_queue_depth_ = GOOGLE_ULONGLONG(0);
  pending_chunk_file_writers_ = GOOGLE_ULONGLONG(0);
  num_disk_repair_read_ = 0u;
  num_pending_write_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkDiskStat::~ChunkDiskStat() {
  SharedDtor();
}

void ChunkDiskStat::SharedDtor() {
  if (disk_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_uuid_;
  }
  if (disk_name_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_name_;
  }
  if (this != default_instance_) {
    delete allocator_;
  }
}

void ChunkDiskStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkDiskStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkDiskStat_descriptor_;
}

const ChunkDiskStat& ChunkDiskStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fcommon_2eproto();  return *default_instance_;
}

ChunkDiskStat* ChunkDiskStat::default_instance_ = NULL;

ChunkDiskStat* ChunkDiskStat::New() const {
  return new ChunkDiskStat;
}

void ChunkDiskStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    disk_id_ = 0u;
    status_ = 2;
    if (has_disk_uuid()) {
      if (disk_uuid_ != &::google::protobuf::internal::kEmptyString) {
        disk_uuid_->clear();
      }
    }
    if (has_disk_name()) {
      if (disk_name_ != &::google::protobuf::internal::kEmptyString) {
        disk_name_->clear();
      }
    }
    total_bytes_ = GOOGLE_ULONGLONG(0);
    free_bytes_ = GOOGLE_ULONGLONG(0);
    num_failed_writes_ = GOOGLE_ULONGLONG(0);
    num_failed_reads_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_allocator()) {
      if (allocator_ != NULL) allocator_->::AllocatorStat::Clear();
    }
    normal_req_bytes_dropped_ = GOOGLE_ULONGLONG(0);
    reserv_req_bytes_dropped_ = GOOGLE_ULONGLONG(0);
    normal_req_bytes_dropped_interval_ = GOOGLE_ULONGLONG(0);
    reserv_req_bytes_dropped_interval_ = GOOGLE_ULONGLONG(0);
    req_pending_queue_depth_ = 0u;
    aio_pending_queue_depth_ = 0u;
    defer_queue_depth_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pending_reservations_ = 0u;
    write_bytes_received_ = GOOGLE_ULONGLONG(0);
    write_bytes_received_interval_ = GOOGLE_ULONGLONG(0);
    write_bytes_redirected_ = GOOGLE_ULONGLONG(0);
    flush_pending_queue_depth_ = GOOGLE_ULONGLONG(0);
    flush_queue_depth_ = GOOGLE_ULONGLONG(0);
    pending_chunk_file_writers_ = GOOGLE_ULONGLONG(0);
    num_disk_repair_read_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    num_pending_write_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkDiskStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 disk_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disk_id_)));
          set_has_disk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required .ChunkDiskStat.DiskStatus status = 2 [default = RUNNING];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChunkDiskStat_DiskStatus_IsValid(value)) {
            set_status(static_cast< ::ChunkDiskStat_DiskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disk_uuid;
        break;
      }
      
      // required string disk_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_uuid().data(), this->disk_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_disk_name;
        break;
      }
      
      // required string disk_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_name().data(), this->disk_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_bytes;
        break;
      }
      
      // optional uint64 total_bytes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_)));
          set_has_total_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_free_bytes;
        break;
      }
      
      // optional uint64 free_bytes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_bytes_)));
          set_has_free_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num_failed_writes;
        break;
      }
      
      // optional uint64 num_failed_writes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_failed_writes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_failed_writes_)));
          set_has_num_failed_writes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num_failed_reads;
        break;
      }
      
      // optional uint64 num_failed_reads = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_failed_reads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_failed_reads_)));
          set_has_num_failed_reads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_allocator;
        break;
      }
      
      // optional .AllocatorStat allocator = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allocator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allocator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_normal_req_bytes_dropped;
        break;
      }
      
      // optional uint64 normal_req_bytes_dropped = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_req_bytes_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &normal_req_bytes_dropped_)));
          set_has_normal_req_bytes_dropped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reserv_req_bytes_dropped;
        break;
      }
      
      // optional uint64 reserv_req_bytes_dropped = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserv_req_bytes_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reserv_req_bytes_dropped_)));
          set_has_reserv_req_bytes_dropped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_normal_req_bytes_dropped_interval;
        break;
      }
      
      // optional uint64 normal_req_bytes_dropped_interval = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_req_bytes_dropped_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &normal_req_bytes_dropped_interval_)));
          set_has_normal_req_bytes_dropped_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_reserv_req_bytes_dropped_interval;
        break;
      }
      
      // optional uint64 reserv_req_bytes_dropped_interval = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserv_req_bytes_dropped_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reserv_req_bytes_dropped_interval_)));
          set_has_reserv_req_bytes_dropped_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_req_pending_queue_depth;
        break;
      }
      
      // optional uint32 req_pending_queue_depth = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_pending_queue_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_pending_queue_depth_)));
          set_has_req_pending_queue_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_aio_pending_queue_depth;
        break;
      }
      
      // optional uint32 aio_pending_queue_depth = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aio_pending_queue_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aio_pending_queue_depth_)));
          set_has_aio_pending_queue_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_defer_queue_depth;
        break;
      }
      
      // optional uint32 defer_queue_depth = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defer_queue_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defer_queue_depth_)));
          set_has_defer_queue_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_pending_reservations;
        break;
      }
      
      // optional uint32 pending_reservations = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pending_reservations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pending_reservations_)));
          set_has_pending_reservations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_write_bytes_received;
        break;
      }
      
      // optional uint64 write_bytes_received = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_bytes_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_bytes_received_)));
          set_has_write_bytes_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_write_bytes_received_interval;
        break;
      }
      
      // optional uint64 write_bytes_received_interval = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_bytes_received_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_bytes_received_interval_)));
          set_has_write_bytes_received_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_write_bytes_redirected;
        break;
      }
      
      // optional uint64 write_bytes_redirected = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_bytes_redirected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_bytes_redirected_)));
          set_has_write_bytes_redirected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_flush_pending_queue_depth;
        break;
      }
      
      // optional uint64 flush_pending_queue_depth = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flush_pending_queue_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_pending_queue_depth_)));
          set_has_flush_pending_queue_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_flush_queue_depth;
        break;
      }
      
      // optional uint64 flush_queue_depth = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flush_queue_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_queue_depth_)));
          set_has_flush_queue_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_pending_chunk_file_writers;
        break;
      }
      
      // optional uint64 pending_chunk_file_writers = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pending_chunk_file_writers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pending_chunk_file_writers_)));
          set_has_pending_chunk_file_writers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_num_disk_repair_read;
        break;
      }
      
      // optional uint32 num_disk_repair_read = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_disk_repair_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_disk_repair_read_)));
          set_has_num_disk_repair_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_num_pending_write;
        break;
      }
      
      // optional uint32 num_pending_write = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_pending_write:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_pending_write_)));
          set_has_num_pending_write();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkDiskStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 disk_id = 1;
  if (has_disk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->disk_id(), output);
  }
  
  // required .ChunkDiskStat.DiskStatus status = 2 [default = RUNNING];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }
  
  // required string disk_uuid = 3;
  if (has_disk_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_uuid().data(), this->disk_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->disk_uuid(), output);
  }
  
  // required string disk_name = 4;
  if (has_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_name().data(), this->disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->disk_name(), output);
  }
  
  // optional uint64 total_bytes = 5;
  if (has_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->total_bytes(), output);
  }
  
  // optional uint64 free_bytes = 6;
  if (has_free_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->free_bytes(), output);
  }
  
  // optional uint64 num_failed_writes = 7;
  if (has_num_failed_writes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->num_failed_writes(), output);
  }
  
  // optional uint64 num_failed_reads = 8;
  if (has_num_failed_reads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->num_failed_reads(), output);
  }
  
  // optional .AllocatorStat allocator = 9;
  if (has_allocator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->allocator(), output);
  }
  
  // optional uint64 normal_req_bytes_dropped = 10;
  if (has_normal_req_bytes_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->normal_req_bytes_dropped(), output);
  }
  
  // optional uint64 reserv_req_bytes_dropped = 11;
  if (has_reserv_req_bytes_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->reserv_req_bytes_dropped(), output);
  }
  
  // optional uint64 normal_req_bytes_dropped_interval = 12;
  if (has_normal_req_bytes_dropped_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->normal_req_bytes_dropped_interval(), output);
  }
  
  // optional uint64 reserv_req_bytes_dropped_interval = 13;
  if (has_reserv_req_bytes_dropped_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->reserv_req_bytes_dropped_interval(), output);
  }
  
  // optional uint32 req_pending_queue_depth = 14;
  if (has_req_pending_queue_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->req_pending_queue_depth(), output);
  }
  
  // optional uint32 aio_pending_queue_depth = 15;
  if (has_aio_pending_queue_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->aio_pending_queue_depth(), output);
  }
  
  // optional uint32 defer_queue_depth = 16;
  if (has_defer_queue_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->defer_queue_depth(), output);
  }
  
  // optional uint32 pending_reservations = 17;
  if (has_pending_reservations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->pending_reservations(), output);
  }
  
  // optional uint64 write_bytes_received = 18;
  if (has_write_bytes_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->write_bytes_received(), output);
  }
  
  // optional uint64 write_bytes_received_interval = 19;
  if (has_write_bytes_received_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->write_bytes_received_interval(), output);
  }
  
  // optional uint64 write_bytes_redirected = 20;
  if (has_write_bytes_redirected()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->write_bytes_redirected(), output);
  }
  
  // optional uint64 flush_pending_queue_depth = 21;
  if (has_flush_pending_queue_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->flush_pending_queue_depth(), output);
  }
  
  // optional uint64 flush_queue_depth = 22;
  if (has_flush_queue_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->flush_queue_depth(), output);
  }
  
  // optional uint64 pending_chunk_file_writers = 23;
  if (has_pending_chunk_file_writers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->pending_chunk_file_writers(), output);
  }
  
  // optional uint32 num_disk_repair_read = 24;
  if (has_num_disk_repair_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->num_disk_repair_read(), output);
  }
  
  // optional uint32 num_pending_write = 25;
  if (has_num_pending_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->num_pending_write(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkDiskStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 disk_id = 1;
  if (has_disk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->disk_id(), target);
  }
  
  // required .ChunkDiskStat.DiskStatus status = 2 [default = RUNNING];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }
  
  // required string disk_uuid = 3;
  if (has_disk_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_uuid().data(), this->disk_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->disk_uuid(), target);
  }
  
  // required string disk_name = 4;
  if (has_disk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_name().data(), this->disk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->disk_name(), target);
  }
  
  // optional uint64 total_bytes = 5;
  if (has_total_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->total_bytes(), target);
  }
  
  // optional uint64 free_bytes = 6;
  if (has_free_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->free_bytes(), target);
  }
  
  // optional uint64 num_failed_writes = 7;
  if (has_num_failed_writes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->num_failed_writes(), target);
  }
  
  // optional uint64 num_failed_reads = 8;
  if (has_num_failed_reads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->num_failed_reads(), target);
  }
  
  // optional .AllocatorStat allocator = 9;
  if (has_allocator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->allocator(), target);
  }
  
  // optional uint64 normal_req_bytes_dropped = 10;
  if (has_normal_req_bytes_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->normal_req_bytes_dropped(), target);
  }
  
  // optional uint64 reserv_req_bytes_dropped = 11;
  if (has_reserv_req_bytes_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->reserv_req_bytes_dropped(), target);
  }
  
  // optional uint64 normal_req_bytes_dropped_interval = 12;
  if (has_normal_req_bytes_dropped_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->normal_req_bytes_dropped_interval(), target);
  }
  
  // optional uint64 reserv_req_bytes_dropped_interval = 13;
  if (has_reserv_req_bytes_dropped_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->reserv_req_bytes_dropped_interval(), target);
  }
  
  // optional uint32 req_pending_queue_depth = 14;
  if (has_req_pending_queue_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->req_pending_queue_depth(), target);
  }
  
  // optional uint32 aio_pending_queue_depth = 15;
  if (has_aio_pending_queue_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->aio_pending_queue_depth(), target);
  }
  
  // optional uint32 defer_queue_depth = 16;
  if (has_defer_queue_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->defer_queue_depth(), target);
  }
  
  // optional uint32 pending_reservations = 17;
  if (has_pending_reservations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->pending_reservations(), target);
  }
  
  // optional uint64 write_bytes_received = 18;
  if (has_write_bytes_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->write_bytes_received(), target);
  }
  
  // optional uint64 write_bytes_received_interval = 19;
  if (has_write_bytes_received_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->write_bytes_received_interval(), target);
  }
  
  // optional uint64 write_bytes_redirected = 20;
  if (has_write_bytes_redirected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->write_bytes_redirected(), target);
  }
  
  // optional uint64 flush_pending_queue_depth = 21;
  if (has_flush_pending_queue_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->flush_pending_queue_depth(), target);
  }
  
  // optional uint64 flush_queue_depth = 22;
  if (has_flush_queue_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->flush_queue_depth(), target);
  }
  
  // optional uint64 pending_chunk_file_writers = 23;
  if (has_pending_chunk_file_writers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->pending_chunk_file_writers(), target);
  }
  
  // optional uint32 num_disk_repair_read = 24;
  if (has_num_disk_repair_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->num_disk_repair_read(), target);
  }
  
  // optional uint32 num_pending_write = 25;
  if (has_num_pending_write()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->num_pending_write(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkDiskStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 disk_id = 1;
    if (has_disk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disk_id());
    }
    
    // required .ChunkDiskStat.DiskStatus status = 2 [default = RUNNING];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // required string disk_uuid = 3;
    if (has_disk_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_uuid());
    }
    
    // required string disk_name = 4;
    if (has_disk_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_name());
    }
    
    // optional uint64 total_bytes = 5;
    if (has_total_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes());
    }
    
    // optional uint64 free_bytes = 6;
    if (has_free_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->free_bytes());
    }
    
    // optional uint64 num_failed_writes = 7;
    if (has_num_failed_writes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_failed_writes());
    }
    
    // optional uint64 num_failed_reads = 8;
    if (has_num_failed_reads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_failed_reads());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .AllocatorStat allocator = 9;
    if (has_allocator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allocator());
    }
    
    // optional uint64 normal_req_bytes_dropped = 10;
    if (has_normal_req_bytes_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->normal_req_bytes_dropped());
    }
    
    // optional uint64 reserv_req_bytes_dropped = 11;
    if (has_reserv_req_bytes_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reserv_req_bytes_dropped());
    }
    
    // optional uint64 normal_req_bytes_dropped_interval = 12;
    if (has_normal_req_bytes_dropped_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->normal_req_bytes_dropped_interval());
    }
    
    // optional uint64 reserv_req_bytes_dropped_interval = 13;
    if (has_reserv_req_bytes_dropped_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reserv_req_bytes_dropped_interval());
    }
    
    // optional uint32 req_pending_queue_depth = 14;
    if (has_req_pending_queue_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_pending_queue_depth());
    }
    
    // optional uint32 aio_pending_queue_depth = 15;
    if (has_aio_pending_queue_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aio_pending_queue_depth());
    }
    
    // optional uint32 defer_queue_depth = 16;
    if (has_defer_queue_depth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defer_queue_depth());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 pending_reservations = 17;
    if (has_pending_reservations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pending_reservations());
    }
    
    // optional uint64 write_bytes_received = 18;
    if (has_write_bytes_received()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_bytes_received());
    }
    
    // optional uint64 write_bytes_received_interval = 19;
    if (has_write_bytes_received_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_bytes_received_interval());
    }
    
    // optional uint64 write_bytes_redirected = 20;
    if (has_write_bytes_redirected()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_bytes_redirected());
    }
    
    // optional uint64 flush_pending_queue_depth = 21;
    if (has_flush_pending_queue_depth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flush_pending_queue_depth());
    }
    
    // optional uint64 flush_queue_depth = 22;
    if (has_flush_queue_depth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flush_queue_depth());
    }
    
    // optional uint64 pending_chunk_file_writers = 23;
    if (has_pending_chunk_file_writers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pending_chunk_file_writers());
    }
    
    // optional uint32 num_disk_repair_read = 24;
    if (has_num_disk_repair_read()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_disk_repair_read());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 num_pending_write = 25;
    if (has_num_pending_write()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_pending_write());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkDiskStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkDiskStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkDiskStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkDiskStat::MergeFrom(const ChunkDiskStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_disk_id()) {
      set_disk_id(from.disk_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_disk_uuid()) {
      set_disk_uuid(from.disk_uuid());
    }
    if (from.has_disk_name()) {
      set_disk_name(from.disk_name());
    }
    if (from.has_total_bytes()) {
      set_total_bytes(from.total_bytes());
    }
    if (from.has_free_bytes()) {
      set_free_bytes(from.free_bytes());
    }
    if (from.has_num_failed_writes()) {
      set_num_failed_writes(from.num_failed_writes());
    }
    if (from.has_num_failed_reads()) {
      set_num_failed_reads(from.num_failed_reads());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_allocator()) {
      mutable_allocator()->::AllocatorStat::MergeFrom(from.allocator());
    }
    if (from.has_normal_req_bytes_dropped()) {
      set_normal_req_bytes_dropped(from.normal_req_bytes_dropped());
    }
    if (from.has_reserv_req_bytes_dropped()) {
      set_reserv_req_bytes_dropped(from.reserv_req_bytes_dropped());
    }
    if (from.has_normal_req_bytes_dropped_interval()) {
      set_normal_req_bytes_dropped_interval(from.normal_req_bytes_dropped_interval());
    }
    if (from.has_reserv_req_bytes_dropped_interval()) {
      set_reserv_req_bytes_dropped_interval(from.reserv_req_bytes_dropped_interval());
    }
    if (from.has_req_pending_queue_depth()) {
      set_req_pending_queue_depth(from.req_pending_queue_depth());
    }
    if (from.has_aio_pending_queue_depth()) {
      set_aio_pending_queue_depth(from.aio_pending_queue_depth());
    }
    if (from.has_defer_queue_depth()) {
      set_defer_queue_depth(from.defer_queue_depth());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pending_reservations()) {
      set_pending_reservations(from.pending_reservations());
    }
    if (from.has_write_bytes_received()) {
      set_write_bytes_received(from.write_bytes_received());
    }
    if (from.has_write_bytes_received_interval()) {
      set_write_bytes_received_interval(from.write_bytes_received_interval());
    }
    if (from.has_write_bytes_redirected()) {
      set_write_bytes_redirected(from.write_bytes_redirected());
    }
    if (from.has_flush_pending_queue_depth()) {
      set_flush_pending_queue_depth(from.flush_pending_queue_depth());
    }
    if (from.has_flush_queue_depth()) {
      set_flush_queue_depth(from.flush_queue_depth());
    }
    if (from.has_pending_chunk_file_writers()) {
      set_pending_chunk_file_writers(from.pending_chunk_file_writers());
    }
    if (from.has_num_disk_repair_read()) {
      set_num_disk_repair_read(from.num_disk_repair_read());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_num_pending_write()) {
      set_num_pending_write(from.num_pending_write());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkDiskStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkDiskStat::CopyFrom(const ChunkDiskStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkDiskStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ChunkDiskStat::Swap(ChunkDiskStat* other) {
  if (other != this) {
    std::swap(disk_id_, other->disk_id_);
    std::swap(status_, other->status_);
    std::swap(disk_uuid_, other->disk_uuid_);
    std::swap(disk_name_, other->disk_name_);
    std::swap(total_bytes_, other->total_bytes_);
    std::swap(free_bytes_, other->free_bytes_);
    std::swap(num_failed_writes_, other->num_failed_writes_);
    std::swap(num_failed_reads_, other->num_failed_reads_);
    std::swap(allocator_, other->allocator_);
    std::swap(normal_req_bytes_dropped_, other->normal_req_bytes_dropped_);
    std::swap(reserv_req_bytes_dropped_, other->reserv_req_bytes_dropped_);
    std::swap(normal_req_bytes_dropped_interval_, other->normal_req_bytes_dropped_interval_);
    std::swap(reserv_req_bytes_dropped_interval_, other->reserv_req_bytes_dropped_interval_);
    std::swap(req_pending_queue_depth_, other->req_pending_queue_depth_);
    std::swap(aio_pending_queue_depth_, other->aio_pending_queue_depth_);
    std::swap(defer_queue_depth_, other->defer_queue_depth_);
    std::swap(pending_reservations_, other->pending_reservations_);
    std::swap(write_bytes_received_, other->write_bytes_received_);
    std::swap(write_bytes_received_interval_, other->write_bytes_received_interval_);
    std::swap(write_bytes_redirected_, other->write_bytes_redirected_);
    std::swap(flush_pending_queue_depth_, other->flush_pending_queue_depth_);
    std::swap(flush_queue_depth_, other->flush_queue_depth_);
    std::swap(pending_chunk_file_writers_, other->pending_chunk_file_writers_);
    std::swap(num_disk_repair_read_, other->num_disk_repair_read_);
    std::swap(num_pending_write_, other->num_pending_write_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkDiskStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkDiskStat_descriptor_;
  metadata.reflection = ChunkDiskStat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChunkServerStat_ServerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkServerStat_ServerStatus_descriptor_;
}
bool ChunkServerStat_ServerStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChunkServerStat_ServerStatus ChunkServerStat::CONNECTING_TO_META;
const ChunkServerStat_ServerStatus ChunkServerStat::CONNECTED_TO_META;
const ChunkServerStat_ServerStatus ChunkServerStat::ServerStatus_MIN;
const ChunkServerStat_ServerStatus ChunkServerStat::ServerStatus_MAX;
const int ChunkServerStat::ServerStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChunkServerStat::kStatusFieldNumber;
const int ChunkServerStat::kCsIdFieldNumber;
const int ChunkServerStat::kCsUuidFieldNumber;
const int ChunkServerStat::kStatFieldNumber;
const int ChunkServerStat::kTotalBytesFieldNumber;
const int ChunkServerStat::kFreeBytesFieldNumber;
const int ChunkServerStat::kChunkMetaDiskFieldNumber;
const int ChunkServerStat::kUpdateTimestampFieldNumber;
const int ChunkServerStat::kZoneFieldNumber;
const int ChunkServerStat::kMachineIdFieldNumber;
const int ChunkServerStat::kInternalClusterUuidFieldNumber;
const int ChunkServerStat::kVersionFieldNumber;
const int ChunkServerStat::kTotalRepairReadFieldNumber;
#endif  // !_MSC_VER

ChunkServerStat::ChunkServerStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkServerStat::InitAsDefaultInstance() {
  chunk_meta_disk_ = const_cast< ::MetaDiskStat*>(&::MetaDiskStat::default_instance());
}

ChunkServerStat::ChunkServerStat(const ChunkServerStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkServerStat::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  cs_id_ = 0u;
  cs_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_bytes_ = GOOGLE_LONGLONG(0);
  free_bytes_ = GOOGLE_LONGLONG(0);
  chunk_meta_disk_ = NULL;
  update_timestamp_ = GOOGLE_ULONGLONG(0);
  zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  internal_cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_repair_read_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkServerStat::~ChunkServerStat() {
  SharedDtor();
}

void ChunkServerStat::SharedDtor() {
  if (cs_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cs_uuid_;
  }
  if (zone_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_;
  }
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (internal_cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete internal_cluster_uuid_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete chunk_meta_disk_;
  }
}

void ChunkServerStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkServerStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkServerStat_descriptor_;
}

const ChunkServerStat& ChunkServerStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdb_5fcommon_2eproto();  return *default_instance_;
}

ChunkServerStat* ChunkServerStat::default_instance_ = NULL;

ChunkServerStat* ChunkServerStat::New() const {
  return new ChunkServerStat;
}

void ChunkServerStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
    cs_id_ = 0u;
    if (has_cs_uuid()) {
      if (cs_uuid_ != &::google::protobuf::internal::kEmptyString) {
        cs_uuid_->clear();
      }
    }
    total_bytes_ = GOOGLE_LONGLONG(0);
    free_bytes_ = GOOGLE_LONGLONG(0);
    if (has_chunk_meta_disk()) {
      if (chunk_meta_disk_ != NULL) chunk_meta_disk_->::MetaDiskStat::Clear();
    }
    update_timestamp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_zone()) {
      if (zone_ != &::google::protobuf::internal::kEmptyString) {
        zone_->clear();
      }
    }
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_internal_cluster_uuid()) {
      if (internal_cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        internal_cluster_uuid_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    total_repair_read_ = 0u;
  }
  stat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkServerStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ChunkServerStat.ServerStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChunkServerStat_ServerStatus_IsValid(value)) {
            set_status(static_cast< ::ChunkServerStat_ServerStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cs_id;
        break;
      }
      
      // required uint32 cs_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cs_id_)));
          set_has_cs_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cs_uuid;
        break;
      }
      
      // required bytes cs_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cs_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stat;
        break;
      }
      
      // repeated .ChunkDiskStat stat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stat;
        if (input->ExpectTag(40)) goto parse_total_bytes;
        break;
      }
      
      // optional int64 total_bytes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bytes_)));
          set_has_total_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_free_bytes;
        break;
      }
      
      // optional int64 free_bytes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_bytes_)));
          set_has_free_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chunk_meta_disk;
        break;
      }
      
      // optional .MetaDiskStat chunk_meta_disk = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunk_meta_disk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunk_meta_disk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_update_timestamp;
        break;
      }
      
      // optional uint64 update_timestamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_timestamp_)));
          set_has_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_zone;
        break;
      }
      
      // optional bytes zone = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_machine_id;
        break;
      }
      
      // optional bytes machine_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_internal_cluster_uuid;
        break;
      }
      
      // optional bytes internal_cluster_uuid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_internal_cluster_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_version;
        break;
      }
      
      // optional bytes version = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_total_repair_read;
        break;
      }
      
      // optional uint32 total_repair_read = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_repair_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_repair_read_)));
          set_has_total_repair_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkServerStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ChunkServerStat.ServerStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // required uint32 cs_id = 2;
  if (has_cs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cs_id(), output);
  }
  
  // required bytes cs_uuid = 3;
  if (has_cs_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cs_uuid(), output);
  }
  
  // repeated .ChunkDiskStat stat = 4;
  for (int i = 0; i < this->stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stat(i), output);
  }
  
  // optional int64 total_bytes = 5;
  if (has_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->total_bytes(), output);
  }
  
  // optional int64 free_bytes = 6;
  if (has_free_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->free_bytes(), output);
  }
  
  // optional .MetaDiskStat chunk_meta_disk = 7;
  if (has_chunk_meta_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chunk_meta_disk(), output);
  }
  
  // optional uint64 update_timestamp = 8;
  if (has_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->update_timestamp(), output);
  }
  
  // optional bytes zone = 9;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->zone(), output);
  }
  
  // optional bytes machine_id = 10;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->machine_id(), output);
  }
  
  // optional bytes internal_cluster_uuid = 11;
  if (has_internal_cluster_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->internal_cluster_uuid(), output);
  }
  
  // optional bytes version = 12;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->version(), output);
  }
  
  // optional uint32 total_repair_read = 13;
  if (has_total_repair_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->total_repair_read(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkServerStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ChunkServerStat.ServerStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // required uint32 cs_id = 2;
  if (has_cs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cs_id(), target);
  }
  
  // required bytes cs_uuid = 3;
  if (has_cs_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cs_uuid(), target);
  }
  
  // repeated .ChunkDiskStat stat = 4;
  for (int i = 0; i < this->stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stat(i), target);
  }
  
  // optional int64 total_bytes = 5;
  if (has_total_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->total_bytes(), target);
  }
  
  // optional int64 free_bytes = 6;
  if (has_free_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->free_bytes(), target);
  }
  
  // optional .MetaDiskStat chunk_meta_disk = 7;
  if (has_chunk_meta_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chunk_meta_disk(), target);
  }
  
  // optional uint64 update_timestamp = 8;
  if (has_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->update_timestamp(), target);
  }
  
  // optional bytes zone = 9;
  if (has_zone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->zone(), target);
  }
  
  // optional bytes machine_id = 10;
  if (has_machine_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->machine_id(), target);
  }
  
  // optional bytes internal_cluster_uuid = 11;
  if (has_internal_cluster_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->internal_cluster_uuid(), target);
  }
  
  // optional bytes version = 12;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->version(), target);
  }
  
  // optional uint32 total_repair_read = 13;
  if (has_total_repair_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->total_repair_read(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkServerStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ChunkServerStat.ServerStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // required uint32 cs_id = 2;
    if (has_cs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cs_id());
    }
    
    // required bytes cs_uuid = 3;
    if (has_cs_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cs_uuid());
    }
    
    // optional int64 total_bytes = 5;
    if (has_total_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_bytes());
    }
    
    // optional int64 free_bytes = 6;
    if (has_free_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->free_bytes());
    }
    
    // optional .MetaDiskStat chunk_meta_disk = 7;
    if (has_chunk_meta_disk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunk_meta_disk());
    }
    
    // optional uint64 update_timestamp = 8;
    if (has_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_timestamp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes zone = 9;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->zone());
    }
    
    // optional bytes machine_id = 10;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->machine_id());
    }
    
    // optional bytes internal_cluster_uuid = 11;
    if (has_internal_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->internal_cluster_uuid());
    }
    
    // optional bytes version = 12;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }
    
    // optional uint32 total_repair_read = 13;
    if (has_total_repair_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_repair_read());
    }
    
  }
  // repeated .ChunkDiskStat stat = 4;
  total_size += 1 * this->stat_size();
  for (int i = 0; i < this->stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stat(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkServerStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkServerStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkServerStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkServerStat::MergeFrom(const ChunkServerStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  stat_.MergeFrom(from.stat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_cs_id()) {
      set_cs_id(from.cs_id());
    }
    if (from.has_cs_uuid()) {
      set_cs_uuid(from.cs_uuid());
    }
    if (from.has_total_bytes()) {
      set_total_bytes(from.total_bytes());
    }
    if (from.has_free_bytes()) {
      set_free_bytes(from.free_bytes());
    }
    if (from.has_chunk_meta_disk()) {
      mutable_chunk_meta_disk()->::MetaDiskStat::MergeFrom(from.chunk_meta_disk());
    }
    if (from.has_update_timestamp()) {
      set_update_timestamp(from.update_timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zone()) {
      set_zone(from.zone());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_internal_cluster_uuid()) {
      set_internal_cluster_uuid(from.internal_cluster_uuid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_total_repair_read()) {
      set_total_repair_read(from.total_repair_read());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkServerStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkServerStat::CopyFrom(const ChunkServerStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkServerStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < stat_size(); i++) {
    if (!this->stat(i).IsInitialized()) return false;
  }
  if (has_chunk_meta_disk()) {
    if (!this->chunk_meta_disk().IsInitialized()) return false;
  }
  return true;
}

void ChunkServerStat::Swap(ChunkServerStat* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(cs_id_, other->cs_id_);
    std::swap(cs_uuid_, other->cs_uuid_);
    stat_.Swap(&other->stat_);
    std::swap(total_bytes_, other->total_bytes_);
    std::swap(free_bytes_, other->free_bytes_);
    std::swap(chunk_meta_disk_, other->chunk_meta_disk_);
    std::swap(update_timestamp_, other->update_timestamp_);
    std::swap(zone_, other->zone_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(internal_cluster_uuid_, other->internal_cluster_uuid_);
    std::swap(version_, other->version_);
    std::swap(total_repair_read_, other->total_repair_read_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkServerStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkServerStat_descriptor_;
  metadata.reflection = ChunkServerStat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
