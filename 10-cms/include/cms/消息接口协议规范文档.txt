消息接口协议规范文档用于规约所有在网络上传输的消息接口定义

1，消息号前缀为模块简称（消息号定义和消息结构体定义放于各模块自己的命名空间，防止命名冲突和便于代码编辑器智能提示）

2，notify消息简称为NTF。由于SIP中只有REQ/RSP消息，上层业务层定义的NTF也要定义RSP消息

3，一条消息号只对应一个消息体成员。REQ消息体继承CEventReq，RSP消息体继承CEventRsp，其中NTF消息体继承CEventReq

4，消息体数据成员名称不要数据类型前缀,首字母小写，例如errorCode，函数成员首字母大写例如GetErrorCode()

5，消息体内只允许使用int,bool等原生类型，其他一律使用stl类型。禁止使用简单数组。
对于平台1.0中一些使用了简单数组，同时使用了数组下标的数据成员，例如视频源别名等，可以新定义一个结构体struct VidSrc，包含VidSrcId, strVidSrcName。
然后array<VidSrc>保存视频源别名。更加节省空间

6，消息体中不允许使用u32，time_t或者TKDMTime保存时间，一律使用string, 时区+时间格式

7，消息体中不允许使用按bit位标记，查询条件用bool字段标识有效性，其他用array形式标识

8. 协议体定义皆用class，类型名称以C开头, 构造函数中禁止用memset this，防止破坏stl成员以及虚函数表

9. 消息名称与消息体名称一致， 比如“TAS_CUSER_DEVICE_ADD_RSP, // 消息体 CUserDeviceAddRsp”

10，使用了string之后所有函数返回值不要为char *，而应该是string。否则会引用野指针

11，xxx_proto.h和xxx_struct.h的相同之处在于，两者都存放class，并且都有ToXml和FromXml成员函数
两者区别在于，前者存放网络上传输的消息体，后者是一些公共结构体，是消息体的数据成员
这么做的目的是让读者更容易明白那些是网络上传输的消息体，那些是复用的数据成员

12，在定义消息结构的时候，要充分考虑SIP的REQ/RSP特性，以及事务模型的特性，在框架定义阶段就预留优化空间
例如NTF消息在SIP层面应该有应答消息，NTF_REQ和NTF_RSP
又例如，一次查询请求事务中，可以让后台服务端保存查询结构，所以在分页查询时不需要多次查询数据库，
同时应该有查询Begin和查询End，通知服务端申请一个查询事务Task或者销毁之。

13，原先平台1.0的设计中，CMS消息分为CU_CUI, CUI_CMU, CMU_CMU, PUI_CMU消息，现在通通不需要如此区分
如果是一条业务消息，从头至尾就是一条业务消息，由事务Task中根据当前状态区分是从哪个源发给那个目的
但是如果是不同的业务消息，必须定义两条，避免消息歧义。

14，类似一些在模块内部使用的结构体，例如TSipURI，不宜作为网络消息体成员，可以使用string代替。TSipURI只在模块内部使用

15，原生类型只允许使用int,bool，浮点数采用double类型，其他使用STL类型，例如string,vector,map等
所有非以上类型的class都必须有自己的ToXml和FromXml成员函数，来诠释这个新类型该如何解析成XML

------------------------------------------------------------------------------------------------------------------------------------
           ---modify by liangli 20111104 修正了typedef问题，对于typedef类型脚本使用OriginalType，不影响正常使用，但是第15点仍然有效

16，容器内部不允许使用枚举类型，统一使用int

17. 接口协议制定应遵行以下原则：
	原则1：基于生成XML易于理解为原则，接口协议应简洁清晰  通过
	原则2：信令协议应避免带有内部实现信息的明示或暗示     通过
	原则3: 尽量采用名词或动名词来命名，多条结果采用复数后缀，如：  
	单条结果 result，多条结果：results

18. 生成XML中根节点已经包含的信息，在子节点中不应重复
  18.1以上规则除某些特殊情况可以例外，比如一个信令中，同时存在"name"：
	class CDeviceInfo
	{	
		string domainName; 		// 域名称名称
        	string deviceName;      // 设备名
        }
19. 成员变量命名尽量采用一些常用的短语：
	能力集  CapSet
	能力 Cap
	结果 result （单个结果） results （多条结果）
	条件 condition
	心跳 HB 
	IP地址 ip 
		
	###  增删改查  ADD DEL MOD QRY
	
	
20. 成员变量命名采用小写开始，大写字母分割，不能采用下划线

------------------------------------------------------------------------------------------------------------------------------------
           ---modify by liangli  2013.1.8 
21. 新增XML支持透明数据
哪些情况需要使用透明数据
1，XML嵌套XML的情况。class的某个string类型数据成员的内容是一段XML，那么这个数据成员就需要支持透明数据
2，描述字段，tinyxml不支持全WhiteSpaceh 或者 <, >, &, ', "，这五个特殊字符，对于class某个string desc数据成员，需要支持透明数据

如何支持透明数据？
1，cms_struct.h中定义了CTransparentData，专门用于处理透明数据，该类型是一个string；只有string才允许透传数据
   需要透明数据的数据成员定义为CTransparentData
2，业务中所有传输中文都采用UTF-8，需要上层字符集转换，tinyxml不负责字符集转换
需要注意的是：
1，除了string之外的类型不允许是透明数据类型，例如int和map等容器
2，透明数据会增加字符串长度，请慎用
3，XML的CDATA标准默认不支持嵌套，我们底层实现上做了特殊处理，可以支持包含CTransparentData的proto任意嵌套
   具体实现是，当CTransparentData::toxml()时，会将内容中的所有CDATA 的tag全部删除，只保留最外一层
4，透明数据作为XML标准一部分，仍然仅支持可见字符集，如果需要传输二进制流，请用base64编码
