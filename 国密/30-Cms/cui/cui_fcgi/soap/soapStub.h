/* soapStub.h
   Generated by gSOAP 2.8.0 from cusdk.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include <set>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_cusdk__ETransMode
#define SOAP_TYPE_cusdk__ETransMode (24)
/* cusdk:ETransMode */
enum cusdk__ETransMode {cusdk__TransModeInvalid = 0, cusdk__TransModeUDP = 1, cusdk__TransModeMRTC = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EUserType
#define SOAP_TYPE_cusdk__EUserType (25)
/* cusdk:EUserType */
enum cusdk__EUserType {cusdk__SuperAdmin = 0, cusdk__Admin = 1, cusdk__Operator = 2, cusdk__SecurityAudit = 3, cusdk__SecurityManage = 4, cusdk__SecurityOperator = 5};
#endif

#ifndef SOAP_TYPE_cusdk__EUserPri
#define SOAP_TYPE_cusdk__EUserPri (26)
/* cusdk:EUserPri */
enum cusdk__EUserPri {cusdk__PriUserInvalid = 0, cusdk__PriUserCMSRecStart = 1, cusdk__PriUserCMSRecPlay = 2, cusdk__PriUserCMSRecDel = 3, cusdk__PriUserCMSRecDownload = 4, cusdk__PriUserLocalRec = 5, cusdk__PriUserCMSRecPlayOtherDomain = 6, cusdk__PriUserPUCall = 7, cusdk__PriUserAlarmLog = 8, cusdk__PriUserWaterMark = 9};
#endif

#ifndef SOAP_TYPE_cusdk__EDevicePri
#define SOAP_TYPE_cusdk__EDevicePri (27)
/* cusdk:EDevicePri */
enum cusdk__EDevicePri {cusdk__PriPUInvalid = 0, cusdk__PriPURecStart = 1, cusdk__PriPURecPlay = 2, cusdk__PriPURecDel = 3, cusdk__PriPURecDownload = 4, cusdk__PriPUConfig = 5, cusdk__PriPUAlarmOutput = 6, cusdk__PriPUAlarmConfig = 7, cusdk__PriPuAudioCtrl = 8, cusdk__PriPuSavePreset = 9, cusdk__PriPuPtzLock = 10};
#endif

#ifndef SOAP_TYPE_cusdk__EDeviceType
#define SOAP_TYPE_cusdk__EDeviceType (28)
/* cusdk:EDeviceType */
enum cusdk__EDeviceType {cusdk__DevTypeUnknown = 0, cusdk__DevTypeEncoder = 1, cusdk__DevTypeDecoder = 2, cusdk__DevTypeCodecer = 3, cusdk__DevTypeTVWall = 4};
#endif

#ifndef SOAP_TYPE_cusdk__ESubscribeNotifyType
#define SOAP_TYPE_cusdk__ESubscribeNotifyType (29)
/* cusdk:ESubscribeNotifyType */
enum cusdk__ESubscribeNotifyType {cusdk__SubscribeNotifyInvalid = 0, cusdk__SubscribePuStatus = 1, cusdk__SubscribeTVWallStatus = 2, cusdk__SubscribeNRUStatus = 3, cusdk__SubscribeSeviceStatus = 4, cusdk__SubscribeDeviceGroupStat = 5, cusdk__SubscribeDeviceGroupRecursiveStat = 6};
#endif

#ifndef SOAP_TYPE_cusdk__EPuSubscribeType
#define SOAP_TYPE_cusdk__EPuSubscribeType (30)
/* cusdk:EPuSubscribeType */
enum cusdk__EPuSubscribeType {cusdk__PuSubscribeTypeInvalid = 0, cusdk__PUSubscribeOnlineStatus = 1, cusdk__PUSubscribeConfigStatus = 2, cusdk__PUSubscribeServiceStatus = 3, cusdk__PUSubscribeAlarmStatus = 4, cusdk__PUSubscribeGPS = 5, cusdk__PUSubscribeTransdata = 6};
#endif

#ifndef SOAP_TYPE_cusdk__EPtzCmd
#define SOAP_TYPE_cusdk__EPtzCmd (31)
/* cusdk:EPtzCmd */
enum cusdk__EPtzCmd {cusdk__PtzCmdInvalid = 0, cusdk__PtzMoveUp = 1, cusdk__PtzMoveDown = 2, cusdk__PtzMoveLeft = 3, cusdk__PtzMoveRight = 4, cusdk__PtzMoveHome = 5, cusdk__PtzMoveStop = 6, cusdk__PtzZoomIn = 7, cusdk__PtzZoomOut = 8, cusdk__PtzZoomStop = 9, cusdk__PtzFocusFar = 10, cusdk__PtzFocusNear = 11, cusdk__PtzFocusAuto = 12, cusdk__PtzFocusStop = 13, cusdk__PtzPresetSave = 14, cusdk__PtzPresetCall = 15, cusdk__PtzCameraReset = 16, cusdk__PtzBrightUp = 17, cusdk__PtzBrightDown = 18, cusdk__PtzBrightStop = 19, cusdk__PtzCommandNew = 20, cusdk__PtzCommandAppend = 21, cusdk__PtzGotoPoint = 22, cusdk__PtzZoomArea = 23, cusdk__PtzAlecPanSpeed = 24, cusdk__PtzAlecTiltSpeed = 25, cusdk__PtzSonySetBright = 26, cusdk__PtzMatrixSwitch = 27, cusdk__PtzMatrixVideoMix4 = 28, cusdk__PtzMatrixVideoMix9 = 29, cusdk__PtzMatrixVideoMix16 = 30, cusdk__PtzMatrixVideoMixPP = 31, cusdk__PtzZoomAreaStop = 32, cusdk__PtzMenuUp = 33, cusdk__PtzMenuDown = 34, cusdk__PtzMenuLeft = 35, cusdk__PtzMenuRight = 36, cusdk__PtzMenuShow = 37, cusdk__PtzMenuHide = 38, cusdk__PtzMenuEnter = 39, cusdk__PtzMenuCancel = 40, cusdk__PtzPresetDel = 41, cusdk__PtzMatrixSwitchASC = 42, cusdk__PtzMatrixSwitchESC = 43, cusdk__PtzMatrixHoldImage = 44, cusdk__PtzMoveLeftUp = 45, cusdk__PtzMoveLeftDown = 46, cusdk__PtzMoveRightUp = 47, cusdk__PtzMoveRightDown = 48, cusdk__PtzAutoScanStart = 128, cusdk__PtzAutoScanStop = 129, cusdk__PtzPresetScanStart = 130, cusdk__PtzPresetScanStop = 131, cusdk__PtzScanSpeedSet = 132, cusdk__PtzStartWiper = 160, cusdk__PtzStopWiper = 161, cusdk__PtzLightOn = 162, cusdk__PtzLightOff = 163, cusdk__PtzStartExt1 = 164, cusdk__PtzStopExt1 = 165, cusdk__PtzStartExt2 = 166, cusdk__PtzStopExt2 = 167, cusdk_PtzLock = 168};
#endif

#ifndef SOAP_TYPE_cusdk__EVideoFormat
#define SOAP_TYPE_cusdk__EVideoFormat (32)
/* cusdk:EVideoFormat */
enum cusdk__EVideoFormat {cusdk__VF_Invalid = 0, cusdk__VF_SN4 = 1, cusdk__VF_MPEG4 = 2, cusdk__VF_H261 = 3, cusdk__VF_H263 = 4, cusdk__VF_H264 = 5, cusdk__VF_H265 = 6, cusdk__VF_SVAC = 7, cusdk__VF_MJPEG = 8};
#endif

#ifndef SOAP_TYPE_cusdk__EAudioFormat
#define SOAP_TYPE_cusdk__EAudioFormat (33)
/* cusdk:EAudioFormat */
enum cusdk__EAudioFormat {cusdk__AF_Invalid = 0, cusdk__AF_PCMA = 1, cusdk__AF_PCMU = 2, cusdk__AF_GSM = 3, cusdk__AF_G729 = 4, cusdk__AF_ADPCM = 5, cusdk__AF_G7221C = 6, cusdk__AF_G722 = 7, cusdk__AF_AACLC = 8, cusdk__AF_G711 = 9, cusdk__AF_G726 = 10, cusdk__AF_AAC = 11};
#endif

#ifndef SOAP_TYPE_cusdk__EVideoResolution
#define SOAP_TYPE_cusdk__EVideoResolution (34)
/* cusdk:EVideoResolution */
enum cusdk__EVideoResolution {cusdk__VS_Invalid = 0, cusdk__VS_AUTO = 1, cusdk__VS_QCIF = 2, cusdk__VS_CIF = 3, cusdk__VS_2CIF = 4, cusdk__VS_4CIF = 5, cusdk__VS_QQCIF = 6, cusdk__VS_QVGA = 7, cusdk__VS_VGA = 8, cusdk__VS_720P = 9, cusdk__VS_1080A = 10, cusdk__VS_1080P = 11, cusdk__VS_QXGA = 12, cusdk__VS_960P = 13};
#endif

#ifndef SOAP_TYPE_cusdk__EUserOrUserGroup
#define SOAP_TYPE_cusdk__EUserOrUserGroup (35)
/* cusdk:EUserOrUserGroup */
enum cusdk__EUserOrUserGroup {cusdk__TypeInvalid = 0, cusdk__TypeUser = 1, cusdk__TypeUserGroup = 2};
#endif

#ifndef SOAP_TYPE_cusdk__ERS_CoverPolicy
#define SOAP_TYPE_cusdk__ERS_CoverPolicy (36)
/* cusdk:ERS-CoverPolicy */
enum cusdk__ERS_CoverPolicy {cusdk__RS_COVERPOLICY_INVALID = 0, cusdk__RS_COVERPOLICY_STOPRECORD = 1, cusdk__RS_COVERPOLICY_COVERALL = 2, cusdk__RS_COVERPOLICY_COVERNORMAL = 3, cusdk__RS_COVERPOLICY_UNKNOWN = 4};
#endif

#ifndef SOAP_TYPE_cusdk__ERS_DiskState
#define SOAP_TYPE_cusdk__ERS_DiskState (37)
/* cusdk:ERS-DiskState */
enum cusdk__ERS_DiskState {cusdk__RS_DISKSTATE_INVALID = 0, cusdk__RS_DISKSTATE_ONLINE = 1, cusdk__RS_DISKSTATE_OFFLINE = 2, cusdk__RS_DISKSTATE_UNKNOWN = 3};
#endif

#ifndef SOAP_TYPE_cusdk__ERS_PartState
#define SOAP_TYPE_cusdk__ERS_PartState (38)
/* cusdk:ERS-PartState */
enum cusdk__ERS_PartState {cusdk__RS_PARTSTATE_INVALID = 0, cusdk__RS_PARTSTATE_OFFLINE = 1, cusdk__RS_PARTSTATE_UNFORMATTED = 2, cusdk__RS_PARTSTATE_FORMATTED = 3, cusdk__RS_PARTSTATE_MOUNTED = 4, cusdk__RS_PARTSTATE_UMOUNTEDD = 5, cusdk__RS_PARTSTATE_UNKNOWN = 6};
#endif

#ifndef SOAP_TYPE_cusdk__ERecordType
#define SOAP_TYPE_cusdk__ERecordType (39)
/* cusdk:ERecordType */
enum cusdk__ERecordType {cusdk__ERecordTypeInvalid = 0, cusdk__ERecordTypePlatformRecord = 1, cusdk__ERecordTypePURecord = 2};
#endif

#ifndef SOAP_TYPE_cusdk__ERecordEventType
#define SOAP_TYPE_cusdk__ERecordEventType (40)
/* cusdk:ERecordEventType */
enum cusdk__ERecordEventType {cusdk__RS_RECTYPE_INVALID = 0, cusdk__RS_RECTYPE_ALL = 1, cusdk__RS_RECTYPE_ALARM = 2, cusdk__RS_RECTYPE_HANDLE = 3, cusdk__RS_RECTYPE_PLAN = 4, cusdk__RS_RECTYPE_UNKNOWN = 5};
#endif

#ifndef SOAP_TYPE_cusdk__ERS_RecMode
#define SOAP_TYPE_cusdk__ERS_RecMode (41)
/* cusdk:ERS-RecMode */
enum cusdk__ERS_RecMode {cusdk__RS_RECMODE_INVALID = 0, cusdk__RS_RECMODE_ALL = 1, cusdk__RS_RECMODE_ONLY_VIDEO = 2, cusdk__RS_RECMODE_ONLY_KEYFRAME = 3};
#endif

#ifndef SOAP_TYPE_cusdk__EVCRCmd
#define SOAP_TYPE_cusdk__EVCRCmd (42)
/* cusdk:EVCRCmd */
enum cusdk__EVCRCmd {cusdk__VCRCMD_INVALID = 0, cusdk__VCRCMD_CONFIG = 1, cusdk__VCRCMD_START = 2, cusdk__VCRCMD_STOP = 3, cusdk__VCRCMD_PAUSE = 4, cusdk__VCRCMD_RESUME = 5, cusdk__VCRCMD_SEEK = 6, cusdk__VCRCMD_FASTPLAY = 7, cusdk__VCRCMD_SLOWPLAY = 8, cusdk__VCRCMD_ONEFRAME = 9, cusdk__VCRCMD_KEYFRAME = 10, cusdk__VCRCMD_REVERSEPLAY = 11, cusdk__VCRCMD_FORWARDPLAY = 12, cusdk__VCRCMD_KEYSEEK = 13, cusdk__VCRCMD_AUTO_KEYFRAME = 14, cusdk__VCRCMD_FORCE_KEYFRAME = 15, cusdk__VCRCMD_FORCE_ALLFRAME = 16, cusdk__VCRCMD_UNKNOWN = 17};
#endif

#ifndef SOAP_TYPE_cusdk__EDeviceChannelType
#define SOAP_TYPE_cusdk__EDeviceChannelType (43)
/* cusdk:EDeviceChannelType */
enum cusdk__EDeviceChannelType {cusdk__DeviceChannelTypeInvalid = 0, cusdk__DevChnTypeVideoSource = 1, cusdk__DevChnTypeAlarmInput = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EDeviceCapLabel
#define SOAP_TYPE_cusdk__EDeviceCapLabel (44)
/* cusdk:EDeviceCapLabel */
enum cusdk__EDeviceCapLabel {cusdk__DEVICE_CAP_INVALID = 0, cusdk__DEVICE_CAP_LOCAL_STORAGE = 2, cusdk__DEVICE_CAP_LABEL_ENCODE_NVR = 7, cusdk__DEVICE_CAP_LABEL_ENCODE_SVR = 8, cusdk__DEVICE_CAP_LABEL_ENCODE_IPC_BULLET = 9, cusdk__DEVICE_CAP_LABEL_ENCODE_IPC_DOME = 10, cusdk__DEVICE_CAP_LABEL_ENCODE_GENERAL = 11, cusdk__DEVICE_CAP_LABEL_ENCODE_WIRELESS = 12, cusdk__DEVICE_CAP_LABEL_GBDEVICE = 14, cusdk__DEVICE_CAP_LABEL_CONFDEVICE = 15, cusdk__DEVICE_CAP_LABEL_GBRAWSTREAM = 16};
#endif

#ifndef SOAP_TYPE_cusdk__EDeviceCreatorType
#define SOAP_TYPE_cusdk__EDeviceCreatorType (45)
/* cusdk:EDeviceCreatorType */
enum cusdk__EDeviceCreatorType {cusdk__DevCreatorTypePlat = 0, cusdk__DevCreatorTypeG300 = 1, cusdk__DevCreatorTypeGBS = 2, cusdk__DevCreatorTypeGBSForeignDomain = 3};
#endif

#ifndef SOAP_TYPE_cusdk__ERecordStatus
#define SOAP_TYPE_cusdk__ERecordStatus (46)
/* cusdk:ERecordStatus */
enum cusdk__ERecordStatus {cusdk__RecordStatusInvalid = 0, cusdk__RecordStatusIdel = 1, cusdk__RecordStatusOk = 2, cusdk__RecordStatusTry = 3, cusdk__RecordStatusStopping = 4};
#endif

#ifndef SOAP_TYPE_cusdk__EAlarmType
#define SOAP_TYPE_cusdk__EAlarmType (47)
/* cusdk:EAlarmType */
enum cusdk__EAlarmType {cusdk__AlarmTypeInvalid = 0, cusdk__AlarmMove = 1, cusdk__AlarmInput = 2, cusdk__AlarmDiskfull = 3, cusdk__AlarmVideoLost = 4, cusdk__AlarmIntelligent = 5, cusdk__AlarmVideo = 6, cusdk__AlarmExceptionEvent = 7, cusdk__AlarmDefocus = 8, cusdk__AlarmSceneChange = 9, cusdk__AlarmRegionInvasion = 10, cusdk__AlarmRegionLeaving = 11, cusdk__AlarmObjectTaken = 12, cusdk__AlarmObjectLeft = 13, cusdk__AlarmPeopleGather = 14, cusdk__AlarmCorgon = 15, cusdk__AlarmAudioAbnormal = 16, cusdk__AlarmLumaChange = 17, cusdk__AlarmAntiDismantle = 18, cusdk__AlarmHighTemperature = 19, cusdk__AlarmLowTemperature = 20, cusdk__AlarmPersonVideo = 21, cusdk__AlarmSportGoalCheck = 22, cusdk__AlarmTripwireCheck = 23, cusdk__AlarmHoverCheck = 24, cusdk__AlarmTrafficStatisticsCheck = 25, cusdk__AlarmDensityCheck = 26, cusdk__AlarmVideoException = 27, cusdk__AlarmMoveFast = 28, cusdk__AlarmRetrogradeCheck = 29, cusdk__AlarmDiskFault = 30, cusdk__AlarmFanFault = 31, cusdk__AlarmGPSOverSpeed = 32, cusdk__AlarmSIMDataTrafficExceeded = 33};
#endif

#ifndef SOAP_TYPE_cusdk__EAlarmStatus
#define SOAP_TYPE_cusdk__EAlarmStatus (48)
/* cusdk:EAlarmStatus */
enum cusdk__EAlarmStatus {cusdk__AlarmStatusInvalid = 0, cusdk__AlarmOccur = 1, cusdk__AlarmRestore = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EPollStatus
#define SOAP_TYPE_cusdk__EPollStatus (49)
/* cusdk:EPollStatus */
enum cusdk__EPollStatus {cusdk__PollStatusInvalid = 0, cusdk__PollStarted = 1, cusdk__PollStoped = 2, cusdk__PollPaused = 3};
#endif

#ifndef SOAP_TYPE_cusdk__ETVDivStyle
#define SOAP_TYPE_cusdk__ETVDivStyle (50)
/* cusdk:ETVDivStyle */
enum cusdk__ETVDivStyle {cusdk__TVDIV_Invalid = 0, cusdk__TVDIV_1 = 1, cusdk__TVDIV_2 = 2, cusdk__TVDIV_3 = 3, cusdk__TVDIV_4 = 4, cusdk__TVDIV_6 = 6, cusdk__TVDIV_8 = 8, cusdk__TVDIV_9 = 9, cusdk__TVDIV_16 = 16, cusdk__TVDIV_6_EQUAL = 106};
#endif

#ifndef SOAP_TYPE_cusdk__ETVWallPlayMode
#define SOAP_TYPE_cusdk__ETVWallPlayMode (51)
/* cusdk:ETVWallPlayMode */
enum cusdk__ETVWallPlayMode {cusdk__TVWallPlayModeInvalid = 0, cusdk__TVPlayModeLiveStream = 1, cusdk__TVPlayModePlatformRecord = 2, cusdk__TVPlayModePuRecord = 3};
#endif

#ifndef SOAP_TYPE_cusdk__ECameraProtocolType
#define SOAP_TYPE_cusdk__ECameraProtocolType (52)
/* cusdk:ECameraProtocolType */
enum cusdk__ECameraProtocolType {cusdk__CAM_TYPE_Invalid = 0, cusdk__CAM_TYPE_SONY = 1, cusdk__CAM_TYPE_AD = 2, cusdk__CAM_TYPE_PELCO = 3, cusdk__CAM_TYPE_PIH = 4, cusdk__CAM_TYPE_PELCO_P = 5, cusdk__CAM_TYPE_PARCO = 6, cusdk__CAM_TYPE_AB = 7, cusdk__CAM_TYPE_YUNTAI = 8, cusdk__CAM_TYPE_Samsung = 9, cusdk__CAM_TYPE_YAAN = 10, cusdk__CAM_TYPE_AD168 = 11, cusdk__CAM_TYPE_KALATEL = 12, cusdk__CAM_TYPE_JN = 13, cusdk__CAM_TYPE_WV_CS650 = 14, cusdk__CAM_TYPE_WV_CS850 = 15, cusdk__CAM_TYPE_ALEC = 16, cusdk__CAM_TYPE_AB_P = 17, cusdk__CAM_TYPE_AB_D = 18, cusdk__CAM_TYPE_PELCO_D_JEC = 19, cusdk__CAM_TYPE_PELCO_P_JEC = 20, cusdk__CAM_TYPE_TIANDY = 21, cusdk__CAM_TYPE_G100 = 22, cusdk__CAM_TYPE_368ZT = 23, cusdk__CAM_TYPE_GaoDeTI = 24, cusdk__CAM_TYPE_DaliTI = 25, cusdk__CAM_TYPE_2130_PELCO_P = 26, cusdk__CAM_TYPE_K_PELCO_D = 27, cusdk__CAM_TYPE_JVCTKC676 = 28, cusdk__CAM_TYPE_INFINOVA_PELCO_D = 29, cusdk__CAM_TYPE_PEARMAIN_PELCO_D = 30, cusdk__CAM_TYPE_PEARMAIN_PELCO_P = 31, cusdk__CAM_TYPE_YAAN_PELCO_D = 32, cusdk__CAM_TYPE_LANGKE = 33, cusdk__CAM_TYPE_CAMERA_NUM = 34};
#endif

#ifndef SOAP_TYPE_cusdk__EMapType
#define SOAP_TYPE_cusdk__EMapType (53)
/* cusdk:EMapType */
enum cusdk__EMapType {cusdk__MapTypeInvalid = 0, cusdk__MapTypeGoogle = 1, cusdk__MapTypeJpeg = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EMapElementType
#define SOAP_TYPE_cusdk__EMapElementType (54)
/* cusdk:EMapElementType */
enum cusdk__EMapElementType {cusdk__MapElementTypeInvalid = 0, cusdk__MapEleCommon = 1, cusdk__MapEleMove = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EMapCoordType
#define SOAP_TYPE_cusdk__EMapCoordType (55)
/* cusdk:EMapCoordType */
enum cusdk__EMapCoordType {cusdk__MapCoordTypeInvalid = 0, cusdk__MapCoordEarth = 1, cusdk__MapCoordMar = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EUserOperateType
#define SOAP_TYPE_cusdk__EUserOperateType (56)
/* cusdk:EUserOperateType */
enum cusdk__EUserOperateType {cusdk__UserOpTypeInvalid = 0, cusdk__UserOpTypeLogin = 1, cusdk__UserOpTypeLiveStream = 2, cusdk__UserOpTypePlatformRecord = 3, cusdk__UserOpTypePuRecord = 4, cusdk__UserOpTypeTVWall = 5, cusdk__UserOpTypeCall = 6, cusdk__UserOpTypeUserManage = 7, cusdk__UserOpTypeNRUManage = 8, cusdk__UserOpTypeMapConfig = 9, cusdk__UserOpTypePuConfig = 10, cusdk__UserOpTypePtzCtrl = 11, cusdk__UserOpTypeAlarmConfig = 12, cusdk__UserOpTypeSysParamConfig = 13, cusdk__UserOpTypeOther = 14, cusdk__UserOpTypeRecordStart = 15, cusdk__UserOpTypeRecordStop = 16, cusdk__UserOpTypeRecordPlayback = 17, cusdk__UserOpTypeRecordDownload = 18, cusdk__UserOpTypeCuLocalRecord = 19};
#endif

#ifndef SOAP_TYPE_cusdk__EVideoQuality
#define SOAP_TYPE_cusdk__EVideoQuality (57)
/* cusdk:EVideoQuality */
enum cusdk__EVideoQuality {cusdk__VideoQualityInvalid = 0, cusdk__VIDEO_QUALITY_PRIOR = 1, cusdk__VIDEO_SPEED_PRIOR = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EDeviceLogType
#define SOAP_TYPE_cusdk__EDeviceLogType (58)
/* cusdk:EDeviceLogType */
enum cusdk__EDeviceLogType {cusdk__DeviceLogTypeInvalid = 0, cusdk__DeviceLogTypeOnline = 1, cusdk__DeviceLogTypeOffline = 2, cusdk__DeviceLogTypePuException = 3, cusdk__DeviceLogTypePlatformRecordException = 4, cusdk__DeviceLogTypePuRecordToPlatform = 5, cusdk__DeviceLogTypeOther = 6};
#endif

#ifndef SOAP_TYPE_cusdk__EAlarmLinkActionType
#define SOAP_TYPE_cusdk__EAlarmLinkActionType (59)
/* cusdk:EAlarmLinkActionType */
enum cusdk__EAlarmLinkActionType {cusdk__AlarmLinkActionTypeInvalid = 0, cusdk__AlarmLinkActionPlatformRecord = 1, cusdk__AlarmLinkActionPlayOnTV = 2, cusdk__AlarmLinkActionReadSecond = 3, cusdk__AlarmLinkActionIOOutput = 4, cusdk__AlarmLinkCameraPrePos = 5};
#endif

#ifndef SOAP_TYPE_cusdk__EMediaType
#define SOAP_TYPE_cusdk__EMediaType (60)
/* cusdk:EMediaType */
enum cusdk__EMediaType {cusdk__MediaTypeInvalid = 0, cusdk__MediaTypeVideo = 1, cusdk__MediaTypeAudio = 2, cusdk__MediaTypeData = 3};
#endif

#ifndef SOAP_TYPE_cusdk__ETransChannelType
#define SOAP_TYPE_cusdk__ETransChannelType (61)
/* cusdk:ETransChannelType */
enum cusdk__ETransChannelType {cusdk__TransChannelTypeInvalid = 0, cusdk__TransChannelTypeRTP = 1, cusdk__TransChannelTypeRTCP = 2, cusdk__TransChannelTypeData = 3};
#endif

#ifndef SOAP_TYPE_cusdk__EDeviceEntity
#define SOAP_TYPE_cusdk__EDeviceEntity (62)
/* cusdk:EDeviceEntity */
enum cusdk__EDeviceEntity {cusdk__VSIP_ENTITY_DEVICE = 0, cusdk__VSIP_ENTITY_VIDEODECODER = 1, cusdk__VSIP_ENTITY_VIDEOENCODER = 2, cusdk__VSIP_ENTITY_AUDIODECODER = 3, cusdk__VSIP_ENTITY_AUDIOENCODER = 4, cusdk__VSIP_ENTITY_SERIALPORT = 5, cusdk__VSIP_ENTITY_INPUTPIN = 6, cusdk__VSIP_ENTITY_OUTPUTPIN = 7, cusdk__VSIP_ENTITY_PTZMOTOR = 8, cusdk__VSIP_ENTITY_PTZCONTROL = 9, cusdk__VSIP_ENTITY_ARCHIVER = 10, cusdk__VSIP_ENTITY_VIDEOIN = 12, cusdk__VSIP_ENTITY_ETHERNET = 13, cusdk__VSIP_ENTITY_WIRELESS = 14, cusdk__VSIP_ENTITY_XIANTELE = 15, cusdk__VSIP_ENTITY_VIDIOADPTER = 16, cusdk__VSIP_ENTITY_VIDIOCOMP = 17, cusdk__VSIP_ENTITY_VIDEOSRCPOLL = 18, cusdk__VSIP_ENTITY_AUDIOMIX = 19, cusdk__VSIP_ENTITY_SHADEAREANUM = 20, cusdk__VSIP_ENTITY_DEVPOWERTYPE = 21, cusdk__VSIP_ENTITY_MAXSTREAMSEND = 22, cusdk__VSIP_ENTITY_MAXSTREAMDIRSEND = 23, cusdk__VSIP_ENTITY_ENCRYPT = 24, cusdk__VSIP_ENTITY_RECORDER = 25, cusdk__VSIP_ENTITY_PLAYER = 26, cusdk__VSIP_ENTITY_FILEDOWNLOAD = 27, cusdk__VSIP_ENTITY_VGAOUT = 28, cusdk__VSIP_ENTITY_VIDEOOUT = 29, cusdk__VSIP_ENTITY_OSDCOLOR = 30, cusdk__VSIP_ENTITY_PLATFORMTYPE = 31, cusdk__VSIP_ENTITY_MOTIONDETECTAREANUM = 32, cusdk__VSIP_ENTITY_SNAPSHOTCHANNUM = 33, cusdk__VSIP_ENTITY_SLOTINFONUM = 34, cusdk__VSIP_ENTITY_CBRVBR = 35, cusdk__VSIP_ENTITY_MAXENCBITRATE = 36, cusdk__VSIP_ENTITY_MULTICHAN = 37, cusdk__VSIP_ENTITY_MATRIX = 38, cusdk__VSIP_ENTITY_VIDEOENCSLAVECHANNELNUM = 47, cusdk__VSIP_ENTITY_TRANSPORTDATA = 41, cusdk__VSIP_ENTITY_GPS = 53, cusdk__VSIP_ENTITY_EXTINPUTPIN = 54, cusdk__VSIP_ENTITY_DECODEEXT = 59, cusdk__VSIP_ENTITY_SUPPORT_RESOLUTION_WH = 61, cusdk__VSIP_ENTITY_EXT_OSD = 240, cusdk__VSIP_ENTITY_SUPPORT_TOTAL_PICTURE = 242, cusdk__VSIP_ENTITY_MAX_FRAMERATE = 244, cusdk__VSIP_ENTITY_DEVTYPE = 245, cusdk__VSIP_ENTITY_CTRLTYPE = 246, cusdk__VSIP_ENTITY_MAX_ENC_CHANNEL = 247, cusdk__VSIP_ENTITY_CHANNEL_CAPS = 248, cusdk__VSIP_ENTITY_RECLIST_QRY = 80, cusdk__VSIP_ENTITY_CHANNL_STATE_REPORT = 81, cusdk__VSIPDEF_ENTITY_REPLAY_MAXSPEED = 82, cusdk__VSIPDEF_ENTITY_REPLAY_MAXSPEED_ALLFRAME = 83, cusdk__VSIP_ENTITY_HMDI_COUNT = 96, cusdk__VSIP_ENTITY_HMDI_1_DEC_CHAN_COUNT = 97, cusdk__VSIP_ENTITY_HMDI_2_DEC_CHAN_COUNT = 98, cusdk__VSIP_ENTITY_HMDI_3_DEC_CHAN_COUNT = 99, cusdk__VSIP_ENTITY_HMDI_4_DEC_CHAN_COUNT = 100, cusdk__VsipEntitySmartTab = 151, cusdk__VSIP_ENTITY_SUPPORT_BD_TRACK_MODE = 215, cusdk__VSIP_ENTITY_G100_NOT_SUPPORT_VIDEONAME_SYNC = 101};
#endif

#ifndef SOAP_TYPE_cusdk__EDeviceTransparentChannelType
#define SOAP_TYPE_cusdk__EDeviceTransparentChannelType (63)
/* cusdk:EDeviceTransparentChannelType */
enum cusdk__EDeviceTransparentChannelType {cusdk__TransChnCOMPort = 0, cusdk__TransChnCameraTaskConfig = 1, cusdk__TransChnExtData = 2, cusdk__TransChnUserDef = 3};
#endif

#ifndef SOAP_TYPE_cusdk__EChnStatus
#define SOAP_TYPE_cusdk__EChnStatus (64)
/* cusdk:EChnStatus */
enum cusdk__EChnStatus {cusdk__CHNSTATUS_IDEL = 0, cusdk__CHNSTATUS_ONLINE = 1, cusdk__CHNSTATUS_OFFLINE = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EDomainStatus
#define SOAP_TYPE_cusdk__EDomainStatus (65)
/* cusdk:EDomainStatus */
enum cusdk__EDomainStatus {cusdk__DomainStatusInvalid = 0, cusdk__DomainOnline = 1, cusdk__DomainOffline = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EWaterMarkFontSize
#define SOAP_TYPE_cusdk__EWaterMarkFontSize (69)
/* cusdk:EWaterMarkFontSize */
enum cusdk__EWaterMarkFontSize {cusdk__WaterMarkFontSizeInvalid = 0, cusdk__WaterMarkFontSizeSmall = 1, cusdk__WaterMarkFontSizeNormal = 2, cusdk__WaterMarkFontSizeLarge = 3};
#endif

#ifndef SOAP_TYPE_cusdk__EGBDeviceGroupType
#define SOAP_TYPE_cusdk__EGBDeviceGroupType (72)
/* cusdk:EGBDeviceGroupType */
enum cusdk__EGBDeviceGroupType {cusdk__GBDeviceGroupTypeInvalid = 0, cusdk__GBDeviceGroupTypeCivilcode = 1, cusdk__GBDeviceGroupTypeVitual = 2};
#endif

#ifndef SOAP_TYPE_cusdk__ENATMode
#define SOAP_TYPE_cusdk__ENATMode (180)
/* cusdk:ENATMode */
enum cusdk__ENATMode {cusdk__NATModeAuto = 0, cusdk__NATModeInner = 1, cusdk__NATModeOutside = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EServiceType
#define SOAP_TYPE_cusdk__EServiceType (212)
/* cusdk:EServiceType */
enum cusdk__EServiceType {cusdk__ServiceRecord = 0, cusdk__ServiceAlarmLink = 1, cusdk__ServiceTVWall = 2, cusdk__ServiceMap = 3, cusdk__ServiceLog = 4, cusdk__ServiceConfig = 5};
#endif

#ifndef SOAP_TYPE_cusdk__EDataType
#define SOAP_TYPE_cusdk__EDataType (1243)
/* cusdk:EDataType */
enum cusdk__EDataType {cusdk__DataTypeDevice = 0, cusdk__DataTypeEMap = 1, cusdk__DataTypeAlarmLink = 2, cusdk__DataTypeGBSCatalog = 3, cusdk__DataTypeGBSDevicePush = 4, cusdk__DataDeviceStatistics = 5};
#endif

#ifndef SOAP_TYPE_cusdk__SearchResultType
#define SOAP_TYPE_cusdk__SearchResultType (1301)
/* cusdk:SearchResultType */
enum cusdk__SearchResultType {cusdk__SearchResultInvalid = 0, cusdk__SearchResultDeviceGroup = 1, cusdk__SearchResultDevice = 2, cusdk__SearchResultVideosrc = 3};
#endif

#ifndef SOAP_TYPE_cusdk__TreeViewType
#define SOAP_TYPE_cusdk__TreeViewType (1355)
/* cusdk:TreeViewType */
enum cusdk__TreeViewType {cusdk__TreeViewType_System = 0, cusdk__TreeViewType_User = 1};
#endif

#ifndef SOAP_TYPE_cusdk__EOperationType
#define SOAP_TYPE_cusdk__EOperationType (1370)
/* cusdk:EOperationType */
enum cusdk__EOperationType {cusdk__OpStartPlatRecord = 0, cusdk__OpStopPlatRecord = 1, cusdk__OpStartPuRecord = 2, cusdk__OpStopPuRecrod = 3, cusdk__OpStartWiper = 4, cusdk__OpStopWiper = 5, cusdk__OpStopPuCall = 6, cusdk__OpLoadPreset = 7, cusdk__OpLockRecord = 8};
#endif

#ifndef SOAP_TYPE_cusdk__EDevicePushChnSelectType
#define SOAP_TYPE_cusdk__EDevicePushChnSelectType (1412)
/* cusdk:EDevicePushChnSelectType */
enum cusdk__EDevicePushChnSelectType {cusdk__ModifyDeviceGroupGBID = 0, cusdk__ModifyDeviceGroupPrimary = 1, cusdk__ModifyDeviceGroupSecond = 2, cusdk__ModifyDeviceGroupBoth = 3};
#endif

#ifndef SOAP_TYPE_cusdk__EDevicePushChnModifyType
#define SOAP_TYPE_cusdk__EDevicePushChnModifyType (1418)
/* cusdk:EDevicePushChnModifyType */
enum cusdk__EDevicePushChnModifyType {cusdk__DevicePushChnModifyTypeNil = 0, cusdk__DevicePushChnModifyTypeAddprimary = 1, cusdk__DevicePushChnModifyTypeAddsecond = 2, cusdk__DevicePushChnModifyTypeDelprimary = 3, cusdk__DevicePushChnModifyTypeDelsecond = 4, cusdk__DevicePushChnModifyTypeModifyprimary = 5, cusdk__DevicePushChnModifyTypeModifysecond = 6};
#endif

#ifndef SOAP_TYPE_cusdk__DevicePushErrorType
#define SOAP_TYPE_cusdk__DevicePushErrorType (1452)
/* cusdk:DevicePushErrorType */
enum cusdk__DevicePushErrorType {DevicePushErrorOk = 0, DevicePushErrorPrimaryGBIdRepeat = 1, DevicePushErrorSecondGBIdRepeat = 2};
#endif

#ifndef SOAP_TYPE_cusdk__EOSDState
#define SOAP_TYPE_cusdk__EOSDState (1485)
/* cusdk:EOSDState */
enum cusdk__EOSDState {cusdk__OSDStateInvalid = 0, cusdk__OSDStateDisable = 1, cusdk__OSDStateText = 2};
#endif

#ifndef SOAP_TYPE_cusdk__MoveOperation
#define SOAP_TYPE_cusdk__MoveOperation (1522)
/* cusdk:MoveOperation */
enum cusdk__MoveOperation {cusdk__MoveInvalid = 0, cusdk__InDevice_MoveAfter = 1, cusdk__InDevice_MoveTop = 2, cusdk__InDevice_MoveBottom = 3, cusdk__InGroup_MoveAfter = 4, cusdk__InGroup_MoveTop = 5, cusdk__InGroup_MoveBottom = 6};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_cusdk__UserGroup
#define SOAP_TYPE_cusdk__UserGroup (66)
/* cusdk:UserGroup */
class SOAP_CMAC cusdk__UserGroup
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	std::string creator;	/* required element of type xsd:string */
	enum cusdk__EUserType userType;	/* required element of type cusdk:EUserType */
	std::set<enum cusdk__EUserPri >userPri;	/* optional element of type cusdk:EUserPri */
	std::set<int >userPriV2;	/* optional element of type xsd:int */
	bool maxStreamNumEnable;	/* required element of type xsd:boolean */
	int maxStreamNum;	/* required element of type xsd:int */
	bool waterMarkSupported;	/* required element of type xsd:boolean */
	bool waterMarkEnabled;	/* required element of type xsd:boolean */
	std::string waterMarkFont;	/* required element of type xsd:string */
	int waterMarkFontSize;	/* required element of type xsd:int */
	int waterMarkRotationAngle;	/* required element of type xsd:int */
	int waterMarkColor;	/* required element of type xsd:int */
	int waterMarkTransparent;	/* required element of type xsd:int */
	bool waterMarkTiled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_cusdk__UserGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroup() { cusdk__UserGroup::soap_default(NULL); }
	virtual ~cusdk__UserGroup() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserInfo
#define SOAP_TYPE_cusdk__UserInfo (70)
/* cusdk:UserInfo */
class SOAP_CMAC cusdk__UserInfo
{
public:
	std::string uuid;	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
	std::string userPassword;	/* required element of type xsd:string */
	std::string domainID;	/* required element of type xsd:string */
	enum cusdk__EUserType userType;	/* required element of type cusdk:EUserType */
	std::set<enum cusdk__EUserPri >userPri;	/* optional element of type cusdk:EUserPri */
	std::set<int >userPriV2;	/* optional element of type xsd:int */
	std::string creator;	/* required element of type xsd:string */
	std::string userGroup;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	time_t accountOverdueTime;	/* required element of type xsd:dateTime */
	time_t passwordOverdueTime;	/* required element of type xsd:dateTime */
	bool enable;	/* required element of type xsd:boolean */
	bool allowMultilogin;	/* required element of type xsd:boolean */
	bool passwordExpireEnable;	/* required element of type xsd:boolean */
	int passwordExpire;	/* required element of type xsd:int */
	bool bindIPEnable;	/* required element of type xsd:boolean */
	std::string bindingAddress;	/* required element of type xsd:string */
	bool IsIPAppliedToMobileEnd;	/* required element of type xsd:boolean */
	bool maxStreamNumEnable;	/* required element of type xsd:boolean */
	int maxStreamNum;	/* required element of type xsd:int */
	bool waterMarkSupported;	/* required element of type xsd:boolean */
	bool waterMarkEnabled;	/* required element of type xsd:boolean */
	std::string waterMarkFont;	/* required element of type xsd:string */
	int waterMarkFontSize;	/* required element of type xsd:int */
	int waterMarkRotationAngle;	/* required element of type xsd:int */
	int waterMarkColor;	/* required element of type xsd:int */
	int waterMarkTransparent;	/* required element of type xsd:int */
	bool waterMarkTiled;	/* required element of type xsd:boolean */
	std::string passwordAlgorithm;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_cusdk__UserInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserInfo() { cusdk__UserInfo::soap_default(NULL); }
	virtual ~cusdk__UserInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupInfo
#define SOAP_TYPE_cusdk__DeviceGroupInfo (73)
/* cusdk:DeviceGroupInfo */
class SOAP_CMAC cusdk__DeviceGroupInfo
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string parentId;	/* required element of type xsd:string */
	std::string domainId;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	double fOrderNumber;	/* required element of type xsd:double */
	std::string devTreeId;	/* required element of type xsd:string */
	std::string originalGBId;	/* required element of type xsd:string */
	std::string newGBID;	/* required element of type xsd:string */
	int GBDeviceGroupType;	/* required element of type xsd:int */
	int CreatorType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupInfo() { cusdk__DeviceGroupInfo::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroup
#define SOAP_TYPE_cusdk__DeviceGroup (75)
/* cusdk:DeviceGroup */
class SOAP_CMAC cusdk__DeviceGroup : public cusdk__DeviceGroupInfo
{
public:
	bool hasDevice;	/* required element of type xsd:boolean */
	bool recursiveEmpty;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_cusdk__DeviceGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroup() { cusdk__DeviceGroup::soap_default(NULL); }
	virtual ~cusdk__DeviceGroup() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderChn
#define SOAP_TYPE_cusdk__EncoderChn (76)
/* cusdk:EncoderChn */
class SOAP_CMAC cusdk__EncoderChn
{
public:
	int id;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_cusdk__EncoderChn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderChn() { cusdk__EncoderChn::soap_default(NULL); }
	virtual ~cusdk__EncoderChn() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevChannel
#define SOAP_TYPE_cusdk__DevChannel (77)
/* cusdk:DevChannel */
class SOAP_CMAC cusdk__DevChannel
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int channelId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_cusdk__DevChannel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevChannel() { cusdk__DevChannel::soap_default(NULL); }
	virtual ~cusdk__DevChannel() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrc
#define SOAP_TYPE_cusdk__VideoSrc (78)
/* cusdk:VideoSrc */
class SOAP_CMAC cusdk__VideoSrc
{
public:
	int id;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	int ptzLevel;	/* required element of type xsd:int */
	std::set<enum cusdk__EDevicePri >priList;	/* optional element of type cusdk:EDevicePri */
	std::set<int >priListV2;	/* optional element of type xsd:int */
	double longitude;	/* required element of type xsd:double */
	double latitude;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_cusdk__VideoSrc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrc() { cusdk__VideoSrc::soap_default(NULL); }
	virtual ~cusdk__VideoSrc() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceInfo
#define SOAP_TYPE_cusdk__DeviceInfo (80)
/* cusdk:DeviceInfo */
class SOAP_CMAC cusdk__DeviceInfo
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	std::string domainId;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string deviceAlias;	/* required element of type xsd:string */
	std::string deviceIP;	/* required element of type xsd:string */
	enum cusdk__EDeviceType deviceType;	/* required element of type cusdk:EDeviceType */
	std::string deviceModel;	/* required element of type xsd:string */
	std::vector<enum cusdk__EDeviceCapLabel >deviceCapLabelList;	/* optional element of type cusdk:EDeviceCapLabel */
	std::string manufacturer;	/* required element of type xsd:string */
	int creatorType;	/* required element of type xsd:int */
	std::string description;	/* required element of type xsd:string */
	std::vector<cusdk__VideoSrc >videoSrcList;	/* optional element of type cusdk:VideoSrc */
	std::set<enum cusdk__EDevicePri >priList;	/* optional element of type cusdk:EDevicePri */
	std::set<int >priListV2;	/* optional element of type xsd:int */
	int videoSrcNum;	/* required element of type xsd:int */
	int encodeChnNum;	/* required element of type xsd:int */
	int decodeChnNum;	/* required element of type xsd:int */
	int alarmInputNum;	/* required element of type xsd:int */
	int videoOutputChnNum;	/* required element of type xsd:int */
	std::string deviceExtInfo;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_cusdk__DeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceInfo() { cusdk__DeviceInfo::soap_default(NULL); }
	virtual ~cusdk__DeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupRelation
#define SOAP_TYPE_cusdk__DeviceGroupRelation (83)
/* cusdk:DeviceGroupRelation */
class SOAP_CMAC cusdk__DeviceGroupRelation
{
public:
	std::string devGroupId;	/* required element of type xsd:string */
	std::string devId;	/* required element of type xsd:string */
	std::vector<int >videoSrcIdList;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupRelation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupRelation() { cusdk__DeviceGroupRelation::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupRelation() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AssignVideoSrc
#define SOAP_TYPE_cusdk__AssignVideoSrc (85)
/* cusdk:AssignVideoSrc */
class SOAP_CMAC cusdk__AssignVideoSrc
{
public:
	int vieoSrcId;	/* required element of type xsd:int */
	std::set<int >devPriSet;	/* optional element of type xsd:int */
	int ptzLevel;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_cusdk__AssignVideoSrc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AssignVideoSrc() { cusdk__AssignVideoSrc::soap_default(NULL); }
	virtual ~cusdk__AssignVideoSrc() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AssignDeviceInfo
#define SOAP_TYPE_cusdk__AssignDeviceInfo (86)
/* cusdk:AssignDeviceInfo */
class SOAP_CMAC cusdk__AssignDeviceInfo
{
public:
	std::string devId;	/* required element of type xsd:string */
	std::set<int >devPriSet;	/* optional element of type xsd:int */
	std::vector<cusdk__AssignVideoSrc >videoSrcIdList;	/* optional element of type cusdk:AssignVideoSrc */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_cusdk__AssignDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AssignDeviceInfo() { cusdk__AssignDeviceInfo::soap_default(NULL); }
	virtual ~cusdk__AssignDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AuthorizationDeviceInfo
#define SOAP_TYPE_cusdk__AuthorizationDeviceInfo (88)
/* cusdk:AuthorizationDeviceInfo */
class SOAP_CMAC cusdk__AuthorizationDeviceInfo
{
public:
	std::string userName;	/* required element of type xsd:string */
	cusdk__AssignDeviceInfo devInfo;	/* required element of type cusdk:AssignDeviceInfo */
	std::string description;	/* required element of type xsd:string */
	time_t createTime;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_cusdk__AuthorizationDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AuthorizationDeviceInfo() { cusdk__AuthorizationDeviceInfo::soap_default(NULL); }
	virtual ~cusdk__AuthorizationDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceChannelNameChangeNotify
#define SOAP_TYPE_cusdk__DeviceChannelNameChangeNotify (89)
/* cusdk:DeviceChannelNameChangeNotify */
class SOAP_CMAC cusdk__DeviceChannelNameChangeNotify
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	enum cusdk__EDeviceChannelType chnType;	/* required element of type cusdk:EDeviceChannelType */
	int chnId;	/* required element of type xsd:int */
	std::string chnName;	/* required element of type xsd:string */
	double longitude;	/* required element of type xsd:double */
	double latitude;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_cusdk__DeviceChannelNameChangeNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceChannelNameChangeNotify() { cusdk__DeviceChannelNameChangeNotify::soap_default(NULL); }
	virtual ~cusdk__DeviceChannelNameChangeNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevOnlineNotify
#define SOAP_TYPE_cusdk__DevOnlineNotify (90)
/* cusdk:DevOnlineNotify */
class SOAP_CMAC cusdk__DevOnlineNotify
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	bool online;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_cusdk__DevOnlineNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevOnlineNotify() { cusdk__DevOnlineNotify::soap_default(NULL); }
	virtual ~cusdk__DevOnlineNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PuBaseCapSet
#define SOAP_TYPE_cusdk__PuBaseCapSet (91)
/* cusdk:PuBaseCapSet */
class SOAP_CMAC cusdk__PuBaseCapSet
{
public:
	int videoEncNum;	/* required element of type xsd:int */
	int videoDecNum;	/* required element of type xsd:int */
	int audioEncNum;	/* required element of type xsd:int */
	int audioDecNum;	/* required element of type xsd:int */
	int serialPortNum;	/* required element of type xsd:int */
	int alarmInputChnNum;	/* required element of type xsd:int */
	int alarmOutputChnNum;	/* required element of type xsd:int */
	int videoInPortNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_cusdk__PuBaseCapSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PuBaseCapSet() { cusdk__PuBaseCapSet::soap_default(NULL); }
	virtual ~cusdk__PuBaseCapSet() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PuExtCap
#define SOAP_TYPE_cusdk__PuExtCap (92)
/* cusdk:PuExtCap */
class SOAP_CMAC cusdk__PuExtCap
{
public:
	int id;	/* required element of type xsd:int */
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_cusdk__PuExtCap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PuExtCap() { cusdk__PuExtCap::soap_default(NULL); }
	virtual ~cusdk__PuExtCap() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AlarmInputChnEnable
#define SOAP_TYPE_cusdk__AlarmInputChnEnable (93)
/* cusdk:AlarmInputChnEnable */
class SOAP_CMAC cusdk__AlarmInputChnEnable
{
public:
	int id;	/* required element of type xsd:int */
	bool value;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_cusdk__AlarmInputChnEnable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AlarmInputChnEnable() { cusdk__AlarmInputChnEnable::soap_default(NULL); }
	virtual ~cusdk__AlarmInputChnEnable() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ChannelVideoFormat
#define SOAP_TYPE_cusdk__ChannelVideoFormat (94)
/* cusdk:ChannelVideoFormat */
class SOAP_CMAC cusdk__ChannelVideoFormat
{
public:
	int id;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE_cusdk__ChannelVideoFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ChannelVideoFormat() { cusdk__ChannelVideoFormat::soap_default(NULL); }
	virtual ~cusdk__ChannelVideoFormat() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ChannelVidDynValue
#define SOAP_TYPE_cusdk__ChannelVidDynValue (95)
/* cusdk:ChannelVidDynValue */
class SOAP_CMAC cusdk__ChannelVidDynValue
{
public:
	int id;	/* required element of type xsd:int */
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_cusdk__ChannelVidDynValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ChannelVidDynValue() { cusdk__ChannelVidDynValue::soap_default(NULL); }
	virtual ~cusdk__ChannelVidDynValue() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrcEncoderSet
#define SOAP_TYPE_cusdk__VideoSrcEncoderSet (96)
/* cusdk:VideoSrcEncoderSet */
class SOAP_CMAC cusdk__VideoSrcEncoderSet
{
public:
	int id;	/* required element of type xsd:int */
	std::set<int >value;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE_cusdk__VideoSrcEncoderSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrcEncoderSet() { cusdk__VideoSrcEncoderSet::soap_default(NULL); }
	virtual ~cusdk__VideoSrcEncoderSet() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet
#define SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet (98)
/* cusdk:EncoderAvailableVidSrcSet */
class SOAP_CMAC cusdk__EncoderAvailableVidSrcSet
{
public:
	int id;	/* required element of type xsd:int */
	std::set<int >value;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderAvailableVidSrcSet() { cusdk__EncoderAvailableVidSrcSet::soap_default(NULL); }
	virtual ~cusdk__EncoderAvailableVidSrcSet() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrcCamType
#define SOAP_TYPE_cusdk__VideoSrcCamType (99)
/* cusdk:VideoSrcCamType */
class SOAP_CMAC cusdk__VideoSrcCamType
{
public:
	int id;	/* required element of type xsd:int */
	enum cusdk__ECameraProtocolType camType;	/* required element of type cusdk:ECameraProtocolType */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE_cusdk__VideoSrcCamType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrcCamType() { cusdk__VideoSrcCamType::soap_default(NULL); }
	virtual ~cusdk__VideoSrcCamType() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrcCamID
#define SOAP_TYPE_cusdk__VideoSrcCamID (100)
/* cusdk:VideoSrcCamID */
class SOAP_CMAC cusdk__VideoSrcCamID
{
public:
	int id;	/* required element of type xsd:int */
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE_cusdk__VideoSrcCamID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrcCamID() { cusdk__VideoSrcCamID::soap_default(NULL); }
	virtual ~cusdk__VideoSrcCamID() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderBitrate
#define SOAP_TYPE_cusdk__EncoderBitrate (101)
/* cusdk:EncoderBitrate */
class SOAP_CMAC cusdk__EncoderBitrate
{
public:
	int id;	/* required element of type xsd:int */
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE_cusdk__EncoderBitrate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderBitrate() { cusdk__EncoderBitrate::soap_default(NULL); }
	virtual ~cusdk__EncoderBitrate() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderChnStatus
#define SOAP_TYPE_cusdk__EncoderChnStatus (102)
/* cusdk:EncoderChnStatus */
class SOAP_CMAC cusdk__EncoderChnStatus
{
public:
	int id;	/* required element of type xsd:int */
	int status;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE_cusdk__EncoderChnStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderChnStatus() { cusdk__EncoderChnStatus::soap_default(NULL); }
	virtual ~cusdk__EncoderChnStatus() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderVideoRes
#define SOAP_TYPE_cusdk__EncoderVideoRes (103)
/* cusdk:EncoderVideoRes */
class SOAP_CMAC cusdk__EncoderVideoRes
{
public:
	int id;	/* required element of type xsd:int */
	int width;	/* required element of type xsd:int */
	int height;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE_cusdk__EncoderVideoRes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderVideoRes() { cusdk__EncoderVideoRes::soap_default(NULL); }
	virtual ~cusdk__EncoderVideoRes() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevConfigNotify
#define SOAP_TYPE_cusdk__DevConfigNotify (104)
/* cusdk:DevConfigNotify */
class SOAP_CMAC cusdk__DevConfigNotify
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	std::string devIp;	/* required element of type xsd:string */
	std::string devType;	/* required element of type xsd:string */
	std::string devMode;	/* required element of type xsd:string */
	cusdk__PuBaseCapSet baseCapSet;	/* required element of type cusdk:PuBaseCapSet */
	std::vector<cusdk__PuExtCap >extCapSet;	/* optional element of type cusdk:PuExtCap */
	std::vector<cusdk__AlarmInputChnEnable >alarmInputChnEnable;	/* optional element of type cusdk:AlarmInputChnEnable */
	std::vector<cusdk__ChannelVideoFormat >chnVidFormat;	/* optional element of type cusdk:ChannelVideoFormat */
	std::vector<cusdk__ChannelVidDynValue >chnVidDynValue;	/* optional element of type cusdk:ChannelVidDynValue */
	std::vector<cusdk__VideoSrcEncoderSet >vidSrcChnSet;	/* optional element of type cusdk:VideoSrcEncoderSet */
	std::vector<cusdk__EncoderAvailableVidSrcSet >chnVidSrcSet;	/* optional element of type cusdk:EncoderAvailableVidSrcSet */
	std::vector<cusdk__VideoSrcCamType >camType;	/* optional element of type cusdk:VideoSrcCamType */
	std::vector<cusdk__VideoSrcCamID >camId;	/* optional element of type cusdk:VideoSrcCamID */
	std::vector<cusdk__EncoderBitrate >bitRate;	/* optional element of type cusdk:EncoderBitrate */
	std::vector<cusdk__EncoderChnStatus >chnStatus;	/* optional element of type cusdk:EncoderChnStatus */
	std::vector<cusdk__EncoderVideoRes >chnVideoRes;	/* optional element of type cusdk:EncoderVideoRes */
	int freeLicenceNum;	/* required element of type xsd:int */
	int directTransNum;	/* required element of type xsd:int */
	bool isDecCombined;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 104; } /* = unique id SOAP_TYPE_cusdk__DevConfigNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevConfigNotify() { cusdk__DevConfigNotify::soap_default(NULL); }
	virtual ~cusdk__DevConfigNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VidDecoderToPuChn
#define SOAP_TYPE_cusdk__VidDecoderToPuChn (116)
/* cusdk:VidDecoderToPuChn */
class SOAP_CMAC cusdk__VidDecoderToPuChn
{
public:
	int id;	/* required element of type xsd:int */
	cusdk__DevChannel puChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE_cusdk__VidDecoderToPuChn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VidDecoderToPuChn() { cusdk__VidDecoderToPuChn::soap_default(NULL); }
	virtual ~cusdk__VidDecoderToPuChn() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AudDecoderToCuChn
#define SOAP_TYPE_cusdk__AudDecoderToCuChn (117)
/* cusdk:AudDecoderToCuChn */
class SOAP_CMAC cusdk__AudDecoderToCuChn
{
public:
	int id;	/* required element of type xsd:int */
	cusdk__DevChannel cuChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE_cusdk__AudDecoderToCuChn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AudDecoderToCuChn() { cusdk__AudDecoderToCuChn::soap_default(NULL); }
	virtual ~cusdk__AudDecoderToCuChn() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderStatusInt
#define SOAP_TYPE_cusdk__EncoderStatusInt (118)
/* cusdk:EncoderStatusInt */
class SOAP_CMAC cusdk__EncoderStatusInt
{
public:
	int id;	/* required element of type xsd:int */
	bool value;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE_cusdk__EncoderStatusInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderStatusInt() { cusdk__EncoderStatusInt::soap_default(NULL); }
	virtual ~cusdk__EncoderStatusInt() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__RecordStatus
#define SOAP_TYPE_cusdk__RecordStatus (119)
/* cusdk:RecordStatus */
class SOAP_CMAC cusdk__RecordStatus
{
public:
	int encoderChannelId;	/* required element of type xsd:int */
	enum cusdk__ERecordStatus recordStatus;	/* required element of type cusdk:ERecordStatus */
	int errorCode;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE_cusdk__RecordStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__RecordStatus() { cusdk__RecordStatus::soap_default(NULL); }
	virtual ~cusdk__RecordStatus() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderStatusStr
#define SOAP_TYPE_cusdk__EncoderStatusStr (120)
/* cusdk:EncoderStatusStr */
class SOAP_CMAC cusdk__EncoderStatusStr
{
public:
	int id;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE_cusdk__EncoderStatusStr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderStatusStr() { cusdk__EncoderStatusStr::soap_default(NULL); }
	virtual ~cusdk__EncoderStatusStr() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DecoderStatusStr
#define SOAP_TYPE_cusdk__DecoderStatusStr (121)
/* cusdk:DecoderStatusStr */
class SOAP_CMAC cusdk__DecoderStatusStr
{
public:
	int id;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_cusdk__DecoderStatusStr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DecoderStatusStr() { cusdk__DecoderStatusStr::soap_default(NULL); }
	virtual ~cusdk__DecoderStatusStr() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevServiceStatusNotify
#define SOAP_TYPE_cusdk__DevServiceStatusNotify (122)
/* cusdk:DevServiceStatusNotify */
class SOAP_CMAC cusdk__DevServiceStatusNotify
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	std::vector<cusdk__AudDecoderToCuChn >audioCallSrc;	/* optional element of type cusdk:AudDecoderToCuChn */
	std::vector<cusdk__EncoderStatusInt >isPlatPreRec;	/* optional element of type cusdk:EncoderStatusInt */
	std::vector<cusdk__RecordStatus >platRecStatus;	/* optional element of type cusdk:RecordStatus */
	std::vector<cusdk__EncoderStatusInt >isPuPreRec;	/* optional element of type cusdk:EncoderStatusInt */
	std::vector<cusdk__EncoderStatusInt >isPuRec;	/* optional element of type cusdk:EncoderStatusInt */
	std::vector<cusdk__DecoderStatusStr >decPoll;	/* optional element of type cusdk:DecoderStatusStr */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE_cusdk__DevServiceStatusNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevServiceStatusNotify() { cusdk__DevServiceStatusNotify::soap_default(NULL); }
	virtual ~cusdk__DevServiceStatusNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevAlarmNotify
#define SOAP_TYPE_cusdk__DevAlarmNotify (127)
/* cusdk:DevAlarmNotify */
class SOAP_CMAC cusdk__DevAlarmNotify
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	enum cusdk__EAlarmType alarmType;	/* required element of type cusdk:EAlarmType */
	int alarmTypeV2;	/* required element of type xsd:int */
	int alarmChnId;	/* required element of type xsd:int */
	enum cusdk__EAlarmStatus alarmStatus;	/* required element of type cusdk:EAlarmStatus */
	int detAreaId;	/* required element of type xsd:int */
	time_t time;	/* required element of type xsd:dateTime */
	std::string alarmData;	/* required element of type xsd:string */
	std::string alarmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE_cusdk__DevAlarmNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevAlarmNotify() { cusdk__DevAlarmNotify::soap_default(NULL); }
	virtual ~cusdk__DevAlarmNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlayNotify
#define SOAP_TYPE_cusdk__StopPlayNotify (128)
/* cusdk:StopPlayNotify */
class SOAP_CMAC cusdk__StopPlayNotify
{
public:
	int playId;	/* required element of type xsd:int */
	int errorCode;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE_cusdk__StopPlayNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopPlayNotify() { cusdk__StopPlayNotify::soap_default(NULL); }
	virtual ~cusdk__StopPlayNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__NetworkAddr
#define SOAP_TYPE_cusdk__NetworkAddr (129)
/* cusdk:NetworkAddr */
class SOAP_CMAC cusdk__NetworkAddr
{
public:
	std::string ip;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 129; } /* = unique id SOAP_TYPE_cusdk__NetworkAddr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__NetworkAddr() { cusdk__NetworkAddr::soap_default(NULL); }
	virtual ~cusdk__NetworkAddr() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__NatInfo
#define SOAP_TYPE_cusdk__NatInfo (130)
/* cusdk:NatInfo */
class SOAP_CMAC cusdk__NatInfo
{
public:
	std::string natData;	/* required element of type xsd:string */
	cusdk__NetworkAddr localAddr;	/* required element of type cusdk:NetworkAddr */
	cusdk__NetworkAddr natAddr;	/* required element of type cusdk:NetworkAddr */
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE_cusdk__NatInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__NatInfo() { cusdk__NatInfo::soap_default(NULL); }
	virtual ~cusdk__NatInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MediaNetInfo
#define SOAP_TYPE_cusdk__MediaNetInfo (131)
/* cusdk:MediaNetInfo */
class SOAP_CMAC cusdk__MediaNetInfo
{
public:
	cusdk__NatInfo videoRtpNatInfo;	/* required element of type cusdk:NatInfo */
	cusdk__NatInfo videoRtcpNatInfo;	/* required element of type cusdk:NatInfo */
	cusdk__NatInfo audioRtpNatInfo;	/* required element of type cusdk:NatInfo */
	cusdk__NatInfo audioRtcpNatInfo;	/* required element of type cusdk:NatInfo */
public:
	virtual int soap_type() const { return 131; } /* = unique id SOAP_TYPE_cusdk__MediaNetInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MediaNetInfo() { cusdk__MediaNetInfo::soap_default(NULL); }
	virtual ~cusdk__MediaNetInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MediaFormat
#define SOAP_TYPE_cusdk__MediaFormat (132)
/* cusdk:MediaFormat */
class SOAP_CMAC cusdk__MediaFormat
{
public:
	int payloadType;	/* required element of type xsd:int */
	int encodingType;	/* required element of type xsd:int */
	std::string encodingName;	/* required element of type xsd:string */
	std::string manufacture;	/* required element of type xsd:string */
	std::string mediaStreamType;	/* required element of type xsd:string */
	int bitRateType;	/* required element of type xsd:int */
	int bitRate;	/* required element of type xsd:int */
	int keyframeInterval;	/* required element of type xsd:int */
	int frameRate;	/* required element of type xsd:int */
	int videoWidth;	/* required element of type xsd:int */
	int videoHeight;	/* required element of type xsd:int */
	int clockRate;	/* required element of type xsd:int */
	int samplingRate;	/* required element of type xsd:int */
	int audioChannels;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE_cusdk__MediaFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MediaFormat() { cusdk__MediaFormat::soap_default(NULL); }
	virtual ~cusdk__MediaFormat() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__OrderMediaFormat
#define SOAP_TYPE_cusdk__OrderMediaFormat (133)
/* cusdk:OrderMediaFormat */
class SOAP_CMAC cusdk__OrderMediaFormat
{
public:
	bool needTransMediaFormat;	/* required element of type xsd:boolean */
	enum cusdk__EVideoFormat dstVideoFormat;	/* required element of type cusdk:EVideoFormat */
	enum cusdk__EVideoResolution dstSolution;	/* required element of type cusdk:EVideoResolution */
	int dstFrameRate;	/* required element of type xsd:int */
	int dstBitRate;	/* required element of type xsd:int */
	enum cusdk__EAudioFormat dstAudioFormat;	/* required element of type cusdk:EAudioFormat */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE_cusdk__OrderMediaFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__OrderMediaFormat() { cusdk__OrderMediaFormat::soap_default(NULL); }
	virtual ~cusdk__OrderMediaFormat() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TranscodeMediaFormat
#define SOAP_TYPE_cusdk__TranscodeMediaFormat (134)
/* cusdk:TranscodeMediaFormat */
class SOAP_CMAC cusdk__TranscodeMediaFormat
{
public:
	bool needTranscode;	/* required element of type xsd:boolean */
	enum cusdk__EVideoFormat dstVideoFormat;	/* required element of type cusdk:EVideoFormat */
	enum cusdk__EVideoResolution dstSolution;	/* required element of type cusdk:EVideoResolution */
	int dstFrameRate;	/* required element of type xsd:int */
	int dstBitRate;	/* required element of type xsd:int */
	enum cusdk__EAudioFormat dstAudioFormat;	/* required element of type cusdk:EAudioFormat */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE_cusdk__TranscodeMediaFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TranscodeMediaFormat() { cusdk__TranscodeMediaFormat::soap_default(NULL); }
	virtual ~cusdk__TranscodeMediaFormat() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PartitionInfo
#define SOAP_TYPE_cusdk__PartitionInfo (135)
/* cusdk:PartitionInfo */
class SOAP_CMAC cusdk__PartitionInfo
{
public:
	int diskId;	/* required element of type xsd:int */
	int partitionId;	/* required element of type xsd:int */
	std::string partName;	/* required element of type xsd:string */
	int totalSize;	/* required element of type xsd:int */
	int freeSize;	/* required element of type xsd:int */
	enum cusdk__ERS_PartState partState;	/* required element of type cusdk:ERS-PartState */
	std::string partType;	/* required element of type xsd:string */
	int abnNum;	/* required element of type xsd:int */
	std::string mountPath;	/* required element of type xsd:string */
	int start;	/* required element of type xsd:int */
	int end;	/* required element of type xsd:int */
	int recordNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE_cusdk__PartitionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PartitionInfo() { cusdk__PartitionInfo::soap_default(NULL); }
	virtual ~cusdk__PartitionInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DiskInfo
#define SOAP_TYPE_cusdk__DiskInfo (136)
/* cusdk:DiskInfo */
class SOAP_CMAC cusdk__DiskInfo
{
public:
	int diskId;	/* required element of type xsd:int */
	std::string diskName;	/* required element of type xsd:string */
	int diskSize;	/* required element of type xsd:int */
	int diskAbnNum;	/* required element of type xsd:int */
	enum cusdk__ERS_DiskState diskState;	/* required element of type cusdk:ERS-DiskState */
	std::string diskSource;	/* required element of type xsd:string */
	int cylinders;	/* required element of type xsd:int */
	int heads;	/* required element of type xsd:int */
	int sectors;	/* required element of type xsd:int */
	std::vector<cusdk__PartitionInfo >partitionList;	/* optional element of type cusdk:PartitionInfo */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE_cusdk__DiskInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DiskInfo() { cusdk__DiskInfo::soap_default(NULL); }
	virtual ~cusdk__DiskInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__NruInfo
#define SOAP_TYPE_cusdk__NruInfo (138)
/* cusdk:NruInfo */
class SOAP_CMAC cusdk__NruInfo
{
public:
	std::string nruId;	/* required element of type xsd:string */
	std::string devName;	/* required element of type xsd:string */
	std::string devType;	/* required element of type xsd:string */
	std::string manuFactory;	/* required element of type xsd:string */
	std::string ifName;	/* required element of type xsd:string */
	std::string ipAddr;	/* required element of type xsd:string */
	std::string netMask;	/* required element of type xsd:string */
	std::string gateway;	/* required element of type xsd:string */
	std::string RMSAddr;	/* required element of type xsd:string */
	int maxBandWidthKb;	/* required element of type xsd:int */
	bool online;	/* required element of type xsd:boolean */
	bool used;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE_cusdk__NruInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__NruInfo() { cusdk__NruInfo::soap_default(NULL); }
	virtual ~cusdk__NruInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TimeRange
#define SOAP_TYPE_cusdk__TimeRange (139)
/* cusdk:TimeRange */
class SOAP_CMAC cusdk__TimeRange
{
public:
	time_t startTime;	/* required element of type xsd:dateTime */
	time_t endTime;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE_cusdk__TimeRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TimeRange() { cusdk__TimeRange::soap_default(NULL); }
	virtual ~cusdk__TimeRange() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__RecTimeRange
#define SOAP_TYPE_cusdk__RecTimeRange (140)
/* cusdk:RecTimeRange */
class SOAP_CMAC cusdk__RecTimeRange
{
public:
	enum cusdk__ERecordEventType recEventType;	/* required element of type cusdk:ERecordEventType */
	cusdk__TimeRange timeRange;	/* required element of type cusdk:TimeRange */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE_cusdk__RecTimeRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__RecTimeRange() { cusdk__RecTimeRange::soap_default(NULL); }
	virtual ~cusdk__RecTimeRange() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__RecDuration
#define SOAP_TYPE_cusdk__RecDuration (141)
/* cusdk:RecDuration */
class SOAP_CMAC cusdk__RecDuration
{
public:
	std::string recordDurationId;	/* required element of type xsd:string */
	cusdk__TimeRange durationTimeRange;	/* required element of type cusdk:TimeRange */
	std::vector<cusdk__RecTimeRange >subTimeRangeList;	/* optional element of type cusdk:RecTimeRange */
	std::string recordDomainName;	/* required element of type xsd:string */
	cusdk__DevChannel encoderChn;	/* required element of type cusdk:DevChannel */
	bool locked;	/* required element of type xsd:boolean */
	time_t lockExpireTime;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE_cusdk__RecDuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__RecDuration() { cusdk__RecDuration::soap_default(NULL); }
	virtual ~cusdk__RecDuration() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__RecordPlayDuration
#define SOAP_TYPE_cusdk__RecordPlayDuration (143)
/* cusdk:RecordPlayDuration */
class SOAP_CMAC cusdk__RecordPlayDuration
{
public:
	std::string recordDurationId;	/* required element of type xsd:string */
	enum cusdk__ERecordType recordType;	/* required element of type cusdk:ERecordType */
	cusdk__TimeRange durationTimeRange;	/* required element of type cusdk:TimeRange */
	std::string recordDomainName;	/* required element of type xsd:string */
	cusdk__DevChannel encoderChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE_cusdk__RecordPlayDuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__RecordPlayDuration() { cusdk__RecordPlayDuration::soap_default(NULL); }
	virtual ~cusdk__RecordPlayDuration() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__OnePuChnRecDays
#define SOAP_TYPE_cusdk__OnePuChnRecDays (144)
/* cusdk:OnePuChnRecDays */
class SOAP_CMAC cusdk__OnePuChnRecDays
{
public:
	cusdk__DevChannel puChn;	/* required element of type cusdk:DevChannel */
	cusdk__TimeRange timeRange;	/* required element of type cusdk:TimeRange */
	std::vector<bool >recordStateInDays;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE_cusdk__OnePuChnRecDays */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__OnePuChnRecDays() { cusdk__OnePuChnRecDays::soap_default(NULL); }
	virtual ~cusdk__OnePuChnRecDays() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__RecordPlan
#define SOAP_TYPE_cusdk__RecordPlan (146)
/* cusdk:RecordPlan */
class SOAP_CMAC cusdk__RecordPlan
{
public:
	int prerecordDuration;	/* required element of type xsd:int */
	enum cusdk__ERS_RecMode recordMode;	/* required element of type cusdk:ERS-RecMode */
	std::vector<std::string >planedRecordCronTimeList;	/* optional element of type xsd:string */
	int recordDurationAfterAlarm;	/* required element of type xsd:int */
	int recStorageDuration;	/* required element of type xsd:int */
	bool recDuraionEnabled;	/* required element of type xsd:boolean */
	bool supportSetRecDuration;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE_cusdk__RecordPlan */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__RecordPlan() { cusdk__RecordPlan::soap_default(NULL); }
	virtual ~cusdk__RecordPlan() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVDecoderBind
#define SOAP_TYPE_cusdk__TVDecoderBind (148)
/* cusdk:TVDecoderBind */
class SOAP_CMAC cusdk__TVDecoderBind
{
public:
	int tvId;	/* required element of type xsd:int */
	std::string decoderId;	/* required element of type xsd:string */
	int decoderOutputId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE_cusdk__TVDecoderBind */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVDecoderBind() { cusdk__TVDecoderBind::soap_default(NULL); }
	virtual ~cusdk__TVDecoderBind() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWall
#define SOAP_TYPE_cusdk__TVWall (149)
/* cusdk:TVWall */
class SOAP_CMAC cusdk__TVWall
{
public:
	std::string tvwallId;	/* required element of type xsd:string */
	std::string domainId;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	int tvNum;	/* required element of type xsd:int */
	int tvwallStyle;	/* required element of type xsd:int */
	std::string tvwallCustomStyleData;	/* required element of type xsd:string */
	std::string desc;	/* required element of type xsd:string */
	time_t createTime;	/* required element of type xsd:dateTime */
	std::vector<cusdk__TVDecoderBind >tvDecoderBind;	/* optional element of type cusdk:TVDecoderBind */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE_cusdk__TVWall */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWall() { cusdk__TVWall::soap_default(NULL); }
	virtual ~cusdk__TVWall() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallWindowPollStep
#define SOAP_TYPE_cusdk__TVWallWindowPollStep (151)
/* cusdk:TVWallWindowPollStep */
class SOAP_CMAC cusdk__TVWallWindowPollStep
{
public:
	cusdk__DevChannel encoderChn;	/* required element of type cusdk:DevChannel */
	int duration;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE_cusdk__TVWallWindowPollStep */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallWindowPollStep() { cusdk__TVWallWindowPollStep::soap_default(NULL); }
	virtual ~cusdk__TVWallWindowPollStep() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWALLTVDivScheme
#define SOAP_TYPE_cusdk__TVWALLTVDivScheme (152)
/* cusdk:TVWALLTVDivScheme */
class SOAP_CMAC cusdk__TVWALLTVDivScheme
{
public:
	int divId;	/* required element of type xsd:int */
	std::vector<cusdk__TVWallWindowPollStep >pollSteps;	/* optional element of type cusdk:TVWallWindowPollStep */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE_cusdk__TVWALLTVDivScheme */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWALLTVDivScheme() { cusdk__TVWALLTVDivScheme::soap_default(NULL); }
	virtual ~cusdk__TVWALLTVDivScheme() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallTVScheme
#define SOAP_TYPE_cusdk__TVWallTVScheme (154)
/* cusdk:TVWallTVScheme */
class SOAP_CMAC cusdk__TVWallTVScheme
{
public:
	int tvId;	/* required element of type xsd:int */
	enum cusdk__ETVDivStyle divStyle;	/* required element of type cusdk:ETVDivStyle */
	std::vector<cusdk__TVWALLTVDivScheme >tvWallDivList;	/* optional element of type cusdk:TVWALLTVDivScheme */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE_cusdk__TVWallTVScheme */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallTVScheme() { cusdk__TVWallTVScheme::soap_default(NULL); }
	virtual ~cusdk__TVWallTVScheme() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallScheme
#define SOAP_TYPE_cusdk__TVWallScheme (156)
/* cusdk:TVWallScheme */
class SOAP_CMAC cusdk__TVWallScheme
{
public:
	std::string schemeName;	/* required element of type xsd:string */
	std::string tvWallId;	/* required element of type xsd:string */
	std::vector<cusdk__TVWallTVScheme >tvSchemeList;	/* optional element of type cusdk:TVWallTVScheme */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE_cusdk__TVWallScheme */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallScheme() { cusdk__TVWallScheme::soap_default(NULL); }
	virtual ~cusdk__TVWallScheme() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSchemePollStep
#define SOAP_TYPE_cusdk__TVWallSchemePollStep (158)
/* cusdk:TVWallSchemePollStep */
class SOAP_CMAC cusdk__TVWallSchemePollStep
{
public:
	std::string tvWallSchemeName;	/* required element of type xsd:string */
	int duration;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE_cusdk__TVWallSchemePollStep */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallSchemePollStep() { cusdk__TVWallSchemePollStep::soap_default(NULL); }
	virtual ~cusdk__TVWallSchemePollStep() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallTVDivState
#define SOAP_TYPE_cusdk__TVWallTVDivState (159)
/* cusdk:TVWallTVDivState */
class SOAP_CMAC cusdk__TVWallTVDivState
{
public:
	int divId;	/* required element of type xsd:int */
	enum cusdk__ETVWallPlayMode divPlayMode;	/* required element of type cusdk:ETVWallPlayMode */
	std::string recordPlaySession;	/* required element of type xsd:string */
	cusdk__RecordPlayDuration recordPlayDuration;	/* required element of type cusdk:RecordPlayDuration */
	enum cusdk__EPollStatus pollState;	/* required element of type cusdk:EPollStatus */
	cusdk__DevChannel encoderChn;	/* required element of type cusdk:DevChannel */
	int errorCode;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE_cusdk__TVWallTVDivState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallTVDivState() { cusdk__TVWallTVDivState::soap_default(NULL); }
	virtual ~cusdk__TVWallTVDivState() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallTVState
#define SOAP_TYPE_cusdk__TVWallTVState (160)
/* cusdk:TVWallTVState */
class SOAP_CMAC cusdk__TVWallTVState
{
public:
	int tvId;	/* required element of type xsd:int */
	std::vector<cusdk__TVWallTVDivState >divStateList;	/* optional element of type cusdk:TVWallTVDivState */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE_cusdk__TVWallTVState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallTVState() { cusdk__TVWallTVState::soap_default(NULL); }
	virtual ~cusdk__TVWallTVState() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallStateNotify
#define SOAP_TYPE_cusdk__TVWallStateNotify (162)
/* cusdk:TVWallStateNotify */
class SOAP_CMAC cusdk__TVWallStateNotify
{
public:
	std::string tvWallId;	/* required element of type xsd:string */
	enum cusdk__EPollStatus schemePollState;	/* required element of type cusdk:EPollStatus */
	std::vector<cusdk__TVWallSchemePollStep >pollSteps;	/* optional element of type cusdk:TVWallSchemePollStep */
	cusdk__TVWallScheme curSchemeInfo;	/* required element of type cusdk:TVWallScheme */
	std::vector<cusdk__TVWallTVState >tvStateList;	/* optional element of type cusdk:TVWallTVState */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE_cusdk__TVWallStateNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallStateNotify() { cusdk__TVWallStateNotify::soap_default(NULL); }
	virtual ~cusdk__TVWallStateNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DomainInfo
#define SOAP_TYPE_cusdk__DomainInfo (165)
/* cusdk:DomainInfo */
class SOAP_CMAC cusdk__DomainInfo
{
public:
	std::string domainId;	/* required element of type xsd:string */
	std::string domainName;	/* required element of type xsd:string */
	std::string parentDomainId;	/* required element of type xsd:string */
	int status;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE_cusdk__DomainInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DomainInfo() { cusdk__DomainInfo::soap_default(NULL); }
	virtual ~cusdk__DomainInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TransChannel
#define SOAP_TYPE_cusdk__TransChannel (166)
/* cusdk:TransChannel */
class SOAP_CMAC cusdk__TransChannel
{
public:
	enum cusdk__ETransChannelType transChannelType;	/* required element of type cusdk:ETransChannelType */
	std::string natData;	/* required element of type xsd:string */
	std::vector<cusdk__NetworkAddr >netAddrList;	/* optional element of type cusdk:NetworkAddr */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE_cusdk__TransChannel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TransChannel() { cusdk__TransChannel::soap_default(NULL); }
	virtual ~cusdk__TransChannel() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MediaDescription
#define SOAP_TYPE_cusdk__MediaDescription (168)
/* cusdk:MediaDescription */
class SOAP_CMAC cusdk__MediaDescription
{
public:
	enum cusdk__ETransMode transMode;	/* required element of type cusdk:ETransMode */
	enum cusdk__EMediaType mediaType;	/* required element of type cusdk:EMediaType */
	std::vector<cusdk__TransChannel >transChannelList;	/* optional element of type cusdk:TransChannel */
	std::vector<cusdk__MediaFormat >supportedFormats;	/* optional element of type cusdk:MediaFormat */
	std::vector<enum cusdk__EVideoResolution >supportedResolution;	/* optional element of type cusdk:EVideoResolution */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE_cusdk__MediaDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MediaDescription() { cusdk__MediaDescription::soap_default(NULL); }
	virtual ~cusdk__MediaDescription() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MediaExtInfo
#define SOAP_TYPE_cusdk__MediaExtInfo (172)
/* cusdk:MediaExtInfo */
class SOAP_CMAC cusdk__MediaExtInfo
{
public:
	std::string extInfoName;	/* required element of type xsd:string */
	std::string extInfoValue;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE_cusdk__MediaExtInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MediaExtInfo() { cusdk__MediaExtInfo::soap_default(NULL); }
	virtual ~cusdk__MediaExtInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BaseReq
#define SOAP_TYPE_cusdk__BaseReq (173)
/* cusdk:BaseReq */
class SOAP_CMAC cusdk__BaseReq
{
public:
	std::string session;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE_cusdk__BaseReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BaseReq() { cusdk__BaseReq::soap_default(NULL); }
	virtual ~cusdk__BaseReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DetectServerReq
#define SOAP_TYPE_cusdk__DetectServerReq (174)
/* cusdk:DetectServerReq */
class SOAP_CMAC cusdk__DetectServerReq
{
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE_cusdk__DetectServerReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DetectServerReq() { cusdk__DetectServerReq::soap_default(NULL); }
	virtual ~cusdk__DetectServerReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DetectServerRsp
#define SOAP_TYPE_cusdk__DetectServerRsp (175)
/* cusdk:DetectServerRsp */
class SOAP_CMAC cusdk__DetectServerRsp
{
public:
	std::string domainName;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string cuNatIp;	/* required element of type xsd:string */
	int cuNatPort;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE_cusdk__DetectServerRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DetectServerRsp() { cusdk__DetectServerRsp::soap_default(NULL); }
	virtual ~cusdk__DetectServerRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DetectServer
#define SOAP_TYPE_cusdk__DetectServer (178)
/* cusdk:DetectServer */
struct cusdk__DetectServer
{
public:
	cusdk__DetectServerReq detectReq;	/* required element of type cusdk:DetectServerReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__STUNServerInfo
#define SOAP_TYPE_cusdk__STUNServerInfo (179)
/* cusdk:STUNServerInfo */
class SOAP_CMAC cusdk__STUNServerInfo
{
public:
	std::string ip;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE_cusdk__STUNServerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__STUNServerInfo() { cusdk__STUNServerInfo::soap_default(NULL); }
	virtual ~cusdk__STUNServerInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LoginReq
#define SOAP_TYPE_cusdk__LoginReq (181)
/* cusdk:LoginReq */
class SOAP_CMAC cusdk__LoginReq
{
public:
	std::string userName;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
	std::string cusdkVersion;	/* required element of type xsd:string */
	std::string clientType;	/* required element of type xsd:string */
	bool isSupportNA;	/* required element of type xsd:boolean */
	std::string webCUClientAddr;	/* required element of type xsd:string */
	bool isSupportSecure;	/* required element of type xsd:boolean */
	std::string passwordAlgorithm;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE_cusdk__LoginReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LoginReq() { cusdk__LoginReq::soap_default(NULL); }
	virtual ~cusdk__LoginReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LoginRsp
#define SOAP_TYPE_cusdk__LoginRsp (182)
/* cusdk:LoginRsp */
class SOAP_CMAC cusdk__LoginRsp
{
public:
	std::string cmsVersion;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string cuVersion;	/* required element of type xsd:string */
	std::string cuUpdateUrl;	/* required element of type xsd:string */
	cusdk__STUNServerInfo stunInfo;	/* required element of type cusdk:STUNServerInfo */
	std::string serverDataVersion;	/* required element of type xsd:string */
	int userLockRemainTime;	/* required element of type xsd:int */
	int passwordRemainTime;	/* required element of type xsd:int */
	bool isSecureEnabled;	/* required element of type xsd:boolean */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE_cusdk__LoginRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LoginRsp() { cusdk__LoginRsp::soap_default(NULL); }
	virtual ~cusdk__LoginRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__Login
#define SOAP_TYPE_cusdk__Login (185)
/* cusdk:Login */
struct cusdk__Login
{
public:
	cusdk__LoginReq loginReq;	/* required element of type cusdk:LoginReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__LogoutReq
#define SOAP_TYPE_cusdk__LogoutReq (186)
/* cusdk:LogoutReq */
class SOAP_CMAC cusdk__LogoutReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE_cusdk__LogoutReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LogoutReq() { cusdk__LogoutReq::soap_default(NULL); }
	virtual ~cusdk__LogoutReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LogoutRsp
#define SOAP_TYPE_cusdk__LogoutRsp (187)
/* cusdk:LogoutRsp */
class SOAP_CMAC cusdk__LogoutRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE_cusdk__LogoutRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LogoutRsp() { cusdk__LogoutRsp::soap_default(NULL); }
	virtual ~cusdk__LogoutRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__Logout
#define SOAP_TYPE_cusdk__Logout (190)
/* cusdk:Logout */
struct cusdk__Logout
{
public:
	cusdk__LogoutReq logoutReq;	/* required element of type cusdk:LogoutReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__NotifySubscription
#define SOAP_TYPE_cusdk__NotifySubscription (191)
/* cusdk:NotifySubscription */
class SOAP_CMAC cusdk__NotifySubscription
{
public:
	enum cusdk__ESubscribeNotifyType subscribeNotifyType;	/* required element of type cusdk:ESubscribeNotifyType */
	std::string deviceId;	/* required element of type xsd:string */
	std::set<enum cusdk__EPuSubscribeType >subscribeTypes;	/* optional element of type cusdk:EPuSubscribeType */
	std::string deviceTreeId;	/* required element of type xsd:string */
	std::string deviceGroupId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE_cusdk__NotifySubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__NotifySubscription() { cusdk__NotifySubscription::soap_default(NULL); }
	virtual ~cusdk__NotifySubscription() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SubscribeNotifyReq
#define SOAP_TYPE_cusdk__SubscribeNotifyReq (193)
/* cusdk:SubscribeNotifyReq */
class SOAP_CMAC cusdk__SubscribeNotifyReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__NotifySubscription >subscriptionList;	/* optional element of type cusdk:NotifySubscription */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE_cusdk__SubscribeNotifyReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SubscribeNotifyReq() { cusdk__SubscribeNotifyReq::soap_default(NULL); }
	virtual ~cusdk__SubscribeNotifyReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SubscribeNotifyRsp
#define SOAP_TYPE_cusdk__SubscribeNotifyRsp (195)
/* cusdk:SubscribeNotifyRsp */
class SOAP_CMAC cusdk__SubscribeNotifyRsp
{
public:
	std::vector<cusdk__NotifySubscription >failedList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:NotifySubscription */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE_cusdk__SubscribeNotifyRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SubscribeNotifyRsp() { cusdk__SubscribeNotifyRsp::soap_default(NULL); }
	virtual ~cusdk__SubscribeNotifyRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SubscribeNotify
#define SOAP_TYPE_cusdk__SubscribeNotify (198)
/* cusdk:SubscribeNotify */
struct cusdk__SubscribeNotify
{
public:
	cusdk__SubscribeNotifyReq req;	/* required element of type cusdk:SubscribeNotifyReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UnsubscribeNotifyReq
#define SOAP_TYPE_cusdk__UnsubscribeNotifyReq (199)
/* cusdk:UnsubscribeNotifyReq */
class SOAP_CMAC cusdk__UnsubscribeNotifyReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__NotifySubscription >subscriptionList;	/* optional element of type cusdk:NotifySubscription */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE_cusdk__UnsubscribeNotifyReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnsubscribeNotifyReq() { cusdk__UnsubscribeNotifyReq::soap_default(NULL); }
	virtual ~cusdk__UnsubscribeNotifyReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnsubscribeNotifyRsp
#define SOAP_TYPE_cusdk__UnsubscribeNotifyRsp (200)
/* cusdk:UnsubscribeNotifyRsp */
class SOAP_CMAC cusdk__UnsubscribeNotifyRsp
{
public:
	std::vector<cusdk__NotifySubscription >failedList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:NotifySubscription */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE_cusdk__UnsubscribeNotifyRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnsubscribeNotifyRsp() { cusdk__UnsubscribeNotifyRsp::soap_default(NULL); }
	virtual ~cusdk__UnsubscribeNotifyRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnsubscribeNotify
#define SOAP_TYPE_cusdk__UnsubscribeNotify (203)
/* cusdk:UnsubscribeNotify */
struct cusdk__UnsubscribeNotify
{
public:
	cusdk__UnsubscribeNotifyReq req;	/* required element of type cusdk:UnsubscribeNotifyReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceFullInfo
#define SOAP_TYPE_cusdk__DeviceFullInfo (204)
/* cusdk:DeviceFullInfo */
class SOAP_CMAC cusdk__DeviceFullInfo : public cusdk__DeviceInfo
{
public:
	std::vector<cusdk__DeviceGroupRelation >devGroupToChannel;	/* optional element of type cusdk:DeviceGroupRelation */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE_cusdk__DeviceFullInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceFullInfo() { cusdk__DeviceFullInfo::soap_default(NULL); }
	virtual ~cusdk__DeviceFullInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AlarmLinkAction
#define SOAP_TYPE_cusdk__AlarmLinkAction (206)
/* cusdk:AlarmLinkAction */
class SOAP_CMAC cusdk__AlarmLinkAction
{
public:
	std::vector<enum cusdk__EAlarmLinkActionType >actionType;	/* optional element of type cusdk:EAlarmLinkActionType */
	cusdk__DevChannel encoderChn;	/* required element of type cusdk:DevChannel */
	int camPrePos;	/* required element of type xsd:int */
	std::string tvWallId;	/* required element of type xsd:string */
	int tvId;	/* required element of type xsd:int */
	int tvDivId;	/* required element of type xsd:int */
	int alarmIOOutputChnId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE_cusdk__AlarmLinkAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AlarmLinkAction() { cusdk__AlarmLinkAction::soap_default(NULL); }
	virtual ~cusdk__AlarmLinkAction() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AlarmSource
#define SOAP_TYPE_cusdk__AlarmSource (208)
/* cusdk:AlarmSource */
class SOAP_CMAC cusdk__AlarmSource
{
public:
	std::string alarmDeviceId;	/* required element of type xsd:string */
	int alarmInputChnId;	/* required element of type xsd:int */
	enum cusdk__EAlarmType alarmType;	/* required element of type cusdk:EAlarmType */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE_cusdk__AlarmSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AlarmSource() { cusdk__AlarmSource::soap_default(NULL); }
	virtual ~cusdk__AlarmSource() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AlarmLinkConfig
#define SOAP_TYPE_cusdk__AlarmLinkConfig (209)
/* cusdk:AlarmLinkConfig */
class SOAP_CMAC cusdk__AlarmLinkConfig
{
public:
	cusdk__AlarmSource alarmSource;	/* required element of type cusdk:AlarmSource */
	bool enabled;	/* required element of type xsd:boolean */
	std::vector<std::string >enabledCronTimeList;	/* optional element of type xsd:string */
	std::vector<cusdk__AlarmLinkAction >alarmLinkActionList;	/* optional element of type cusdk:AlarmLinkAction */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE_cusdk__AlarmLinkConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AlarmLinkConfig() { cusdk__AlarmLinkConfig::soap_default(NULL); }
	virtual ~cusdk__AlarmLinkConfig() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ExportFail
#define SOAP_TYPE_cusdk__ExportFail (211)
/* cusdk:ExportFail */
class SOAP_CMAC cusdk__ExportFail
{
public:
	std::string exportFileUrl;	/* required element of type xsd:string */
	int errorCode;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE_cusdk__ExportFail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ExportFail() { cusdk__ExportFail::soap_default(NULL); }
	virtual ~cusdk__ExportFail() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ServiceStatus
#define SOAP_TYPE_cusdk__ServiceStatus (213)
/* cusdk:ServiceStatus */
class SOAP_CMAC cusdk__ServiceStatus
{
public:
	enum cusdk__EServiceType serviceType;	/* required element of type cusdk:EServiceType */
	bool serviceOk;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE_cusdk__ServiceStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ServiceStatus() { cusdk__ServiceStatus::soap_default(NULL); }
	virtual ~cusdk__ServiceStatus() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GPSInfo
#define SOAP_TYPE_cusdk__GPSInfo (214)
/* cusdk:GPSInfo */
class SOAP_CMAC cusdk__GPSInfo
{
public:
	time_t revTime;	/* required element of type xsd:dateTime */
	std::string deviceId;	/* required element of type xsd:string */
	double longitude;	/* required element of type xsd:double */
	double latitude;	/* required element of type xsd:double */
	double marLongitude;	/* required element of type xsd:double */
	double marLatitude;	/* required element of type xsd:double */
	double height;	/* required element of type xsd:double */
	double angle;	/* required element of type xsd:double */
	double speed;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE_cusdk__GPSInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GPSInfo() { cusdk__GPSInfo::soap_default(NULL); }
	virtual ~cusdk__GPSInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TransDataNotify
#define SOAP_TYPE_cusdk__TransDataNotify (215)
/* cusdk:TransDataNotify */
class SOAP_CMAC cusdk__TransDataNotify
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int chnId;	/* required element of type xsd:int */
	int transChnType;	/* required element of type xsd:int */
	int dataMsgType;	/* required element of type xsd:int */
	bool isEnd;	/* required element of type xsd:boolean */
	std::string transDataBase64;	/* required element of type xsd:string */
	std::string dataMsgTypeUserDef;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE_cusdk__TransDataNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TransDataNotify() { cusdk__TransDataNotify::soap_default(NULL); }
	virtual ~cusdk__TransDataNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevicePushProgressNotify
#define SOAP_TYPE_cusdk__DevicePushProgressNotify (216)
/* cusdk:DevicePushProgressNotify */
class SOAP_CMAC cusdk__DevicePushProgressNotify
{
public:
	int pos;	/* required element of type xsd:int */
	std::string errorDsc;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE_cusdk__DevicePushProgressNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevicePushProgressNotify() { cusdk__DevicePushProgressNotify::soap_default(NULL); }
	virtual ~cusdk__DevicePushProgressNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CMSMessageNotify
#define SOAP_TYPE_cusdk__CMSMessageNotify (217)
/* cusdk:CMSMessageNotify */
class SOAP_CMAC cusdk__CMSMessageNotify
{
public:
	time_t messageTime;	/* required element of type xsd:dateTime */
	std::string messageType;	/* required element of type xsd:string */
	std::string messageContent;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE_cusdk__CMSMessageNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CMSMessageNotify() { cusdk__CMSMessageNotify::soap_default(NULL); }
	virtual ~cusdk__CMSMessageNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartEncoderTransNotify
#define SOAP_TYPE_cusdk__StartEncoderTransNotify (218)
/* cusdk:StartEncoderTransNotify */
class SOAP_CMAC cusdk__StartEncoderTransNotify
{
public:
	int encodeChnId;	/* required element of type xsd:int */
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* optional element of type cusdk:MediaDescription */
	std::vector<cusdk__MediaExtInfo >mediaExtInfo;	/* optional element of type cusdk:MediaExtInfo */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE_cusdk__StartEncoderTransNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartEncoderTransNotify() { cusdk__StartEncoderTransNotify::soap_default(NULL); }
	virtual ~cusdk__StartEncoderTransNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupStatNotify
#define SOAP_TYPE_cusdk__DeviceGroupStatNotify (221)
/* cusdk:DeviceGroupStatNotify */
class SOAP_CMAC cusdk__DeviceGroupStatNotify
{
public:
	std::string treeId;	/* required element of type xsd:string */
	std::string groupId;	/* required element of type xsd:string */
	bool recursive;	/* required element of type xsd:boolean */
	int totalNum;	/* required element of type xsd:int */
	int onlineNum;	/* required element of type xsd:int */
	int errorCode;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupStatNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupStatNotify() { cusdk__DeviceGroupStatNotify::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupStatNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNotifyReq
#define SOAP_TYPE_cusdk__GetNotifyReq (222)
/* cusdk:GetNotifyReq */
class SOAP_CMAC cusdk__GetNotifyReq : public cusdk__BaseReq
{
public:
	int timeoutMSec;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE_cusdk__GetNotifyReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetNotifyReq() { cusdk__GetNotifyReq::soap_default(NULL); }
	virtual ~cusdk__GetNotifyReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNotifyRsp
#define SOAP_TYPE_cusdk__GetNotifyRsp (223)
/* cusdk:GetNotifyRsp */
class SOAP_CMAC cusdk__GetNotifyRsp
{
public:
	std::vector<cusdk__DeviceFullInfo >deviceAddNotify;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceFullInfo */
	std::vector<cusdk__AssignDeviceInfo >deviceDelNotify;	/* optional element of type cusdk:AssignDeviceInfo */
	std::vector<cusdk__DeviceFullInfo >deviceModNotify;	/* optional element of type cusdk:DeviceFullInfo */
	std::vector<cusdk__DeviceChannelNameChangeNotify >deviceChannelNameChangeNotify;	/* optional element of type cusdk:DeviceChannelNameChangeNotify */
	std::vector<cusdk__DeviceGroupInfo >deviceGroupAddNotify;	/* optional element of type cusdk:DeviceGroupInfo */
	std::vector<std::string >deviceGroupDelNotify;	/* optional element of type xsd:string */
	std::vector<cusdk__DeviceGroupInfo >deviceGroupModNotify;	/* optional element of type cusdk:DeviceGroupInfo */
	std::vector<cusdk__DevOnlineNotify >devOnlineNotify;	/* optional element of type cusdk:DevOnlineNotify */
	std::vector<cusdk__DevConfigNotify >devConfigNotify;	/* optional element of type cusdk:DevConfigNotify */
	std::vector<cusdk__DevServiceStatusNotify >devServiceStatusNotify;	/* optional element of type cusdk:DevServiceStatusNotify */
	std::vector<cusdk__DevAlarmNotify >devAlarmNotify;	/* optional element of type cusdk:DevAlarmNotify */
	std::vector<cusdk__StopPlayNotify >stopPlayNotify;	/* optional element of type cusdk:StopPlayNotify */
	std::vector<cusdk__TVWallStateNotify >tvWallStateNotify;	/* optional element of type cusdk:TVWallStateNotify */
	std::vector<cusdk__UserInfo >userAddNotify;	/* optional element of type cusdk:UserInfo */
	std::vector<std::string >userDelNotify;	/* optional element of type xsd:string */
	std::vector<cusdk__UserInfo >userModNotify;	/* optional element of type cusdk:UserInfo */
	std::vector<cusdk__UserGroup >userGroupAddNotify;	/* optional element of type cusdk:UserGroup */
	std::vector<std::string >userGroupDelNotify;	/* optional element of type xsd:string */
	std::vector<cusdk__UserGroup >userGroupModNotify;	/* optional element of type cusdk:UserGroup */
	std::vector<cusdk__TVWall >tvWallAddNotify;	/* optional element of type cusdk:TVWall */
	std::vector<std::string >tvWallDelNotify;	/* optional element of type xsd:string */
	std::vector<cusdk__TVWall >tvWallModNotify;	/* optional element of type cusdk:TVWall */
	std::vector<cusdk__DeviceGroupRelation >deviceGroupAddDeviceNotify;	/* optional element of type cusdk:DeviceGroupRelation */
	std::vector<cusdk__DeviceGroupRelation >deviceGroupDelDeviceNotify;	/* optional element of type cusdk:DeviceGroupRelation */
	std::vector<cusdk__AlarmLinkConfig >alarmLinkConfigChangeNotify;	/* optional element of type cusdk:AlarmLinkConfig */
	std::vector<cusdk__STUNServerInfo >stunChangedNotify;	/* optional element of type cusdk:STUNServerInfo */
	std::vector<cusdk__ExportFail >exportFailNotify;	/* optional element of type cusdk:ExportFail */
	std::vector<cusdk__ServiceStatus >serviceStatusNotify;	/* optional element of type cusdk:ServiceStatus */
	std::vector<cusdk__GPSInfo >gpsNotify;	/* optional element of type cusdk:GPSInfo */
	std::vector<cusdk__TransDataNotify >transDataNotify;	/* optional element of type cusdk:TransDataNotify */
	std::vector<cusdk__DevicePushProgressNotify >devPushProgressNotify;	/* optional element of type cusdk:DevicePushProgressNotify */
	std::vector<cusdk__CMSMessageNotify >cmsMessageNotify;	/* optional element of type cusdk:CMSMessageNotify */
	std::vector<cusdk__StartEncoderTransNotify >startEncoderTransNotify;	/* optional element of type cusdk:StartEncoderTransNotify */
	std::vector<cusdk__DeviceGroupStatNotify >deviceGroupStatNotify;	/* optional element of type cusdk:DeviceGroupStatNotify */
	std::vector<int >seqMarks;	/* optional element of type xsd:int */
	bool hasDataLeft;	/* required element of type xsd:boolean */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE_cusdk__GetNotifyRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetNotifyRsp() { cusdk__GetNotifyRsp::soap_default(NULL); }
	virtual ~cusdk__GetNotifyRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNotify
#define SOAP_TYPE_cusdk__GetNotify (250)
/* cusdk:GetNotify */
struct cusdk__GetNotify
{
public:
	cusdk__GetNotifyReq req;	/* required element of type cusdk:GetNotifyReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCUIListReq
#define SOAP_TYPE_cusdk__GetCUIListReq (251)
/* cusdk:GetCUIListReq */
class SOAP_CMAC cusdk__GetCUIListReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 251; } /* = unique id SOAP_TYPE_cusdk__GetCUIListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCUIListReq() { cusdk__GetCUIListReq::soap_default(NULL); }
	virtual ~cusdk__GetCUIListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCUIListRsp
#define SOAP_TYPE_cusdk__GetCUIListRsp (252)
/* cusdk:GetCUIListRsp */
class SOAP_CMAC cusdk__GetCUIListRsp
{
public:
	std::vector<std::string >cuiList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 252; } /* = unique id SOAP_TYPE_cusdk__GetCUIListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCUIListRsp() { cusdk__GetCUIListRsp::soap_default(NULL); }
	virtual ~cusdk__GetCUIListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCUIList
#define SOAP_TYPE_cusdk__GetCUIList (255)
/* cusdk:GetCUIList */
struct cusdk__GetCUIList
{
public:
	cusdk__GetCUIListReq req;	/* required element of type cusdk:GetCUIListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDomainListReq
#define SOAP_TYPE_cusdk__GetDomainListReq (256)
/* cusdk:GetDomainListReq */
class SOAP_CMAC cusdk__GetDomainListReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 256; } /* = unique id SOAP_TYPE_cusdk__GetDomainListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDomainListReq() { cusdk__GetDomainListReq::soap_default(NULL); }
	virtual ~cusdk__GetDomainListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDomainListRsp
#define SOAP_TYPE_cusdk__GetDomainListRsp (257)
/* cusdk:GetDomainListRsp */
class SOAP_CMAC cusdk__GetDomainListRsp
{
public:
	std::vector<cusdk__DomainInfo >domainList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DomainInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 257; } /* = unique id SOAP_TYPE_cusdk__GetDomainListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDomainListRsp() { cusdk__GetDomainListRsp::soap_default(NULL); }
	virtual ~cusdk__GetDomainListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDomainList
#define SOAP_TYPE_cusdk__GetDomainList (261)
/* cusdk:GetDomainList */
struct cusdk__GetDomainList
{
public:
	cusdk__GetDomainListReq req;	/* required element of type cusdk:GetDomainListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupStreamReq
#define SOAP_TYPE_cusdk__SetupStreamReq (262)
/* cusdk:SetupStreamReq */
class SOAP_CMAC cusdk__SetupStreamReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
	std::string devId;	/* required element of type xsd:string */
	int devChnId;	/* required element of type xsd:int */
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* optional element of type cusdk:MediaDescription */
	cusdk__TranscodeMediaFormat transcodeMeidaFormat;	/* required element of type cusdk:TranscodeMediaFormat */
	bool directTrans;	/* required element of type xsd:boolean */
	bool directTransFromDeviceDomain;	/* required element of type xsd:boolean */
	int transMode;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 262; } /* = unique id SOAP_TYPE_cusdk__SetupStreamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetupStreamReq() { cusdk__SetupStreamReq::soap_default(NULL); }
	virtual ~cusdk__SetupStreamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupStreamRsp
#define SOAP_TYPE_cusdk__SetupStreamRsp (263)
/* cusdk:SetupStreamRsp */
class SOAP_CMAC cusdk__SetupStreamRsp
{
public:
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:MediaDescription */
	std::vector<cusdk__MediaExtInfo >mediaExtInfo;	/* optional element of type cusdk:MediaExtInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE_cusdk__SetupStreamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetupStreamRsp() { cusdk__SetupStreamRsp::soap_default(NULL); }
	virtual ~cusdk__SetupStreamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupStream
#define SOAP_TYPE_cusdk__SetupStream (266)
/* cusdk:SetupStream */
struct cusdk__SetupStream
{
public:
	cusdk__SetupStreamReq req;	/* required element of type cusdk:SetupStreamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayStreamReq
#define SOAP_TYPE_cusdk__PlayStreamReq (267)
/* cusdk:PlayStreamReq */
class SOAP_CMAC cusdk__PlayStreamReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 267; } /* = unique id SOAP_TYPE_cusdk__PlayStreamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PlayStreamReq() { cusdk__PlayStreamReq::soap_default(NULL); }
	virtual ~cusdk__PlayStreamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayStreamRsp
#define SOAP_TYPE_cusdk__PlayStreamRsp (268)
/* cusdk:PlayStreamRsp */
class SOAP_CMAC cusdk__PlayStreamRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 268; } /* = unique id SOAP_TYPE_cusdk__PlayStreamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PlayStreamRsp() { cusdk__PlayStreamRsp::soap_default(NULL); }
	virtual ~cusdk__PlayStreamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayStream
#define SOAP_TYPE_cusdk__PlayStream (271)
/* cusdk:PlayStream */
struct cusdk__PlayStream
{
public:
	cusdk__PlayStreamReq req;	/* required element of type cusdk:PlayStreamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopStreamReq
#define SOAP_TYPE_cusdk__StopStreamReq (272)
/* cusdk:StopStreamReq */
class SOAP_CMAC cusdk__StopStreamReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 272; } /* = unique id SOAP_TYPE_cusdk__StopStreamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopStreamReq() { cusdk__StopStreamReq::soap_default(NULL); }
	virtual ~cusdk__StopStreamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopStreamRsp
#define SOAP_TYPE_cusdk__StopStreamRsp (273)
/* cusdk:StopStreamRsp */
class SOAP_CMAC cusdk__StopStreamRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 273; } /* = unique id SOAP_TYPE_cusdk__StopStreamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopStreamRsp() { cusdk__StopStreamRsp::soap_default(NULL); }
	virtual ~cusdk__StopStreamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopStream
#define SOAP_TYPE_cusdk__StopStream (276)
/* cusdk:StopStream */
struct cusdk__StopStream
{
public:
	cusdk__StopStreamReq req;	/* required element of type cusdk:StopStreamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SendKeyFrameReq
#define SOAP_TYPE_cusdk__SendKeyFrameReq (277)
/* cusdk:SendKeyFrameReq */
class SOAP_CMAC cusdk__SendKeyFrameReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
	int encoderChannelId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 277; } /* = unique id SOAP_TYPE_cusdk__SendKeyFrameReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SendKeyFrameReq() { cusdk__SendKeyFrameReq::soap_default(NULL); }
	virtual ~cusdk__SendKeyFrameReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SendKeyFrameRsp
#define SOAP_TYPE_cusdk__SendKeyFrameRsp (278)
/* cusdk:SendKeyFrameRsp */
class SOAP_CMAC cusdk__SendKeyFrameRsp
{
public:
	std::string errorDesc;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 278; } /* = unique id SOAP_TYPE_cusdk__SendKeyFrameRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SendKeyFrameRsp() { cusdk__SendKeyFrameRsp::soap_default(NULL); }
	virtual ~cusdk__SendKeyFrameRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SendKeyFrame
#define SOAP_TYPE_cusdk__SendKeyFrame (281)
/* cusdk:SendKeyFrame */
struct cusdk__SendKeyFrame
{
public:
	cusdk__SendKeyFrameReq req;	/* required element of type cusdk:SendKeyFrameReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzCtrlReq
#define SOAP_TYPE_cusdk__PtzCtrlReq (282)
/* cusdk:PtzCtrlReq */
class SOAP_CMAC cusdk__PtzCtrlReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	enum cusdk__EPtzCmd ptzCmd;	/* required element of type cusdk:EPtzCmd */
	std::vector<int >ptzParam;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 282; } /* = unique id SOAP_TYPE_cusdk__PtzCtrlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzCtrlReq() { cusdk__PtzCtrlReq::soap_default(NULL); }
	virtual ~cusdk__PtzCtrlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzCtrlRsp
#define SOAP_TYPE_cusdk__PtzCtrlRsp (283)
/* cusdk:PtzCtrlRsp */
class SOAP_CMAC cusdk__PtzCtrlRsp
{
public:
	std::string errorDesc;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
	int ptzLevel;	/* required element of type xsd:int */
	time_t beginTime;	/* required element of type xsd:dateTime */
	time_t endTime;	/* required element of type xsd:dateTime */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 283; } /* = unique id SOAP_TYPE_cusdk__PtzCtrlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzCtrlRsp() { cusdk__PtzCtrlRsp::soap_default(NULL); }
	virtual ~cusdk__PtzCtrlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzCtrl
#define SOAP_TYPE_cusdk__PtzCtrl (286)
/* cusdk:PtzCtrl */
struct cusdk__PtzCtrl
{
public:
	cusdk__PtzCtrlReq req;	/* required element of type cusdk:PtzCtrlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzLockReq
#define SOAP_TYPE_cusdk__PtzLockReq (287)
/* cusdk:PtzLockReq */
class SOAP_CMAC cusdk__PtzLockReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	time_t beginTime;	/* required element of type xsd:dateTime */
	time_t endTime;	/* required element of type xsd:dateTime */
	std::string password;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 287; } /* = unique id SOAP_TYPE_cusdk__PtzLockReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzLockReq() { cusdk__PtzLockReq::soap_default(NULL); }
	virtual ~cusdk__PtzLockReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzLockRsp
#define SOAP_TYPE_cusdk__PtzLockRsp (288)
/* cusdk:PtzLockRsp */
class SOAP_CMAC cusdk__PtzLockRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
	int ptzLevel;	/* required element of type xsd:int */
	time_t beginTime;	/* required element of type xsd:dateTime */
	time_t endTime;	/* required element of type xsd:dateTime */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 288; } /* = unique id SOAP_TYPE_cusdk__PtzLockRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzLockRsp() { cusdk__PtzLockRsp::soap_default(NULL); }
	virtual ~cusdk__PtzLockRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzLock
#define SOAP_TYPE_cusdk__PtzLock (291)
/* cusdk:PtzLock */
struct cusdk__PtzLock
{
public:
	cusdk__PtzLockReq req;	/* required element of type cusdk:PtzLockReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzUnlockReq
#define SOAP_TYPE_cusdk__PtzUnlockReq (292)
/* cusdk:PtzUnlockReq */
class SOAP_CMAC cusdk__PtzUnlockReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	std::string password;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 292; } /* = unique id SOAP_TYPE_cusdk__PtzUnlockReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzUnlockReq() { cusdk__PtzUnlockReq::soap_default(NULL); }
	virtual ~cusdk__PtzUnlockReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzUnlockRsp
#define SOAP_TYPE_cusdk__PtzUnlockRsp (293)
/* cusdk:PtzUnlockRsp */
class SOAP_CMAC cusdk__PtzUnlockRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
	int ptzLevel;	/* required element of type xsd:int */
	time_t beginTime;	/* required element of type xsd:dateTime */
	time_t endTime;	/* required element of type xsd:dateTime */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 293; } /* = unique id SOAP_TYPE_cusdk__PtzUnlockRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzUnlockRsp() { cusdk__PtzUnlockRsp::soap_default(NULL); }
	virtual ~cusdk__PtzUnlockRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzUnlock
#define SOAP_TYPE_cusdk__PtzUnlock (296)
/* cusdk:PtzUnlock */
struct cusdk__PtzUnlock
{
public:
	cusdk__PtzUnlockReq req;	/* required element of type cusdk:PtzUnlockReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzUnlockAllReq
#define SOAP_TYPE_cusdk__PtzUnlockAllReq (297)
/* cusdk:PtzUnlockAllReq */
class SOAP_CMAC cusdk__PtzUnlockAllReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 297; } /* = unique id SOAP_TYPE_cusdk__PtzUnlockAllReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzUnlockAllReq() { cusdk__PtzUnlockAllReq::soap_default(NULL); }
	virtual ~cusdk__PtzUnlockAllReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzUnlockAllRsp
#define SOAP_TYPE_cusdk__PtzUnlockAllRsp (298)
/* cusdk:PtzUnlockAllRsp */
class SOAP_CMAC cusdk__PtzUnlockAllRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 298; } /* = unique id SOAP_TYPE_cusdk__PtzUnlockAllRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzUnlockAllRsp() { cusdk__PtzUnlockAllRsp::soap_default(NULL); }
	virtual ~cusdk__PtzUnlockAllRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzUnlockAll
#define SOAP_TYPE_cusdk__PtzUnlockAll (301)
/* cusdk:PtzUnlockAll */
struct cusdk__PtzUnlockAll
{
public:
	cusdk__PtzUnlockAllReq req;	/* required element of type cusdk:PtzUnlockAllReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SendTransDataReq
#define SOAP_TYPE_cusdk__SendTransDataReq (302)
/* cusdk:SendTransDataReq */
class SOAP_CMAC cusdk__SendTransDataReq : public cusdk__BaseReq
{
public:
	enum cusdk__EDeviceTransparentChannelType transChnType;	/* required element of type cusdk:EDeviceTransparentChannelType */
	std::string devId;	/* required element of type xsd:string */
	int channelId;	/* required element of type xsd:int */
	int dataMsgType;	/* required element of type xsd:int */
	std::string base64TransDataReq;	/* required element of type xsd:string */
	std::string dataMsgTypeUserDef;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 302; } /* = unique id SOAP_TYPE_cusdk__SendTransDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SendTransDataReq() { cusdk__SendTransDataReq::soap_default(NULL); }
	virtual ~cusdk__SendTransDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SendTransDataRsp
#define SOAP_TYPE_cusdk__SendTransDataRsp (303)
/* cusdk:SendTransDataRsp */
class SOAP_CMAC cusdk__SendTransDataRsp
{
public:
	int dataMsgType;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string base64TransDataRsp;	/* required element of type xsd:string */
	bool hasNotify;	/* required element of type xsd:boolean */
	std::string errorDesc;	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
	int ptzLevel;	/* required element of type xsd:int */
	time_t beginTime;	/* required element of type xsd:dateTime */
	time_t endTime;	/* required element of type xsd:dateTime */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string dataMsgTypeUserDef;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 303; } /* = unique id SOAP_TYPE_cusdk__SendTransDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SendTransDataRsp() { cusdk__SendTransDataRsp::soap_default(NULL); }
	virtual ~cusdk__SendTransDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SendTransData
#define SOAP_TYPE_cusdk__SendTransData (306)
/* cusdk:SendTransData */
struct cusdk__SendTransData
{
public:
	cusdk__SendTransDataReq req;	/* required element of type cusdk:SendTransDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserInfoReq
#define SOAP_TYPE_cusdk__GetUserInfoReq (307)
/* cusdk:GetUserInfoReq */
class SOAP_CMAC cusdk__GetUserInfoReq : public cusdk__BaseReq
{
public:
	std::string userName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 307; } /* = unique id SOAP_TYPE_cusdk__GetUserInfoReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserInfoReq() { cusdk__GetUserInfoReq::soap_default(NULL); }
	virtual ~cusdk__GetUserInfoReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserInfoRsp
#define SOAP_TYPE_cusdk__GetUserInfoRsp (308)
/* cusdk:GetUserInfoRsp */
class SOAP_CMAC cusdk__GetUserInfoRsp
{
public:
	cusdk__UserInfo userInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:UserInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 308; } /* = unique id SOAP_TYPE_cusdk__GetUserInfoRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserInfoRsp() { cusdk__GetUserInfoRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserInfoRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserInfo
#define SOAP_TYPE_cusdk__GetUserInfo (311)
/* cusdk:GetUserInfo */
struct cusdk__GetUserInfo
{
public:
	cusdk__GetUserInfoReq req;	/* required element of type cusdk:GetUserInfoReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupInfoReq
#define SOAP_TYPE_cusdk__GetUserGroupInfoReq (312)
/* cusdk:GetUserGroupInfoReq */
class SOAP_CMAC cusdk__GetUserGroupInfoReq : public cusdk__BaseReq
{
public:
	std::string userGroupId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE_cusdk__GetUserGroupInfoReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserGroupInfoReq() { cusdk__GetUserGroupInfoReq::soap_default(NULL); }
	virtual ~cusdk__GetUserGroupInfoReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupInfoRsp
#define SOAP_TYPE_cusdk__GetUserGroupInfoRsp (313)
/* cusdk:GetUserGroupInfoRsp */
class SOAP_CMAC cusdk__GetUserGroupInfoRsp
{
public:
	cusdk__UserGroup userGroupInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:UserGroup */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 313; } /* = unique id SOAP_TYPE_cusdk__GetUserGroupInfoRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserGroupInfoRsp() { cusdk__GetUserGroupInfoRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserGroupInfoRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupInfo
#define SOAP_TYPE_cusdk__GetUserGroupInfo (316)
/* cusdk:GetUserGroupInfo */
struct cusdk__GetUserGroupInfo
{
public:
	cusdk__GetUserGroupInfoReq req;	/* required element of type cusdk:GetUserGroupInfoReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDataReq
#define SOAP_TYPE_cusdk__GetUserDataReq (317)
/* cusdk:GetUserDataReq */
class SOAP_CMAC cusdk__GetUserDataReq : public cusdk__BaseReq
{
public:
	std::string key;	/* required element of type xsd:string */
	int dataType;	/* required element of type xsd:int */
	int fragNo;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE_cusdk__GetUserDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDataReq() { cusdk__GetUserDataReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDataRsp
#define SOAP_TYPE_cusdk__GetUserDataRsp (318)
/* cusdk:GetUserDataRsp */
class SOAP_CMAC cusdk__GetUserDataRsp
{
public:
	std::string key;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	int dataType;	/* required element of type xsd:int */
	int fragNo;	/* required element of type xsd:int */
	int allFragNum;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 318; } /* = unique id SOAP_TYPE_cusdk__GetUserDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDataRsp() { cusdk__GetUserDataRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserData
#define SOAP_TYPE_cusdk__GetUserData (321)
/* cusdk:GetUserData */
struct cusdk__GetUserData
{
public:
	cusdk__GetUserDataReq req;	/* required element of type cusdk:GetUserDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetUserDataReq
#define SOAP_TYPE_cusdk__SetUserDataReq (322)
/* cusdk:SetUserDataReq */
class SOAP_CMAC cusdk__SetUserDataReq : public cusdk__BaseReq
{
public:
	std::string key;	/* required element of type xsd:string */
	int dataType;	/* required element of type xsd:int */
	int fragNo;	/* required element of type xsd:int */
	int allFragNum;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE_cusdk__SetUserDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetUserDataReq() { cusdk__SetUserDataReq::soap_default(NULL); }
	virtual ~cusdk__SetUserDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetUserDataRsp
#define SOAP_TYPE_cusdk__SetUserDataRsp (323)
/* cusdk:SetUserDataRsp */
class SOAP_CMAC cusdk__SetUserDataRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 323; } /* = unique id SOAP_TYPE_cusdk__SetUserDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetUserDataRsp() { cusdk__SetUserDataRsp::soap_default(NULL); }
	virtual ~cusdk__SetUserDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetUserData
#define SOAP_TYPE_cusdk__SetUserData (326)
/* cusdk:SetUserData */
struct cusdk__SetUserData
{
public:
	cusdk__SetUserDataReq req;	/* required element of type cusdk:SetUserDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserDataReq
#define SOAP_TYPE_cusdk__DelUserDataReq (327)
/* cusdk:DelUserDataReq */
class SOAP_CMAC cusdk__DelUserDataReq : public cusdk__BaseReq
{
public:
	std::string key;	/* required element of type xsd:string */
	int dataType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE_cusdk__DelUserDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserDataReq() { cusdk__DelUserDataReq::soap_default(NULL); }
	virtual ~cusdk__DelUserDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserDataRsp
#define SOAP_TYPE_cusdk__DelUserDataRsp (328)
/* cusdk:DelUserDataRsp */
class SOAP_CMAC cusdk__DelUserDataRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 328; } /* = unique id SOAP_TYPE_cusdk__DelUserDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserDataRsp() { cusdk__DelUserDataRsp::soap_default(NULL); }
	virtual ~cusdk__DelUserDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserData
#define SOAP_TYPE_cusdk__DelUserData (331)
/* cusdk:DelUserData */
struct cusdk__DelUserData
{
public:
	cusdk__DelUserDataReq req;	/* required element of type cusdk:DelUserDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportDeviceDataReq
#define SOAP_TYPE_cusdk__StartExportDeviceDataReq (332)
/* cusdk:StartExportDeviceDataReq */
class SOAP_CMAC cusdk__StartExportDeviceDataReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE_cusdk__StartExportDeviceDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartExportDeviceDataReq() { cusdk__StartExportDeviceDataReq::soap_default(NULL); }
	virtual ~cusdk__StartExportDeviceDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportDeviceDataRsp
#define SOAP_TYPE_cusdk__StartExportDeviceDataRsp (333)
/* cusdk:StartExportDeviceDataRsp */
class SOAP_CMAC cusdk__StartExportDeviceDataRsp
{
public:
	std::string exportFileUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE_cusdk__StartExportDeviceDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartExportDeviceDataRsp() { cusdk__StartExportDeviceDataRsp::soap_default(NULL); }
	virtual ~cusdk__StartExportDeviceDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportDeviceData
#define SOAP_TYPE_cusdk__StartExportDeviceData (336)
/* cusdk:StartExportDeviceData */
struct cusdk__StartExportDeviceData
{
public:
	cusdk__StartExportDeviceDataReq req;	/* required element of type cusdk:StartExportDeviceDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportDeviceDataReq
#define SOAP_TYPE_cusdk__StopExportDeviceDataReq (337)
/* cusdk:StopExportDeviceDataReq */
class SOAP_CMAC cusdk__StopExportDeviceDataReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE_cusdk__StopExportDeviceDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopExportDeviceDataReq() { cusdk__StopExportDeviceDataReq::soap_default(NULL); }
	virtual ~cusdk__StopExportDeviceDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportDeviceDataRsp
#define SOAP_TYPE_cusdk__StopExportDeviceDataRsp (338)
/* cusdk:StopExportDeviceDataRsp */
class SOAP_CMAC cusdk__StopExportDeviceDataRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE_cusdk__StopExportDeviceDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopExportDeviceDataRsp() { cusdk__StopExportDeviceDataRsp::soap_default(NULL); }
	virtual ~cusdk__StopExportDeviceDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportDeviceData
#define SOAP_TYPE_cusdk__StopExportDeviceData (341)
/* cusdk:StopExportDeviceData */
struct cusdk__StopExportDeviceData
{
public:
	cusdk__StopExportDeviceDataReq req;	/* required element of type cusdk:StopExportDeviceDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq
#define SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq (342)
/* cusdk:GetUserDevGroupByGroupReq */
class SOAP_CMAC cusdk__GetUserDevGroupByGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string parentDevGroupId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
	std::string devTreeId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevGroupByGroupReq() { cusdk__GetUserDevGroupByGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDevGroupByGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp
#define SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp (343)
/* cusdk:GetUserDevGroupByGroupRsp */
class SOAP_CMAC cusdk__GetUserDevGroupByGroupRsp
{
public:
	std::vector<cusdk__DeviceGroup >devGroupList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceGroup */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevGroupByGroupRsp() { cusdk__GetUserDevGroupByGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDevGroupByGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupByGroup
#define SOAP_TYPE_cusdk__GetUserDevGroupByGroup (347)
/* cusdk:GetUserDevGroupByGroup */
struct cusdk__GetUserDevGroupByGroup
{
public:
	cusdk__GetUserDevGroupByGroupReq req;	/* required element of type cusdk:GetUserDevGroupByGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevByGroupReq
#define SOAP_TYPE_cusdk__GetUserDevByGroupReq (348)
/* cusdk:GetUserDevByGroupReq */
class SOAP_CMAC cusdk__GetUserDevByGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string devGroupId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
	std::string devTreeId;	/* required element of type xsd:string */
	std::string beginQueryHint;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE_cusdk__GetUserDevByGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevByGroupReq() { cusdk__GetUserDevByGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDevByGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevByGroupRsp
#define SOAP_TYPE_cusdk__GetUserDevByGroupRsp (349)
/* cusdk:GetUserDevByGroupRsp */
class SOAP_CMAC cusdk__GetUserDevByGroupRsp
{
public:
	std::vector<cusdk__DeviceInfo >devList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceInfo */
	int totalNum;	/* required element of type xsd:int */
	std::string nextQueryHint;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 349; } /* = unique id SOAP_TYPE_cusdk__GetUserDevByGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevByGroupRsp() { cusdk__GetUserDevByGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDevByGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevByGroup
#define SOAP_TYPE_cusdk__GetUserDevByGroup (353)
/* cusdk:GetUserDevByGroup */
struct cusdk__GetUserDevByGroup
{
public:
	cusdk__GetUserDevByGroupReq req;	/* required element of type cusdk:GetUserDevByGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupReq
#define SOAP_TYPE_cusdk__GetUserDevGroupReq (354)
/* cusdk:GetUserDevGroupReq */
class SOAP_CMAC cusdk__GetUserDevGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
	std::string devTreeId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 354; } /* = unique id SOAP_TYPE_cusdk__GetUserDevGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevGroupReq() { cusdk__GetUserDevGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDevGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupRsp
#define SOAP_TYPE_cusdk__GetUserDevGroupRsp (355)
/* cusdk:GetUserDevGroupRsp */
class SOAP_CMAC cusdk__GetUserDevGroupRsp
{
public:
	std::vector<cusdk__DeviceGroup >devGroupList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceGroup */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 355; } /* = unique id SOAP_TYPE_cusdk__GetUserDevGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevGroupRsp() { cusdk__GetUserDevGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDevGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroup
#define SOAP_TYPE_cusdk__GetUserDevGroup (358)
/* cusdk:GetUserDevGroup */
struct cusdk__GetUserDevGroup
{
public:
	cusdk__GetUserDevGroupReq req;	/* required element of type cusdk:GetUserDevGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDomainDevGroupReq
#define SOAP_TYPE_cusdk__GetDomainDevGroupReq (359)
/* cusdk:GetDomainDevGroupReq */
class SOAP_CMAC cusdk__GetDomainDevGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string domainId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 359; } /* = unique id SOAP_TYPE_cusdk__GetDomainDevGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDomainDevGroupReq() { cusdk__GetDomainDevGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetDomainDevGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDomainDevGroupRsp
#define SOAP_TYPE_cusdk__GetDomainDevGroupRsp (360)
/* cusdk:GetDomainDevGroupRsp */
class SOAP_CMAC cusdk__GetDomainDevGroupRsp
{
public:
	std::vector<cusdk__DeviceGroup >devGroupList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceGroup */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 360; } /* = unique id SOAP_TYPE_cusdk__GetDomainDevGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDomainDevGroupRsp() { cusdk__GetDomainDevGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetDomainDevGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDomainDevGroup
#define SOAP_TYPE_cusdk__GetDomainDevGroup (363)
/* cusdk:GetDomainDevGroup */
struct cusdk__GetDomainDevGroup
{
public:
	cusdk__GetDomainDevGroupReq req;	/* required element of type cusdk:GetDomainDevGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevReq
#define SOAP_TYPE_cusdk__GetUserDevReq (364)
/* cusdk:GetUserDevReq */
class SOAP_CMAC cusdk__GetUserDevReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
	std::string devTreeId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 364; } /* = unique id SOAP_TYPE_cusdk__GetUserDevReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevReq() { cusdk__GetUserDevReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDevReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevRsp
#define SOAP_TYPE_cusdk__GetUserDevRsp (365)
/* cusdk:GetUserDevRsp */
class SOAP_CMAC cusdk__GetUserDevRsp
{
public:
	std::vector<cusdk__DeviceInfo >devList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceInfo */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 365; } /* = unique id SOAP_TYPE_cusdk__GetUserDevRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevRsp() { cusdk__GetUserDevRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDevRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDev
#define SOAP_TYPE_cusdk__GetUserDev (368)
/* cusdk:GetUserDev */
struct cusdk__GetUserDev
{
public:
	cusdk__GetUserDevReq req;	/* required element of type cusdk:GetUserDevReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDevByDomainReq
#define SOAP_TYPE_cusdk__GetDevByDomainReq (369)
/* cusdk:GetDevByDomainReq */
class SOAP_CMAC cusdk__GetDevByDomainReq : public cusdk__BaseReq
{
public:
	std::string domainId;	/* required element of type xsd:string */
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 369; } /* = unique id SOAP_TYPE_cusdk__GetDevByDomainReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDevByDomainReq() { cusdk__GetDevByDomainReq::soap_default(NULL); }
	virtual ~cusdk__GetDevByDomainReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDevByDomainRsp
#define SOAP_TYPE_cusdk__GetDevByDomainRsp (370)
/* cusdk:GetDevByDomainRsp */
class SOAP_CMAC cusdk__GetDevByDomainRsp
{
public:
	std::vector<cusdk__DeviceInfo >devList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceInfo */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 370; } /* = unique id SOAP_TYPE_cusdk__GetDevByDomainRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDevByDomainRsp() { cusdk__GetDevByDomainRsp::soap_default(NULL); }
	virtual ~cusdk__GetDevByDomainRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevByDomain
#define SOAP_TYPE_cusdk__GetUserDevByDomain (373)
/* cusdk:GetUserDevByDomain */
struct cusdk__GetUserDevByDomain
{
public:
	cusdk__GetDevByDomainReq req;	/* required element of type cusdk:GetDevByDomainReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq
#define SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq (374)
/* cusdk:GetDeviceGroupDeviceRelationsReq */
class SOAP_CMAC cusdk__GetDeviceGroupDeviceRelationsReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 374; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupDeviceRelationsReq() { cusdk__GetDeviceGroupDeviceRelationsReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupDeviceRelationsReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp
#define SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp (375)
/* cusdk:GetDeviceGroupDeviceRelationsRsp */
class SOAP_CMAC cusdk__GetDeviceGroupDeviceRelationsRsp
{
public:
	std::vector<cusdk__DeviceGroupRelation >devGroupRelationList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceGroupRelation */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 375; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupDeviceRelationsRsp() { cusdk__GetDeviceGroupDeviceRelationsRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupDeviceRelationsRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations
#define SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations (378)
/* cusdk:GetDeviceGroupDeviceRelations */
struct cusdk__GetDeviceGroupDeviceRelations
{
public:
	cusdk__GetDeviceGroupDeviceRelationsReq req;	/* required element of type cusdk:GetDeviceGroupDeviceRelationsReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateDeviceGroupReq
#define SOAP_TYPE_cusdk__CreateDeviceGroupReq (379)
/* cusdk:CreateDeviceGroupReq */
class SOAP_CMAC cusdk__CreateDeviceGroupReq : public cusdk__BaseReq
{
public:
	cusdk__DeviceGroupInfo deviceGroupInfo;	/* required element of type cusdk:DeviceGroupInfo */
public:
	virtual int soap_type() const { return 379; } /* = unique id SOAP_TYPE_cusdk__CreateDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateDeviceGroupReq() { cusdk__CreateDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__CreateDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateDeviceGroupRsp
#define SOAP_TYPE_cusdk__CreateDeviceGroupRsp (380)
/* cusdk:CreateDeviceGroupRsp */
class SOAP_CMAC cusdk__CreateDeviceGroupRsp
{
public:
	std::string deviceGroupId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 380; } /* = unique id SOAP_TYPE_cusdk__CreateDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateDeviceGroupRsp() { cusdk__CreateDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__CreateDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateDeviceGroup
#define SOAP_TYPE_cusdk__CreateDeviceGroup (383)
/* cusdk:CreateDeviceGroup */
struct cusdk__CreateDeviceGroup
{
public:
	cusdk__CreateDeviceGroupReq req;	/* required element of type cusdk:CreateDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelDeviceGroupReq
#define SOAP_TYPE_cusdk__DelDeviceGroupReq (384)
/* cusdk:DelDeviceGroupReq */
class SOAP_CMAC cusdk__DelDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string deviceGroupId;	/* required element of type xsd:string */
	std::string devTreeId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 384; } /* = unique id SOAP_TYPE_cusdk__DelDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelDeviceGroupReq() { cusdk__DelDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__DelDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelDeviceGroupRsp
#define SOAP_TYPE_cusdk__DelDeviceGroupRsp (385)
/* cusdk:DelDeviceGroupRsp */
class SOAP_CMAC cusdk__DelDeviceGroupRsp
{
public:
	std::vector<std::string >conflictedNames;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 385; } /* = unique id SOAP_TYPE_cusdk__DelDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelDeviceGroupRsp() { cusdk__DelDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__DelDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelDeviceGroup
#define SOAP_TYPE_cusdk__DelDeviceGroup (388)
/* cusdk:DelDeviceGroup */
struct cusdk__DelDeviceGroup
{
public:
	cusdk__DelDeviceGroupReq req;	/* required element of type cusdk:DelDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyDeviceGroupReq
#define SOAP_TYPE_cusdk__ModifyDeviceGroupReq (389)
/* cusdk:ModifyDeviceGroupReq */
class SOAP_CMAC cusdk__ModifyDeviceGroupReq : public cusdk__BaseReq
{
public:
	cusdk__DeviceGroupInfo deviceGroupInfo;	/* required element of type cusdk:DeviceGroupInfo */
public:
	virtual int soap_type() const { return 389; } /* = unique id SOAP_TYPE_cusdk__ModifyDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyDeviceGroupReq() { cusdk__ModifyDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__ModifyDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyDeviceGroupRsp
#define SOAP_TYPE_cusdk__ModifyDeviceGroupRsp (390)
/* cusdk:ModifyDeviceGroupRsp */
class SOAP_CMAC cusdk__ModifyDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 390; } /* = unique id SOAP_TYPE_cusdk__ModifyDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyDeviceGroupRsp() { cusdk__ModifyDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyDeviceGroup
#define SOAP_TYPE_cusdk__ModifyDeviceGroup (393)
/* cusdk:ModifyDeviceGroup */
struct cusdk__ModifyDeviceGroup
{
public:
	cusdk__ModifyDeviceGroupReq req;	/* required element of type cusdk:ModifyDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq
#define SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq (394)
/* cusdk:DeviceGroupAddDeviceReq */
class SOAP_CMAC cusdk__DeviceGroupAddDeviceReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__DeviceGroupRelation >relationList;	/* optional element of type cusdk:DeviceGroupRelation */
	std::string srcDevTreeId;	/* required element of type xsd:string */
	std::string dstDevTreeId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 394; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupAddDeviceReq() { cusdk__DeviceGroupAddDeviceReq::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupAddDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp
#define SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp (395)
/* cusdk:DeviceGroupAddDeviceRsp */
class SOAP_CMAC cusdk__DeviceGroupAddDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 395; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupAddDeviceRsp() { cusdk__DeviceGroupAddDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupAddDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupAddDevice
#define SOAP_TYPE_cusdk__DeviceGroupAddDevice (398)
/* cusdk:DeviceGroupAddDevice */
struct cusdk__DeviceGroupAddDevice
{
public:
	cusdk__DeviceGroupAddDeviceReq req;	/* required element of type cusdk:DeviceGroupAddDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupAddGroupReq
#define SOAP_TYPE_cusdk__DeviceGroupAddGroupReq (399)
/* cusdk:DeviceGroupAddGroupReq */
class SOAP_CMAC cusdk__DeviceGroupAddGroupReq : public cusdk__BaseReq
{
public:
	std::string srcGrpId;	/* required element of type xsd:string */
	std::string dstGrpId;	/* required element of type xsd:string */
	std::string srcDevTreeId;	/* required element of type xsd:string */
	std::string dstDevTreeId;	/* required element of type xsd:string */
	bool filterOffline;	/* required element of type xsd:boolean */
	bool filterExist;	/* required element of type xsd:boolean */
	int GBDeviceGroupType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 399; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupAddGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupAddGroupReq() { cusdk__DeviceGroupAddGroupReq::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupAddGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupAddGroupRsp
#define SOAP_TYPE_cusdk__DeviceGroupAddGroupRsp (400)
/* cusdk:DeviceGroupAddGroupRsp */
class SOAP_CMAC cusdk__DeviceGroupAddGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 400; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupAddGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupAddGroupRsp() { cusdk__DeviceGroupAddGroupRsp::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupAddGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupAddGroup
#define SOAP_TYPE_cusdk__DeviceGroupAddGroup (403)
/* cusdk:DeviceGroupAddGroup */
struct cusdk__DeviceGroupAddGroup
{
public:
	cusdk__DeviceGroupAddGroupReq req;	/* required element of type cusdk:DeviceGroupAddGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq
#define SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq (404)
/* cusdk:DeviceGroupDelDeviceReq */
class SOAP_CMAC cusdk__DeviceGroupDelDeviceReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__DeviceGroupRelation >relationList;	/* optional element of type cusdk:DeviceGroupRelation */
	std::string devTreeId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 404; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupDelDeviceReq() { cusdk__DeviceGroupDelDeviceReq::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupDelDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp
#define SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp (405)
/* cusdk:DeviceGroupDelDeviceRsp */
class SOAP_CMAC cusdk__DeviceGroupDelDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 405; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupDelDeviceRsp() { cusdk__DeviceGroupDelDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupDelDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupDelDevice
#define SOAP_TYPE_cusdk__DeviceGroupDelDevice (408)
/* cusdk:DeviceGroupDelDevice */
struct cusdk__DeviceGroupDelDevice
{
public:
	cusdk__DeviceGroupDelDeviceReq req;	/* required element of type cusdk:DeviceGroupDelDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserListReq
#define SOAP_TYPE_cusdk__GetUserListReq (409)
/* cusdk:GetUserListReq */
class SOAP_CMAC cusdk__GetUserListReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 409; } /* = unique id SOAP_TYPE_cusdk__GetUserListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserListReq() { cusdk__GetUserListReq::soap_default(NULL); }
	virtual ~cusdk__GetUserListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserListRsp
#define SOAP_TYPE_cusdk__GetUserListRsp (410)
/* cusdk:GetUserListRsp */
class SOAP_CMAC cusdk__GetUserListRsp
{
public:
	std::vector<cusdk__UserInfo >userInfoList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:UserInfo */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 410; } /* = unique id SOAP_TYPE_cusdk__GetUserListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserListRsp() { cusdk__GetUserListRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserList
#define SOAP_TYPE_cusdk__GetUserList (413)
/* cusdk:GetUserList */
struct cusdk__GetUserList
{
public:
	cusdk__GetUserListReq req;	/* required element of type cusdk:GetUserListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupListReq
#define SOAP_TYPE_cusdk__GetUserGroupListReq (414)
/* cusdk:GetUserGroupListReq */
class SOAP_CMAC cusdk__GetUserGroupListReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 414; } /* = unique id SOAP_TYPE_cusdk__GetUserGroupListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserGroupListReq() { cusdk__GetUserGroupListReq::soap_default(NULL); }
	virtual ~cusdk__GetUserGroupListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupListRsp
#define SOAP_TYPE_cusdk__GetUserGroupListRsp (415)
/* cusdk:GetUserGroupListRsp */
class SOAP_CMAC cusdk__GetUserGroupListRsp
{
public:
	std::vector<cusdk__UserGroup >userGroupList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:UserGroup */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 415; } /* = unique id SOAP_TYPE_cusdk__GetUserGroupListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserGroupListRsp() { cusdk__GetUserGroupListRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserGroupListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupList
#define SOAP_TYPE_cusdk__GetUserGroupList (418)
/* cusdk:GetUserGroupList */
struct cusdk__GetUserGroupList
{
public:
	cusdk__GetUserGroupListReq req;	/* required element of type cusdk:GetUserGroupListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserGroupReq
#define SOAP_TYPE_cusdk__CreateUserGroupReq (419)
/* cusdk:CreateUserGroupReq */
class SOAP_CMAC cusdk__CreateUserGroupReq : public cusdk__BaseReq
{
public:
	cusdk__UserGroup userGroupInfo;	/* required element of type cusdk:UserGroup */
public:
	virtual int soap_type() const { return 419; } /* = unique id SOAP_TYPE_cusdk__CreateUserGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateUserGroupReq() { cusdk__CreateUserGroupReq::soap_default(NULL); }
	virtual ~cusdk__CreateUserGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserGroupRsp
#define SOAP_TYPE_cusdk__CreateUserGroupRsp (420)
/* cusdk:CreateUserGroupRsp */
class SOAP_CMAC cusdk__CreateUserGroupRsp
{
public:
	std::string userGroupId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 420; } /* = unique id SOAP_TYPE_cusdk__CreateUserGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateUserGroupRsp() { cusdk__CreateUserGroupRsp::soap_default(NULL); }
	virtual ~cusdk__CreateUserGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserGroup
#define SOAP_TYPE_cusdk__CreateUserGroup (423)
/* cusdk:CreateUserGroup */
struct cusdk__CreateUserGroup
{
public:
	cusdk__CreateUserGroupReq req;	/* required element of type cusdk:CreateUserGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserGroupReq
#define SOAP_TYPE_cusdk__DelUserGroupReq (424)
/* cusdk:DelUserGroupReq */
class SOAP_CMAC cusdk__DelUserGroupReq : public cusdk__BaseReq
{
public:
	std::string userGroupId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 424; } /* = unique id SOAP_TYPE_cusdk__DelUserGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserGroupReq() { cusdk__DelUserGroupReq::soap_default(NULL); }
	virtual ~cusdk__DelUserGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserGroupRsp
#define SOAP_TYPE_cusdk__DelUserGroupRsp (425)
/* cusdk:DelUserGroupRsp */
class SOAP_CMAC cusdk__DelUserGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 425; } /* = unique id SOAP_TYPE_cusdk__DelUserGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserGroupRsp() { cusdk__DelUserGroupRsp::soap_default(NULL); }
	virtual ~cusdk__DelUserGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserGroup
#define SOAP_TYPE_cusdk__DelUserGroup (428)
/* cusdk:DelUserGroup */
struct cusdk__DelUserGroup
{
public:
	cusdk__DelUserGroupReq req;	/* required element of type cusdk:DelUserGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserGroupReq
#define SOAP_TYPE_cusdk__ModifyUserGroupReq (429)
/* cusdk:ModifyUserGroupReq */
class SOAP_CMAC cusdk__ModifyUserGroupReq : public cusdk__BaseReq
{
public:
	cusdk__UserGroup userGroupInfo;	/* required element of type cusdk:UserGroup */
public:
	virtual int soap_type() const { return 429; } /* = unique id SOAP_TYPE_cusdk__ModifyUserGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyUserGroupReq() { cusdk__ModifyUserGroupReq::soap_default(NULL); }
	virtual ~cusdk__ModifyUserGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserGroupRsp
#define SOAP_TYPE_cusdk__ModifyUserGroupRsp (430)
/* cusdk:ModifyUserGroupRsp */
class SOAP_CMAC cusdk__ModifyUserGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 430; } /* = unique id SOAP_TYPE_cusdk__ModifyUserGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyUserGroupRsp() { cusdk__ModifyUserGroupRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyUserGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserGroup
#define SOAP_TYPE_cusdk__ModifyUserGroup (433)
/* cusdk:ModifyUserGroup */
struct cusdk__ModifyUserGroup
{
public:
	cusdk__ModifyUserGroupReq req;	/* required element of type cusdk:ModifyUserGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserReq
#define SOAP_TYPE_cusdk__CreateUserReq (434)
/* cusdk:CreateUserReq */
class SOAP_CMAC cusdk__CreateUserReq : public cusdk__BaseReq
{
public:
	cusdk__UserInfo userInfo;	/* required element of type cusdk:UserInfo */
public:
	virtual int soap_type() const { return 434; } /* = unique id SOAP_TYPE_cusdk__CreateUserReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateUserReq() { cusdk__CreateUserReq::soap_default(NULL); }
	virtual ~cusdk__CreateUserReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserRsp
#define SOAP_TYPE_cusdk__CreateUserRsp (435)
/* cusdk:CreateUserRsp */
class SOAP_CMAC cusdk__CreateUserRsp
{
public:
	std::string userId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 435; } /* = unique id SOAP_TYPE_cusdk__CreateUserRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateUserRsp() { cusdk__CreateUserRsp::soap_default(NULL); }
	virtual ~cusdk__CreateUserRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUser
#define SOAP_TYPE_cusdk__CreateUser (438)
/* cusdk:CreateUser */
struct cusdk__CreateUser
{
public:
	cusdk__CreateUserReq req;	/* required element of type cusdk:CreateUserReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserReq
#define SOAP_TYPE_cusdk__DelUserReq (439)
/* cusdk:DelUserReq */
class SOAP_CMAC cusdk__DelUserReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 439; } /* = unique id SOAP_TYPE_cusdk__DelUserReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserReq() { cusdk__DelUserReq::soap_default(NULL); }
	virtual ~cusdk__DelUserReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserRsp
#define SOAP_TYPE_cusdk__DelUserRsp (440)
/* cusdk:DelUserRsp */
class SOAP_CMAC cusdk__DelUserRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 440; } /* = unique id SOAP_TYPE_cusdk__DelUserRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserRsp() { cusdk__DelUserRsp::soap_default(NULL); }
	virtual ~cusdk__DelUserRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUser
#define SOAP_TYPE_cusdk__DelUser (443)
/* cusdk:DelUser */
struct cusdk__DelUser
{
public:
	cusdk__DelUserReq req;	/* required element of type cusdk:DelUserReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserReq
#define SOAP_TYPE_cusdk__ModifyUserReq (444)
/* cusdk:ModifyUserReq */
class SOAP_CMAC cusdk__ModifyUserReq : public cusdk__BaseReq
{
public:
	cusdk__UserInfo userInfo;	/* required element of type cusdk:UserInfo */
public:
	virtual int soap_type() const { return 444; } /* = unique id SOAP_TYPE_cusdk__ModifyUserReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyUserReq() { cusdk__ModifyUserReq::soap_default(NULL); }
	virtual ~cusdk__ModifyUserReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserRsp
#define SOAP_TYPE_cusdk__ModifyUserRsp (445)
/* cusdk:ModifyUserRsp */
class SOAP_CMAC cusdk__ModifyUserRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 445; } /* = unique id SOAP_TYPE_cusdk__ModifyUserRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyUserRsp() { cusdk__ModifyUserRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyUserRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUser
#define SOAP_TYPE_cusdk__ModifyUser (448)
/* cusdk:ModifyUser */
struct cusdk__ModifyUser
{
public:
	cusdk__ModifyUserReq req;	/* required element of type cusdk:ModifyUserReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ChangePasswordReq
#define SOAP_TYPE_cusdk__ChangePasswordReq (449)
/* cusdk:ChangePasswordReq */
class SOAP_CMAC cusdk__ChangePasswordReq : public cusdk__BaseReq
{
public:
	std::string oldPassword;	/* required element of type xsd:string */
	std::string newPassword;	/* required element of type xsd:string */
	time_t passwordOverdueTime;	/* required element of type xsd:dateTime */
	std::string passwordAlgorithm;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 449; } /* = unique id SOAP_TYPE_cusdk__ChangePasswordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ChangePasswordReq() { cusdk__ChangePasswordReq::soap_default(NULL); }
	virtual ~cusdk__ChangePasswordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ChangePasswordRsp
#define SOAP_TYPE_cusdk__ChangePasswordRsp (450)
/* cusdk:ChangePasswordRsp */
class SOAP_CMAC cusdk__ChangePasswordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 450; } /* = unique id SOAP_TYPE_cusdk__ChangePasswordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ChangePasswordRsp() { cusdk__ChangePasswordRsp::soap_default(NULL); }
	virtual ~cusdk__ChangePasswordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ChangePassword
#define SOAP_TYPE_cusdk__ChangePassword (453)
/* cusdk:ChangePassword */
struct cusdk__ChangePassword
{
public:
	cusdk__ChangePasswordReq req;	/* required element of type cusdk:ChangePasswordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGetDeviceByGroupReq
#define SOAP_TYPE_cusdk__UserGetDeviceByGroupReq (454)
/* cusdk:UserGetDeviceByGroupReq */
class SOAP_CMAC cusdk__UserGetDeviceByGroupReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::string deviceGroupId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 454; } /* = unique id SOAP_TYPE_cusdk__UserGetDeviceByGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGetDeviceByGroupReq() { cusdk__UserGetDeviceByGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserGetDeviceByGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp
#define SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp (455)
/* cusdk:UserGetDeviceByGroupRsp */
class SOAP_CMAC cusdk__UserGetDeviceByGroupRsp
{
public:
	std::vector<cusdk__AssignDeviceInfo >deviceList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:AssignDeviceInfo */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 455; } /* = unique id SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGetDeviceByGroupRsp() { cusdk__UserGetDeviceByGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserGetDeviceByGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGetDeviceByGroup
#define SOAP_TYPE_cusdk__UserGetDeviceByGroup (458)
/* cusdk:UserGetDeviceByGroup */
struct cusdk__UserGetDeviceByGroup
{
public:
	cusdk__UserGetDeviceByGroupReq req;	/* required element of type cusdk:UserGetDeviceByGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddDeviceReq
#define SOAP_TYPE_cusdk__UserAddDeviceReq (459)
/* cusdk:UserAddDeviceReq */
class SOAP_CMAC cusdk__UserAddDeviceReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::vector<cusdk__AssignDeviceInfo >deviceList;	/* optional element of type cusdk:AssignDeviceInfo */
public:
	virtual int soap_type() const { return 459; } /* = unique id SOAP_TYPE_cusdk__UserAddDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserAddDeviceReq() { cusdk__UserAddDeviceReq::soap_default(NULL); }
	virtual ~cusdk__UserAddDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddDeviceRsp
#define SOAP_TYPE_cusdk__UserAddDeviceRsp (460)
/* cusdk:UserAddDeviceRsp */
class SOAP_CMAC cusdk__UserAddDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 460; } /* = unique id SOAP_TYPE_cusdk__UserAddDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserAddDeviceRsp() { cusdk__UserAddDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__UserAddDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddDevice
#define SOAP_TYPE_cusdk__UserAddDevice (463)
/* cusdk:UserAddDevice */
struct cusdk__UserAddDevice
{
public:
	cusdk__UserAddDeviceReq req;	/* required element of type cusdk:UserAddDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelDeviceReq
#define SOAP_TYPE_cusdk__UserDelDeviceReq (464)
/* cusdk:UserDelDeviceReq */
class SOAP_CMAC cusdk__UserDelDeviceReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::vector<cusdk__AssignDeviceInfo >deviceList;	/* optional element of type cusdk:AssignDeviceInfo */
public:
	virtual int soap_type() const { return 464; } /* = unique id SOAP_TYPE_cusdk__UserDelDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserDelDeviceReq() { cusdk__UserDelDeviceReq::soap_default(NULL); }
	virtual ~cusdk__UserDelDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelDeviceRsp
#define SOAP_TYPE_cusdk__UserDelDeviceRsp (465)
/* cusdk:UserDelDeviceRsp */
class SOAP_CMAC cusdk__UserDelDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 465; } /* = unique id SOAP_TYPE_cusdk__UserDelDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserDelDeviceRsp() { cusdk__UserDelDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__UserDelDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelDevice
#define SOAP_TYPE_cusdk__UserDelDevice (468)
/* cusdk:UserDelDevice */
struct cusdk__UserDelDevice
{
public:
	cusdk__UserDelDeviceReq req;	/* required element of type cusdk:UserDelDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGetTVWallReq
#define SOAP_TYPE_cusdk__UserGetTVWallReq (469)
/* cusdk:UserGetTVWallReq */
class SOAP_CMAC cusdk__UserGetTVWallReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 469; } /* = unique id SOAP_TYPE_cusdk__UserGetTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGetTVWallReq() { cusdk__UserGetTVWallReq::soap_default(NULL); }
	virtual ~cusdk__UserGetTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGetTVWallRsp
#define SOAP_TYPE_cusdk__UserGetTVWallRsp (470)
/* cusdk:UserGetTVWallRsp */
class SOAP_CMAC cusdk__UserGetTVWallRsp
{
public:
	std::vector<std::string >tvWallIdList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 470; } /* = unique id SOAP_TYPE_cusdk__UserGetTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGetTVWallRsp() { cusdk__UserGetTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__UserGetTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGetTVWall
#define SOAP_TYPE_cusdk__UserGetTVWall (473)
/* cusdk:UserGetTVWall */
struct cusdk__UserGetTVWall
{
public:
	cusdk__UserGetTVWallReq req;	/* required element of type cusdk:UserGetTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddTVWallReq
#define SOAP_TYPE_cusdk__UserAddTVWallReq (474)
/* cusdk:UserAddTVWallReq */
class SOAP_CMAC cusdk__UserAddTVWallReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::vector<std::string >tvwallList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 474; } /* = unique id SOAP_TYPE_cusdk__UserAddTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserAddTVWallReq() { cusdk__UserAddTVWallReq::soap_default(NULL); }
	virtual ~cusdk__UserAddTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddTVWallRsp
#define SOAP_TYPE_cusdk__UserAddTVWallRsp (475)
/* cusdk:UserAddTVWallRsp */
class SOAP_CMAC cusdk__UserAddTVWallRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 475; } /* = unique id SOAP_TYPE_cusdk__UserAddTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserAddTVWallRsp() { cusdk__UserAddTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__UserAddTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddTVWall
#define SOAP_TYPE_cusdk__UserAddTVWall (478)
/* cusdk:UserAddTVWall */
struct cusdk__UserAddTVWall
{
public:
	cusdk__UserAddTVWallReq req;	/* required element of type cusdk:UserAddTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelTVWallReq
#define SOAP_TYPE_cusdk__UserDelTVWallReq (479)
/* cusdk:UserDelTVWallReq */
class SOAP_CMAC cusdk__UserDelTVWallReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::string tvwallId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 479; } /* = unique id SOAP_TYPE_cusdk__UserDelTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserDelTVWallReq() { cusdk__UserDelTVWallReq::soap_default(NULL); }
	virtual ~cusdk__UserDelTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelTVWallRsp
#define SOAP_TYPE_cusdk__UserDelTVWallRsp (480)
/* cusdk:UserDelTVWallRsp */
class SOAP_CMAC cusdk__UserDelTVWallRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 480; } /* = unique id SOAP_TYPE_cusdk__UserDelTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserDelTVWallRsp() { cusdk__UserDelTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__UserDelTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelTVWall
#define SOAP_TYPE_cusdk__UserDelTVWall (483)
/* cusdk:UserDelTVWall */
struct cusdk__UserDelTVWall
{
public:
	cusdk__UserDelTVWallReq req;	/* required element of type cusdk:UserDelTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserModifyDeviceReq
#define SOAP_TYPE_cusdk__UserModifyDeviceReq (484)
/* cusdk:UserModifyDeviceReq */
class SOAP_CMAC cusdk__UserModifyDeviceReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::vector<cusdk__AssignDeviceInfo >deviceList;	/* optional element of type cusdk:AssignDeviceInfo */
public:
	virtual int soap_type() const { return 484; } /* = unique id SOAP_TYPE_cusdk__UserModifyDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserModifyDeviceReq() { cusdk__UserModifyDeviceReq::soap_default(NULL); }
	virtual ~cusdk__UserModifyDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserModifyDeviceRsp
#define SOAP_TYPE_cusdk__UserModifyDeviceRsp (485)
/* cusdk:UserModifyDeviceRsp */
class SOAP_CMAC cusdk__UserModifyDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 485; } /* = unique id SOAP_TYPE_cusdk__UserModifyDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserModifyDeviceRsp() { cusdk__UserModifyDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__UserModifyDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserModifyDevice
#define SOAP_TYPE_cusdk__UserModifyDevice (488)
/* cusdk:UserModifyDevice */
struct cusdk__UserModifyDevice
{
public:
	cusdk__UserModifyDeviceReq req;	/* required element of type cusdk:UserModifyDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAuthorizationDeviceReq
#define SOAP_TYPE_cusdk__GetAuthorizationDeviceReq (489)
/* cusdk:GetAuthorizationDeviceReq */
class SOAP_CMAC cusdk__GetAuthorizationDeviceReq : public cusdk__BaseReq
{
public:
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 489; } /* = unique id SOAP_TYPE_cusdk__GetAuthorizationDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAuthorizationDeviceReq() { cusdk__GetAuthorizationDeviceReq::soap_default(NULL); }
	virtual ~cusdk__GetAuthorizationDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp
#define SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp (490)
/* cusdk:GetAuthorizationDeviceRsp */
class SOAP_CMAC cusdk__GetAuthorizationDeviceRsp
{
public:
	std::vector<cusdk__AuthorizationDeviceInfo >authorizedDeviceList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:AuthorizationDeviceInfo */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 490; } /* = unique id SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAuthorizationDeviceRsp() { cusdk__GetAuthorizationDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__GetAuthorizationDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAuthorizationDevice
#define SOAP_TYPE_cusdk__GetAuthorizationDevice (494)
/* cusdk:GetAuthorizationDevice */
struct cusdk__GetAuthorizationDevice
{
public:
	cusdk__GetAuthorizationDeviceReq req;	/* required element of type cusdk:GetAuthorizationDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__AddAuthorizationDeviceReq
#define SOAP_TYPE_cusdk__AddAuthorizationDeviceReq (495)
/* cusdk:AddAuthorizationDeviceReq */
class SOAP_CMAC cusdk__AddAuthorizationDeviceReq : public cusdk__BaseReq
{
public:
	cusdk__AuthorizationDeviceInfo authorizedDev;	/* required element of type cusdk:AuthorizationDeviceInfo */
public:
	virtual int soap_type() const { return 495; } /* = unique id SOAP_TYPE_cusdk__AddAuthorizationDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AddAuthorizationDeviceReq() { cusdk__AddAuthorizationDeviceReq::soap_default(NULL); }
	virtual ~cusdk__AddAuthorizationDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp
#define SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp (496)
/* cusdk:AddAuthorizationDeviceRsp */
class SOAP_CMAC cusdk__AddAuthorizationDeviceRsp
{
public:
	time_t createTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 496; } /* = unique id SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AddAuthorizationDeviceRsp() { cusdk__AddAuthorizationDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__AddAuthorizationDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AddAuthorizationDevice
#define SOAP_TYPE_cusdk__AddAuthorizationDevice (499)
/* cusdk:AddAuthorizationDevice */
struct cusdk__AddAuthorizationDevice
{
public:
	cusdk__AddAuthorizationDeviceReq req;	/* required element of type cusdk:AddAuthorizationDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelAuthorizationDeviceReq
#define SOAP_TYPE_cusdk__DelAuthorizationDeviceReq (500)
/* cusdk:DelAuthorizationDeviceReq */
class SOAP_CMAC cusdk__DelAuthorizationDeviceReq : public cusdk__BaseReq
{
public:
	cusdk__AuthorizationDeviceInfo authorizedDev;	/* required element of type cusdk:AuthorizationDeviceInfo */
public:
	virtual int soap_type() const { return 500; } /* = unique id SOAP_TYPE_cusdk__DelAuthorizationDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelAuthorizationDeviceReq() { cusdk__DelAuthorizationDeviceReq::soap_default(NULL); }
	virtual ~cusdk__DelAuthorizationDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp
#define SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp (501)
/* cusdk:DelAuthorizationDeviceRsp */
class SOAP_CMAC cusdk__DelAuthorizationDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 501; } /* = unique id SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelAuthorizationDeviceRsp() { cusdk__DelAuthorizationDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__DelAuthorizationDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelAuthorizationDevice
#define SOAP_TYPE_cusdk__DelAuthorizationDevice (504)
/* cusdk:DelAuthorizationDevice */
struct cusdk__DelAuthorizationDevice
{
public:
	cusdk__DelAuthorizationDeviceReq req;	/* required element of type cusdk:DelAuthorizationDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq
#define SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq (505)
/* cusdk:ModifyAuthorizationDeviceReq */
class SOAP_CMAC cusdk__ModifyAuthorizationDeviceReq : public cusdk__BaseReq
{
public:
	cusdk__AuthorizationDeviceInfo authorizedDev;	/* required element of type cusdk:AuthorizationDeviceInfo */
public:
	virtual int soap_type() const { return 505; } /* = unique id SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyAuthorizationDeviceReq() { cusdk__ModifyAuthorizationDeviceReq::soap_default(NULL); }
	virtual ~cusdk__ModifyAuthorizationDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp
#define SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp (506)
/* cusdk:ModifyAuthorizationDeviceRsp */
class SOAP_CMAC cusdk__ModifyAuthorizationDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 506; } /* = unique id SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyAuthorizationDeviceRsp() { cusdk__ModifyAuthorizationDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyAuthorizationDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyAuthorizationDevice
#define SOAP_TYPE_cusdk__ModifyAuthorizationDevice (509)
/* cusdk:ModifyAuthorizationDevice */
struct cusdk__ModifyAuthorizationDevice
{
public:
	cusdk__ModifyAuthorizationDeviceReq req;	/* required element of type cusdk:ModifyAuthorizationDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceBaseInfoReq
#define SOAP_TYPE_cusdk__GetDeviceBaseInfoReq (510)
/* cusdk:GetDeviceBaseInfoReq */
class SOAP_CMAC cusdk__GetDeviceBaseInfoReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 510; } /* = unique id SOAP_TYPE_cusdk__GetDeviceBaseInfoReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceBaseInfoReq() { cusdk__GetDeviceBaseInfoReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceBaseInfoReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp
#define SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp (511)
/* cusdk:GetDeviceBaseInfoRsp */
class SOAP_CMAC cusdk__GetDeviceBaseInfoRsp
{
public:
	cusdk__DeviceInfo devInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:DeviceInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 511; } /* = unique id SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceBaseInfoRsp() { cusdk__GetDeviceBaseInfoRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceBaseInfoRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceBaseInfo
#define SOAP_TYPE_cusdk__GetDeviceBaseInfo (514)
/* cusdk:GetDeviceBaseInfo */
struct cusdk__GetDeviceBaseInfo
{
public:
	cusdk__GetDeviceBaseInfoReq req;	/* required element of type cusdk:GetDeviceBaseInfoReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetRCSSysParamReq
#define SOAP_TYPE_cusdk__GetRCSSysParamReq (515)
/* cusdk:GetRCSSysParamReq */
class SOAP_CMAC cusdk__GetRCSSysParamReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 515; } /* = unique id SOAP_TYPE_cusdk__GetRCSSysParamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetRCSSysParamReq() { cusdk__GetRCSSysParamReq::soap_default(NULL); }
	virtual ~cusdk__GetRCSSysParamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetRCSSysParamRsp
#define SOAP_TYPE_cusdk__GetRCSSysParamRsp (516)
/* cusdk:GetRCSSysParamRsp */
class SOAP_CMAC cusdk__GetRCSSysParamRsp
{
public:
	enum cusdk__ERS_CoverPolicy coverPolicy;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:ERS-CoverPolicy */
	bool maxLockedRecordDiskSpaceCapacitySupported;	/* required element of type xsd:boolean */
	int maxLockedRecordDiskSpaceCapacity;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 516; } /* = unique id SOAP_TYPE_cusdk__GetRCSSysParamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetRCSSysParamRsp() { cusdk__GetRCSSysParamRsp::soap_default(NULL); }
	virtual ~cusdk__GetRCSSysParamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetRCSSysParam
#define SOAP_TYPE_cusdk__GetRCSSysParam (519)
/* cusdk:GetRCSSysParam */
struct cusdk__GetRCSSysParam
{
public:
	cusdk__GetRCSSysParamReq req;	/* required element of type cusdk:GetRCSSysParamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetRCSSysParamReq
#define SOAP_TYPE_cusdk__SetRCSSysParamReq (520)
/* cusdk:SetRCSSysParamReq */
class SOAP_CMAC cusdk__SetRCSSysParamReq : public cusdk__BaseReq
{
public:
	enum cusdk__ERS_CoverPolicy coverPolicy;	/* required element of type cusdk:ERS-CoverPolicy */
public:
	virtual int soap_type() const { return 520; } /* = unique id SOAP_TYPE_cusdk__SetRCSSysParamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetRCSSysParamReq() { cusdk__SetRCSSysParamReq::soap_default(NULL); }
	virtual ~cusdk__SetRCSSysParamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetRCSSysParamRsp
#define SOAP_TYPE_cusdk__SetRCSSysParamRsp (521)
/* cusdk:SetRCSSysParamRsp */
class SOAP_CMAC cusdk__SetRCSSysParamRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 521; } /* = unique id SOAP_TYPE_cusdk__SetRCSSysParamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetRCSSysParamRsp() { cusdk__SetRCSSysParamRsp::soap_default(NULL); }
	virtual ~cusdk__SetRCSSysParamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetRCSSysParam
#define SOAP_TYPE_cusdk__SetRCSSysParam (524)
/* cusdk:SetRCSSysParam */
struct cusdk__SetRCSSysParam
{
public:
	cusdk__SetRCSSysParamReq req;	/* required element of type cusdk:SetRCSSysParamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNruListReq
#define SOAP_TYPE_cusdk__GetNruListReq (525)
/* cusdk:GetNruListReq */
class SOAP_CMAC cusdk__GetNruListReq : public cusdk__BaseReq
{
public:
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 525; } /* = unique id SOAP_TYPE_cusdk__GetNruListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetNruListReq() { cusdk__GetNruListReq::soap_default(NULL); }
	virtual ~cusdk__GetNruListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNruListRsp
#define SOAP_TYPE_cusdk__GetNruListRsp (526)
/* cusdk:GetNruListRsp */
class SOAP_CMAC cusdk__GetNruListRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__NruInfo >nruList;	/* optional element of type cusdk:NruInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 526; } /* = unique id SOAP_TYPE_cusdk__GetNruListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetNruListRsp() { cusdk__GetNruListRsp::soap_default(NULL); }
	virtual ~cusdk__GetNruListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNruList
#define SOAP_TYPE_cusdk__GetNruList (530)
/* cusdk:GetNruList */
struct cusdk__GetNruList
{
public:
	cusdk__GetNruListReq req;	/* required element of type cusdk:GetNruListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDiskListReq
#define SOAP_TYPE_cusdk__GetDiskListReq (531)
/* cusdk:GetDiskListReq */
class SOAP_CMAC cusdk__GetDiskListReq : public cusdk__BaseReq
{
public:
	std::string nruId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 531; } /* = unique id SOAP_TYPE_cusdk__GetDiskListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDiskListReq() { cusdk__GetDiskListReq::soap_default(NULL); }
	virtual ~cusdk__GetDiskListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDiskListRsp
#define SOAP_TYPE_cusdk__GetDiskListRsp (532)
/* cusdk:GetDiskListRsp */
class SOAP_CMAC cusdk__GetDiskListRsp
{
public:
	std::vector<cusdk__DiskInfo >diskList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DiskInfo */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 532; } /* = unique id SOAP_TYPE_cusdk__GetDiskListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDiskListRsp() { cusdk__GetDiskListRsp::soap_default(NULL); }
	virtual ~cusdk__GetDiskListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDiskList
#define SOAP_TYPE_cusdk__GetDiskList (536)
/* cusdk:GetDiskList */
struct cusdk__GetDiskList
{
public:
	cusdk__GetDiskListReq req;	/* required element of type cusdk:GetDiskListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPuChnBindingReq
#define SOAP_TYPE_cusdk__GetPuChnBindingReq (537)
/* cusdk:GetPuChnBindingReq */
class SOAP_CMAC cusdk__GetPuChnBindingReq : public cusdk__BaseReq
{
public:
	std::string nruId;	/* required element of type xsd:string */
	std::string diskMountPath;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 537; } /* = unique id SOAP_TYPE_cusdk__GetPuChnBindingReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetPuChnBindingReq() { cusdk__GetPuChnBindingReq::soap_default(NULL); }
	virtual ~cusdk__GetPuChnBindingReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPuChnBindingRsp
#define SOAP_TYPE_cusdk__GetPuChnBindingRsp (538)
/* cusdk:GetPuChnBindingRsp */
class SOAP_CMAC cusdk__GetPuChnBindingRsp
{
public:
	std::string nruId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string diskMountPath;	/* required element of type xsd:string */
	int totalNum;	/* required element of type xsd:int */
	std::vector<cusdk__DevChannel >channelList;	/* optional element of type cusdk:DevChannel */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 538; } /* = unique id SOAP_TYPE_cusdk__GetPuChnBindingRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetPuChnBindingRsp() { cusdk__GetPuChnBindingRsp::soap_default(NULL); }
	virtual ~cusdk__GetPuChnBindingRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPuChnBinding
#define SOAP_TYPE_cusdk__GetPuChnBinding (542)
/* cusdk:GetPuChnBinding */
struct cusdk__GetPuChnBinding
{
public:
	cusdk__GetPuChnBindingReq req;	/* required element of type cusdk:GetPuChnBindingReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__BindPuReq
#define SOAP_TYPE_cusdk__BindPuReq (543)
/* cusdk:BindPuReq */
class SOAP_CMAC cusdk__BindPuReq : public cusdk__BaseReq
{
public:
	std::string nruId;	/* required element of type xsd:string */
	std::string diskMountPath;	/* required element of type xsd:string */
	std::vector<cusdk__DevChannel >channelList;	/* optional element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 543; } /* = unique id SOAP_TYPE_cusdk__BindPuReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BindPuReq() { cusdk__BindPuReq::soap_default(NULL); }
	virtual ~cusdk__BindPuReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BindPuRsp
#define SOAP_TYPE_cusdk__BindPuRsp (544)
/* cusdk:BindPuRsp */
class SOAP_CMAC cusdk__BindPuRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 544; } /* = unique id SOAP_TYPE_cusdk__BindPuRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BindPuRsp() { cusdk__BindPuRsp::soap_default(NULL); }
	virtual ~cusdk__BindPuRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BindPu
#define SOAP_TYPE_cusdk__BindPu (547)
/* cusdk:BindPu */
struct cusdk__BindPu
{
public:
	cusdk__BindPuReq req;	/* required element of type cusdk:BindPuReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UnbindPuReq
#define SOAP_TYPE_cusdk__UnbindPuReq (548)
/* cusdk:UnbindPuReq */
class SOAP_CMAC cusdk__UnbindPuReq : public cusdk__BaseReq
{
public:
	std::string nruId;	/* required element of type xsd:string */
	std::string diskMountPath;	/* required element of type xsd:string */
	std::vector<cusdk__DevChannel >channelList;	/* optional element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 548; } /* = unique id SOAP_TYPE_cusdk__UnbindPuReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnbindPuReq() { cusdk__UnbindPuReq::soap_default(NULL); }
	virtual ~cusdk__UnbindPuReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnbindPuRsp
#define SOAP_TYPE_cusdk__UnbindPuRsp (549)
/* cusdk:UnbindPuRsp */
class SOAP_CMAC cusdk__UnbindPuRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 549; } /* = unique id SOAP_TYPE_cusdk__UnbindPuRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnbindPuRsp() { cusdk__UnbindPuRsp::soap_default(NULL); }
	virtual ~cusdk__UnbindPuRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnbindPu
#define SOAP_TYPE_cusdk__UnbindPu (552)
/* cusdk:UnbindPu */
struct cusdk__UnbindPu
{
public:
	cusdk__UnbindPuReq req;	/* required element of type cusdk:UnbindPuReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryRecordDaysReq
#define SOAP_TYPE_cusdk__QueryRecordDaysReq (553)
/* cusdk:QueryRecordDaysReq */
class SOAP_CMAC cusdk__QueryRecordDaysReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__DevChannel >devChnList;	/* optional element of type cusdk:DevChannel */
	enum cusdk__ERecordType recordType;	/* required element of type cusdk:ERecordType */
	cusdk__TimeRange timeRange;	/* required element of type cusdk:TimeRange */
	std::string recordDomainName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 553; } /* = unique id SOAP_TYPE_cusdk__QueryRecordDaysReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryRecordDaysReq() { cusdk__QueryRecordDaysReq::soap_default(NULL); }
	virtual ~cusdk__QueryRecordDaysReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryRecordDaysRsp
#define SOAP_TYPE_cusdk__QueryRecordDaysRsp (554)
/* cusdk:QueryRecordDaysRsp */
class SOAP_CMAC cusdk__QueryRecordDaysRsp
{
public:
	std::vector<cusdk__OnePuChnRecDays >recordStateInDaysList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:OnePuChnRecDays */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 554; } /* = unique id SOAP_TYPE_cusdk__QueryRecordDaysRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryRecordDaysRsp() { cusdk__QueryRecordDaysRsp::soap_default(NULL); }
	virtual ~cusdk__QueryRecordDaysRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryRecordDays
#define SOAP_TYPE_cusdk__QueryRecordDays (558)
/* cusdk:QueryRecordDays */
struct cusdk__QueryRecordDays
{
public:
	cusdk__QueryRecordDaysReq req;	/* required element of type cusdk:QueryRecordDaysReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryRecordReq
#define SOAP_TYPE_cusdk__QueryRecordReq (559)
/* cusdk:QueryRecordReq */
class SOAP_CMAC cusdk__QueryRecordReq : public cusdk__BaseReq
{
public:
	enum cusdk__ERecordType recordType;	/* required element of type cusdk:ERecordType */
	cusdk__DevChannel devChn;	/* required element of type cusdk:DevChannel */
	enum cusdk__ERecordEventType recEventType;	/* required element of type cusdk:ERecordEventType */
	cusdk__TimeRange timeRange;	/* required element of type cusdk:TimeRange */
	std::string queryHandle;	/* required element of type xsd:string */
	std::string recordDomainName;	/* required element of type xsd:string */
	bool useVSIPTimeAsGMTTime;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 559; } /* = unique id SOAP_TYPE_cusdk__QueryRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryRecordReq() { cusdk__QueryRecordReq::soap_default(NULL); }
	virtual ~cusdk__QueryRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryRecordRsp
#define SOAP_TYPE_cusdk__QueryRecordRsp (560)
/* cusdk:QueryRecordRsp */
class SOAP_CMAC cusdk__QueryRecordRsp
{
public:
	cusdk__DevChannel devChn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:DevChannel */
	std::vector<cusdk__RecDuration >recordDurationList;	/* optional element of type cusdk:RecDuration */
	std::string queryHandle;	/* required element of type xsd:string */
	bool hasLeft;	/* required element of type xsd:boolean */
	bool useVSIPTimeAsGMTTime;	/* required element of type xsd:boolean */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 560; } /* = unique id SOAP_TYPE_cusdk__QueryRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryRecordRsp() { cusdk__QueryRecordRsp::soap_default(NULL); }
	virtual ~cusdk__QueryRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryRecord
#define SOAP_TYPE_cusdk__QueryRecord (564)
/* cusdk:QueryRecord */
struct cusdk__QueryRecord
{
public:
	cusdk__QueryRecordReq req;	/* required element of type cusdk:QueryRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartPlatformRecordReq
#define SOAP_TYPE_cusdk__StartPlatformRecordReq (565)
/* cusdk:StartPlatformRecordReq */
class SOAP_CMAC cusdk__StartPlatformRecordReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel devChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 565; } /* = unique id SOAP_TYPE_cusdk__StartPlatformRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartPlatformRecordReq() { cusdk__StartPlatformRecordReq::soap_default(NULL); }
	virtual ~cusdk__StartPlatformRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartPlatformRecordRsp
#define SOAP_TYPE_cusdk__StartPlatformRecordRsp (566)
/* cusdk:StartPlatformRecordRsp */
class SOAP_CMAC cusdk__StartPlatformRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 566; } /* = unique id SOAP_TYPE_cusdk__StartPlatformRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartPlatformRecordRsp() { cusdk__StartPlatformRecordRsp::soap_default(NULL); }
	virtual ~cusdk__StartPlatformRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartPlatformRecord
#define SOAP_TYPE_cusdk__StartPlatformRecord (569)
/* cusdk:StartPlatformRecord */
struct cusdk__StartPlatformRecord
{
public:
	cusdk__StartPlatformRecordReq req;	/* required element of type cusdk:StartPlatformRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlatformRecordReq
#define SOAP_TYPE_cusdk__StopPlatformRecordReq (570)
/* cusdk:StopPlatformRecordReq */
class SOAP_CMAC cusdk__StopPlatformRecordReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel devChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 570; } /* = unique id SOAP_TYPE_cusdk__StopPlatformRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopPlatformRecordReq() { cusdk__StopPlatformRecordReq::soap_default(NULL); }
	virtual ~cusdk__StopPlatformRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlatformRecordRsp
#define SOAP_TYPE_cusdk__StopPlatformRecordRsp (571)
/* cusdk:StopPlatformRecordRsp */
class SOAP_CMAC cusdk__StopPlatformRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 571; } /* = unique id SOAP_TYPE_cusdk__StopPlatformRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopPlatformRecordRsp() { cusdk__StopPlatformRecordRsp::soap_default(NULL); }
	virtual ~cusdk__StopPlatformRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlatformRecord
#define SOAP_TYPE_cusdk__StopPlatformRecord (574)
/* cusdk:StopPlatformRecord */
struct cusdk__StopPlatformRecord
{
public:
	cusdk__StopPlatformRecordReq req;	/* required element of type cusdk:StopPlatformRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartPuRecordReq
#define SOAP_TYPE_cusdk__StartPuRecordReq (575)
/* cusdk:StartPuRecordReq */
class SOAP_CMAC cusdk__StartPuRecordReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel devChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 575; } /* = unique id SOAP_TYPE_cusdk__StartPuRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartPuRecordReq() { cusdk__StartPuRecordReq::soap_default(NULL); }
	virtual ~cusdk__StartPuRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartPuRecordRsp
#define SOAP_TYPE_cusdk__StartPuRecordRsp (576)
/* cusdk:StartPuRecordRsp */
class SOAP_CMAC cusdk__StartPuRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 576; } /* = unique id SOAP_TYPE_cusdk__StartPuRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartPuRecordRsp() { cusdk__StartPuRecordRsp::soap_default(NULL); }
	virtual ~cusdk__StartPuRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartPuRecord
#define SOAP_TYPE_cusdk__StartPuRecord (579)
/* cusdk:StartPuRecord */
struct cusdk__StartPuRecord
{
public:
	cusdk__StartPuRecordReq req;	/* required element of type cusdk:StartPuRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPuRecordReq
#define SOAP_TYPE_cusdk__StopPuRecordReq (580)
/* cusdk:StopPuRecordReq */
class SOAP_CMAC cusdk__StopPuRecordReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel devChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 580; } /* = unique id SOAP_TYPE_cusdk__StopPuRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopPuRecordReq() { cusdk__StopPuRecordReq::soap_default(NULL); }
	virtual ~cusdk__StopPuRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPuRecordRsp
#define SOAP_TYPE_cusdk__StopPuRecordRsp (581)
/* cusdk:StopPuRecordRsp */
class SOAP_CMAC cusdk__StopPuRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 581; } /* = unique id SOAP_TYPE_cusdk__StopPuRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopPuRecordRsp() { cusdk__StopPuRecordRsp::soap_default(NULL); }
	virtual ~cusdk__StopPuRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPuRecord
#define SOAP_TYPE_cusdk__StopPuRecord (584)
/* cusdk:StopPuRecord */
struct cusdk__StopPuRecord
{
public:
	cusdk__StopPuRecordReq req;	/* required element of type cusdk:StopPuRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupPlayRecordReq
#define SOAP_TYPE_cusdk__SetupPlayRecordReq (585)
/* cusdk:SetupPlayRecordReq */
class SOAP_CMAC cusdk__SetupPlayRecordReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
	cusdk__RecordPlayDuration recordPlayDuration;	/* required element of type cusdk:RecordPlayDuration */
	bool directTrans;	/* required element of type xsd:boolean */
	bool directTransFromDeviceDomain;	/* required element of type xsd:boolean */
	int transMode;	/* required element of type xsd:int */
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* optional element of type cusdk:MediaDescription */
	cusdk__TranscodeMediaFormat transcodeMeidaFormat;	/* required element of type cusdk:TranscodeMediaFormat */
public:
	virtual int soap_type() const { return 585; } /* = unique id SOAP_TYPE_cusdk__SetupPlayRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetupPlayRecordReq() { cusdk__SetupPlayRecordReq::soap_default(NULL); }
	virtual ~cusdk__SetupPlayRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupPlayRecordRsp
#define SOAP_TYPE_cusdk__SetupPlayRecordRsp (586)
/* cusdk:SetupPlayRecordRsp */
class SOAP_CMAC cusdk__SetupPlayRecordRsp
{
public:
	std::string recordPlaySession;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* optional element of type cusdk:MediaDescription */
	std::vector<cusdk__MediaExtInfo >mediaExtInfo;	/* optional element of type cusdk:MediaExtInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 586; } /* = unique id SOAP_TYPE_cusdk__SetupPlayRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetupPlayRecordRsp() { cusdk__SetupPlayRecordRsp::soap_default(NULL); }
	virtual ~cusdk__SetupPlayRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupPlayRecord
#define SOAP_TYPE_cusdk__SetupPlayRecord (589)
/* cusdk:SetupPlayRecord */
struct cusdk__SetupPlayRecord
{
public:
	cusdk__SetupPlayRecordReq req;	/* required element of type cusdk:SetupPlayRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayRecordReq
#define SOAP_TYPE_cusdk__PlayRecordReq (590)
/* cusdk:PlayRecordReq */
class SOAP_CMAC cusdk__PlayRecordReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 590; } /* = unique id SOAP_TYPE_cusdk__PlayRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PlayRecordReq() { cusdk__PlayRecordReq::soap_default(NULL); }
	virtual ~cusdk__PlayRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayRecordRsp
#define SOAP_TYPE_cusdk__PlayRecordRsp (591)
/* cusdk:PlayRecordRsp */
class SOAP_CMAC cusdk__PlayRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 591; } /* = unique id SOAP_TYPE_cusdk__PlayRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PlayRecordRsp() { cusdk__PlayRecordRsp::soap_default(NULL); }
	virtual ~cusdk__PlayRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayRecord
#define SOAP_TYPE_cusdk__PlayRecord (594)
/* cusdk:PlayRecord */
struct cusdk__PlayRecord
{
public:
	cusdk__PlayRecordReq req;	/* required element of type cusdk:PlayRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__VcrCtrlReq
#define SOAP_TYPE_cusdk__VcrCtrlReq (595)
/* cusdk:VcrCtrlReq */
class SOAP_CMAC cusdk__VcrCtrlReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
	enum cusdk__EVCRCmd vcrCmd;	/* required element of type cusdk:EVCRCmd */
	int seekTime;	/* required element of type xsd:int */
	int playSpeed;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 595; } /* = unique id SOAP_TYPE_cusdk__VcrCtrlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VcrCtrlReq() { cusdk__VcrCtrlReq::soap_default(NULL); }
	virtual ~cusdk__VcrCtrlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VcrCtrlRsp
#define SOAP_TYPE_cusdk__VcrCtrlRsp (596)
/* cusdk:VcrCtrlRsp */
class SOAP_CMAC cusdk__VcrCtrlRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 596; } /* = unique id SOAP_TYPE_cusdk__VcrCtrlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VcrCtrlRsp() { cusdk__VcrCtrlRsp::soap_default(NULL); }
	virtual ~cusdk__VcrCtrlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VcrCtrl
#define SOAP_TYPE_cusdk__VcrCtrl (599)
/* cusdk:VcrCtrl */
struct cusdk__VcrCtrl
{
public:
	cusdk__VcrCtrlReq req;	/* required element of type cusdk:VcrCtrlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCurRecordPlayPositionReq
#define SOAP_TYPE_cusdk__GetCurRecordPlayPositionReq (600)
/* cusdk:GetCurRecordPlayPositionReq */
class SOAP_CMAC cusdk__GetCurRecordPlayPositionReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 600; } /* = unique id SOAP_TYPE_cusdk__GetCurRecordPlayPositionReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCurRecordPlayPositionReq() { cusdk__GetCurRecordPlayPositionReq::soap_default(NULL); }
	virtual ~cusdk__GetCurRecordPlayPositionReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCurRecordPlayPositionRsp
#define SOAP_TYPE_cusdk__GetCurRecordPlayPositionRsp (601)
/* cusdk:GetCurRecordPlayPositionRsp */
class SOAP_CMAC cusdk__GetCurRecordPlayPositionRsp
{
public:
	int playId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	time_t curTime;	/* required element of type xsd:dateTime */
	cusdk__TimeRange recordTimeRange;	/* required element of type cusdk:TimeRange */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 601; } /* = unique id SOAP_TYPE_cusdk__GetCurRecordPlayPositionRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCurRecordPlayPositionRsp() { cusdk__GetCurRecordPlayPositionRsp::soap_default(NULL); }
	virtual ~cusdk__GetCurRecordPlayPositionRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCurRecordPlayPosition
#define SOAP_TYPE_cusdk__GetCurRecordPlayPosition (604)
/* cusdk:GetCurRecordPlayPosition */
struct cusdk__GetCurRecordPlayPosition
{
public:
	cusdk__GetCurRecordPlayPositionReq req;	/* required element of type cusdk:GetCurRecordPlayPositionReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlayRecordReq
#define SOAP_TYPE_cusdk__StopPlayRecordReq (605)
/* cusdk:StopPlayRecordReq */
class SOAP_CMAC cusdk__StopPlayRecordReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 605; } /* = unique id SOAP_TYPE_cusdk__StopPlayRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopPlayRecordReq() { cusdk__StopPlayRecordReq::soap_default(NULL); }
	virtual ~cusdk__StopPlayRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlayRecordRsp
#define SOAP_TYPE_cusdk__StopPlayRecordRsp (606)
/* cusdk:StopPlayRecordRsp */
class SOAP_CMAC cusdk__StopPlayRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 606; } /* = unique id SOAP_TYPE_cusdk__StopPlayRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopPlayRecordRsp() { cusdk__StopPlayRecordRsp::soap_default(NULL); }
	virtual ~cusdk__StopPlayRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlayRecord
#define SOAP_TYPE_cusdk__StopPlayRecord (609)
/* cusdk:StopPlayRecord */
struct cusdk__StopPlayRecord
{
public:
	cusdk__StopPlayRecordReq req;	/* required element of type cusdk:StopPlayRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupDownloadRecordReq
#define SOAP_TYPE_cusdk__SetupDownloadRecordReq (610)
/* cusdk:SetupDownloadRecordReq */
class SOAP_CMAC cusdk__SetupDownloadRecordReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
	cusdk__RecordPlayDuration recordPlayDuration;	/* required element of type cusdk:RecordPlayDuration */
	bool directTrans;	/* required element of type xsd:boolean */
	bool directTransFromDeviceDomain;	/* required element of type xsd:boolean */
	int transMode;	/* required element of type xsd:int */
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* optional element of type cusdk:MediaDescription */
public:
	virtual int soap_type() const { return 610; } /* = unique id SOAP_TYPE_cusdk__SetupDownloadRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetupDownloadRecordReq() { cusdk__SetupDownloadRecordReq::soap_default(NULL); }
	virtual ~cusdk__SetupDownloadRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupDownloadRecordRsp
#define SOAP_TYPE_cusdk__SetupDownloadRecordRsp (611)
/* cusdk:SetupDownloadRecordRsp */
class SOAP_CMAC cusdk__SetupDownloadRecordRsp
{
public:
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:MediaDescription */
	std::string recordFilePath;	/* required element of type xsd:string */
	std::string recordFileName;	/* required element of type xsd:string */
	std::vector<cusdk__MediaExtInfo >mediaExtInfo;	/* optional element of type cusdk:MediaExtInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 611; } /* = unique id SOAP_TYPE_cusdk__SetupDownloadRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetupDownloadRecordRsp() { cusdk__SetupDownloadRecordRsp::soap_default(NULL); }
	virtual ~cusdk__SetupDownloadRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupDownloadRecord
#define SOAP_TYPE_cusdk__SetupDownloadRecord (614)
/* cusdk:SetupDownloadRecord */
struct cusdk__SetupDownloadRecord
{
public:
	cusdk__SetupDownloadRecordReq req;	/* required element of type cusdk:SetupDownloadRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDownloadRecordReq
#define SOAP_TYPE_cusdk__StartDownloadRecordReq (615)
/* cusdk:StartDownloadRecordReq */
class SOAP_CMAC cusdk__StartDownloadRecordReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 615; } /* = unique id SOAP_TYPE_cusdk__StartDownloadRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartDownloadRecordReq() { cusdk__StartDownloadRecordReq::soap_default(NULL); }
	virtual ~cusdk__StartDownloadRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDownloadRecordRsp
#define SOAP_TYPE_cusdk__StartDownloadRecordRsp (616)
/* cusdk:StartDownloadRecordRsp */
class SOAP_CMAC cusdk__StartDownloadRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 616; } /* = unique id SOAP_TYPE_cusdk__StartDownloadRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartDownloadRecordRsp() { cusdk__StartDownloadRecordRsp::soap_default(NULL); }
	virtual ~cusdk__StartDownloadRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDownloadRecord
#define SOAP_TYPE_cusdk__StartDownloadRecord (619)
/* cusdk:StartDownloadRecord */
struct cusdk__StartDownloadRecord
{
public:
	cusdk__StartDownloadRecordReq req;	/* required element of type cusdk:StartDownloadRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopDownloadRecordReq
#define SOAP_TYPE_cusdk__StopDownloadRecordReq (620)
/* cusdk:StopDownloadRecordReq */
class SOAP_CMAC cusdk__StopDownloadRecordReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 620; } /* = unique id SOAP_TYPE_cusdk__StopDownloadRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopDownloadRecordReq() { cusdk__StopDownloadRecordReq::soap_default(NULL); }
	virtual ~cusdk__StopDownloadRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopDownloadRecordRsp
#define SOAP_TYPE_cusdk__StopDownloadRecordRsp (621)
/* cusdk:StopDownloadRecordRsp */
class SOAP_CMAC cusdk__StopDownloadRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 621; } /* = unique id SOAP_TYPE_cusdk__StopDownloadRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopDownloadRecordRsp() { cusdk__StopDownloadRecordRsp::soap_default(NULL); }
	virtual ~cusdk__StopDownloadRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopDownloadRecord
#define SOAP_TYPE_cusdk__StopDownloadRecord (624)
/* cusdk:StopDownloadRecord */
struct cusdk__StopDownloadRecord
{
public:
	cusdk__StopDownloadRecordReq req;	/* required element of type cusdk:StopDownloadRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetRecordPlanReq
#define SOAP_TYPE_cusdk__GetRecordPlanReq (625)
/* cusdk:GetRecordPlanReq */
class SOAP_CMAC cusdk__GetRecordPlanReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel devChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 625; } /* = unique id SOAP_TYPE_cusdk__GetRecordPlanReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetRecordPlanReq() { cusdk__GetRecordPlanReq::soap_default(NULL); }
	virtual ~cusdk__GetRecordPlanReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetRecordPlanRsp
#define SOAP_TYPE_cusdk__GetRecordPlanRsp (626)
/* cusdk:GetRecordPlanRsp */
class SOAP_CMAC cusdk__GetRecordPlanRsp
{
public:
	cusdk__DevChannel devChn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:DevChannel */
	cusdk__RecordPlan recordPlan;	/* required element of type cusdk:RecordPlan */
	int recStreamType;	/* required element of type xsd:int */
	bool supportChangeStreamType;	/* required element of type xsd:boolean */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 626; } /* = unique id SOAP_TYPE_cusdk__GetRecordPlanRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetRecordPlanRsp() { cusdk__GetRecordPlanRsp::soap_default(NULL); }
	virtual ~cusdk__GetRecordPlanRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetRecordPlan
#define SOAP_TYPE_cusdk__GetRecordPlan (629)
/* cusdk:GetRecordPlan */
struct cusdk__GetRecordPlan
{
public:
	cusdk__GetRecordPlanReq req;	/* required element of type cusdk:GetRecordPlanReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetRecordPlanReq
#define SOAP_TYPE_cusdk__SetRecordPlanReq (630)
/* cusdk:SetRecordPlanReq */
class SOAP_CMAC cusdk__SetRecordPlanReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel devChn;	/* required element of type cusdk:DevChannel */
	int recStreamType;	/* required element of type xsd:int */
	bool supportChangeStreamType;	/* required element of type xsd:boolean */
	cusdk__RecordPlan recordPlan;	/* required element of type cusdk:RecordPlan */
public:
	virtual int soap_type() const { return 630; } /* = unique id SOAP_TYPE_cusdk__SetRecordPlanReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetRecordPlanReq() { cusdk__SetRecordPlanReq::soap_default(NULL); }
	virtual ~cusdk__SetRecordPlanReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetRecordPlanRsp
#define SOAP_TYPE_cusdk__SetRecordPlanRsp (631)
/* cusdk:SetRecordPlanRsp */
class SOAP_CMAC cusdk__SetRecordPlanRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 631; } /* = unique id SOAP_TYPE_cusdk__SetRecordPlanRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetRecordPlanRsp() { cusdk__SetRecordPlanRsp::soap_default(NULL); }
	virtual ~cusdk__SetRecordPlanRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetRecordPlan
#define SOAP_TYPE_cusdk__SetRecordPlan (634)
/* cusdk:SetRecordPlan */
struct cusdk__SetRecordPlan
{
public:
	cusdk__SetRecordPlanReq req;	/* required element of type cusdk:SetRecordPlanReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAllTVWallReq
#define SOAP_TYPE_cusdk__GetAllTVWallReq (635)
/* cusdk:GetAllTVWallReq */
class SOAP_CMAC cusdk__GetAllTVWallReq : public cusdk__BaseReq
{
public:
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 635; } /* = unique id SOAP_TYPE_cusdk__GetAllTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAllTVWallReq() { cusdk__GetAllTVWallReq::soap_default(NULL); }
	virtual ~cusdk__GetAllTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAllTVWallRsp
#define SOAP_TYPE_cusdk__GetAllTVWallRsp (636)
/* cusdk:GetAllTVWallRsp */
class SOAP_CMAC cusdk__GetAllTVWallRsp
{
public:
	std::vector<cusdk__TVWall >tvWallList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:TVWall */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 636; } /* = unique id SOAP_TYPE_cusdk__GetAllTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAllTVWallRsp() { cusdk__GetAllTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__GetAllTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAllTVWall
#define SOAP_TYPE_cusdk__GetAllTVWall (639)
/* cusdk:GetAllTVWall */
struct cusdk__GetAllTVWall
{
public:
	cusdk__GetAllTVWallReq req;	/* required element of type cusdk:GetAllTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetTVWallReq
#define SOAP_TYPE_cusdk__GetTVWallReq (640)
/* cusdk:GetTVWallReq */
class SOAP_CMAC cusdk__GetTVWallReq : public cusdk__BaseReq
{
public:
	std::string tvwallId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 640; } /* = unique id SOAP_TYPE_cusdk__GetTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetTVWallReq() { cusdk__GetTVWallReq::soap_default(NULL); }
	virtual ~cusdk__GetTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetTVWallRsp
#define SOAP_TYPE_cusdk__GetTVWallRsp (641)
/* cusdk:GetTVWallRsp */
class SOAP_CMAC cusdk__GetTVWallRsp
{
public:
	cusdk__TVWall tvWallInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:TVWall */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 641; } /* = unique id SOAP_TYPE_cusdk__GetTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetTVWallRsp() { cusdk__GetTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__GetTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetTVWall
#define SOAP_TYPE_cusdk__GetTVWall (644)
/* cusdk:GetTVWall */
struct cusdk__GetTVWall
{
public:
	cusdk__GetTVWallReq req;	/* required element of type cusdk:GetTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateTVWallReq
#define SOAP_TYPE_cusdk__CreateTVWallReq (645)
/* cusdk:CreateTVWallReq */
class SOAP_CMAC cusdk__CreateTVWallReq : public cusdk__BaseReq
{
public:
	cusdk__TVWall TVWallInfo;	/* required element of type cusdk:TVWall */
public:
	virtual int soap_type() const { return 645; } /* = unique id SOAP_TYPE_cusdk__CreateTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateTVWallReq() { cusdk__CreateTVWallReq::soap_default(NULL); }
	virtual ~cusdk__CreateTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateTVWallRsp
#define SOAP_TYPE_cusdk__CreateTVWallRsp (646)
/* cusdk:CreateTVWallRsp */
class SOAP_CMAC cusdk__CreateTVWallRsp
{
public:
	std::string TVWallId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	time_t creatTime;	/* required element of type xsd:dateTime */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 646; } /* = unique id SOAP_TYPE_cusdk__CreateTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateTVWallRsp() { cusdk__CreateTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__CreateTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateTVWall
#define SOAP_TYPE_cusdk__CreateTVWall (649)
/* cusdk:CreateTVWall */
struct cusdk__CreateTVWall
{
public:
	cusdk__CreateTVWallReq req;	/* required element of type cusdk:CreateTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelTVWallReq
#define SOAP_TYPE_cusdk__DelTVWallReq (650)
/* cusdk:DelTVWallReq */
class SOAP_CMAC cusdk__DelTVWallReq : public cusdk__BaseReq
{
public:
	std::string TVWallId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 650; } /* = unique id SOAP_TYPE_cusdk__DelTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelTVWallReq() { cusdk__DelTVWallReq::soap_default(NULL); }
	virtual ~cusdk__DelTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelTVWallRsp
#define SOAP_TYPE_cusdk__DelTVWallRsp (651)
/* cusdk:DelTVWallRsp */
class SOAP_CMAC cusdk__DelTVWallRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 651; } /* = unique id SOAP_TYPE_cusdk__DelTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelTVWallRsp() { cusdk__DelTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__DelTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelTVWall
#define SOAP_TYPE_cusdk__DelTVWall (654)
/* cusdk:DelTVWall */
struct cusdk__DelTVWall
{
public:
	cusdk__DelTVWallReq req;	/* required element of type cusdk:DelTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyTVWallReq
#define SOAP_TYPE_cusdk__ModifyTVWallReq (655)
/* cusdk:ModifyTVWallReq */
class SOAP_CMAC cusdk__ModifyTVWallReq : public cusdk__BaseReq
{
public:
	cusdk__TVWall TVWallInfo;	/* required element of type cusdk:TVWall */
public:
	virtual int soap_type() const { return 655; } /* = unique id SOAP_TYPE_cusdk__ModifyTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyTVWallReq() { cusdk__ModifyTVWallReq::soap_default(NULL); }
	virtual ~cusdk__ModifyTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyTVWallRsp
#define SOAP_TYPE_cusdk__ModifyTVWallRsp (656)
/* cusdk:ModifyTVWallRsp */
class SOAP_CMAC cusdk__ModifyTVWallRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 656; } /* = unique id SOAP_TYPE_cusdk__ModifyTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyTVWallRsp() { cusdk__ModifyTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyTVWall
#define SOAP_TYPE_cusdk__ModifyTVWall (659)
/* cusdk:ModifyTVWall */
struct cusdk__ModifyTVWall
{
public:
	cusdk__ModifyTVWallReq req;	/* required element of type cusdk:ModifyTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallStartPlayReq
#define SOAP_TYPE_cusdk__TVWallStartPlayReq (660)
/* cusdk:TVWallStartPlayReq */
class SOAP_CMAC cusdk__TVWallStartPlayReq : public cusdk__BaseReq
{
public:
	std::string TVWallId;	/* required element of type xsd:string */
	int tvId;	/* required element of type xsd:int */
	int tvDivId;	/* required element of type xsd:int */
	cusdk__DevChannel encoderChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 660; } /* = unique id SOAP_TYPE_cusdk__TVWallStartPlayReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallStartPlayReq() { cusdk__TVWallStartPlayReq::soap_default(NULL); }
	virtual ~cusdk__TVWallStartPlayReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallStartPlayRsp
#define SOAP_TYPE_cusdk__TVWallStartPlayRsp (661)
/* cusdk:TVWallStartPlayRsp */
class SOAP_CMAC cusdk__TVWallStartPlayRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 661; } /* = unique id SOAP_TYPE_cusdk__TVWallStartPlayRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallStartPlayRsp() { cusdk__TVWallStartPlayRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallStartPlayRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallStartPlay
#define SOAP_TYPE_cusdk__TVWallStartPlay (664)
/* cusdk:TVWallStartPlay */
struct cusdk__TVWallStartPlay
{
public:
	cusdk__TVWallStartPlayReq req;	/* required element of type cusdk:TVWallStartPlayReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallStopPlayReq
#define SOAP_TYPE_cusdk__TVWallStopPlayReq (665)
/* cusdk:TVWallStopPlayReq */
class SOAP_CMAC cusdk__TVWallStopPlayReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel encoderChn;	/* required element of type cusdk:DevChannel */
	std::string TVWallId;	/* required element of type xsd:string */
	int tvId;	/* required element of type xsd:int */
	int tvDivId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 665; } /* = unique id SOAP_TYPE_cusdk__TVWallStopPlayReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallStopPlayReq() { cusdk__TVWallStopPlayReq::soap_default(NULL); }
	virtual ~cusdk__TVWallStopPlayReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallStopPlayRsp
#define SOAP_TYPE_cusdk__TVWallStopPlayRsp (666)
/* cusdk:TVWallStopPlayRsp */
class SOAP_CMAC cusdk__TVWallStopPlayRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 666; } /* = unique id SOAP_TYPE_cusdk__TVWallStopPlayRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallStopPlayRsp() { cusdk__TVWallStopPlayRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallStopPlayRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallStopPlay
#define SOAP_TYPE_cusdk__TVWallStopPlay (669)
/* cusdk:TVWallStopPlay */
struct cusdk__TVWallStopPlay
{
public:
	cusdk__TVWallStopPlayReq req;	/* required element of type cusdk:TVWallStopPlayReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallWindowPollContrlReq
#define SOAP_TYPE_cusdk__TVWallWindowPollContrlReq (670)
/* cusdk:TVWallWindowPollContrlReq */
class SOAP_CMAC cusdk__TVWallWindowPollContrlReq : public cusdk__BaseReq
{
public:
	std::string TVWallId;	/* required element of type xsd:string */
	int tvId;	/* required element of type xsd:int */
	int tvDivId;	/* required element of type xsd:int */
	std::vector<cusdk__TVWallWindowPollStep >pollSteps;	/* optional element of type cusdk:TVWallWindowPollStep */
	enum cusdk__EVCRCmd pollCmd;	/* required element of type cusdk:EVCRCmd */
public:
	virtual int soap_type() const { return 670; } /* = unique id SOAP_TYPE_cusdk__TVWallWindowPollContrlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallWindowPollContrlReq() { cusdk__TVWallWindowPollContrlReq::soap_default(NULL); }
	virtual ~cusdk__TVWallWindowPollContrlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallWindowPollContrlRsp
#define SOAP_TYPE_cusdk__TVWallWindowPollContrlRsp (671)
/* cusdk:TVWallWindowPollContrlRsp */
class SOAP_CMAC cusdk__TVWallWindowPollContrlRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 671; } /* = unique id SOAP_TYPE_cusdk__TVWallWindowPollContrlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallWindowPollContrlRsp() { cusdk__TVWallWindowPollContrlRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallWindowPollContrlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallWindowPollContrl
#define SOAP_TYPE_cusdk__TVWallWindowPollContrl (674)
/* cusdk:TVWallWindowPollContrl */
struct cusdk__TVWallWindowPollContrl
{
public:
	cusdk__TVWallWindowPollContrlReq req;	/* required element of type cusdk:TVWallWindowPollContrlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSaveSchemeReq
#define SOAP_TYPE_cusdk__TVWallSaveSchemeReq (675)
/* cusdk:TVWallSaveSchemeReq */
class SOAP_CMAC cusdk__TVWallSaveSchemeReq : public cusdk__BaseReq
{
public:
	cusdk__TVWallScheme scheme;	/* required element of type cusdk:TVWallScheme */
public:
	virtual int soap_type() const { return 675; } /* = unique id SOAP_TYPE_cusdk__TVWallSaveSchemeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallSaveSchemeReq() { cusdk__TVWallSaveSchemeReq::soap_default(NULL); }
	virtual ~cusdk__TVWallSaveSchemeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSaveSchemeRsp
#define SOAP_TYPE_cusdk__TVWallSaveSchemeRsp (676)
/* cusdk:TVWallSaveSchemeRsp */
class SOAP_CMAC cusdk__TVWallSaveSchemeRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 676; } /* = unique id SOAP_TYPE_cusdk__TVWallSaveSchemeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallSaveSchemeRsp() { cusdk__TVWallSaveSchemeRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallSaveSchemeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSaveScheme
#define SOAP_TYPE_cusdk__TVWallSaveScheme (679)
/* cusdk:TVWallSaveScheme */
struct cusdk__TVWallSaveScheme
{
public:
	cusdk__TVWallSaveSchemeReq req;	/* required element of type cusdk:TVWallSaveSchemeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallDelSchemeReq
#define SOAP_TYPE_cusdk__TVWallDelSchemeReq (680)
/* cusdk:TVWallDelSchemeReq */
class SOAP_CMAC cusdk__TVWallDelSchemeReq : public cusdk__BaseReq
{
public:
	std::string tvwallId;	/* required element of type xsd:string */
	std::string schemeName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 680; } /* = unique id SOAP_TYPE_cusdk__TVWallDelSchemeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallDelSchemeReq() { cusdk__TVWallDelSchemeReq::soap_default(NULL); }
	virtual ~cusdk__TVWallDelSchemeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallDelSchemeRsp
#define SOAP_TYPE_cusdk__TVWallDelSchemeRsp (681)
/* cusdk:TVWallDelSchemeRsp */
class SOAP_CMAC cusdk__TVWallDelSchemeRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 681; } /* = unique id SOAP_TYPE_cusdk__TVWallDelSchemeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallDelSchemeRsp() { cusdk__TVWallDelSchemeRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallDelSchemeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallDelScheme
#define SOAP_TYPE_cusdk__TVWallDelScheme (684)
/* cusdk:TVWallDelScheme */
struct cusdk__TVWallDelScheme
{
public:
	cusdk__TVWallDelSchemeReq req;	/* required element of type cusdk:TVWallDelSchemeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallLoadSchemeReq
#define SOAP_TYPE_cusdk__TVWallLoadSchemeReq (685)
/* cusdk:TVWallLoadSchemeReq */
class SOAP_CMAC cusdk__TVWallLoadSchemeReq : public cusdk__BaseReq
{
public:
	std::string tvwallId;	/* required element of type xsd:string */
	std::string schemeName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 685; } /* = unique id SOAP_TYPE_cusdk__TVWallLoadSchemeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallLoadSchemeReq() { cusdk__TVWallLoadSchemeReq::soap_default(NULL); }
	virtual ~cusdk__TVWallLoadSchemeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallLoadSchemeRsp
#define SOAP_TYPE_cusdk__TVWallLoadSchemeRsp (686)
/* cusdk:TVWallLoadSchemeRsp */
class SOAP_CMAC cusdk__TVWallLoadSchemeRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 686; } /* = unique id SOAP_TYPE_cusdk__TVWallLoadSchemeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallLoadSchemeRsp() { cusdk__TVWallLoadSchemeRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallLoadSchemeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallLoadScheme
#define SOAP_TYPE_cusdk__TVWallLoadScheme (689)
/* cusdk:TVWallLoadScheme */
struct cusdk__TVWallLoadScheme
{
public:
	cusdk__TVWallLoadSchemeReq req;	/* required element of type cusdk:TVWallLoadSchemeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallQuerySchemeReq
#define SOAP_TYPE_cusdk__TVWallQuerySchemeReq (690)
/* cusdk:TVWallQuerySchemeReq */
class SOAP_CMAC cusdk__TVWallQuerySchemeReq : public cusdk__BaseReq
{
public:
	std::string tvWallId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 690; } /* = unique id SOAP_TYPE_cusdk__TVWallQuerySchemeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallQuerySchemeReq() { cusdk__TVWallQuerySchemeReq::soap_default(NULL); }
	virtual ~cusdk__TVWallQuerySchemeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallQuerySchemeRsp
#define SOAP_TYPE_cusdk__TVWallQuerySchemeRsp (691)
/* cusdk:TVWallQuerySchemeRsp */
class SOAP_CMAC cusdk__TVWallQuerySchemeRsp
{
public:
	std::vector<cusdk__TVWallScheme >schemeList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:TVWallScheme */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 691; } /* = unique id SOAP_TYPE_cusdk__TVWallQuerySchemeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallQuerySchemeRsp() { cusdk__TVWallQuerySchemeRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallQuerySchemeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallQueryScheme
#define SOAP_TYPE_cusdk__TVWallQueryScheme (695)
/* cusdk:TVWallQueryScheme */
struct cusdk__TVWallQueryScheme
{
public:
	cusdk__TVWallQuerySchemeReq req;	/* required element of type cusdk:TVWallQuerySchemeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSetSchemePollReq
#define SOAP_TYPE_cusdk__TVWallSetSchemePollReq (696)
/* cusdk:TVWallSetSchemePollReq */
class SOAP_CMAC cusdk__TVWallSetSchemePollReq : public cusdk__BaseReq
{
public:
	std::string tvWallId;	/* required element of type xsd:string */
	std::vector<cusdk__TVWallSchemePollStep >pollSteps;	/* optional element of type cusdk:TVWallSchemePollStep */
public:
	virtual int soap_type() const { return 696; } /* = unique id SOAP_TYPE_cusdk__TVWallSetSchemePollReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallSetSchemePollReq() { cusdk__TVWallSetSchemePollReq::soap_default(NULL); }
	virtual ~cusdk__TVWallSetSchemePollReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSetSchemePollRsp
#define SOAP_TYPE_cusdk__TVWallSetSchemePollRsp (697)
/* cusdk:TVWallSetSchemePollRsp */
class SOAP_CMAC cusdk__TVWallSetSchemePollRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 697; } /* = unique id SOAP_TYPE_cusdk__TVWallSetSchemePollRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallSetSchemePollRsp() { cusdk__TVWallSetSchemePollRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallSetSchemePollRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSetSchemePoll
#define SOAP_TYPE_cusdk__TVWallSetSchemePoll (700)
/* cusdk:TVWallSetSchemePoll */
struct cusdk__TVWallSetSchemePoll
{
public:
	cusdk__TVWallSetSchemePollReq req;	/* required element of type cusdk:TVWallSetSchemePollReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallGetSchemePollReq
#define SOAP_TYPE_cusdk__TVWallGetSchemePollReq (701)
/* cusdk:TVWallGetSchemePollReq */
class SOAP_CMAC cusdk__TVWallGetSchemePollReq : public cusdk__BaseReq
{
public:
	std::string tvWallId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 701; } /* = unique id SOAP_TYPE_cusdk__TVWallGetSchemePollReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallGetSchemePollReq() { cusdk__TVWallGetSchemePollReq::soap_default(NULL); }
	virtual ~cusdk__TVWallGetSchemePollReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallGetSchemePollRsp
#define SOAP_TYPE_cusdk__TVWallGetSchemePollRsp (702)
/* cusdk:TVWallGetSchemePollRsp */
class SOAP_CMAC cusdk__TVWallGetSchemePollRsp
{
public:
	std::vector<cusdk__TVWallSchemePollStep >pollSteps;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:TVWallSchemePollStep */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 702; } /* = unique id SOAP_TYPE_cusdk__TVWallGetSchemePollRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallGetSchemePollRsp() { cusdk__TVWallGetSchemePollRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallGetSchemePollRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallGetSchemePoll
#define SOAP_TYPE_cusdk__TVWallGetSchemePoll (705)
/* cusdk:TVWallGetSchemePoll */
struct cusdk__TVWallGetSchemePoll
{
public:
	cusdk__TVWallGetSchemePollReq req;	/* required element of type cusdk:TVWallGetSchemePollReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSchemePollControlReq
#define SOAP_TYPE_cusdk__TVWallSchemePollControlReq (706)
/* cusdk:TVWallSchemePollControlReq */
class SOAP_CMAC cusdk__TVWallSchemePollControlReq : public cusdk__BaseReq
{
public:
	std::string tvWallId;	/* required element of type xsd:string */
	enum cusdk__EVCRCmd pollCmd;	/* required element of type cusdk:EVCRCmd */
public:
	virtual int soap_type() const { return 706; } /* = unique id SOAP_TYPE_cusdk__TVWallSchemePollControlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallSchemePollControlReq() { cusdk__TVWallSchemePollControlReq::soap_default(NULL); }
	virtual ~cusdk__TVWallSchemePollControlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSchemePollControlRsp
#define SOAP_TYPE_cusdk__TVWallSchemePollControlRsp (707)
/* cusdk:TVWallSchemePollControlRsp */
class SOAP_CMAC cusdk__TVWallSchemePollControlRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 707; } /* = unique id SOAP_TYPE_cusdk__TVWallSchemePollControlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallSchemePollControlRsp() { cusdk__TVWallSchemePollControlRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallSchemePollControlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallSchemePollControl
#define SOAP_TYPE_cusdk__TVWallSchemePollControl (710)
/* cusdk:TVWallSchemePollControl */
struct cusdk__TVWallSchemePollControl
{
public:
	cusdk__TVWallSchemePollControlReq req;	/* required element of type cusdk:TVWallSchemePollControlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetTVDivNumReq
#define SOAP_TYPE_cusdk__SetTVDivNumReq (711)
/* cusdk:SetTVDivNumReq */
class SOAP_CMAC cusdk__SetTVDivNumReq : public cusdk__BaseReq
{
public:
	std::string tvwallId;	/* required element of type xsd:string */
	int tvId;	/* required element of type xsd:int */
	int tvDivNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 711; } /* = unique id SOAP_TYPE_cusdk__SetTVDivNumReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetTVDivNumReq() { cusdk__SetTVDivNumReq::soap_default(NULL); }
	virtual ~cusdk__SetTVDivNumReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetTVDivNumRsp
#define SOAP_TYPE_cusdk__SetTVDivNumRsp (712)
/* cusdk:SetTVDivNumRsp */
class SOAP_CMAC cusdk__SetTVDivNumRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 712; } /* = unique id SOAP_TYPE_cusdk__SetTVDivNumRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetTVDivNumRsp() { cusdk__SetTVDivNumRsp::soap_default(NULL); }
	virtual ~cusdk__SetTVDivNumRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetTVDivNum
#define SOAP_TYPE_cusdk__SetTVDivNum (715)
/* cusdk:SetTVDivNum */
struct cusdk__SetTVDivNum
{
public:
	cusdk__SetTVDivNumReq req;	/* required element of type cusdk:SetTVDivNumReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DecMediaPortInfo
#define SOAP_TYPE_cusdk__DecMediaPortInfo (716)
/* cusdk:DecMediaPortInfo */
class SOAP_CMAC cusdk__DecMediaPortInfo
{
public:
	std::string deviceIP;	/* required element of type xsd:string */
	int rtpVideoPort;	/* required element of type xsd:int */
	int rtpAudioPort;	/* required element of type xsd:int */
	int rtcpVideoPort;	/* required element of type xsd:int */
	int rtcpAudioPort;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 716; } /* = unique id SOAP_TYPE_cusdk__DecMediaPortInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DecMediaPortInfo() { cusdk__DecMediaPortInfo::soap_default(NULL); }
	virtual ~cusdk__DecMediaPortInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LocalMediaPortInfo
#define SOAP_TYPE_cusdk__LocalMediaPortInfo (717)
/* cusdk:LocalMediaPortInfo */
class SOAP_CMAC cusdk__LocalMediaPortInfo : public cusdk__DecMediaPortInfo
{
public:
	std::string mediaStreamType;	/* required element of type xsd:string */
	std::string manufacture;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 717; } /* = unique id SOAP_TYPE_cusdk__LocalMediaPortInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LocalMediaPortInfo() { cusdk__LocalMediaPortInfo::soap_default(NULL); }
	virtual ~cusdk__LocalMediaPortInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayRecordOnTVWallReq
#define SOAP_TYPE_cusdk__PlayRecordOnTVWallReq (718)
/* cusdk:PlayRecordOnTVWallReq */
class SOAP_CMAC cusdk__PlayRecordOnTVWallReq : public cusdk__BaseReq
{
public:
	std::string TVWallId;	/* required element of type xsd:string */
	int tvId;	/* required element of type xsd:int */
	int tvDivId;	/* required element of type xsd:int */
	cusdk__RecordPlayDuration recordPlayDuration;	/* required element of type cusdk:RecordPlayDuration */
	cusdk__LocalMediaPortInfo localMediaPortInfo;	/* required element of type cusdk:LocalMediaPortInfo */
public:
	virtual int soap_type() const { return 718; } /* = unique id SOAP_TYPE_cusdk__PlayRecordOnTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PlayRecordOnTVWallReq() { cusdk__PlayRecordOnTVWallReq::soap_default(NULL); }
	virtual ~cusdk__PlayRecordOnTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayRecordOnTVWallRsp
#define SOAP_TYPE_cusdk__PlayRecordOnTVWallRsp (719)
/* cusdk:PlayRecordOnTVWallRsp */
class SOAP_CMAC cusdk__PlayRecordOnTVWallRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	cusdk__DecMediaPortInfo decMediaPortInfo;	/* required element of type cusdk:DecMediaPortInfo */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 719; } /* = unique id SOAP_TYPE_cusdk__PlayRecordOnTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PlayRecordOnTVWallRsp() { cusdk__PlayRecordOnTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__PlayRecordOnTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayRecordOnTVWall
#define SOAP_TYPE_cusdk__PlayRecordOnTVWall (722)
/* cusdk:PlayRecordOnTVWall */
struct cusdk__PlayRecordOnTVWall
{
public:
	cusdk__PlayRecordOnTVWallReq req;	/* required element of type cusdk:PlayRecordOnTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlayRecordOnTVWallReq
#define SOAP_TYPE_cusdk__StopPlayRecordOnTVWallReq (723)
/* cusdk:StopPlayRecordOnTVWallReq */
class SOAP_CMAC cusdk__StopPlayRecordOnTVWallReq : public cusdk__BaseReq
{
public:
	std::string TVWallId;	/* required element of type xsd:string */
	int tvId;	/* required element of type xsd:int */
	int tvDivId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 723; } /* = unique id SOAP_TYPE_cusdk__StopPlayRecordOnTVWallReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopPlayRecordOnTVWallReq() { cusdk__StopPlayRecordOnTVWallReq::soap_default(NULL); }
	virtual ~cusdk__StopPlayRecordOnTVWallReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlayRecordOnTVWallRsp
#define SOAP_TYPE_cusdk__StopPlayRecordOnTVWallRsp (724)
/* cusdk:StopPlayRecordOnTVWallRsp */
class SOAP_CMAC cusdk__StopPlayRecordOnTVWallRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 724; } /* = unique id SOAP_TYPE_cusdk__StopPlayRecordOnTVWallRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopPlayRecordOnTVWallRsp() { cusdk__StopPlayRecordOnTVWallRsp::soap_default(NULL); }
	virtual ~cusdk__StopPlayRecordOnTVWallRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopPlayRecordOnTVWall
#define SOAP_TYPE_cusdk__StopPlayRecordOnTVWall (727)
/* cusdk:StopPlayRecordOnTVWall */
struct cusdk__StopPlayRecordOnTVWall
{
public:
	cusdk__StopPlayRecordOnTVWallReq req;	/* required element of type cusdk:StopPlayRecordOnTVWallReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__MapModuleAttrs
#define SOAP_TYPE_cusdk__MapModuleAttrs (728)
/* cusdk:MapModuleAttrs */
class SOAP_CMAC cusdk__MapModuleAttrs
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 728; } /* = unique id SOAP_TYPE_cusdk__MapModuleAttrs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MapModuleAttrs() { cusdk__MapModuleAttrs::soap_default(NULL); }
	virtual ~cusdk__MapModuleAttrs() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MapTypeInfo
#define SOAP_TYPE_cusdk__MapTypeInfo (729)
/* cusdk:MapTypeInfo */
class SOAP_CMAC cusdk__MapTypeInfo
{
public:
	enum cusdk__EMapType mapType;	/* required element of type cusdk:EMapType */
	std::string mapVersion;	/* required element of type xsd:string */
	std::string accessUrl;	/* required element of type xsd:string */
	std::vector<cusdk__MapModuleAttrs >moduleAttrs;	/* optional element of type cusdk:MapModuleAttrs */
public:
	virtual int soap_type() const { return 729; } /* = unique id SOAP_TYPE_cusdk__MapTypeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MapTypeInfo() { cusdk__MapTypeInfo::soap_default(NULL); }
	virtual ~cusdk__MapTypeInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSupportMapTypesReq
#define SOAP_TYPE_cusdk__GetSupportMapTypesReq (731)
/* cusdk:GetSupportMapTypesReq */
class SOAP_CMAC cusdk__GetSupportMapTypesReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 731; } /* = unique id SOAP_TYPE_cusdk__GetSupportMapTypesReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetSupportMapTypesReq() { cusdk__GetSupportMapTypesReq::soap_default(NULL); }
	virtual ~cusdk__GetSupportMapTypesReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSupportMapTypesRsp
#define SOAP_TYPE_cusdk__GetSupportMapTypesRsp (732)
/* cusdk:GetSupportMapTypesRsp */
class SOAP_CMAC cusdk__GetSupportMapTypesRsp
{
public:
	std::vector<cusdk__MapTypeInfo >supportMapTypes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:MapTypeInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 732; } /* = unique id SOAP_TYPE_cusdk__GetSupportMapTypesRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetSupportMapTypesRsp() { cusdk__GetSupportMapTypesRsp::soap_default(NULL); }
	virtual ~cusdk__GetSupportMapTypesRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSupportMapTypes
#define SOAP_TYPE_cusdk__GetSupportMapTypes (736)
/* cusdk:GetSupportMapTypes */
struct cusdk__GetSupportMapTypes
{
public:
	cusdk__GetSupportMapTypesReq req;	/* required element of type cusdk:GetSupportMapTypesReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__Map
#define SOAP_TYPE_cusdk__Map (737)
/* cusdk:Map */
class SOAP_CMAC cusdk__Map
{
public:
	std::string mapId;	/* required element of type xsd:string */
	std::string mapName;	/* required element of type xsd:string */
	enum cusdk__EMapType mapType;	/* required element of type cusdk:EMapType */
	std::string mapUrl;	/* required element of type xsd:string */
	std::string parentMapId;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	double minLongitude;	/* required element of type xsd:double */
	double maxLongitude;	/* required element of type xsd:double */
	double minLatitude;	/* required element of type xsd:double */
	double maxLatitude;	/* required element of type xsd:double */
	int minScaleLevel;	/* required element of type xsd:int */
	int maxScaleLevel;	/* required element of type xsd:int */
	double screenCenterLongitude;	/* required element of type xsd:double */
	double screenCenterLatitude;	/* required element of type xsd:double */
	int defaultScaleLevel;	/* required element of type xsd:int */
	enum cusdk__EMapCoordType coordType;	/* required element of type cusdk:EMapCoordType */
	std::string version;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 737; } /* = unique id SOAP_TYPE_cusdk__Map */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__Map() { cusdk__Map::soap_default(NULL); }
	virtual ~cusdk__Map() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMapImageUploadUrlReq
#define SOAP_TYPE_cusdk__GetMapImageUploadUrlReq (738)
/* cusdk:GetMapImageUploadUrlReq */
class SOAP_CMAC cusdk__GetMapImageUploadUrlReq : public cusdk__BaseReq
{
public:
	std::string parentMapId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 738; } /* = unique id SOAP_TYPE_cusdk__GetMapImageUploadUrlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetMapImageUploadUrlReq() { cusdk__GetMapImageUploadUrlReq::soap_default(NULL); }
	virtual ~cusdk__GetMapImageUploadUrlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMapImageUploadUrlRsp
#define SOAP_TYPE_cusdk__GetMapImageUploadUrlRsp (739)
/* cusdk:GetMapImageUploadUrlRsp */
class SOAP_CMAC cusdk__GetMapImageUploadUrlRsp
{
public:
	std::string imageUploadUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 739; } /* = unique id SOAP_TYPE_cusdk__GetMapImageUploadUrlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetMapImageUploadUrlRsp() { cusdk__GetMapImageUploadUrlRsp::soap_default(NULL); }
	virtual ~cusdk__GetMapImageUploadUrlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMapImageUploadUrl
#define SOAP_TYPE_cusdk__GetMapImageUploadUrl (742)
/* cusdk:GetMapImageUploadUrl */
struct cusdk__GetMapImageUploadUrl
{
public:
	cusdk__GetMapImageUploadUrlReq req;	/* required element of type cusdk:GetMapImageUploadUrlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateMapReq
#define SOAP_TYPE_cusdk__CreateMapReq (743)
/* cusdk:CreateMapReq */
class SOAP_CMAC cusdk__CreateMapReq : public cusdk__BaseReq
{
public:
	cusdk__Map mapInfo;	/* required element of type cusdk:Map */
public:
	virtual int soap_type() const { return 743; } /* = unique id SOAP_TYPE_cusdk__CreateMapReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateMapReq() { cusdk__CreateMapReq::soap_default(NULL); }
	virtual ~cusdk__CreateMapReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateMapRsp
#define SOAP_TYPE_cusdk__CreateMapRsp (744)
/* cusdk:CreateMapRsp */
class SOAP_CMAC cusdk__CreateMapRsp
{
public:
	std::string mapId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 744; } /* = unique id SOAP_TYPE_cusdk__CreateMapRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateMapRsp() { cusdk__CreateMapRsp::soap_default(NULL); }
	virtual ~cusdk__CreateMapRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateMap
#define SOAP_TYPE_cusdk__CreateMap (747)
/* cusdk:CreateMap */
struct cusdk__CreateMap
{
public:
	cusdk__CreateMapReq req;	/* required element of type cusdk:CreateMapReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyMapReq
#define SOAP_TYPE_cusdk__ModifyMapReq (748)
/* cusdk:ModifyMapReq */
class SOAP_CMAC cusdk__ModifyMapReq : public cusdk__BaseReq
{
public:
	cusdk__Map mapInfo;	/* required element of type cusdk:Map */
public:
	virtual int soap_type() const { return 748; } /* = unique id SOAP_TYPE_cusdk__ModifyMapReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyMapReq() { cusdk__ModifyMapReq::soap_default(NULL); }
	virtual ~cusdk__ModifyMapReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyMapRsp
#define SOAP_TYPE_cusdk__ModifyMapRsp (749)
/* cusdk:ModifyMapRsp */
class SOAP_CMAC cusdk__ModifyMapRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 749; } /* = unique id SOAP_TYPE_cusdk__ModifyMapRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyMapRsp() { cusdk__ModifyMapRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyMapRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyMap
#define SOAP_TYPE_cusdk__ModifyMap (752)
/* cusdk:ModifyMap */
struct cusdk__ModifyMap
{
public:
	cusdk__ModifyMapReq req;	/* required element of type cusdk:ModifyMapReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelMapReq
#define SOAP_TYPE_cusdk__DelMapReq (753)
/* cusdk:DelMapReq */
class SOAP_CMAC cusdk__DelMapReq : public cusdk__BaseReq
{
public:
	std::string mapId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 753; } /* = unique id SOAP_TYPE_cusdk__DelMapReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelMapReq() { cusdk__DelMapReq::soap_default(NULL); }
	virtual ~cusdk__DelMapReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelMapRsp
#define SOAP_TYPE_cusdk__DelMapRsp (754)
/* cusdk:DelMapRsp */
class SOAP_CMAC cusdk__DelMapRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 754; } /* = unique id SOAP_TYPE_cusdk__DelMapRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelMapRsp() { cusdk__DelMapRsp::soap_default(NULL); }
	virtual ~cusdk__DelMapRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelMap
#define SOAP_TYPE_cusdk__DelMap (757)
/* cusdk:DelMap */
struct cusdk__DelMap
{
public:
	cusdk__DelMapReq req;	/* required element of type cusdk:DelMapReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapReq
#define SOAP_TYPE_cusdk__QueryMapReq (758)
/* cusdk:QueryMapReq */
class SOAP_CMAC cusdk__QueryMapReq : public cusdk__BaseReq
{
public:
	std::string mapId;	/* required element of type xsd:string */
	bool mapIdEnabled;	/* required element of type xsd:boolean */
	std::string parentMapId;	/* required element of type xsd:string */
	bool parentMapIdEnabled;	/* required element of type xsd:boolean */
	enum cusdk__EMapType mapType;	/* required element of type cusdk:EMapType */
	bool mapTypeEnabled;	/* required element of type xsd:boolean */
	std::string mapName;	/* required element of type xsd:string */
	bool mapNameEnabled;	/* required element of type xsd:boolean */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 758; } /* = unique id SOAP_TYPE_cusdk__QueryMapReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryMapReq() { cusdk__QueryMapReq::soap_default(NULL); }
	virtual ~cusdk__QueryMapReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapRsp
#define SOAP_TYPE_cusdk__QueryMapRsp (759)
/* cusdk:QueryMapRsp */
class SOAP_CMAC cusdk__QueryMapRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__Map >mapList;	/* optional element of type cusdk:Map */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 759; } /* = unique id SOAP_TYPE_cusdk__QueryMapRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryMapRsp() { cusdk__QueryMapRsp::soap_default(NULL); }
	virtual ~cusdk__QueryMapRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMap
#define SOAP_TYPE_cusdk__QueryMap (763)
/* cusdk:QueryMap */
struct cusdk__QueryMap
{
public:
	cusdk__QueryMapReq req;	/* required element of type cusdk:QueryMapReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__MapPosition
#define SOAP_TYPE_cusdk__MapPosition (764)
/* cusdk:MapPosition */
class SOAP_CMAC cusdk__MapPosition
{
public:
	double longitude;	/* required element of type xsd:double */
	double latitude;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 764; } /* = unique id SOAP_TYPE_cusdk__MapPosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MapPosition() { cusdk__MapPosition::soap_default(NULL); }
	virtual ~cusdk__MapPosition() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MapArea
#define SOAP_TYPE_cusdk__MapArea (765)
/* cusdk:MapArea */
class SOAP_CMAC cusdk__MapArea
{
public:
	std::string areaId;	/* required element of type xsd:string */
	std::string parentMapId;	/* required element of type xsd:string */
	std::string refMapId;	/* required element of type xsd:string */
	std::string layerId;	/* required element of type xsd:string */
	std::string layerColor;	/* required element of type xsd:string */
	std::string customStyle;	/* required element of type xsd:string */
	double opacity;	/* required element of type xsd:double */
	std::vector<cusdk__MapPosition >trace;	/* optional element of type cusdk:MapPosition */
public:
	virtual int soap_type() const { return 765; } /* = unique id SOAP_TYPE_cusdk__MapArea */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MapArea() { cusdk__MapArea::soap_default(NULL); }
	virtual ~cusdk__MapArea() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapAreaReq
#define SOAP_TYPE_cusdk__QueryMapAreaReq (767)
/* cusdk:QueryMapAreaReq */
class SOAP_CMAC cusdk__QueryMapAreaReq : public cusdk__BaseReq
{
public:
	std::string areaId;	/* required element of type xsd:string */
	bool areaIdEnabled;	/* required element of type xsd:boolean */
	std::string parentMapId;	/* required element of type xsd:string */
	bool parentMapIdEnabled;	/* required element of type xsd:boolean */
	std::string refMapId;	/* required element of type xsd:string */
	bool refMapIdEnabled;	/* required element of type xsd:boolean */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 767; } /* = unique id SOAP_TYPE_cusdk__QueryMapAreaReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryMapAreaReq() { cusdk__QueryMapAreaReq::soap_default(NULL); }
	virtual ~cusdk__QueryMapAreaReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapAreaRsp
#define SOAP_TYPE_cusdk__QueryMapAreaRsp (768)
/* cusdk:QueryMapAreaRsp */
class SOAP_CMAC cusdk__QueryMapAreaRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__MapArea >areaList;	/* optional element of type cusdk:MapArea */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 768; } /* = unique id SOAP_TYPE_cusdk__QueryMapAreaRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryMapAreaRsp() { cusdk__QueryMapAreaRsp::soap_default(NULL); }
	virtual ~cusdk__QueryMapAreaRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapArea
#define SOAP_TYPE_cusdk__QueryMapArea (772)
/* cusdk:QueryMapArea */
struct cusdk__QueryMapArea
{
public:
	cusdk__QueryMapAreaReq req;	/* required element of type cusdk:QueryMapAreaReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateMapAreaReq
#define SOAP_TYPE_cusdk__CreateMapAreaReq (773)
/* cusdk:CreateMapAreaReq */
class SOAP_CMAC cusdk__CreateMapAreaReq : public cusdk__BaseReq
{
public:
	cusdk__MapArea mapAreaInfo;	/* required element of type cusdk:MapArea */
public:
	virtual int soap_type() const { return 773; } /* = unique id SOAP_TYPE_cusdk__CreateMapAreaReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateMapAreaReq() { cusdk__CreateMapAreaReq::soap_default(NULL); }
	virtual ~cusdk__CreateMapAreaReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateMapAreaRsp
#define SOAP_TYPE_cusdk__CreateMapAreaRsp (774)
/* cusdk:CreateMapAreaRsp */
class SOAP_CMAC cusdk__CreateMapAreaRsp
{
public:
	std::string mapAreaId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 774; } /* = unique id SOAP_TYPE_cusdk__CreateMapAreaRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateMapAreaRsp() { cusdk__CreateMapAreaRsp::soap_default(NULL); }
	virtual ~cusdk__CreateMapAreaRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateMapArea
#define SOAP_TYPE_cusdk__CreateMapArea (777)
/* cusdk:CreateMapArea */
struct cusdk__CreateMapArea
{
public:
	cusdk__CreateMapAreaReq req;	/* required element of type cusdk:CreateMapAreaReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyMapAreaReq
#define SOAP_TYPE_cusdk__ModifyMapAreaReq (778)
/* cusdk:ModifyMapAreaReq */
class SOAP_CMAC cusdk__ModifyMapAreaReq : public cusdk__BaseReq
{
public:
	cusdk__MapArea mapAreaInfo;	/* required element of type cusdk:MapArea */
public:
	virtual int soap_type() const { return 778; } /* = unique id SOAP_TYPE_cusdk__ModifyMapAreaReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyMapAreaReq() { cusdk__ModifyMapAreaReq::soap_default(NULL); }
	virtual ~cusdk__ModifyMapAreaReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyMapAreaRsp
#define SOAP_TYPE_cusdk__ModifyMapAreaRsp (779)
/* cusdk:ModifyMapAreaRsp */
class SOAP_CMAC cusdk__ModifyMapAreaRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 779; } /* = unique id SOAP_TYPE_cusdk__ModifyMapAreaRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyMapAreaRsp() { cusdk__ModifyMapAreaRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyMapAreaRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyMapArea
#define SOAP_TYPE_cusdk__ModifyMapArea (782)
/* cusdk:ModifyMapArea */
struct cusdk__ModifyMapArea
{
public:
	cusdk__ModifyMapAreaReq req;	/* required element of type cusdk:ModifyMapAreaReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__MapElement
#define SOAP_TYPE_cusdk__MapElement (783)
/* cusdk:MapElement */
class SOAP_CMAC cusdk__MapElement
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string mapId;	/* required element of type xsd:string */
	std::string layerId;	/* required element of type xsd:string */
	enum cusdk__EMapElementType type;	/* required element of type cusdk:EMapElementType */
	std::string deviceId;	/* required element of type xsd:string */
	int deviceChannel;	/* required element of type xsd:int */
	enum cusdk__EDeviceChannelType channelType;	/* required element of type cusdk:EDeviceChannelType */
	cusdk__MapPosition position;	/* required element of type cusdk:MapPosition */
	enum cusdk__EMapCoordType coordType;	/* required element of type cusdk:EMapCoordType */
	std::string picUrl;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	bool storeGPSTrace;	/* required element of type xsd:boolean */
	cusdk__MapPosition marPosition;	/* required element of type cusdk:MapPosition */
public:
	virtual int soap_type() const { return 783; } /* = unique id SOAP_TYPE_cusdk__MapElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MapElement() { cusdk__MapElement::soap_default(NULL); }
	virtual ~cusdk__MapElement() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MpsDataVersion
#define SOAP_TYPE_cusdk__MpsDataVersion (784)
/* cusdk:MpsDataVersion */
class SOAP_CMAC cusdk__MpsDataVersion
{
public:
	int elementVersion;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 784; } /* = unique id SOAP_TYPE_cusdk__MpsDataVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MpsDataVersion() { cusdk__MpsDataVersion::soap_default(NULL); }
	virtual ~cusdk__MpsDataVersion() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateMapElementReq
#define SOAP_TYPE_cusdk__CreateMapElementReq (785)
/* cusdk:CreateMapElementReq */
class SOAP_CMAC cusdk__CreateMapElementReq : public cusdk__BaseReq
{
public:
	cusdk__MapElement mapEleInfo;	/* required element of type cusdk:MapElement */
public:
	virtual int soap_type() const { return 785; } /* = unique id SOAP_TYPE_cusdk__CreateMapElementReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateMapElementReq() { cusdk__CreateMapElementReq::soap_default(NULL); }
	virtual ~cusdk__CreateMapElementReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateMapElementRsp
#define SOAP_TYPE_cusdk__CreateMapElementRsp (786)
/* cusdk:CreateMapElementRsp */
class SOAP_CMAC cusdk__CreateMapElementRsp
{
public:
	std::string mapEleId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 786; } /* = unique id SOAP_TYPE_cusdk__CreateMapElementRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateMapElementRsp() { cusdk__CreateMapElementRsp::soap_default(NULL); }
	virtual ~cusdk__CreateMapElementRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateMapElement
#define SOAP_TYPE_cusdk__CreateMapElement (789)
/* cusdk:CreateMapElement */
struct cusdk__CreateMapElement
{
public:
	cusdk__CreateMapElementReq req;	/* required element of type cusdk:CreateMapElementReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyMapElementReq
#define SOAP_TYPE_cusdk__ModifyMapElementReq (790)
/* cusdk:ModifyMapElementReq */
class SOAP_CMAC cusdk__ModifyMapElementReq : public cusdk__BaseReq
{
public:
	cusdk__MapElement mapElementInfo;	/* required element of type cusdk:MapElement */
public:
	virtual int soap_type() const { return 790; } /* = unique id SOAP_TYPE_cusdk__ModifyMapElementReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyMapElementReq() { cusdk__ModifyMapElementReq::soap_default(NULL); }
	virtual ~cusdk__ModifyMapElementReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyMapElementRsp
#define SOAP_TYPE_cusdk__ModifyMapElementRsp (791)
/* cusdk:ModifyMapElementRsp */
class SOAP_CMAC cusdk__ModifyMapElementRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 791; } /* = unique id SOAP_TYPE_cusdk__ModifyMapElementRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyMapElementRsp() { cusdk__ModifyMapElementRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyMapElementRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyMapElement
#define SOAP_TYPE_cusdk__ModifyMapElement (794)
/* cusdk:ModifyMapElement */
struct cusdk__ModifyMapElement
{
public:
	cusdk__ModifyMapElementReq req;	/* required element of type cusdk:ModifyMapElementReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelMapElementReq
#define SOAP_TYPE_cusdk__DelMapElementReq (795)
/* cusdk:DelMapElementReq */
class SOAP_CMAC cusdk__DelMapElementReq : public cusdk__BaseReq
{
public:
	std::string mapElementId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 795; } /* = unique id SOAP_TYPE_cusdk__DelMapElementReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelMapElementReq() { cusdk__DelMapElementReq::soap_default(NULL); }
	virtual ~cusdk__DelMapElementReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelMapElementRsp
#define SOAP_TYPE_cusdk__DelMapElementRsp (796)
/* cusdk:DelMapElementRsp */
class SOAP_CMAC cusdk__DelMapElementRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 796; } /* = unique id SOAP_TYPE_cusdk__DelMapElementRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelMapElementRsp() { cusdk__DelMapElementRsp::soap_default(NULL); }
	virtual ~cusdk__DelMapElementRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelMapElement
#define SOAP_TYPE_cusdk__DelMapElement (799)
/* cusdk:DelMapElement */
struct cusdk__DelMapElement
{
public:
	cusdk__DelMapElementReq req;	/* required element of type cusdk:DelMapElementReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapElementReq
#define SOAP_TYPE_cusdk__QueryMapElementReq (800)
/* cusdk:QueryMapElementReq */
class SOAP_CMAC cusdk__QueryMapElementReq : public cusdk__BaseReq
{
public:
	std::string mapId;	/* required element of type xsd:string */
	bool mapIdEnabled;	/* required element of type xsd:boolean */
	std::string elementId;	/* required element of type xsd:string */
	bool elementIdEnabled;	/* required element of type xsd:boolean */
	enum cusdk__EMapElementType elementType;	/* required element of type cusdk:EMapElementType */
	bool elementTypeEnabled;	/* required element of type xsd:boolean */
	std::string deviceId;	/* required element of type xsd:string */
	int deviceChannel;	/* required element of type xsd:int */
	enum cusdk__EDeviceChannelType channelType;	/* required element of type cusdk:EDeviceChannelType */
	bool deviceChannelEnabled;	/* required element of type xsd:boolean */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 800; } /* = unique id SOAP_TYPE_cusdk__QueryMapElementReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryMapElementReq() { cusdk__QueryMapElementReq::soap_default(NULL); }
	virtual ~cusdk__QueryMapElementReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapElementRsp
#define SOAP_TYPE_cusdk__QueryMapElementRsp (801)
/* cusdk:QueryMapElementRsp */
class SOAP_CMAC cusdk__QueryMapElementRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__MapElement >mapElementList;	/* optional element of type cusdk:MapElement */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 801; } /* = unique id SOAP_TYPE_cusdk__QueryMapElementRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryMapElementRsp() { cusdk__QueryMapElementRsp::soap_default(NULL); }
	virtual ~cusdk__QueryMapElementRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapElement
#define SOAP_TYPE_cusdk__QueryMapElement (805)
/* cusdk:QueryMapElement */
struct cusdk__QueryMapElement
{
public:
	cusdk__QueryMapElementReq req;	/* required element of type cusdk:QueryMapElementReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchMapElementReq
#define SOAP_TYPE_cusdk__SearchMapElementReq (806)
/* cusdk:SearchMapElementReq */
class SOAP_CMAC cusdk__SearchMapElementReq : public cusdk__BaseReq
{
public:
	std::string mapId;	/* required element of type xsd:string */
	cusdk__MapPosition upperLeft;	/* required element of type cusdk:MapPosition */
	cusdk__MapPosition bottomRight;	/* required element of type cusdk:MapPosition */
	bool searchPosEnable;	/* required element of type xsd:boolean */
	std::string searchKey;	/* required element of type xsd:string */
	bool searchKeyEnabled;	/* required element of type xsd:boolean */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 806; } /* = unique id SOAP_TYPE_cusdk__SearchMapElementReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchMapElementReq() { cusdk__SearchMapElementReq::soap_default(NULL); }
	virtual ~cusdk__SearchMapElementReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchMapElementRsp
#define SOAP_TYPE_cusdk__SearchMapElementRsp (807)
/* cusdk:SearchMapElementRsp */
class SOAP_CMAC cusdk__SearchMapElementRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__MapElement >mapElementList;	/* optional element of type cusdk:MapElement */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 807; } /* = unique id SOAP_TYPE_cusdk__SearchMapElementRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchMapElementRsp() { cusdk__SearchMapElementRsp::soap_default(NULL); }
	virtual ~cusdk__SearchMapElementRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchMapElement
#define SOAP_TYPE_cusdk__SearchMapElement (810)
/* cusdk:SearchMapElement */
struct cusdk__SearchMapElement
{
public:
	cusdk__SearchMapElementReq req;	/* required element of type cusdk:SearchMapElementReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMapElementImageUploadUrlReq
#define SOAP_TYPE_cusdk__GetMapElementImageUploadUrlReq (811)
/* cusdk:GetMapElementImageUploadUrlReq */
class SOAP_CMAC cusdk__GetMapElementImageUploadUrlReq : public cusdk__BaseReq
{
public:
	std::string imageName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 811; } /* = unique id SOAP_TYPE_cusdk__GetMapElementImageUploadUrlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetMapElementImageUploadUrlReq() { cusdk__GetMapElementImageUploadUrlReq::soap_default(NULL); }
	virtual ~cusdk__GetMapElementImageUploadUrlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMapElementImageUploadUrlRsp
#define SOAP_TYPE_cusdk__GetMapElementImageUploadUrlRsp (812)
/* cusdk:GetMapElementImageUploadUrlRsp */
class SOAP_CMAC cusdk__GetMapElementImageUploadUrlRsp
{
public:
	std::string imageUploadUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 812; } /* = unique id SOAP_TYPE_cusdk__GetMapElementImageUploadUrlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetMapElementImageUploadUrlRsp() { cusdk__GetMapElementImageUploadUrlRsp::soap_default(NULL); }
	virtual ~cusdk__GetMapElementImageUploadUrlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMapElementImageUploadUrl
#define SOAP_TYPE_cusdk__GetMapElementImageUploadUrl (815)
/* cusdk:GetMapElementImageUploadUrl */
struct cusdk__GetMapElementImageUploadUrl
{
public:
	cusdk__GetMapElementImageUploadUrlReq req;	/* required element of type cusdk:GetMapElementImageUploadUrlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapElementImageListReq
#define SOAP_TYPE_cusdk__QueryMapElementImageListReq (816)
/* cusdk:QueryMapElementImageListReq */
class SOAP_CMAC cusdk__QueryMapElementImageListReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 816; } /* = unique id SOAP_TYPE_cusdk__QueryMapElementImageListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryMapElementImageListReq() { cusdk__QueryMapElementImageListReq::soap_default(NULL); }
	virtual ~cusdk__QueryMapElementImageListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapElementImageListRsp
#define SOAP_TYPE_cusdk__QueryMapElementImageListRsp (817)
/* cusdk:QueryMapElementImageListRsp */
class SOAP_CMAC cusdk__QueryMapElementImageListRsp
{
public:
	std::vector<std::string >mapElementImageUrlList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 817; } /* = unique id SOAP_TYPE_cusdk__QueryMapElementImageListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryMapElementImageListRsp() { cusdk__QueryMapElementImageListRsp::soap_default(NULL); }
	virtual ~cusdk__QueryMapElementImageListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryMapElementImageList
#define SOAP_TYPE_cusdk__QueryMapElementImageList (820)
/* cusdk:QueryMapElementImageList */
struct cusdk__QueryMapElementImageList
{
public:
	cusdk__QueryMapElementImageListReq req;	/* required element of type cusdk:QueryMapElementImageListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__MapPositionMar2EarthReq
#define SOAP_TYPE_cusdk__MapPositionMar2EarthReq (821)
/* cusdk:MapPositionMar2EarthReq */
class SOAP_CMAC cusdk__MapPositionMar2EarthReq : public cusdk__BaseReq
{
public:
	cusdk__MapPosition marPos;	/* required element of type cusdk:MapPosition */
public:
	virtual int soap_type() const { return 821; } /* = unique id SOAP_TYPE_cusdk__MapPositionMar2EarthReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MapPositionMar2EarthReq() { cusdk__MapPositionMar2EarthReq::soap_default(NULL); }
	virtual ~cusdk__MapPositionMar2EarthReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MapPositionMar2EarthRsp
#define SOAP_TYPE_cusdk__MapPositionMar2EarthRsp (822)
/* cusdk:MapPositionMar2EarthRsp */
class SOAP_CMAC cusdk__MapPositionMar2EarthRsp
{
public:
	cusdk__MapPosition earthPos;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:MapPosition */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 822; } /* = unique id SOAP_TYPE_cusdk__MapPositionMar2EarthRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MapPositionMar2EarthRsp() { cusdk__MapPositionMar2EarthRsp::soap_default(NULL); }
	virtual ~cusdk__MapPositionMar2EarthRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MapPositionMar2Earth
#define SOAP_TYPE_cusdk__MapPositionMar2Earth (825)
/* cusdk:MapPositionMar2Earth */
struct cusdk__MapPositionMar2Earth
{
public:
	cusdk__MapPositionMar2EarthReq req;	/* required element of type cusdk:MapPositionMar2EarthReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__MapPositionEarth2MarReq
#define SOAP_TYPE_cusdk__MapPositionEarth2MarReq (826)
/* cusdk:MapPositionEarth2MarReq */
class SOAP_CMAC cusdk__MapPositionEarth2MarReq : public cusdk__BaseReq
{
public:
	cusdk__MapPosition earthPos;	/* required element of type cusdk:MapPosition */
public:
	virtual int soap_type() const { return 826; } /* = unique id SOAP_TYPE_cusdk__MapPositionEarth2MarReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MapPositionEarth2MarReq() { cusdk__MapPositionEarth2MarReq::soap_default(NULL); }
	virtual ~cusdk__MapPositionEarth2MarReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MapPositionEarth2MarRsp
#define SOAP_TYPE_cusdk__MapPositionEarth2MarRsp (827)
/* cusdk:MapPositionEarth2MarRsp */
class SOAP_CMAC cusdk__MapPositionEarth2MarRsp
{
public:
	cusdk__MapPosition marPos;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:MapPosition */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 827; } /* = unique id SOAP_TYPE_cusdk__MapPositionEarth2MarRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MapPositionEarth2MarRsp() { cusdk__MapPositionEarth2MarRsp::soap_default(NULL); }
	virtual ~cusdk__MapPositionEarth2MarRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MapPositionEarth2Mar
#define SOAP_TYPE_cusdk__MapPositionEarth2Mar (830)
/* cusdk:MapPositionEarth2Mar */
struct cusdk__MapPositionEarth2Mar
{
public:
	cusdk__MapPositionEarth2MarReq req;	/* required element of type cusdk:MapPositionEarth2MarReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetEMapDataVersionReq
#define SOAP_TYPE_cusdk__GetEMapDataVersionReq (831)
/* cusdk:GetEMapDataVersionReq */
class SOAP_CMAC cusdk__GetEMapDataVersionReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 831; } /* = unique id SOAP_TYPE_cusdk__GetEMapDataVersionReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetEMapDataVersionReq() { cusdk__GetEMapDataVersionReq::soap_default(NULL); }
	virtual ~cusdk__GetEMapDataVersionReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetEMapDataVersionRsp
#define SOAP_TYPE_cusdk__GetEMapDataVersionRsp (832)
/* cusdk:GetEMapDataVersionRsp */
class SOAP_CMAC cusdk__GetEMapDataVersionRsp
{
public:
	cusdk__MpsDataVersion dataVersion;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:MpsDataVersion */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 832; } /* = unique id SOAP_TYPE_cusdk__GetEMapDataVersionRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetEMapDataVersionRsp() { cusdk__GetEMapDataVersionRsp::soap_default(NULL); }
	virtual ~cusdk__GetEMapDataVersionRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetEMapDataVersion
#define SOAP_TYPE_cusdk__GetEMapDataVersion (835)
/* cusdk:GetEMapDataVersion */
struct cusdk__GetEMapDataVersion
{
public:
	cusdk__GetEMapDataVersionReq req;	/* required element of type cusdk:GetEMapDataVersionReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAlarmLinkDataVersionReq
#define SOAP_TYPE_cusdk__GetAlarmLinkDataVersionReq (836)
/* cusdk:GetAlarmLinkDataVersionReq */
class SOAP_CMAC cusdk__GetAlarmLinkDataVersionReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 836; } /* = unique id SOAP_TYPE_cusdk__GetAlarmLinkDataVersionReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAlarmLinkDataVersionReq() { cusdk__GetAlarmLinkDataVersionReq::soap_default(NULL); }
	virtual ~cusdk__GetAlarmLinkDataVersionReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAlarmLinkDataVersionRsp
#define SOAP_TYPE_cusdk__GetAlarmLinkDataVersionRsp (837)
/* cusdk:GetAlarmLinkDataVersionRsp */
class SOAP_CMAC cusdk__GetAlarmLinkDataVersionRsp
{
public:
	std::string dataVersion;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 837; } /* = unique id SOAP_TYPE_cusdk__GetAlarmLinkDataVersionRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAlarmLinkDataVersionRsp() { cusdk__GetAlarmLinkDataVersionRsp::soap_default(NULL); }
	virtual ~cusdk__GetAlarmLinkDataVersionRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAlarmLinkDataVersion
#define SOAP_TYPE_cusdk__GetAlarmLinkDataVersion (840)
/* cusdk:GetAlarmLinkDataVersion */
struct cusdk__GetAlarmLinkDataVersion
{
public:
	cusdk__GetAlarmLinkDataVersionReq req;	/* required element of type cusdk:GetAlarmLinkDataVersionReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLinkConfigReq
#define SOAP_TYPE_cusdk__QueryAlarmLinkConfigReq (841)
/* cusdk:QueryAlarmLinkConfigReq */
class SOAP_CMAC cusdk__QueryAlarmLinkConfigReq : public cusdk__BaseReq
{
public:
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 841; } /* = unique id SOAP_TYPE_cusdk__QueryAlarmLinkConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryAlarmLinkConfigReq() { cusdk__QueryAlarmLinkConfigReq::soap_default(NULL); }
	virtual ~cusdk__QueryAlarmLinkConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLinkConfigRsp
#define SOAP_TYPE_cusdk__QueryAlarmLinkConfigRsp (842)
/* cusdk:QueryAlarmLinkConfigRsp */
class SOAP_CMAC cusdk__QueryAlarmLinkConfigRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__AlarmLinkConfig >alarmLinkConfigList;	/* optional element of type cusdk:AlarmLinkConfig */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 842; } /* = unique id SOAP_TYPE_cusdk__QueryAlarmLinkConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryAlarmLinkConfigRsp() { cusdk__QueryAlarmLinkConfigRsp::soap_default(NULL); }
	virtual ~cusdk__QueryAlarmLinkConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLinkConfig
#define SOAP_TYPE_cusdk__QueryAlarmLinkConfig (845)
/* cusdk:QueryAlarmLinkConfig */
struct cusdk__QueryAlarmLinkConfig
{
public:
	cusdk__QueryAlarmLinkConfigReq req;	/* required element of type cusdk:QueryAlarmLinkConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAlarmLinkConfigReq
#define SOAP_TYPE_cusdk__GetAlarmLinkConfigReq (846)
/* cusdk:GetAlarmLinkConfigReq */
class SOAP_CMAC cusdk__GetAlarmLinkConfigReq : public cusdk__BaseReq
{
public:
	cusdk__AlarmSource alarmSource;	/* required element of type cusdk:AlarmSource */
public:
	virtual int soap_type() const { return 846; } /* = unique id SOAP_TYPE_cusdk__GetAlarmLinkConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAlarmLinkConfigReq() { cusdk__GetAlarmLinkConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetAlarmLinkConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAlarmLinkConfigRsp
#define SOAP_TYPE_cusdk__GetAlarmLinkConfigRsp (847)
/* cusdk:GetAlarmLinkConfigRsp */
class SOAP_CMAC cusdk__GetAlarmLinkConfigRsp
{
public:
	cusdk__AlarmLinkConfig alarmLinkCoonfig;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:AlarmLinkConfig */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 847; } /* = unique id SOAP_TYPE_cusdk__GetAlarmLinkConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAlarmLinkConfigRsp() { cusdk__GetAlarmLinkConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetAlarmLinkConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAlarmLinkConfig
#define SOAP_TYPE_cusdk__GetAlarmLinkConfig (850)
/* cusdk:GetAlarmLinkConfig */
struct cusdk__GetAlarmLinkConfig
{
public:
	cusdk__GetAlarmLinkConfigReq req;	/* required element of type cusdk:GetAlarmLinkConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetAlarmLinkConfigReq
#define SOAP_TYPE_cusdk__SetAlarmLinkConfigReq (851)
/* cusdk:SetAlarmLinkConfigReq */
class SOAP_CMAC cusdk__SetAlarmLinkConfigReq : public cusdk__BaseReq
{
public:
	cusdk__AlarmLinkConfig alarmLinkCoonfig;	/* required element of type cusdk:AlarmLinkConfig */
public:
	virtual int soap_type() const { return 851; } /* = unique id SOAP_TYPE_cusdk__SetAlarmLinkConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetAlarmLinkConfigReq() { cusdk__SetAlarmLinkConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetAlarmLinkConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetAlarmLinkConfigRsp
#define SOAP_TYPE_cusdk__SetAlarmLinkConfigRsp (852)
/* cusdk:SetAlarmLinkConfigRsp */
class SOAP_CMAC cusdk__SetAlarmLinkConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 852; } /* = unique id SOAP_TYPE_cusdk__SetAlarmLinkConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetAlarmLinkConfigRsp() { cusdk__SetAlarmLinkConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetAlarmLinkConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetAlarmLinkConfig
#define SOAP_TYPE_cusdk__SetAlarmLinkConfig (855)
/* cusdk:SetAlarmLinkConfig */
struct cusdk__SetAlarmLinkConfig
{
public:
	cusdk__SetAlarmLinkConfigReq req;	/* required element of type cusdk:SetAlarmLinkConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__AlarmLinkArea
#define SOAP_TYPE_cusdk__AlarmLinkArea (856)
/* cusdk:AlarmLinkArea */
class SOAP_CMAC cusdk__AlarmLinkArea
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::vector<cusdk__AlarmSource >alarmLinkSourceList;	/* optional element of type cusdk:AlarmSource */
public:
	virtual int soap_type() const { return 856; } /* = unique id SOAP_TYPE_cusdk__AlarmLinkArea */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AlarmLinkArea() { cusdk__AlarmLinkArea::soap_default(NULL); }
	virtual ~cusdk__AlarmLinkArea() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLinkAreaReq
#define SOAP_TYPE_cusdk__QueryAlarmLinkAreaReq (858)
/* cusdk:QueryAlarmLinkAreaReq */
class SOAP_CMAC cusdk__QueryAlarmLinkAreaReq : public cusdk__BaseReq
{
public:
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 858; } /* = unique id SOAP_TYPE_cusdk__QueryAlarmLinkAreaReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryAlarmLinkAreaReq() { cusdk__QueryAlarmLinkAreaReq::soap_default(NULL); }
	virtual ~cusdk__QueryAlarmLinkAreaReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLinkAreaRsp
#define SOAP_TYPE_cusdk__QueryAlarmLinkAreaRsp (859)
/* cusdk:QueryAlarmLinkAreaRsp */
class SOAP_CMAC cusdk__QueryAlarmLinkAreaRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__AlarmLinkArea >alarmLinkAreaList;	/* optional element of type cusdk:AlarmLinkArea */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 859; } /* = unique id SOAP_TYPE_cusdk__QueryAlarmLinkAreaRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryAlarmLinkAreaRsp() { cusdk__QueryAlarmLinkAreaRsp::soap_default(NULL); }
	virtual ~cusdk__QueryAlarmLinkAreaRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLinkArea
#define SOAP_TYPE_cusdk__QueryAlarmLinkArea (863)
/* cusdk:QueryAlarmLinkArea */
struct cusdk__QueryAlarmLinkArea
{
public:
	cusdk__QueryAlarmLinkAreaReq req;	/* required element of type cusdk:QueryAlarmLinkAreaReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateAlarmLinkAreaReq
#define SOAP_TYPE_cusdk__CreateAlarmLinkAreaReq (864)
/* cusdk:CreateAlarmLinkAreaReq */
class SOAP_CMAC cusdk__CreateAlarmLinkAreaReq : public cusdk__BaseReq
{
public:
	cusdk__AlarmLinkArea alarmLinkAreaInfo;	/* required element of type cusdk:AlarmLinkArea */
public:
	virtual int soap_type() const { return 864; } /* = unique id SOAP_TYPE_cusdk__CreateAlarmLinkAreaReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateAlarmLinkAreaReq() { cusdk__CreateAlarmLinkAreaReq::soap_default(NULL); }
	virtual ~cusdk__CreateAlarmLinkAreaReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateAlarmLinkAreaRsp
#define SOAP_TYPE_cusdk__CreateAlarmLinkAreaRsp (865)
/* cusdk:CreateAlarmLinkAreaRsp */
class SOAP_CMAC cusdk__CreateAlarmLinkAreaRsp
{
public:
	std::string alarmLinkAreaId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 865; } /* = unique id SOAP_TYPE_cusdk__CreateAlarmLinkAreaRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateAlarmLinkAreaRsp() { cusdk__CreateAlarmLinkAreaRsp::soap_default(NULL); }
	virtual ~cusdk__CreateAlarmLinkAreaRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateAlarmLinkArea
#define SOAP_TYPE_cusdk__CreateAlarmLinkArea (868)
/* cusdk:CreateAlarmLinkArea */
struct cusdk__CreateAlarmLinkArea
{
public:
	cusdk__CreateAlarmLinkAreaReq req;	/* required element of type cusdk:CreateAlarmLinkAreaReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelAlarmLinkAreaReq
#define SOAP_TYPE_cusdk__DelAlarmLinkAreaReq (869)
/* cusdk:DelAlarmLinkAreaReq */
class SOAP_CMAC cusdk__DelAlarmLinkAreaReq : public cusdk__BaseReq
{
public:
	std::string alarmLinkAreaId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 869; } /* = unique id SOAP_TYPE_cusdk__DelAlarmLinkAreaReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelAlarmLinkAreaReq() { cusdk__DelAlarmLinkAreaReq::soap_default(NULL); }
	virtual ~cusdk__DelAlarmLinkAreaReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelAlarmLinkAreaRsp
#define SOAP_TYPE_cusdk__DelAlarmLinkAreaRsp (870)
/* cusdk:DelAlarmLinkAreaRsp */
class SOAP_CMAC cusdk__DelAlarmLinkAreaRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 870; } /* = unique id SOAP_TYPE_cusdk__DelAlarmLinkAreaRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelAlarmLinkAreaRsp() { cusdk__DelAlarmLinkAreaRsp::soap_default(NULL); }
	virtual ~cusdk__DelAlarmLinkAreaRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelAlarmLinkArea
#define SOAP_TYPE_cusdk__DelAlarmLinkArea (873)
/* cusdk:DelAlarmLinkArea */
struct cusdk__DelAlarmLinkArea
{
public:
	cusdk__DelAlarmLinkAreaReq req;	/* required element of type cusdk:DelAlarmLinkAreaReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyAlarmLinkAreaReq
#define SOAP_TYPE_cusdk__ModifyAlarmLinkAreaReq (874)
/* cusdk:ModifyAlarmLinkAreaReq */
class SOAP_CMAC cusdk__ModifyAlarmLinkAreaReq : public cusdk__BaseReq
{
public:
	cusdk__AlarmLinkArea alarmLinkAreaInfo;	/* required element of type cusdk:AlarmLinkArea */
public:
	virtual int soap_type() const { return 874; } /* = unique id SOAP_TYPE_cusdk__ModifyAlarmLinkAreaReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyAlarmLinkAreaReq() { cusdk__ModifyAlarmLinkAreaReq::soap_default(NULL); }
	virtual ~cusdk__ModifyAlarmLinkAreaReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyAlarmLinkAreaRsp
#define SOAP_TYPE_cusdk__ModifyAlarmLinkAreaRsp (875)
/* cusdk:ModifyAlarmLinkAreaRsp */
class SOAP_CMAC cusdk__ModifyAlarmLinkAreaRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 875; } /* = unique id SOAP_TYPE_cusdk__ModifyAlarmLinkAreaRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyAlarmLinkAreaRsp() { cusdk__ModifyAlarmLinkAreaRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyAlarmLinkAreaRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyAlarmLinkArea
#define SOAP_TYPE_cusdk__ModifyAlarmLinkArea (878)
/* cusdk:ModifyAlarmLinkArea */
struct cusdk__ModifyAlarmLinkArea
{
public:
	cusdk__ModifyAlarmLinkAreaReq req;	/* required element of type cusdk:ModifyAlarmLinkAreaReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserLog
#define SOAP_TYPE_cusdk__UserLog (879)
/* cusdk:UserLog */
class SOAP_CMAC cusdk__UserLog
{
public:
	std::string logId;	/* required element of type xsd:string */
	std::string loginSession;	/* required element of type xsd:string */
	std::string userId;	/* required element of type xsd:string */
	std::string domainName;	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
	std::string ipAddr;	/* required element of type xsd:string */
	time_t happenedTime;	/* required element of type xsd:dateTime */
	enum cusdk__EUserOperateType operateType;	/* required element of type cusdk:EUserOperateType */
	int operateTypeV2;	/* required element of type xsd:int */
	int operateResult;	/* required element of type xsd:int */
	std::string operateDesc;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 879; } /* = unique id SOAP_TYPE_cusdk__UserLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserLog() { cusdk__UserLog::soap_default(NULL); }
	virtual ~cusdk__UserLog() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryUserLogCondition
#define SOAP_TYPE_cusdk__QueryUserLogCondition (880)
/* cusdk:QueryUserLogCondition */
class SOAP_CMAC cusdk__QueryUserLogCondition
{
public:
	std::string userId;	/* required element of type xsd:string */
	bool userIdEnabled;	/* required element of type xsd:boolean */
	std::string userLoginSession;	/* required element of type xsd:string */
	bool userLoginSessionEnabled;	/* required element of type xsd:boolean */
	std::string domainName;	/* required element of type xsd:string */
	bool domainNameEnabled;	/* required element of type xsd:boolean */
	time_t timeBegin;	/* required element of type xsd:dateTime */
	time_t timeEnd;	/* required element of type xsd:dateTime */
	bool timeEnabled;	/* required element of type xsd:boolean */
	enum cusdk__EUserOperateType operateType;	/* required element of type cusdk:EUserOperateType */
	int operateTypeV2;	/* required element of type xsd:int */
	bool operateTypeEnabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 880; } /* = unique id SOAP_TYPE_cusdk__QueryUserLogCondition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryUserLogCondition() { cusdk__QueryUserLogCondition::soap_default(NULL); }
	virtual ~cusdk__QueryUserLogCondition() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryUserLogReq
#define SOAP_TYPE_cusdk__QueryUserLogReq (881)
/* cusdk:QueryUserLogReq */
class SOAP_CMAC cusdk__QueryUserLogReq : public cusdk__BaseReq
{
public:
	cusdk__QueryUserLogCondition condition;	/* required element of type cusdk:QueryUserLogCondition */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 881; } /* = unique id SOAP_TYPE_cusdk__QueryUserLogReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryUserLogReq() { cusdk__QueryUserLogReq::soap_default(NULL); }
	virtual ~cusdk__QueryUserLogReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryUserLogRsp
#define SOAP_TYPE_cusdk__QueryUserLogRsp (882)
/* cusdk:QueryUserLogRsp */
class SOAP_CMAC cusdk__QueryUserLogRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__UserLog >userLogList;	/* optional element of type cusdk:UserLog */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 882; } /* = unique id SOAP_TYPE_cusdk__QueryUserLogRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryUserLogRsp() { cusdk__QueryUserLogRsp::soap_default(NULL); }
	virtual ~cusdk__QueryUserLogRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryUserLog
#define SOAP_TYPE_cusdk__QueryUserLog (886)
/* cusdk:QueryUserLog */
struct cusdk__QueryUserLog
{
public:
	cusdk__QueryUserLogReq req;	/* required element of type cusdk:QueryUserLogReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportUserLogReq
#define SOAP_TYPE_cusdk__StartExportUserLogReq (887)
/* cusdk:StartExportUserLogReq */
class SOAP_CMAC cusdk__StartExportUserLogReq : public cusdk__BaseReq
{
public:
	cusdk__QueryUserLogCondition condition;	/* required element of type cusdk:QueryUserLogCondition */
	std::string characterSet;	/* required element of type xsd:string */
	std::string timeZone;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 887; } /* = unique id SOAP_TYPE_cusdk__StartExportUserLogReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartExportUserLogReq() { cusdk__StartExportUserLogReq::soap_default(NULL); }
	virtual ~cusdk__StartExportUserLogReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportUserLogRsp
#define SOAP_TYPE_cusdk__StartExportUserLogRsp (888)
/* cusdk:StartExportUserLogRsp */
class SOAP_CMAC cusdk__StartExportUserLogRsp
{
public:
	std::string exportFileUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 888; } /* = unique id SOAP_TYPE_cusdk__StartExportUserLogRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartExportUserLogRsp() { cusdk__StartExportUserLogRsp::soap_default(NULL); }
	virtual ~cusdk__StartExportUserLogRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportUserLog
#define SOAP_TYPE_cusdk__StartExportUserLog (891)
/* cusdk:StartExportUserLog */
struct cusdk__StartExportUserLog
{
public:
	cusdk__StartExportUserLogReq req;	/* required element of type cusdk:StartExportUserLogReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetExportUserLogProcessReq
#define SOAP_TYPE_cusdk__GetExportUserLogProcessReq (892)
/* cusdk:GetExportUserLogProcessReq */
class SOAP_CMAC cusdk__GetExportUserLogProcessReq : public cusdk__BaseReq
{
public:
	std::string exportFileUrl;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 892; } /* = unique id SOAP_TYPE_cusdk__GetExportUserLogProcessReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetExportUserLogProcessReq() { cusdk__GetExportUserLogProcessReq::soap_default(NULL); }
	virtual ~cusdk__GetExportUserLogProcessReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetExportUserLogProcessRsp
#define SOAP_TYPE_cusdk__GetExportUserLogProcessRsp (893)
/* cusdk:GetExportUserLogProcessRsp */
class SOAP_CMAC cusdk__GetExportUserLogProcessRsp
{
public:
	int percentage;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 893; } /* = unique id SOAP_TYPE_cusdk__GetExportUserLogProcessRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetExportUserLogProcessRsp() { cusdk__GetExportUserLogProcessRsp::soap_default(NULL); }
	virtual ~cusdk__GetExportUserLogProcessRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetExportUserLogProcess
#define SOAP_TYPE_cusdk__GetExportUserLogProcess (896)
/* cusdk:GetExportUserLogProcess */
struct cusdk__GetExportUserLogProcess
{
public:
	cusdk__GetExportUserLogProcessReq req;	/* required element of type cusdk:GetExportUserLogProcessReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportUserLogReq
#define SOAP_TYPE_cusdk__StopExportUserLogReq (897)
/* cusdk:StopExportUserLogReq */
class SOAP_CMAC cusdk__StopExportUserLogReq : public cusdk__BaseReq
{
public:
	std::string exportFileUrl;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 897; } /* = unique id SOAP_TYPE_cusdk__StopExportUserLogReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopExportUserLogReq() { cusdk__StopExportUserLogReq::soap_default(NULL); }
	virtual ~cusdk__StopExportUserLogReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportUserLogRsp
#define SOAP_TYPE_cusdk__StopExportUserLogRsp (898)
/* cusdk:StopExportUserLogRsp */
class SOAP_CMAC cusdk__StopExportUserLogRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 898; } /* = unique id SOAP_TYPE_cusdk__StopExportUserLogRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopExportUserLogRsp() { cusdk__StopExportUserLogRsp::soap_default(NULL); }
	virtual ~cusdk__StopExportUserLogRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportUserLog
#define SOAP_TYPE_cusdk__StopExportUserLog (901)
/* cusdk:StopExportUserLog */
struct cusdk__StopExportUserLog
{
public:
	cusdk__StopExportUserLogReq req;	/* required element of type cusdk:StopExportUserLogReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceLog
#define SOAP_TYPE_cusdk__DeviceLog (902)
/* cusdk:DeviceLog */
class SOAP_CMAC cusdk__DeviceLog
{
public:
	std::string logId;	/* required element of type xsd:string */
	std::string deviceId;	/* required element of type xsd:string */
	std::string deviceName;	/* required element of type xsd:string */
	std::string deviceIp;	/* required element of type xsd:string */
	std::string deviceAlias;	/* required element of type xsd:string */
	time_t happenedTime;	/* required element of type xsd:dateTime */
	enum cusdk__EDeviceLogType logType;	/* required element of type cusdk:EDeviceLogType */
	std::string logDesc;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 902; } /* = unique id SOAP_TYPE_cusdk__DeviceLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceLog() { cusdk__DeviceLog::soap_default(NULL); }
	virtual ~cusdk__DeviceLog() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryDeviceLogCondition
#define SOAP_TYPE_cusdk__QueryDeviceLogCondition (903)
/* cusdk:QueryDeviceLogCondition */
class SOAP_CMAC cusdk__QueryDeviceLogCondition
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	bool deviceIdEnabled;	/* required element of type xsd:boolean */
	std::string deviceName;	/* required element of type xsd:string */
	bool deviceNameEnabled;	/* required element of type xsd:boolean */
	time_t timeBegin;	/* required element of type xsd:dateTime */
	time_t timeEnd;	/* required element of type xsd:dateTime */
	bool timeEnabled;	/* required element of type xsd:boolean */
	enum cusdk__EDeviceLogType logType;	/* required element of type cusdk:EDeviceLogType */
	bool logTypeEnabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 903; } /* = unique id SOAP_TYPE_cusdk__QueryDeviceLogCondition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryDeviceLogCondition() { cusdk__QueryDeviceLogCondition::soap_default(NULL); }
	virtual ~cusdk__QueryDeviceLogCondition() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryDeviceLogReq
#define SOAP_TYPE_cusdk__QueryDeviceLogReq (904)
/* cusdk:QueryDeviceLogReq */
class SOAP_CMAC cusdk__QueryDeviceLogReq : public cusdk__BaseReq
{
public:
	cusdk__QueryDeviceLogCondition condition;	/* required element of type cusdk:QueryDeviceLogCondition */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 904; } /* = unique id SOAP_TYPE_cusdk__QueryDeviceLogReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryDeviceLogReq() { cusdk__QueryDeviceLogReq::soap_default(NULL); }
	virtual ~cusdk__QueryDeviceLogReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryDeviceLogRsp
#define SOAP_TYPE_cusdk__QueryDeviceLogRsp (905)
/* cusdk:QueryDeviceLogRsp */
class SOAP_CMAC cusdk__QueryDeviceLogRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__DeviceLog >deviceLogList;	/* optional element of type cusdk:DeviceLog */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 905; } /* = unique id SOAP_TYPE_cusdk__QueryDeviceLogRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryDeviceLogRsp() { cusdk__QueryDeviceLogRsp::soap_default(NULL); }
	virtual ~cusdk__QueryDeviceLogRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryDeviceLog
#define SOAP_TYPE_cusdk__QueryDeviceLog (909)
/* cusdk:QueryDeviceLog */
struct cusdk__QueryDeviceLog
{
public:
	cusdk__QueryDeviceLogReq req;	/* required element of type cusdk:QueryDeviceLogReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportDeviceLogReq
#define SOAP_TYPE_cusdk__StartExportDeviceLogReq (910)
/* cusdk:StartExportDeviceLogReq */
class SOAP_CMAC cusdk__StartExportDeviceLogReq : public cusdk__BaseReq
{
public:
	cusdk__QueryDeviceLogCondition condition;	/* required element of type cusdk:QueryDeviceLogCondition */
	std::string characterSet;	/* required element of type xsd:string */
	std::string timeZone;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 910; } /* = unique id SOAP_TYPE_cusdk__StartExportDeviceLogReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartExportDeviceLogReq() { cusdk__StartExportDeviceLogReq::soap_default(NULL); }
	virtual ~cusdk__StartExportDeviceLogReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportDeviceLogRsp
#define SOAP_TYPE_cusdk__StartExportDeviceLogRsp (911)
/* cusdk:StartExportDeviceLogRsp */
class SOAP_CMAC cusdk__StartExportDeviceLogRsp
{
public:
	std::string exportFileUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 911; } /* = unique id SOAP_TYPE_cusdk__StartExportDeviceLogRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartExportDeviceLogRsp() { cusdk__StartExportDeviceLogRsp::soap_default(NULL); }
	virtual ~cusdk__StartExportDeviceLogRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportDeviceLog
#define SOAP_TYPE_cusdk__StartExportDeviceLog (914)
/* cusdk:StartExportDeviceLog */
struct cusdk__StartExportDeviceLog
{
public:
	cusdk__StartExportDeviceLogReq req;	/* required element of type cusdk:StartExportDeviceLogReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetExportDeviceLogProcessReq
#define SOAP_TYPE_cusdk__GetExportDeviceLogProcessReq (915)
/* cusdk:GetExportDeviceLogProcessReq */
class SOAP_CMAC cusdk__GetExportDeviceLogProcessReq : public cusdk__BaseReq
{
public:
	std::string exportFileUrl;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 915; } /* = unique id SOAP_TYPE_cusdk__GetExportDeviceLogProcessReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetExportDeviceLogProcessReq() { cusdk__GetExportDeviceLogProcessReq::soap_default(NULL); }
	virtual ~cusdk__GetExportDeviceLogProcessReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetExportDeviceLogProcessRsp
#define SOAP_TYPE_cusdk__GetExportDeviceLogProcessRsp (916)
/* cusdk:GetExportDeviceLogProcessRsp */
class SOAP_CMAC cusdk__GetExportDeviceLogProcessRsp
{
public:
	int percentage;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 916; } /* = unique id SOAP_TYPE_cusdk__GetExportDeviceLogProcessRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetExportDeviceLogProcessRsp() { cusdk__GetExportDeviceLogProcessRsp::soap_default(NULL); }
	virtual ~cusdk__GetExportDeviceLogProcessRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetExportDeviceLogProcess
#define SOAP_TYPE_cusdk__GetExportDeviceLogProcess (919)
/* cusdk:GetExportDeviceLogProcess */
struct cusdk__GetExportDeviceLogProcess
{
public:
	cusdk__GetExportDeviceLogProcessReq req;	/* required element of type cusdk:GetExportDeviceLogProcessReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportDeviceLogReq
#define SOAP_TYPE_cusdk__StopExportDeviceLogReq (920)
/* cusdk:StopExportDeviceLogReq */
class SOAP_CMAC cusdk__StopExportDeviceLogReq : public cusdk__BaseReq
{
public:
	std::string exportFileUrl;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 920; } /* = unique id SOAP_TYPE_cusdk__StopExportDeviceLogReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopExportDeviceLogReq() { cusdk__StopExportDeviceLogReq::soap_default(NULL); }
	virtual ~cusdk__StopExportDeviceLogReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportDeviceLogRsp
#define SOAP_TYPE_cusdk__StopExportDeviceLogRsp (921)
/* cusdk:StopExportDeviceLogRsp */
class SOAP_CMAC cusdk__StopExportDeviceLogRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 921; } /* = unique id SOAP_TYPE_cusdk__StopExportDeviceLogRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopExportDeviceLogRsp() { cusdk__StopExportDeviceLogRsp::soap_default(NULL); }
	virtual ~cusdk__StopExportDeviceLogRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportDeviceLog
#define SOAP_TYPE_cusdk__StopExportDeviceLog (924)
/* cusdk:StopExportDeviceLog */
struct cusdk__StopExportDeviceLog
{
public:
	cusdk__StopExportDeviceLogReq req;	/* required element of type cusdk:StopExportDeviceLogReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__AlarmLog
#define SOAP_TYPE_cusdk__AlarmLog (925)
/* cusdk:AlarmLog */
class SOAP_CMAC cusdk__AlarmLog
{
public:
	std::string logId;	/* required element of type xsd:string */
	std::string deviceId;	/* required element of type xsd:string */
	std::string deviceDomainName;	/* required element of type xsd:string */
	std::string deviceName;	/* required element of type xsd:string */
	std::string deviceAlias;	/* required element of type xsd:string */
	int alarmChannelId;	/* required element of type xsd:int */
	enum cusdk__EAlarmType alarmType;	/* required element of type cusdk:EAlarmType */
	enum cusdk__EAlarmStatus alarmStatus;	/* required element of type cusdk:EAlarmStatus */
	time_t occurTime;	/* required element of type xsd:dateTime */
	time_t resumeTime;	/* required element of type xsd:dateTime */
	std::string alarmName;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 925; } /* = unique id SOAP_TYPE_cusdk__AlarmLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AlarmLog() { cusdk__AlarmLog::soap_default(NULL); }
	virtual ~cusdk__AlarmLog() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLogCondition
#define SOAP_TYPE_cusdk__QueryAlarmLogCondition (926)
/* cusdk:QueryAlarmLogCondition */
class SOAP_CMAC cusdk__QueryAlarmLogCondition
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	bool deviceIdEnabled;	/* required element of type xsd:boolean */
	int alarmChannelId;	/* required element of type xsd:int */
	bool alarmChannelIdEnabled;	/* required element of type xsd:boolean */
	std::string alarmName;	/* required element of type xsd:string */
	bool alarmNameEnabled;	/* required element of type xsd:boolean */
	std::string deviceDomainName;	/* required element of type xsd:string */
	bool deviceDomainNameEnabled;	/* required element of type xsd:boolean */
	time_t timeBegin;	/* required element of type xsd:dateTime */
	time_t timeEnd;	/* required element of type xsd:dateTime */
	bool timeEnabled;	/* required element of type xsd:boolean */
	enum cusdk__EAlarmType alarmType;	/* required element of type cusdk:EAlarmType */
	bool alarmTypeEnabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 926; } /* = unique id SOAP_TYPE_cusdk__QueryAlarmLogCondition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryAlarmLogCondition() { cusdk__QueryAlarmLogCondition::soap_default(NULL); }
	virtual ~cusdk__QueryAlarmLogCondition() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLogReq
#define SOAP_TYPE_cusdk__QueryAlarmLogReq (927)
/* cusdk:QueryAlarmLogReq */
class SOAP_CMAC cusdk__QueryAlarmLogReq : public cusdk__BaseReq
{
public:
	cusdk__QueryAlarmLogCondition condition;	/* required element of type cusdk:QueryAlarmLogCondition */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 927; } /* = unique id SOAP_TYPE_cusdk__QueryAlarmLogReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryAlarmLogReq() { cusdk__QueryAlarmLogReq::soap_default(NULL); }
	virtual ~cusdk__QueryAlarmLogReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLogRsp
#define SOAP_TYPE_cusdk__QueryAlarmLogRsp (928)
/* cusdk:QueryAlarmLogRsp */
class SOAP_CMAC cusdk__QueryAlarmLogRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__AlarmLog >alarmLogList;	/* optional element of type cusdk:AlarmLog */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 928; } /* = unique id SOAP_TYPE_cusdk__QueryAlarmLogRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryAlarmLogRsp() { cusdk__QueryAlarmLogRsp::soap_default(NULL); }
	virtual ~cusdk__QueryAlarmLogRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryAlarmLog
#define SOAP_TYPE_cusdk__QueryAlarmLog (932)
/* cusdk:QueryAlarmLog */
struct cusdk__QueryAlarmLog
{
public:
	cusdk__QueryAlarmLogReq req;	/* required element of type cusdk:QueryAlarmLogReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportAlarmLogReq
#define SOAP_TYPE_cusdk__StartExportAlarmLogReq (933)
/* cusdk:StartExportAlarmLogReq */
class SOAP_CMAC cusdk__StartExportAlarmLogReq : public cusdk__BaseReq
{
public:
	cusdk__QueryAlarmLogCondition condition;	/* required element of type cusdk:QueryAlarmLogCondition */
	std::string characterSet;	/* required element of type xsd:string */
	std::string timeZone;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 933; } /* = unique id SOAP_TYPE_cusdk__StartExportAlarmLogReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartExportAlarmLogReq() { cusdk__StartExportAlarmLogReq::soap_default(NULL); }
	virtual ~cusdk__StartExportAlarmLogReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportAlarmLogRsp
#define SOAP_TYPE_cusdk__StartExportAlarmLogRsp (934)
/* cusdk:StartExportAlarmLogRsp */
class SOAP_CMAC cusdk__StartExportAlarmLogRsp
{
public:
	std::string exportFileUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 934; } /* = unique id SOAP_TYPE_cusdk__StartExportAlarmLogRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartExportAlarmLogRsp() { cusdk__StartExportAlarmLogRsp::soap_default(NULL); }
	virtual ~cusdk__StartExportAlarmLogRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartExportAlarmLog
#define SOAP_TYPE_cusdk__StartExportAlarmLog (937)
/* cusdk:StartExportAlarmLog */
struct cusdk__StartExportAlarmLog
{
public:
	cusdk__StartExportAlarmLogReq req;	/* required element of type cusdk:StartExportAlarmLogReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetExportAlarmLogProcessReq
#define SOAP_TYPE_cusdk__GetExportAlarmLogProcessReq (938)
/* cusdk:GetExportAlarmLogProcessReq */
class SOAP_CMAC cusdk__GetExportAlarmLogProcessReq : public cusdk__BaseReq
{
public:
	std::string exportFileUrl;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 938; } /* = unique id SOAP_TYPE_cusdk__GetExportAlarmLogProcessReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetExportAlarmLogProcessReq() { cusdk__GetExportAlarmLogProcessReq::soap_default(NULL); }
	virtual ~cusdk__GetExportAlarmLogProcessReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetExportAlarmLogProcessRsp
#define SOAP_TYPE_cusdk__GetExportAlarmLogProcessRsp (939)
/* cusdk:GetExportAlarmLogProcessRsp */
class SOAP_CMAC cusdk__GetExportAlarmLogProcessRsp
{
public:
	int percentage;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 939; } /* = unique id SOAP_TYPE_cusdk__GetExportAlarmLogProcessRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetExportAlarmLogProcessRsp() { cusdk__GetExportAlarmLogProcessRsp::soap_default(NULL); }
	virtual ~cusdk__GetExportAlarmLogProcessRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetExportAlarmLogProcess
#define SOAP_TYPE_cusdk__GetExportAlarmLogProcess (942)
/* cusdk:GetExportAlarmLogProcess */
struct cusdk__GetExportAlarmLogProcess
{
public:
	cusdk__GetExportAlarmLogProcessReq req;	/* required element of type cusdk:GetExportAlarmLogProcessReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportAlarmLogReq
#define SOAP_TYPE_cusdk__StopExportAlarmLogReq (943)
/* cusdk:StopExportAlarmLogReq */
class SOAP_CMAC cusdk__StopExportAlarmLogReq : public cusdk__BaseReq
{
public:
	std::string exportFileUrl;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 943; } /* = unique id SOAP_TYPE_cusdk__StopExportAlarmLogReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopExportAlarmLogReq() { cusdk__StopExportAlarmLogReq::soap_default(NULL); }
	virtual ~cusdk__StopExportAlarmLogReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportAlarmLogRsp
#define SOAP_TYPE_cusdk__StopExportAlarmLogRsp (944)
/* cusdk:StopExportAlarmLogRsp */
class SOAP_CMAC cusdk__StopExportAlarmLogRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 944; } /* = unique id SOAP_TYPE_cusdk__StopExportAlarmLogRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopExportAlarmLogRsp() { cusdk__StopExportAlarmLogRsp::soap_default(NULL); }
	virtual ~cusdk__StopExportAlarmLogRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopExportAlarmLog
#define SOAP_TYPE_cusdk__StopExportAlarmLog (947)
/* cusdk:StopExportAlarmLog */
struct cusdk__StopExportAlarmLog
{
public:
	cusdk__StopExportAlarmLogReq req;	/* required element of type cusdk:StopExportAlarmLogReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetLogConfigReq
#define SOAP_TYPE_cusdk__GetLogConfigReq (948)
/* cusdk:GetLogConfigReq */
class SOAP_CMAC cusdk__GetLogConfigReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 948; } /* = unique id SOAP_TYPE_cusdk__GetLogConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetLogConfigReq() { cusdk__GetLogConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetLogConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetLogConfigRsp
#define SOAP_TYPE_cusdk__GetLogConfigRsp (949)
/* cusdk:GetLogConfigRsp */
class SOAP_CMAC cusdk__GetLogConfigRsp
{
public:
	int maxUserLogSavedDays;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int maxUserLogSavedNumber;	/* required element of type xsd:int */
	bool enableUserLog;	/* required element of type xsd:boolean */
	int maxDeviceLogSavedNumber;	/* required element of type xsd:int */
	int maxDeviceLogSavedDays;	/* required element of type xsd:int */
	bool enableDeviceLog;	/* required element of type xsd:boolean */
	int maxAlarmLogSavedNumber;	/* required element of type xsd:int */
	int maxAlarmLogSavedDays;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 949; } /* = unique id SOAP_TYPE_cusdk__GetLogConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetLogConfigRsp() { cusdk__GetLogConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetLogConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetLogConfig
#define SOAP_TYPE_cusdk__GetLogConfig (952)
/* cusdk:GetLogConfig */
struct cusdk__GetLogConfig
{
public:
	cusdk__GetLogConfigReq req;	/* required element of type cusdk:GetLogConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetLogConfigReq
#define SOAP_TYPE_cusdk__SetLogConfigReq (953)
/* cusdk:SetLogConfigReq */
class SOAP_CMAC cusdk__SetLogConfigReq : public cusdk__BaseReq
{
public:
	int maxUserLogSavedDays;	/* required element of type xsd:int */
	int maxUserLogSavedNumber;	/* required element of type xsd:int */
	bool enableUserLog;	/* required element of type xsd:boolean */
	int maxDeviceLogSavedNumber;	/* required element of type xsd:int */
	int maxDeviceLogSavedDays;	/* required element of type xsd:int */
	bool enableDeviceLog;	/* required element of type xsd:boolean */
	int maxAlarmLogSavedNumber;	/* required element of type xsd:int */
	int maxAlarmLogSavedDays;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 953; } /* = unique id SOAP_TYPE_cusdk__SetLogConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetLogConfigReq() { cusdk__SetLogConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetLogConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetLogConfigRsp
#define SOAP_TYPE_cusdk__SetLogConfigRsp (954)
/* cusdk:SetLogConfigRsp */
class SOAP_CMAC cusdk__SetLogConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 954; } /* = unique id SOAP_TYPE_cusdk__SetLogConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetLogConfigRsp() { cusdk__SetLogConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetLogConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetLogConfig
#define SOAP_TYPE_cusdk__SetLogConfig (957)
/* cusdk:SetLogConfig */
struct cusdk__SetLogConfig
{
public:
	cusdk__SetLogConfigReq req;	/* required element of type cusdk:SetLogConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CallPuReq
#define SOAP_TYPE_cusdk__CallPuReq (958)
/* cusdk:CallPuReq */
class SOAP_CMAC cusdk__CallPuReq : public cusdk__BaseReq
{
public:
	int encodeChnId;	/* required element of type xsd:int */
	std::string devId;	/* required element of type xsd:string */
	int devDecChnId;	/* required element of type xsd:int */
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* optional element of type cusdk:MediaDescription */
	int transMode;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 958; } /* = unique id SOAP_TYPE_cusdk__CallPuReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CallPuReq() { cusdk__CallPuReq::soap_default(NULL); }
	virtual ~cusdk__CallPuReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CallPuRsp
#define SOAP_TYPE_cusdk__CallPuRsp (959)
/* cusdk:CallPuRsp */
class SOAP_CMAC cusdk__CallPuRsp
{
public:
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:MediaDescription */
	std::vector<cusdk__MediaExtInfo >mediaExtInfo;	/* optional element of type cusdk:MediaExtInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 959; } /* = unique id SOAP_TYPE_cusdk__CallPuRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CallPuRsp() { cusdk__CallPuRsp::soap_default(NULL); }
	virtual ~cusdk__CallPuRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CallPu
#define SOAP_TYPE_cusdk__CallPu (962)
/* cusdk:CallPu */
struct cusdk__CallPu
{
public:
	cusdk__CallPuReq req;	/* required element of type cusdk:CallPuReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__HangUpPuReq
#define SOAP_TYPE_cusdk__HangUpPuReq (963)
/* cusdk:HangUpPuReq */
class SOAP_CMAC cusdk__HangUpPuReq : public cusdk__BaseReq
{
public:
	int encodeChnId;	/* required element of type xsd:int */
	std::string devId;	/* required element of type xsd:string */
	int devDecChnId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 963; } /* = unique id SOAP_TYPE_cusdk__HangUpPuReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__HangUpPuReq() { cusdk__HangUpPuReq::soap_default(NULL); }
	virtual ~cusdk__HangUpPuReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__HangUpPuRsp
#define SOAP_TYPE_cusdk__HangUpPuRsp (964)
/* cusdk:HangUpPuRsp */
class SOAP_CMAC cusdk__HangUpPuRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 964; } /* = unique id SOAP_TYPE_cusdk__HangUpPuRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__HangUpPuRsp() { cusdk__HangUpPuRsp::soap_default(NULL); }
	virtual ~cusdk__HangUpPuRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__HangUpPu
#define SOAP_TYPE_cusdk__HangUpPu (967)
/* cusdk:HangUpPu */
struct cusdk__HangUpPu
{
public:
	cusdk__HangUpPuReq req;	/* required element of type cusdk:HangUpPuReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoMode
#define SOAP_TYPE_cusdk__VideoMode (968)
/* cusdk:VideoMode */
class SOAP_CMAC cusdk__VideoMode
{
public:
	enum cusdk__EVideoFormat videoFormat;	/* required element of type cusdk:EVideoFormat */
	int videoFormatV2;	/* required element of type xsd:int */
	enum cusdk__EVideoResolution videoRes;	/* required element of type cusdk:EVideoResolution */
	std::string videoResStr;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 968; } /* = unique id SOAP_TYPE_cusdk__VideoMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoMode() { cusdk__VideoMode::soap_default(NULL); }
	virtual ~cusdk__VideoMode() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoEncodeParam
#define SOAP_TYPE_cusdk__VideoEncodeParam (969)
/* cusdk:VideoEncodeParam */
class SOAP_CMAC cusdk__VideoEncodeParam
{
public:
	cusdk__VideoMode videoMode;	/* required element of type cusdk:VideoMode */
	int frameRate;	/* required element of type xsd:int */
	enum cusdk__EVideoQuality quality;	/* required element of type cusdk:EVideoQuality */
	int bitRate;	/* required element of type xsd:int */
	int interval;	/* required element of type xsd:int */
	int brightness;	/* required element of type xsd:int */
	int contrast;	/* required element of type xsd:int */
	int saturation;	/* required element of type xsd:int */
	int sharpness;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 969; } /* = unique id SOAP_TYPE_cusdk__VideoEncodeParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoEncodeParam() { cusdk__VideoEncodeParam::soap_default(NULL); }
	virtual ~cusdk__VideoEncodeParam() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AudioMode
#define SOAP_TYPE_cusdk__AudioMode (970)
/* cusdk:AudioMode */
class SOAP_CMAC cusdk__AudioMode
{
public:
	int audioFormat;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 970; } /* = unique id SOAP_TYPE_cusdk__AudioMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AudioMode() { cusdk__AudioMode::soap_default(NULL); }
	virtual ~cusdk__AudioMode() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AudioEncoderParam
#define SOAP_TYPE_cusdk__AudioEncoderParam (971)
/* cusdk:AudioEncoderParam */
class SOAP_CMAC cusdk__AudioEncoderParam
{
public:
	int audioForamt;	/* required element of type xsd:int */
	int volume;	/* required element of type xsd:int */
	bool AECState;	/* required element of type xsd:boolean */
	int sampleRate;	/* required element of type xsd:int */
	int sampleBits;	/* required element of type xsd:int */
	int channleNum;	/* required element of type xsd:int */
	int samplePerFrame;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 971; } /* = unique id SOAP_TYPE_cusdk__AudioEncoderParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AudioEncoderParam() { cusdk__AudioEncoderParam::soap_default(NULL); }
	virtual ~cusdk__AudioEncoderParam() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceEncoderParamReq
#define SOAP_TYPE_cusdk__GetDeviceEncoderParamReq (972)
/* cusdk:GetDeviceEncoderParamReq */
class SOAP_CMAC cusdk__GetDeviceEncoderParamReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int encodeChnId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 972; } /* = unique id SOAP_TYPE_cusdk__GetDeviceEncoderParamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceEncoderParamReq() { cusdk__GetDeviceEncoderParamReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceEncoderParamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceEncoderParamRsp
#define SOAP_TYPE_cusdk__GetDeviceEncoderParamRsp (973)
/* cusdk:GetDeviceEncoderParamRsp */
class SOAP_CMAC cusdk__GetDeviceEncoderParamRsp
{
public:
	cusdk__VideoEncodeParam videoEncParam;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:VideoEncodeParam */
	std::vector<cusdk__VideoMode >suportedVideoModeList;	/* optional element of type cusdk:VideoMode */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 973; } /* = unique id SOAP_TYPE_cusdk__GetDeviceEncoderParamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceEncoderParamRsp() { cusdk__GetDeviceEncoderParamRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceEncoderParamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceEncoderParam
#define SOAP_TYPE_cusdk__GetDeviceEncoderParam (977)
/* cusdk:GetDeviceEncoderParam */
struct cusdk__GetDeviceEncoderParam
{
public:
	cusdk__GetDeviceEncoderParamReq req;	/* required element of type cusdk:GetDeviceEncoderParamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceAudioEncoderParamReq
#define SOAP_TYPE_cusdk__GetDeviceAudioEncoderParamReq (978)
/* cusdk:GetDeviceAudioEncoderParamReq */
class SOAP_CMAC cusdk__GetDeviceAudioEncoderParamReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int encodeChnId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 978; } /* = unique id SOAP_TYPE_cusdk__GetDeviceAudioEncoderParamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceAudioEncoderParamReq() { cusdk__GetDeviceAudioEncoderParamReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceAudioEncoderParamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceAudioEncoderParamRsp
#define SOAP_TYPE_cusdk__GetDeviceAudioEncoderParamRsp (979)
/* cusdk:GetDeviceAudioEncoderParamRsp */
class SOAP_CMAC cusdk__GetDeviceAudioEncoderParamRsp
{
public:
	cusdk__AudioEncoderParam audioEncParam;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:AudioEncoderParam */
	std::vector<cusdk__AudioMode >supportedAudioModeList;	/* optional element of type cusdk:AudioMode */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 979; } /* = unique id SOAP_TYPE_cusdk__GetDeviceAudioEncoderParamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceAudioEncoderParamRsp() { cusdk__GetDeviceAudioEncoderParamRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceAudioEncoderParamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceAudioEncoderParam
#define SOAP_TYPE_cusdk__GetDeviceAudioEncoderParam (983)
/* cusdk:GetDeviceAudioEncoderParam */
struct cusdk__GetDeviceAudioEncoderParam
{
public:
	cusdk__GetDeviceAudioEncoderParamReq req;	/* required element of type cusdk:GetDeviceAudioEncoderParamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceEncoderParamReq
#define SOAP_TYPE_cusdk__SetDeviceEncoderParamReq (984)
/* cusdk:SetDeviceEncoderParamReq */
class SOAP_CMAC cusdk__SetDeviceEncoderParamReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int encodeChnId;	/* required element of type xsd:int */
	cusdk__VideoEncodeParam videoParam;	/* required element of type cusdk:VideoEncodeParam */
public:
	virtual int soap_type() const { return 984; } /* = unique id SOAP_TYPE_cusdk__SetDeviceEncoderParamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetDeviceEncoderParamReq() { cusdk__SetDeviceEncoderParamReq::soap_default(NULL); }
	virtual ~cusdk__SetDeviceEncoderParamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceEncoderParamRsp
#define SOAP_TYPE_cusdk__SetDeviceEncoderParamRsp (985)
/* cusdk:SetDeviceEncoderParamRsp */
class SOAP_CMAC cusdk__SetDeviceEncoderParamRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 985; } /* = unique id SOAP_TYPE_cusdk__SetDeviceEncoderParamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetDeviceEncoderParamRsp() { cusdk__SetDeviceEncoderParamRsp::soap_default(NULL); }
	virtual ~cusdk__SetDeviceEncoderParamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceEncoderParam
#define SOAP_TYPE_cusdk__SetDeviceEncoderParam (988)
/* cusdk:SetDeviceEncoderParam */
struct cusdk__SetDeviceEncoderParam
{
public:
	cusdk__SetDeviceEncoderParamReq req;	/* required element of type cusdk:SetDeviceEncoderParamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PuVidSrcOSDItem
#define SOAP_TYPE_cusdk__PuVidSrcOSDItem (989)
/* cusdk:PuVidSrcOSDItem */
class SOAP_CMAC cusdk__PuVidSrcOSDItem
{
public:
	int type;	/* required element of type xsd:int */
	int id;	/* required element of type xsd:int */
	bool enabled;	/* required element of type xsd:boolean */
	std::string content;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 989; } /* = unique id SOAP_TYPE_cusdk__PuVidSrcOSDItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PuVidSrcOSDItem() { cusdk__PuVidSrcOSDItem::soap_default(NULL); }
	virtual ~cusdk__PuVidSrcOSDItem() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetPuVidSrcOSDReq
#define SOAP_TYPE_cusdk__SetPuVidSrcOSDReq (992)
/* cusdk:SetPuVidSrcOSDReq */
class SOAP_CMAC cusdk__SetPuVidSrcOSDReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	std::vector<cusdk__PuVidSrcOSDItem >vidSrcOSDList;	/* optional element of type cusdk:PuVidSrcOSDList */
public:
	virtual int soap_type() const { return 992; } /* = unique id SOAP_TYPE_cusdk__SetPuVidSrcOSDReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetPuVidSrcOSDReq() { cusdk__SetPuVidSrcOSDReq::soap_default(NULL); }
	virtual ~cusdk__SetPuVidSrcOSDReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetPuVidSrcOSDRsp
#define SOAP_TYPE_cusdk__SetPuVidSrcOSDRsp (993)
/* cusdk:SetPuVidSrcOSDRsp */
class SOAP_CMAC cusdk__SetPuVidSrcOSDRsp
{
public:
	std::vector<int >OSDItemErrors;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 993; } /* = unique id SOAP_TYPE_cusdk__SetPuVidSrcOSDRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetPuVidSrcOSDRsp() { cusdk__SetPuVidSrcOSDRsp::soap_default(NULL); }
	virtual ~cusdk__SetPuVidSrcOSDRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetPuVidSrcOSD
#define SOAP_TYPE_cusdk__SetPuVidSrcOSD (996)
/* cusdk:SetPuVidSrcOSD */
struct cusdk__SetPuVidSrcOSD
{
public:
	cusdk__SetPuVidSrcOSDReq req;	/* required element of type cusdk:SetPuVidSrcOSDReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPuVidSrcOSDReq
#define SOAP_TYPE_cusdk__GetPuVidSrcOSDReq (997)
/* cusdk:GetPuVidSrcOSDReq */
class SOAP_CMAC cusdk__GetPuVidSrcOSDReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 997; } /* = unique id SOAP_TYPE_cusdk__GetPuVidSrcOSDReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetPuVidSrcOSDReq() { cusdk__GetPuVidSrcOSDReq::soap_default(NULL); }
	virtual ~cusdk__GetPuVidSrcOSDReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPuVidSrcOSDRsp
#define SOAP_TYPE_cusdk__GetPuVidSrcOSDRsp (998)
/* cusdk:GetPuVidSrcOSDRsp */
class SOAP_CMAC cusdk__GetPuVidSrcOSDRsp
{
public:
	std::vector<cusdk__PuVidSrcOSDItem >vidSrcOSDList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:PuVidSrcOSDList */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 998; } /* = unique id SOAP_TYPE_cusdk__GetPuVidSrcOSDRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetPuVidSrcOSDRsp() { cusdk__GetPuVidSrcOSDRsp::soap_default(NULL); }
	virtual ~cusdk__GetPuVidSrcOSDRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPuVidSrcOSD
#define SOAP_TYPE_cusdk__GetPuVidSrcOSD (1001)
/* cusdk:GetPuVidSrcOSD */
struct cusdk__GetPuVidSrcOSD
{
public:
	cusdk__GetPuVidSrcOSDReq req;	/* required element of type cusdk:GetPuVidSrcOSDReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceNameReq
#define SOAP_TYPE_cusdk__SetDeviceNameReq (1002)
/* cusdk:SetDeviceNameReq */
class SOAP_CMAC cusdk__SetDeviceNameReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	std::string deviceName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1002; } /* = unique id SOAP_TYPE_cusdk__SetDeviceNameReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetDeviceNameReq() { cusdk__SetDeviceNameReq::soap_default(NULL); }
	virtual ~cusdk__SetDeviceNameReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceNameRsp
#define SOAP_TYPE_cusdk__SetDeviceNameRsp (1003)
/* cusdk:SetDeviceNameRsp */
class SOAP_CMAC cusdk__SetDeviceNameRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1003; } /* = unique id SOAP_TYPE_cusdk__SetDeviceNameRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetDeviceNameRsp() { cusdk__SetDeviceNameRsp::soap_default(NULL); }
	virtual ~cusdk__SetDeviceNameRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceName
#define SOAP_TYPE_cusdk__SetDeviceName (1006)
/* cusdk:SetDeviceName */
struct cusdk__SetDeviceName
{
public:
	cusdk__SetDeviceNameReq req;	/* required element of type cusdk:SetDeviceNameReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCameraProtocolTypeReq
#define SOAP_TYPE_cusdk__GetCameraProtocolTypeReq (1007)
/* cusdk:GetCameraProtocolTypeReq */
class SOAP_CMAC cusdk__GetCameraProtocolTypeReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1007; } /* = unique id SOAP_TYPE_cusdk__GetCameraProtocolTypeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCameraProtocolTypeReq() { cusdk__GetCameraProtocolTypeReq::soap_default(NULL); }
	virtual ~cusdk__GetCameraProtocolTypeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCameraProtocolTypeRsp
#define SOAP_TYPE_cusdk__GetCameraProtocolTypeRsp (1008)
/* cusdk:GetCameraProtocolTypeRsp */
class SOAP_CMAC cusdk__GetCameraProtocolTypeRsp
{
public:
	enum cusdk__ECameraProtocolType cameraProtocolType;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:ECameraProtocolType */
	int cameraId;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1008; } /* = unique id SOAP_TYPE_cusdk__GetCameraProtocolTypeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCameraProtocolTypeRsp() { cusdk__GetCameraProtocolTypeRsp::soap_default(NULL); }
	virtual ~cusdk__GetCameraProtocolTypeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCameraProtocolType
#define SOAP_TYPE_cusdk__GetCameraProtocolType (1011)
/* cusdk:GetCameraProtocolType */
struct cusdk__GetCameraProtocolType
{
public:
	cusdk__GetCameraProtocolTypeReq req;	/* required element of type cusdk:GetCameraProtocolTypeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetCameraProtocolTypeReq
#define SOAP_TYPE_cusdk__SetCameraProtocolTypeReq (1012)
/* cusdk:SetCameraProtocolTypeReq */
class SOAP_CMAC cusdk__SetCameraProtocolTypeReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	enum cusdk__ECameraProtocolType cameraProtocolType;	/* required element of type cusdk:ECameraProtocolType */
	int cameraId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1012; } /* = unique id SOAP_TYPE_cusdk__SetCameraProtocolTypeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetCameraProtocolTypeReq() { cusdk__SetCameraProtocolTypeReq::soap_default(NULL); }
	virtual ~cusdk__SetCameraProtocolTypeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetCameraProtocolTypeRsp
#define SOAP_TYPE_cusdk__SetCameraProtocolTypeRsp (1013)
/* cusdk:SetCameraProtocolTypeRsp */
class SOAP_CMAC cusdk__SetCameraProtocolTypeRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1013; } /* = unique id SOAP_TYPE_cusdk__SetCameraProtocolTypeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetCameraProtocolTypeRsp() { cusdk__SetCameraProtocolTypeRsp::soap_default(NULL); }
	virtual ~cusdk__SetCameraProtocolTypeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetCameraProtocolType
#define SOAP_TYPE_cusdk__SetCameraProtocolType (1016)
/* cusdk:SetCameraProtocolType */
struct cusdk__SetCameraProtocolType
{
public:
	cusdk__SetCameraProtocolTypeReq req;	/* required element of type cusdk:SetCameraProtocolTypeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__Area
#define SOAP_TYPE_cusdk__Area (1017)
/* cusdk:Area */
class SOAP_CMAC cusdk__Area
{
public:
	int x;	/* required element of type xsd:int */
	int y;	/* required element of type xsd:int */
	int width;	/* required element of type xsd:int */
	int height;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1017; } /* = unique id SOAP_TYPE_cusdk__Area */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__Area() { cusdk__Area::soap_default(NULL); }
	virtual ~cusdk__Area() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MotionDetectAreaConfig
#define SOAP_TYPE_cusdk__MotionDetectAreaConfig (1018)
/* cusdk:MotionDetectAreaConfig */
class SOAP_CMAC cusdk__MotionDetectAreaConfig
{
public:
	bool enable;	/* required element of type xsd:boolean */
	cusdk__Area detectArea;	/* required element of type cusdk:Area */
	int alarmRate;	/* required element of type xsd:int */
	int restoreRate;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1018; } /* = unique id SOAP_TYPE_cusdk__MotionDetectAreaConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MotionDetectAreaConfig() { cusdk__MotionDetectAreaConfig::soap_default(NULL); }
	virtual ~cusdk__MotionDetectAreaConfig() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMotionDetectConfigReq
#define SOAP_TYPE_cusdk__GetMotionDetectConfigReq (1019)
/* cusdk:GetMotionDetectConfigReq */
class SOAP_CMAC cusdk__GetMotionDetectConfigReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1019; } /* = unique id SOAP_TYPE_cusdk__GetMotionDetectConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetMotionDetectConfigReq() { cusdk__GetMotionDetectConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetMotionDetectConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMotionDetectConfigRsp
#define SOAP_TYPE_cusdk__GetMotionDetectConfigRsp (1020)
/* cusdk:GetMotionDetectConfigRsp */
class SOAP_CMAC cusdk__GetMotionDetectConfigRsp
{
public:
	std::vector<cusdk__MotionDetectAreaConfig >motionDetectAreaConfigList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:MotionDetectAreaConfig */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1020; } /* = unique id SOAP_TYPE_cusdk__GetMotionDetectConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetMotionDetectConfigRsp() { cusdk__GetMotionDetectConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetMotionDetectConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMotionDetectConfig
#define SOAP_TYPE_cusdk__GetMotionDetectConfig (1024)
/* cusdk:GetMotionDetectConfig */
struct cusdk__GetMotionDetectConfig
{
public:
	cusdk__GetMotionDetectConfigReq req;	/* required element of type cusdk:GetMotionDetectConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetMotionDetectConfigReq
#define SOAP_TYPE_cusdk__SetMotionDetectConfigReq (1025)
/* cusdk:SetMotionDetectConfigReq */
class SOAP_CMAC cusdk__SetMotionDetectConfigReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	std::vector<cusdk__MotionDetectAreaConfig >motionDetectAreaConfigList;	/* optional element of type cusdk:MotionDetectAreaConfig */
public:
	virtual int soap_type() const { return 1025; } /* = unique id SOAP_TYPE_cusdk__SetMotionDetectConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetMotionDetectConfigReq() { cusdk__SetMotionDetectConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetMotionDetectConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetMotionDetectConfigRsp
#define SOAP_TYPE_cusdk__SetMotionDetectConfigRsp (1026)
/* cusdk:SetMotionDetectConfigRsp */
class SOAP_CMAC cusdk__SetMotionDetectConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1026; } /* = unique id SOAP_TYPE_cusdk__SetMotionDetectConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetMotionDetectConfigRsp() { cusdk__SetMotionDetectConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetMotionDetectConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetMotionDetectConfig
#define SOAP_TYPE_cusdk__SetMotionDetectConfig (1029)
/* cusdk:SetMotionDetectConfig */
struct cusdk__SetMotionDetectConfig
{
public:
	cusdk__SetMotionDetectConfigReq req;	/* required element of type cusdk:SetMotionDetectConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ShadeAreaConfig
#define SOAP_TYPE_cusdk__ShadeAreaConfig (1030)
/* cusdk:ShadeAreaConfig */
class SOAP_CMAC cusdk__ShadeAreaConfig
{
public:
	bool enable;	/* required element of type xsd:boolean */
	cusdk__Area shadeArea;	/* required element of type cusdk:Area */
public:
	virtual int soap_type() const { return 1030; } /* = unique id SOAP_TYPE_cusdk__ShadeAreaConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ShadeAreaConfig() { cusdk__ShadeAreaConfig::soap_default(NULL); }
	virtual ~cusdk__ShadeAreaConfig() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetShadeConfigReq
#define SOAP_TYPE_cusdk__GetShadeConfigReq (1031)
/* cusdk:GetShadeConfigReq */
class SOAP_CMAC cusdk__GetShadeConfigReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1031; } /* = unique id SOAP_TYPE_cusdk__GetShadeConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetShadeConfigReq() { cusdk__GetShadeConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetShadeConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetShadeConfigRsp
#define SOAP_TYPE_cusdk__GetShadeConfigRsp (1032)
/* cusdk:GetShadeConfigRsp */
class SOAP_CMAC cusdk__GetShadeConfigRsp
{
public:
	std::vector<cusdk__ShadeAreaConfig >shadeAreaConfigList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:ShadeAreaConfig */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1032; } /* = unique id SOAP_TYPE_cusdk__GetShadeConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetShadeConfigRsp() { cusdk__GetShadeConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetShadeConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetShadeConfig
#define SOAP_TYPE_cusdk__GetShadeConfig (1036)
/* cusdk:GetShadeConfig */
struct cusdk__GetShadeConfig
{
public:
	cusdk__GetShadeConfigReq req;	/* required element of type cusdk:GetShadeConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetShadeConfigReq
#define SOAP_TYPE_cusdk__SetShadeConfigReq (1037)
/* cusdk:SetShadeConfigReq */
class SOAP_CMAC cusdk__SetShadeConfigReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	std::vector<cusdk__ShadeAreaConfig >shadeAreaConfigList;	/* optional element of type cusdk:ShadeAreaConfig */
public:
	virtual int soap_type() const { return 1037; } /* = unique id SOAP_TYPE_cusdk__SetShadeConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetShadeConfigReq() { cusdk__SetShadeConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetShadeConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetShadeConfigRsp
#define SOAP_TYPE_cusdk__SetShadeConfigRsp (1038)
/* cusdk:SetShadeConfigRsp */
class SOAP_CMAC cusdk__SetShadeConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1038; } /* = unique id SOAP_TYPE_cusdk__SetShadeConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetShadeConfigRsp() { cusdk__SetShadeConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetShadeConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetShadeConfig
#define SOAP_TYPE_cusdk__SetShadeConfig (1041)
/* cusdk:SetShadeConfig */
struct cusdk__SetShadeConfig
{
public:
	cusdk__SetShadeConfigReq req;	/* required element of type cusdk:SetShadeConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceChannelNameReq
#define SOAP_TYPE_cusdk__GetDeviceChannelNameReq (1042)
/* cusdk:GetDeviceChannelNameReq */
class SOAP_CMAC cusdk__GetDeviceChannelNameReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	enum cusdk__EDeviceChannelType chnType;	/* required element of type cusdk:EDeviceChannelType */
	int chnId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1042; } /* = unique id SOAP_TYPE_cusdk__GetDeviceChannelNameReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceChannelNameReq() { cusdk__GetDeviceChannelNameReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceChannelNameReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ChannelName
#define SOAP_TYPE_cusdk__ChannelName (1043)
/* cusdk:ChannelName */
class SOAP_CMAC cusdk__ChannelName
{
public:
	int chnId;	/* required element of type xsd:int */
	std::string chnName;	/* required element of type xsd:string */
	double longitude;	/* required element of type xsd:double */
	double latitude;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 1043; } /* = unique id SOAP_TYPE_cusdk__ChannelName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ChannelName() { cusdk__ChannelName::soap_default(NULL); }
	virtual ~cusdk__ChannelName() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceChannelNameRsp
#define SOAP_TYPE_cusdk__GetDeviceChannelNameRsp (1044)
/* cusdk:GetDeviceChannelNameRsp */
class SOAP_CMAC cusdk__GetDeviceChannelNameRsp
{
public:
	std::vector<cusdk__ChannelName >chnNameList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:ChannelName */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1044; } /* = unique id SOAP_TYPE_cusdk__GetDeviceChannelNameRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceChannelNameRsp() { cusdk__GetDeviceChannelNameRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceChannelNameRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceChannelName
#define SOAP_TYPE_cusdk__GetDeviceChannelName (1048)
/* cusdk:GetDeviceChannelName */
struct cusdk__GetDeviceChannelName
{
public:
	cusdk__GetDeviceChannelNameReq req;	/* required element of type cusdk:GetDeviceChannelNameReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceChannelNameReq
#define SOAP_TYPE_cusdk__SetDeviceChannelNameReq (1049)
/* cusdk:SetDeviceChannelNameReq */
class SOAP_CMAC cusdk__SetDeviceChannelNameReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	enum cusdk__EDeviceChannelType chnType;	/* required element of type cusdk:EDeviceChannelType */
	int chnId;	/* required element of type xsd:int */
	std::string chnName;	/* required element of type xsd:string */
	double longitude;	/* required element of type xsd:double */
	double latitude;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 1049; } /* = unique id SOAP_TYPE_cusdk__SetDeviceChannelNameReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetDeviceChannelNameReq() { cusdk__SetDeviceChannelNameReq::soap_default(NULL); }
	virtual ~cusdk__SetDeviceChannelNameReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceChannelNameRsp
#define SOAP_TYPE_cusdk__SetDeviceChannelNameRsp (1050)
/* cusdk:SetDeviceChannelNameRsp */
class SOAP_CMAC cusdk__SetDeviceChannelNameRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1050; } /* = unique id SOAP_TYPE_cusdk__SetDeviceChannelNameRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetDeviceChannelNameRsp() { cusdk__SetDeviceChannelNameRsp::soap_default(NULL); }
	virtual ~cusdk__SetDeviceChannelNameRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceChannelName
#define SOAP_TYPE_cusdk__SetDeviceChannelName (1053)
/* cusdk:SetDeviceChannelName */
struct cusdk__SetDeviceChannelName
{
public:
	cusdk__SetDeviceChannelNameReq req;	/* required element of type cusdk:SetDeviceChannelNameReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSyncVideoSrcNameEnableReq
#define SOAP_TYPE_cusdk__GetSyncVideoSrcNameEnableReq (1054)
/* cusdk:GetSyncVideoSrcNameEnableReq */
class SOAP_CMAC cusdk__GetSyncVideoSrcNameEnableReq
{
public:
	std::string session;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1054; } /* = unique id SOAP_TYPE_cusdk__GetSyncVideoSrcNameEnableReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetSyncVideoSrcNameEnableReq() { cusdk__GetSyncVideoSrcNameEnableReq::soap_default(NULL); }
	virtual ~cusdk__GetSyncVideoSrcNameEnableReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSyncVideoSrcNameEnableRsp
#define SOAP_TYPE_cusdk__GetSyncVideoSrcNameEnableRsp (1055)
/* cusdk:GetSyncVideoSrcNameEnableRsp */
class SOAP_CMAC cusdk__GetSyncVideoSrcNameEnableRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	bool enablePu2Platform;	/* required element of type xsd:boolean */
	bool enablePlatform2Pu;	/* required element of type xsd:boolean */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1055; } /* = unique id SOAP_TYPE_cusdk__GetSyncVideoSrcNameEnableRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetSyncVideoSrcNameEnableRsp() { cusdk__GetSyncVideoSrcNameEnableRsp::soap_default(NULL); }
	virtual ~cusdk__GetSyncVideoSrcNameEnableRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSyncVideoSrcNameEnable
#define SOAP_TYPE_cusdk__GetSyncVideoSrcNameEnable (1058)
/* cusdk:GetSyncVideoSrcNameEnable */
struct cusdk__GetSyncVideoSrcNameEnable
{
public:
	cusdk__GetSyncVideoSrcNameEnableReq req;	/* required element of type cusdk:GetSyncVideoSrcNameEnableReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetSyncVideoSrcNameEnableReq
#define SOAP_TYPE_cusdk__SetSyncVideoSrcNameEnableReq (1059)
/* cusdk:SetSyncVideoSrcNameEnableReq */
class SOAP_CMAC cusdk__SetSyncVideoSrcNameEnableReq
{
public:
	std::string session;	/* required element of type xsd:string */
	bool enablePu2Platform;	/* required element of type xsd:boolean */
	bool enablePlatform2Pu;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1059; } /* = unique id SOAP_TYPE_cusdk__SetSyncVideoSrcNameEnableReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetSyncVideoSrcNameEnableReq() { cusdk__SetSyncVideoSrcNameEnableReq::soap_default(NULL); }
	virtual ~cusdk__SetSyncVideoSrcNameEnableReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetSyncVideoSrcNameEnableRsp
#define SOAP_TYPE_cusdk__SetSyncVideoSrcNameEnableRsp (1060)
/* cusdk:SetSyncVideoSrcNameEnableRsp */
class SOAP_CMAC cusdk__SetSyncVideoSrcNameEnableRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1060; } /* = unique id SOAP_TYPE_cusdk__SetSyncVideoSrcNameEnableRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetSyncVideoSrcNameEnableRsp() { cusdk__SetSyncVideoSrcNameEnableRsp::soap_default(NULL); }
	virtual ~cusdk__SetSyncVideoSrcNameEnableRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetSyncVideoSrcNameEnable
#define SOAP_TYPE_cusdk__SetSyncVideoSrcNameEnable (1063)
/* cusdk:SetSyncVideoSrcNameEnable */
struct cusdk__SetSyncVideoSrcNameEnable
{
public:
	cusdk__SetSyncVideoSrcNameEnableReq req;	/* required element of type cusdk:SetSyncVideoSrcNameEnableReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPtzPresetNameReq
#define SOAP_TYPE_cusdk__GetPtzPresetNameReq (1064)
/* cusdk:GetPtzPresetNameReq */
class SOAP_CMAC cusdk__GetPtzPresetNameReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int vieoSrcId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1064; } /* = unique id SOAP_TYPE_cusdk__GetPtzPresetNameReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetPtzPresetNameReq() { cusdk__GetPtzPresetNameReq::soap_default(NULL); }
	virtual ~cusdk__GetPtzPresetNameReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PresetName
#define SOAP_TYPE_cusdk__PresetName (1065)
/* cusdk:PresetName */
class SOAP_CMAC cusdk__PresetName
{
public:
	int presetId;	/* required element of type xsd:int */
	std::string presetName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1065; } /* = unique id SOAP_TYPE_cusdk__PresetName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PresetName() { cusdk__PresetName::soap_default(NULL); }
	virtual ~cusdk__PresetName() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPtzPresetNameRsp
#define SOAP_TYPE_cusdk__GetPtzPresetNameRsp (1066)
/* cusdk:GetPtzPresetNameRsp */
class SOAP_CMAC cusdk__GetPtzPresetNameRsp
{
public:
	std::vector<cusdk__PresetName >presetNameList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:PresetName */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1066; } /* = unique id SOAP_TYPE_cusdk__GetPtzPresetNameRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetPtzPresetNameRsp() { cusdk__GetPtzPresetNameRsp::soap_default(NULL); }
	virtual ~cusdk__GetPtzPresetNameRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPtzPresetName
#define SOAP_TYPE_cusdk__GetPtzPresetName (1070)
/* cusdk:GetPtzPresetName */
struct cusdk__GetPtzPresetName
{
public:
	cusdk__GetPtzPresetNameReq req;	/* required element of type cusdk:GetPtzPresetNameReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetPtzPresetNameReq
#define SOAP_TYPE_cusdk__SetPtzPresetNameReq (1071)
/* cusdk:SetPtzPresetNameReq */
class SOAP_CMAC cusdk__SetPtzPresetNameReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int vieoSrcId;	/* required element of type xsd:int */
	int presetId;	/* required element of type xsd:int */
	std::string presetName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1071; } /* = unique id SOAP_TYPE_cusdk__SetPtzPresetNameReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetPtzPresetNameReq() { cusdk__SetPtzPresetNameReq::soap_default(NULL); }
	virtual ~cusdk__SetPtzPresetNameReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetPtzPresetNameRsp
#define SOAP_TYPE_cusdk__SetPtzPresetNameRsp (1072)
/* cusdk:SetPtzPresetNameRsp */
class SOAP_CMAC cusdk__SetPtzPresetNameRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1072; } /* = unique id SOAP_TYPE_cusdk__SetPtzPresetNameRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetPtzPresetNameRsp() { cusdk__SetPtzPresetNameRsp::soap_default(NULL); }
	virtual ~cusdk__SetPtzPresetNameRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetPtzPresetName
#define SOAP_TYPE_cusdk__SetPtzPresetName (1075)
/* cusdk:SetPtzPresetName */
struct cusdk__SetPtzPresetName
{
public:
	cusdk__SetPtzPresetNameReq req;	/* required element of type cusdk:SetPtzPresetNameReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelPtzPresetNameReq
#define SOAP_TYPE_cusdk__DelPtzPresetNameReq (1076)
/* cusdk:DelPtzPresetNameReq */
class SOAP_CMAC cusdk__DelPtzPresetNameReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int vieoSrcId;	/* required element of type xsd:int */
	int presetId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1076; } /* = unique id SOAP_TYPE_cusdk__DelPtzPresetNameReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelPtzPresetNameReq() { cusdk__DelPtzPresetNameReq::soap_default(NULL); }
	virtual ~cusdk__DelPtzPresetNameReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelPtzPresetNameRsp
#define SOAP_TYPE_cusdk__DelPtzPresetNameRsp (1077)
/* cusdk:DelPtzPresetNameRsp */
class SOAP_CMAC cusdk__DelPtzPresetNameRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1077; } /* = unique id SOAP_TYPE_cusdk__DelPtzPresetNameRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelPtzPresetNameRsp() { cusdk__DelPtzPresetNameRsp::soap_default(NULL); }
	virtual ~cusdk__DelPtzPresetNameRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelPtzPresetName
#define SOAP_TYPE_cusdk__DelPtzPresetName (1080)
/* cusdk:DelPtzPresetName */
struct cusdk__DelPtzPresetName
{
public:
	cusdk__DelPtzPresetNameReq req;	/* required element of type cusdk:DelPtzPresetNameReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__VsipChannelDataReq
#define SOAP_TYPE_cusdk__VsipChannelDataReq (1081)
/* cusdk:VsipChannelDataReq */
class SOAP_CMAC cusdk__VsipChannelDataReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int deviceIndex;	/* required element of type xsd:int */
	std::string vsipBase64DataReq;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1081; } /* = unique id SOAP_TYPE_cusdk__VsipChannelDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VsipChannelDataReq() { cusdk__VsipChannelDataReq::soap_default(NULL); }
	virtual ~cusdk__VsipChannelDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VsipChannelDataRsp
#define SOAP_TYPE_cusdk__VsipChannelDataRsp (1082)
/* cusdk:VsipChannelDataRsp */
class SOAP_CMAC cusdk__VsipChannelDataRsp
{
public:
	std::string vsipBase64DataRsp;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1082; } /* = unique id SOAP_TYPE_cusdk__VsipChannelDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VsipChannelDataRsp() { cusdk__VsipChannelDataRsp::soap_default(NULL); }
	virtual ~cusdk__VsipChannelDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VsipChannelData
#define SOAP_TYPE_cusdk__VsipChannelData (1085)
/* cusdk:VsipChannelData */
struct cusdk__VsipChannelData
{
public:
	cusdk__VsipChannelDataReq req;	/* required element of type cusdk:VsipChannelDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TransDataParam
#define SOAP_TYPE_cusdk__TransDataParam (1086)
/* cusdk:TransDataParam */
class SOAP_CMAC cusdk__TransDataParam
{
public:
	bool enable;	/* required element of type xsd:boolean */
	std::string gpsParam;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1086; } /* = unique id SOAP_TYPE_cusdk__TransDataParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TransDataParam() { cusdk__TransDataParam::soap_default(NULL); }
	virtual ~cusdk__TransDataParam() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetTransDataParamReq
#define SOAP_TYPE_cusdk__SetTransDataParamReq (1087)
/* cusdk:SetTransDataParamReq */
class SOAP_CMAC cusdk__SetTransDataParamReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int type;	/* required element of type xsd:int */
	int subType;	/* required element of type xsd:int */
	cusdk__TransDataParam param;	/* required element of type cusdk:TransDataParam */
public:
	virtual int soap_type() const { return 1087; } /* = unique id SOAP_TYPE_cusdk__SetTransDataParamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetTransDataParamReq() { cusdk__SetTransDataParamReq::soap_default(NULL); }
	virtual ~cusdk__SetTransDataParamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetTransDataParamRsp
#define SOAP_TYPE_cusdk__SetTransDataParamRsp (1088)
/* cusdk:SetTransDataParamRsp */
class SOAP_CMAC cusdk__SetTransDataParamRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1088; } /* = unique id SOAP_TYPE_cusdk__SetTransDataParamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetTransDataParamRsp() { cusdk__SetTransDataParamRsp::soap_default(NULL); }
	virtual ~cusdk__SetTransDataParamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetTransDataParam
#define SOAP_TYPE_cusdk__SetTransDataParam (1091)
/* cusdk:SetTransDataParam */
struct cusdk__SetTransDataParam
{
public:
	cusdk__SetTransDataParamReq req;	/* required element of type cusdk:SetTransDataParamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetTransDataParamReq
#define SOAP_TYPE_cusdk__GetTransDataParamReq (1092)
/* cusdk:GetTransDataParamReq */
class SOAP_CMAC cusdk__GetTransDataParamReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int type;	/* required element of type xsd:int */
	int subType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1092; } /* = unique id SOAP_TYPE_cusdk__GetTransDataParamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetTransDataParamReq() { cusdk__GetTransDataParamReq::soap_default(NULL); }
	virtual ~cusdk__GetTransDataParamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetTransDataParamRsp
#define SOAP_TYPE_cusdk__GetTransDataParamRsp (1093)
/* cusdk:GetTransDataParamRsp */
class SOAP_CMAC cusdk__GetTransDataParamRsp
{
public:
	cusdk__TransDataParam param;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:TransDataParam */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1093; } /* = unique id SOAP_TYPE_cusdk__GetTransDataParamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetTransDataParamRsp() { cusdk__GetTransDataParamRsp::soap_default(NULL); }
	virtual ~cusdk__GetTransDataParamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetTransDataParam
#define SOAP_TYPE_cusdk__GetTransDataParam (1096)
/* cusdk:GetTransDataParam */
struct cusdk__GetTransDataParam
{
public:
	cusdk__GetTransDataParamReq req;	/* required element of type cusdk:GetTransDataParamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryGPSTraceReq
#define SOAP_TYPE_cusdk__QueryGPSTraceReq (1097)
/* cusdk:QueryGPSTraceReq */
class SOAP_CMAC cusdk__QueryGPSTraceReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	cusdk__TimeRange timeRange;	/* required element of type cusdk:TimeRange */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1097; } /* = unique id SOAP_TYPE_cusdk__QueryGPSTraceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryGPSTraceReq() { cusdk__QueryGPSTraceReq::soap_default(NULL); }
	virtual ~cusdk__QueryGPSTraceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryGPSTraceRsp
#define SOAP_TYPE_cusdk__QueryGPSTraceRsp (1098)
/* cusdk:QueryGPSTraceRsp */
class SOAP_CMAC cusdk__QueryGPSTraceRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__GPSInfo >gpsInfoList;	/* optional element of type cusdk:GPSInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1098; } /* = unique id SOAP_TYPE_cusdk__QueryGPSTraceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryGPSTraceRsp() { cusdk__QueryGPSTraceRsp::soap_default(NULL); }
	virtual ~cusdk__QueryGPSTraceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryGPSTrace
#define SOAP_TYPE_cusdk__QueryGPSTrace (1101)
/* cusdk:QueryGPSTrace */
struct cusdk__QueryGPSTrace
{
public:
	cusdk__QueryGPSTraceReq req;	/* required element of type cusdk:QueryGPSTraceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMapConfigReq
#define SOAP_TYPE_cusdk__GetMapConfigReq (1102)
/* cusdk:GetMapConfigReq */
class SOAP_CMAC cusdk__GetMapConfigReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 1102; } /* = unique id SOAP_TYPE_cusdk__GetMapConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetMapConfigReq() { cusdk__GetMapConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetMapConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMapConfigRsp
#define SOAP_TYPE_cusdk__GetMapConfigRsp (1103)
/* cusdk:GetMapConfigRsp */
class SOAP_CMAC cusdk__GetMapConfigRsp
{
public:
	int maxGPSInfoSavedDays;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int maxGPSInfoSavedSize;	/* required element of type xsd:int */
	int maxGPSInfoSavedDeviceNumber;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1103; } /* = unique id SOAP_TYPE_cusdk__GetMapConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetMapConfigRsp() { cusdk__GetMapConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetMapConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetMapConfig
#define SOAP_TYPE_cusdk__GetMapConfig (1106)
/* cusdk:GetMapConfig */
struct cusdk__GetMapConfig
{
public:
	cusdk__GetMapConfigReq req;	/* required element of type cusdk:GetMapConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetMapConfigReq
#define SOAP_TYPE_cusdk__SetMapConfigReq (1107)
/* cusdk:SetMapConfigReq */
class SOAP_CMAC cusdk__SetMapConfigReq : public cusdk__BaseReq
{
public:
	int maxGPSInfoSavedDays;	/* required element of type xsd:int */
	int maxGPSInfoSavedSize;	/* required element of type xsd:int */
	int maxGPSInfoSavedDeviceNumber;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1107; } /* = unique id SOAP_TYPE_cusdk__SetMapConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetMapConfigReq() { cusdk__SetMapConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetMapConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetMapConfigRsp
#define SOAP_TYPE_cusdk__SetMapConfigRsp (1108)
/* cusdk:SetMapConfigRsp */
class SOAP_CMAC cusdk__SetMapConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1108; } /* = unique id SOAP_TYPE_cusdk__SetMapConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetMapConfigRsp() { cusdk__SetMapConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetMapConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetMapConfig
#define SOAP_TYPE_cusdk__SetMapConfig (1111)
/* cusdk:SetMapConfig */
struct cusdk__SetMapConfig
{
public:
	cusdk__SetMapConfigReq req;	/* required element of type cusdk:SetMapConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceSerialConfigReq
#define SOAP_TYPE_cusdk__GetDeviceSerialConfigReq (1112)
/* cusdk:GetDeviceSerialConfigReq */
class SOAP_CMAC cusdk__GetDeviceSerialConfigReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int serialPortID;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1112; } /* = unique id SOAP_TYPE_cusdk__GetDeviceSerialConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceSerialConfigReq() { cusdk__GetDeviceSerialConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceSerialConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceSerialConfigRsp
#define SOAP_TYPE_cusdk__GetDeviceSerialConfigRsp (1113)
/* cusdk:GetDeviceSerialConfigRsp */
class SOAP_CMAC cusdk__GetDeviceSerialConfigRsp
{
public:
	std::string deviceId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	int serialPortID;	/* required element of type xsd:int */
	int baudRate;	/* required element of type xsd:int */
	int comPortType;	/* required element of type xsd:int */
	bool rS232Enable;	/* required element of type xsd:boolean */
	bool rS422Enable;	/* required element of type xsd:boolean */
	bool rS485Enable;	/* required element of type xsd:boolean */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1113; } /* = unique id SOAP_TYPE_cusdk__GetDeviceSerialConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceSerialConfigRsp() { cusdk__GetDeviceSerialConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceSerialConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceSerialConfig
#define SOAP_TYPE_cusdk__GetDeviceSerialConfig (1116)
/* cusdk:GetDeviceSerialConfig */
struct cusdk__GetDeviceSerialConfig
{
public:
	cusdk__GetDeviceSerialConfigReq req;	/* required element of type cusdk:GetDeviceSerialConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceSerialConfigReq
#define SOAP_TYPE_cusdk__SetDeviceSerialConfigReq (1117)
/* cusdk:SetDeviceSerialConfigReq */
class SOAP_CMAC cusdk__SetDeviceSerialConfigReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int serialPortID;	/* required element of type xsd:int */
	int baudRate;	/* required element of type xsd:int */
	int comPortType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1117; } /* = unique id SOAP_TYPE_cusdk__SetDeviceSerialConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetDeviceSerialConfigReq() { cusdk__SetDeviceSerialConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetDeviceSerialConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceSerialConfigRsp
#define SOAP_TYPE_cusdk__SetDeviceSerialConfigRsp (1118)
/* cusdk:SetDeviceSerialConfigRsp */
class SOAP_CMAC cusdk__SetDeviceSerialConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1118; } /* = unique id SOAP_TYPE_cusdk__SetDeviceSerialConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetDeviceSerialConfigRsp() { cusdk__SetDeviceSerialConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetDeviceSerialConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetDeviceSerialConfig
#define SOAP_TYPE_cusdk__SetDeviceSerialConfig (1121)
/* cusdk:SetDeviceSerialConfig */
struct cusdk__SetDeviceSerialConfig
{
public:
	cusdk__SetDeviceSerialConfigReq req;	/* required element of type cusdk:SetDeviceSerialConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGBIDReq
#define SOAP_TYPE_cusdk__GetDeviceGBIDReq (1122)
/* cusdk:GetDeviceGBIDReq */
class SOAP_CMAC cusdk__GetDeviceGBIDReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel deviceChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 1122; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGBIDReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGBIDReq() { cusdk__GetDeviceGBIDReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGBIDReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGBIDRsp
#define SOAP_TYPE_cusdk__GetDeviceGBIDRsp (1123)
/* cusdk:GetDeviceGBIDRsp */
class SOAP_CMAC cusdk__GetDeviceGBIDRsp
{
public:
	std::string deviceGBID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string gbsID;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1123; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGBIDRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGBIDRsp() { cusdk__GetDeviceGBIDRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGBIDRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGBID
#define SOAP_TYPE_cusdk__GetDeviceGBID (1126)
/* cusdk:GetDeviceGBID */
struct cusdk__GetDeviceGBID
{
public:
	cusdk__GetDeviceGBIDReq req;	/* required element of type cusdk:GetDeviceGBIDReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCivilcodeReq
#define SOAP_TYPE_cusdk__GetCivilcodeReq (1127)
/* cusdk:GetCivilcodeReq */
class SOAP_CMAC cusdk__GetCivilcodeReq : public cusdk__BaseReq
{
public:
	std::string deviceGroupId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1127; } /* = unique id SOAP_TYPE_cusdk__GetCivilcodeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCivilcodeReq() { cusdk__GetCivilcodeReq::soap_default(NULL); }
	virtual ~cusdk__GetCivilcodeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCivilcodeRsp
#define SOAP_TYPE_cusdk__GetCivilcodeRsp (1128)
/* cusdk:GetCivilcodeRsp */
class SOAP_CMAC cusdk__GetCivilcodeRsp
{
public:
	std::string civilcode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1128; } /* = unique id SOAP_TYPE_cusdk__GetCivilcodeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCivilcodeRsp() { cusdk__GetCivilcodeRsp::soap_default(NULL); }
	virtual ~cusdk__GetCivilcodeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCivilcode
#define SOAP_TYPE_cusdk__GetCivilcode (1131)
/* cusdk:GetCivilcode */
struct cusdk__GetCivilcode
{
public:
	cusdk__GetCivilcodeReq req;	/* required element of type cusdk:GetCivilcodeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceChnByGBIDReq
#define SOAP_TYPE_cusdk__GetDeviceChnByGBIDReq (1132)
/* cusdk:GetDeviceChnByGBIDReq */
class SOAP_CMAC cusdk__GetDeviceChnByGBIDReq : public cusdk__BaseReq
{
public:
	std::string deviceGBID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1132; } /* = unique id SOAP_TYPE_cusdk__GetDeviceChnByGBIDReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceChnByGBIDReq() { cusdk__GetDeviceChnByGBIDReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceChnByGBIDReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceChnByGBIDRsp
#define SOAP_TYPE_cusdk__GetDeviceChnByGBIDRsp (1133)
/* cusdk:GetDeviceChnByGBIDRsp */
class SOAP_CMAC cusdk__GetDeviceChnByGBIDRsp
{
public:
	std::string deviceID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	int chnId;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1133; } /* = unique id SOAP_TYPE_cusdk__GetDeviceChnByGBIDRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceChnByGBIDRsp() { cusdk__GetDeviceChnByGBIDRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceChnByGBIDRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceChnByGBID
#define SOAP_TYPE_cusdk__GetDeviceChnByGBID (1136)
/* cusdk:GetDeviceChnByGBID */
struct cusdk__GetDeviceChnByGBID
{
public:
	cusdk__GetDeviceChnByGBIDReq req;	/* required element of type cusdk:GetDeviceChnByGBIDReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCAPSConfigReq
#define SOAP_TYPE_cusdk__GetCAPSConfigReq (1137)
/* cusdk:GetCAPSConfigReq */
class SOAP_CMAC cusdk__GetCAPSConfigReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 1137; } /* = unique id SOAP_TYPE_cusdk__GetCAPSConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCAPSConfigReq() { cusdk__GetCAPSConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetCAPSConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCAPSConfigRsp
#define SOAP_TYPE_cusdk__GetCAPSConfigRsp (1138)
/* cusdk:GetCAPSConfigRsp */
class SOAP_CMAC cusdk__GetCAPSConfigRsp
{
public:
	int captureIntervalSecs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string wechatUrl;	/* required element of type xsd:string */
	std::string wechatTitle;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1138; } /* = unique id SOAP_TYPE_cusdk__GetCAPSConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCAPSConfigRsp() { cusdk__GetCAPSConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetCAPSConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCAPSConfig
#define SOAP_TYPE_cusdk__GetCAPSConfig (1141)
/* cusdk:GetCAPSConfig */
struct cusdk__GetCAPSConfig
{
public:
	cusdk__GetCAPSConfigReq req;	/* required element of type cusdk:GetCAPSConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetCAPSConfigReq
#define SOAP_TYPE_cusdk__SetCAPSConfigReq (1142)
/* cusdk:SetCAPSConfigReq */
class SOAP_CMAC cusdk__SetCAPSConfigReq : public cusdk__BaseReq
{
public:
	int captureIntervalSecs;	/* required element of type xsd:int */
	std::string wechatTitle;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1142; } /* = unique id SOAP_TYPE_cusdk__SetCAPSConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetCAPSConfigReq() { cusdk__SetCAPSConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetCAPSConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetCAPSConfigRsp
#define SOAP_TYPE_cusdk__SetCAPSConfigRsp (1143)
/* cusdk:SetCAPSConfigRsp */
class SOAP_CMAC cusdk__SetCAPSConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1143; } /* = unique id SOAP_TYPE_cusdk__SetCAPSConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetCAPSConfigRsp() { cusdk__SetCAPSConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetCAPSConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetCAPSConfig
#define SOAP_TYPE_cusdk__SetCAPSConfig (1146)
/* cusdk:SetCAPSConfig */
struct cusdk__SetCAPSConfig
{
public:
	cusdk__SetCAPSConfigReq req;	/* required element of type cusdk:SetCAPSConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSDevice
#define SOAP_TYPE_cusdk__CAPSDevice (1147)
/* cusdk:CAPSDevice */
class SOAP_CMAC cusdk__CAPSDevice
{
public:
	std::string devId;	/* required element of type xsd:string */
	int chnId;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	std::string devGBId;	/* required element of type xsd:string */
	std::string domainGBId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1147; } /* = unique id SOAP_TYPE_cusdk__CAPSDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CAPSDevice() { cusdk__CAPSDevice::soap_default(NULL); }
	virtual ~cusdk__CAPSDevice() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryCAPSDeviceListReq
#define SOAP_TYPE_cusdk__QueryCAPSDeviceListReq (1148)
/* cusdk:QueryCAPSDeviceListReq */
class SOAP_CMAC cusdk__QueryCAPSDeviceListReq : public cusdk__BaseReq
{
public:
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1148; } /* = unique id SOAP_TYPE_cusdk__QueryCAPSDeviceListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryCAPSDeviceListReq() { cusdk__QueryCAPSDeviceListReq::soap_default(NULL); }
	virtual ~cusdk__QueryCAPSDeviceListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryCAPSDeviceListRsp
#define SOAP_TYPE_cusdk__QueryCAPSDeviceListRsp (1149)
/* cusdk:QueryCAPSDeviceListRsp */
class SOAP_CMAC cusdk__QueryCAPSDeviceListRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__CAPSDevice >devList;	/* optional element of type cusdk:CAPSDevice */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1149; } /* = unique id SOAP_TYPE_cusdk__QueryCAPSDeviceListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryCAPSDeviceListRsp() { cusdk__QueryCAPSDeviceListRsp::soap_default(NULL); }
	virtual ~cusdk__QueryCAPSDeviceListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryCAPSDeviceList
#define SOAP_TYPE_cusdk__QueryCAPSDeviceList (1153)
/* cusdk:QueryCAPSDeviceList */
struct cusdk__QueryCAPSDeviceList
{
public:
	cusdk__QueryCAPSDeviceListReq req;	/* required element of type cusdk:QueryCAPSDeviceListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSAddDeviceReq
#define SOAP_TYPE_cusdk__CAPSAddDeviceReq (1154)
/* cusdk:CAPSAddDeviceReq */
class SOAP_CMAC cusdk__CAPSAddDeviceReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__CAPSDevice >devList;	/* optional element of type cusdk:CAPSDevice */
public:
	virtual int soap_type() const { return 1154; } /* = unique id SOAP_TYPE_cusdk__CAPSAddDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CAPSAddDeviceReq() { cusdk__CAPSAddDeviceReq::soap_default(NULL); }
	virtual ~cusdk__CAPSAddDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSAddDeviceRsp
#define SOAP_TYPE_cusdk__CAPSAddDeviceRsp (1155)
/* cusdk:CAPSAddDeviceRsp */
class SOAP_CMAC cusdk__CAPSAddDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1155; } /* = unique id SOAP_TYPE_cusdk__CAPSAddDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CAPSAddDeviceRsp() { cusdk__CAPSAddDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__CAPSAddDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSAddDevice
#define SOAP_TYPE_cusdk__CAPSAddDevice (1158)
/* cusdk:CAPSAddDevice */
struct cusdk__CAPSAddDevice
{
public:
	cusdk__CAPSAddDeviceReq req;	/* required element of type cusdk:CAPSAddDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSModifyDeviceReq
#define SOAP_TYPE_cusdk__CAPSModifyDeviceReq (1159)
/* cusdk:CAPSModifyDeviceReq */
class SOAP_CMAC cusdk__CAPSModifyDeviceReq : public cusdk__BaseReq
{
public:
	cusdk__CAPSDevice device;	/* required element of type cusdk:CAPSDevice */
public:
	virtual int soap_type() const { return 1159; } /* = unique id SOAP_TYPE_cusdk__CAPSModifyDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CAPSModifyDeviceReq() { cusdk__CAPSModifyDeviceReq::soap_default(NULL); }
	virtual ~cusdk__CAPSModifyDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSModifyDeviceRsp
#define SOAP_TYPE_cusdk__CAPSModifyDeviceRsp (1160)
/* cusdk:CAPSModifyDeviceRsp */
class SOAP_CMAC cusdk__CAPSModifyDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1160; } /* = unique id SOAP_TYPE_cusdk__CAPSModifyDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CAPSModifyDeviceRsp() { cusdk__CAPSModifyDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__CAPSModifyDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSModifyDevice
#define SOAP_TYPE_cusdk__CAPSModifyDevice (1163)
/* cusdk:CAPSModifyDevice */
struct cusdk__CAPSModifyDevice
{
public:
	cusdk__CAPSModifyDeviceReq req;	/* required element of type cusdk:CAPSModifyDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSDelDeviceReq
#define SOAP_TYPE_cusdk__CAPSDelDeviceReq (1164)
/* cusdk:CAPSDelDeviceReq */
class SOAP_CMAC cusdk__CAPSDelDeviceReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel device;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 1164; } /* = unique id SOAP_TYPE_cusdk__CAPSDelDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CAPSDelDeviceReq() { cusdk__CAPSDelDeviceReq::soap_default(NULL); }
	virtual ~cusdk__CAPSDelDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSDelDeviceRsp
#define SOAP_TYPE_cusdk__CAPSDelDeviceRsp (1165)
/* cusdk:CAPSDelDeviceRsp */
class SOAP_CMAC cusdk__CAPSDelDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1165; } /* = unique id SOAP_TYPE_cusdk__CAPSDelDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CAPSDelDeviceRsp() { cusdk__CAPSDelDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__CAPSDelDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CAPSDelDevice
#define SOAP_TYPE_cusdk__CAPSDelDevice (1168)
/* cusdk:CAPSDelDevice */
struct cusdk__CAPSDelDevice
{
public:
	cusdk__CAPSDelDeviceReq req;	/* required element of type cusdk:CAPSDelDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetOfflineDeviceStatReq
#define SOAP_TYPE_cusdk__GetOfflineDeviceStatReq (1169)
/* cusdk:GetOfflineDeviceStatReq */
class SOAP_CMAC cusdk__GetOfflineDeviceStatReq : public cusdk__BaseReq
{
public:
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
	std::string domanName;	/* required element of type xsd:string */
	std::string queryTag;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1169; } /* = unique id SOAP_TYPE_cusdk__GetOfflineDeviceStatReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetOfflineDeviceStatReq() { cusdk__GetOfflineDeviceStatReq::soap_default(NULL); }
	virtual ~cusdk__GetOfflineDeviceStatReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceVideosrcId
#define SOAP_TYPE_cusdk__DeviceVideosrcId (1170)
/* cusdk:DeviceVideosrcId */
class SOAP_CMAC cusdk__DeviceVideosrcId
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	bool deviceOnline;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1170; } /* = unique id SOAP_TYPE_cusdk__DeviceVideosrcId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceVideosrcId() { cusdk__DeviceVideosrcId::soap_default(NULL); }
	virtual ~cusdk__DeviceVideosrcId() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetOfflineDeviceStatRsp
#define SOAP_TYPE_cusdk__GetOfflineDeviceStatRsp (1171)
/* cusdk:GetOfflineDeviceStatRsp */
class SOAP_CMAC cusdk__GetOfflineDeviceStatRsp
{
public:
	std::vector<cusdk__DeviceVideosrcId >offlineDeviceVideosrcList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceVideosrcId */
	std::vector<cusdk__DeviceVideosrcId >idleStatVideoSrcList;	/* optional element of type cusdk:DeviceVideosrcId */
	int totalOfflineDeviceVideosrcNum;	/* required element of type xsd:int */
	int onlineDeviceNum;	/* required element of type xsd:int */
	int idleDeviceNum;	/* required element of type xsd:int */
	std::string queryTag;	/* required element of type xsd:string */
	std::string domanName;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1171; } /* = unique id SOAP_TYPE_cusdk__GetOfflineDeviceStatRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetOfflineDeviceStatRsp() { cusdk__GetOfflineDeviceStatRsp::soap_default(NULL); }
	virtual ~cusdk__GetOfflineDeviceStatRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetOfflineDeviceStat
#define SOAP_TYPE_cusdk__GetOfflineDeviceStat (1175)
/* cusdk:GetOfflineDeviceStat */
struct cusdk__GetOfflineDeviceStat
{
public:
	cusdk__GetOfflineDeviceStatReq req;	/* required element of type cusdk:GetOfflineDeviceStatReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UpdateCUPropertyReq
#define SOAP_TYPE_cusdk__UpdateCUPropertyReq (1176)
/* cusdk:UpdateCUPropertyReq */
class SOAP_CMAC cusdk__UpdateCUPropertyReq : public cusdk__BaseReq
{
public:
	std::string clientLocalIP;	/* required element of type xsd:string */
	enum cusdk__ENATMode platNatMode;	/* required element of type cusdk:ENATMode */
	bool clientSupportNatProbe;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1176; } /* = unique id SOAP_TYPE_cusdk__UpdateCUPropertyReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UpdateCUPropertyReq() { cusdk__UpdateCUPropertyReq::soap_default(NULL); }
	virtual ~cusdk__UpdateCUPropertyReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UpdateCUPropertyRsp
#define SOAP_TYPE_cusdk__UpdateCUPropertyRsp (1177)
/* cusdk:UpdateCUPropertyRsp */
class SOAP_CMAC cusdk__UpdateCUPropertyRsp
{
public:
	enum cusdk__ENATMode cuNatMode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:ENATMode */
	enum cusdk__ENATMode platNatMode;	/* required element of type cusdk:ENATMode */
	std::string platNATIP;	/* required element of type xsd:string */
	int platNATPort;	/* required element of type xsd:int */
	bool platSupportForward;	/* required element of type xsd:boolean */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1177; } /* = unique id SOAP_TYPE_cusdk__UpdateCUPropertyRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UpdateCUPropertyRsp() { cusdk__UpdateCUPropertyRsp::soap_default(NULL); }
	virtual ~cusdk__UpdateCUPropertyRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UpdateCUProperty
#define SOAP_TYPE_cusdk__UpdateCUProperty (1180)
/* cusdk:UpdateCUProperty */
struct cusdk__UpdateCUProperty
{
public:
	cusdk__UpdateCUPropertyReq req;	/* required element of type cusdk:UpdateCUPropertyReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__RestartDeviceReq
#define SOAP_TYPE_cusdk__RestartDeviceReq (1181)
/* cusdk:RestartDeviceReq */
class SOAP_CMAC cusdk__RestartDeviceReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1181; } /* = unique id SOAP_TYPE_cusdk__RestartDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__RestartDeviceReq() { cusdk__RestartDeviceReq::soap_default(NULL); }
	virtual ~cusdk__RestartDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__RestartDeviceRsp
#define SOAP_TYPE_cusdk__RestartDeviceRsp (1182)
/* cusdk:RestartDeviceRsp */
class SOAP_CMAC cusdk__RestartDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1182; } /* = unique id SOAP_TYPE_cusdk__RestartDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__RestartDeviceRsp() { cusdk__RestartDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__RestartDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__RestartDevice
#define SOAP_TYPE_cusdk__RestartDevice (1185)
/* cusdk:RestartDevice */
struct cusdk__RestartDevice
{
public:
	cusdk__RestartDeviceReq req;	/* required element of type cusdk:RestartDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddDeviceGroupReq
#define SOAP_TYPE_cusdk__UserAddDeviceGroupReq (1186)
/* cusdk:UserAddDeviceGroupReq */
class SOAP_CMAC cusdk__UserAddDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string devgrpid;	/* required element of type xsd:string */
	bool usePri;	/* required element of type xsd:boolean */
	std::set<int >devPriSet;	/* optional element of type xsd:int */
	std::set<int >videoSrcPriSet;	/* optional element of type xsd:int */
	int ptzLevel;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1186; } /* = unique id SOAP_TYPE_cusdk__UserAddDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserAddDeviceGroupReq() { cusdk__UserAddDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserAddDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddDeviceGroupRsp
#define SOAP_TYPE_cusdk__UserAddDeviceGroupRsp (1187)
/* cusdk:UserAddDeviceGroupRsp */
class SOAP_CMAC cusdk__UserAddDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1187; } /* = unique id SOAP_TYPE_cusdk__UserAddDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserAddDeviceGroupRsp() { cusdk__UserAddDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserAddDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddDeviceGroup
#define SOAP_TYPE_cusdk__UserAddDeviceGroup (1190)
/* cusdk:UserAddDeviceGroup */
struct cusdk__UserAddDeviceGroup
{
public:
	cusdk__UserAddDeviceGroupReq req;	/* required element of type cusdk:UserAddDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelDeviceGroupReq
#define SOAP_TYPE_cusdk__UserDelDeviceGroupReq (1191)
/* cusdk:UserDelDeviceGroupReq */
class SOAP_CMAC cusdk__UserDelDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string devgrpid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1191; } /* = unique id SOAP_TYPE_cusdk__UserDelDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserDelDeviceGroupReq() { cusdk__UserDelDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserDelDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelDeviceGroupRsp
#define SOAP_TYPE_cusdk__UserDelDeviceGroupRsp (1192)
/* cusdk:UserDelDeviceGroupRsp */
class SOAP_CMAC cusdk__UserDelDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1192; } /* = unique id SOAP_TYPE_cusdk__UserDelDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserDelDeviceGroupRsp() { cusdk__UserDelDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserDelDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelDeviceGroup
#define SOAP_TYPE_cusdk__UserDelDeviceGroup (1195)
/* cusdk:UserDelDeviceGroup */
struct cusdk__UserDelDeviceGroup
{
public:
	cusdk__UserDelDeviceGroupReq req;	/* required element of type cusdk:UserDelDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupAddDeviceGroupReq
#define SOAP_TYPE_cusdk__UserGroupAddDeviceGroupReq (1196)
/* cusdk:UserGroupAddDeviceGroupReq */
class SOAP_CMAC cusdk__UserGroupAddDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string usergrpId;	/* required element of type xsd:string */
	std::string devgrpid;	/* required element of type xsd:string */
	bool usePri;	/* required element of type xsd:boolean */
	std::set<int >devPriSet;	/* optional element of type xsd:int */
	std::set<int >videoSrcPriSet;	/* optional element of type xsd:int */
	int ptzLevel;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1196; } /* = unique id SOAP_TYPE_cusdk__UserGroupAddDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroupAddDeviceGroupReq() { cusdk__UserGroupAddDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserGroupAddDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupAddDeviceGroupRsp
#define SOAP_TYPE_cusdk__UserGroupAddDeviceGroupRsp (1197)
/* cusdk:UserGroupAddDeviceGroupRsp */
class SOAP_CMAC cusdk__UserGroupAddDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1197; } /* = unique id SOAP_TYPE_cusdk__UserGroupAddDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroupAddDeviceGroupRsp() { cusdk__UserGroupAddDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserGroupAddDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupAddDeviceGroup
#define SOAP_TYPE_cusdk__UserGroupAddDeviceGroup (1200)
/* cusdk:UserGroupAddDeviceGroup */
struct cusdk__UserGroupAddDeviceGroup
{
public:
	cusdk__UserGroupAddDeviceGroupReq req;	/* required element of type cusdk:UserGroupAddDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupDelDeviceGroupReq
#define SOAP_TYPE_cusdk__UserGroupDelDeviceGroupReq (1201)
/* cusdk:UserGroupDelDeviceGroupReq */
class SOAP_CMAC cusdk__UserGroupDelDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string usergrpId;	/* required element of type xsd:string */
	std::string devgrpid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1201; } /* = unique id SOAP_TYPE_cusdk__UserGroupDelDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroupDelDeviceGroupReq() { cusdk__UserGroupDelDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserGroupDelDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupDelDeviceGroupRsp
#define SOAP_TYPE_cusdk__UserGroupDelDeviceGroupRsp (1202)
/* cusdk:UserGroupDelDeviceGroupRsp */
class SOAP_CMAC cusdk__UserGroupDelDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1202; } /* = unique id SOAP_TYPE_cusdk__UserGroupDelDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroupDelDeviceGroupRsp() { cusdk__UserGroupDelDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserGroupDelDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupDelDeviceGroup
#define SOAP_TYPE_cusdk__UserGroupDelDeviceGroup (1205)
/* cusdk:UserGroupDelDeviceGroup */
struct cusdk__UserGroupDelDeviceGroup
{
public:
	cusdk__UserGroupDelDeviceGroupReq req;	/* required element of type cusdk:UserGroupDelDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserSetAutoSyncDeviceGroupReq
#define SOAP_TYPE_cusdk__UserSetAutoSyncDeviceGroupReq (1206)
/* cusdk:UserSetAutoSyncDeviceGroupReq */
class SOAP_CMAC cusdk__UserSetAutoSyncDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string devgrpid;	/* required element of type xsd:string */
	bool bSync;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1206; } /* = unique id SOAP_TYPE_cusdk__UserSetAutoSyncDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserSetAutoSyncDeviceGroupReq() { cusdk__UserSetAutoSyncDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserSetAutoSyncDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserSetAutoSyncDeviceGroupRsp
#define SOAP_TYPE_cusdk__UserSetAutoSyncDeviceGroupRsp (1207)
/* cusdk:UserSetAutoSyncDeviceGroupRsp */
class SOAP_CMAC cusdk__UserSetAutoSyncDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1207; } /* = unique id SOAP_TYPE_cusdk__UserSetAutoSyncDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserSetAutoSyncDeviceGroupRsp() { cusdk__UserSetAutoSyncDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserSetAutoSyncDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserSetAutoSyncDeviceGroup
#define SOAP_TYPE_cusdk__UserSetAutoSyncDeviceGroup (1210)
/* cusdk:UserSetAutoSyncDeviceGroup */
struct cusdk__UserSetAutoSyncDeviceGroup
{
public:
	cusdk__UserSetAutoSyncDeviceGroupReq req;	/* required element of type cusdk:UserSetAutoSyncDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupSetAutoSyncDeviceGroupReq
#define SOAP_TYPE_cusdk__UserGroupSetAutoSyncDeviceGroupReq (1211)
/* cusdk:UserGroupSetAutoSyncDeviceGroupReq */
class SOAP_CMAC cusdk__UserGroupSetAutoSyncDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string usergrpId;	/* required element of type xsd:string */
	std::string devgrpid;	/* required element of type xsd:string */
	bool bSync;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1211; } /* = unique id SOAP_TYPE_cusdk__UserGroupSetAutoSyncDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroupSetAutoSyncDeviceGroupReq() { cusdk__UserGroupSetAutoSyncDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserGroupSetAutoSyncDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupSetAutoSyncDeviceGroupRsp
#define SOAP_TYPE_cusdk__UserGroupSetAutoSyncDeviceGroupRsp (1212)
/* cusdk:UserGroupSetAutoSyncDeviceGroupRsp */
class SOAP_CMAC cusdk__UserGroupSetAutoSyncDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1212; } /* = unique id SOAP_TYPE_cusdk__UserGroupSetAutoSyncDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroupSetAutoSyncDeviceGroupRsp() { cusdk__UserGroupSetAutoSyncDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserGroupSetAutoSyncDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupSetAutoSyncDeviceGroup
#define SOAP_TYPE_cusdk__UserGroupSetAutoSyncDeviceGroup (1215)
/* cusdk:UserGroupSetAutoSyncDeviceGroup */
struct cusdk__UserGroupSetAutoSyncDeviceGroup
{
public:
	cusdk__UserGroupSetAutoSyncDeviceGroupReq req;	/* required element of type cusdk:UserGroupSetAutoSyncDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryOperationProgreeReq
#define SOAP_TYPE_cusdk__QueryOperationProgreeReq (1216)
/* cusdk:QueryOperationProgreeReq */
class SOAP_CMAC cusdk__QueryOperationProgreeReq : public cusdk__BaseReq
{
public:
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1216; } /* = unique id SOAP_TYPE_cusdk__QueryOperationProgreeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryOperationProgreeReq() { cusdk__QueryOperationProgreeReq::soap_default(NULL); }
	virtual ~cusdk__QueryOperationProgreeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryOperationProgreeRsp
#define SOAP_TYPE_cusdk__QueryOperationProgreeRsp (1217)
/* cusdk:QueryOperationProgreeRsp */
class SOAP_CMAC cusdk__QueryOperationProgreeRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	int progress;	/* required element of type xsd:int */
	int total;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1217; } /* = unique id SOAP_TYPE_cusdk__QueryOperationProgreeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryOperationProgreeRsp() { cusdk__QueryOperationProgreeRsp::soap_default(NULL); }
	virtual ~cusdk__QueryOperationProgreeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryOperationProgress
#define SOAP_TYPE_cusdk__QueryOperationProgress (1220)
/* cusdk:QueryOperationProgress */
struct cusdk__QueryOperationProgress
{
public:
	cusdk__QueryOperationProgreeReq req;	/* required element of type cusdk:QueryOperationProgreeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserQueryAutoSyncDeviceGroupReq
#define SOAP_TYPE_cusdk__UserQueryAutoSyncDeviceGroupReq (1221)
/* cusdk:UserQueryAutoSyncDeviceGroupReq */
class SOAP_CMAC cusdk__UserQueryAutoSyncDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1221; } /* = unique id SOAP_TYPE_cusdk__UserQueryAutoSyncDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserQueryAutoSyncDeviceGroupReq() { cusdk__UserQueryAutoSyncDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserQueryAutoSyncDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserQueryAutoSyncDeviceGroupRsp
#define SOAP_TYPE_cusdk__UserQueryAutoSyncDeviceGroupRsp (1222)
/* cusdk:UserQueryAutoSyncDeviceGroupRsp */
class SOAP_CMAC cusdk__UserQueryAutoSyncDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	long totalnum;	/* required element of type xsd:long */
	std::vector<std::string >devgroupIds;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1222; } /* = unique id SOAP_TYPE_cusdk__UserQueryAutoSyncDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserQueryAutoSyncDeviceGroupRsp() { cusdk__UserQueryAutoSyncDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserQueryAutoSyncDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserQueryAutoSyncDeviceGroup
#define SOAP_TYPE_cusdk__UserQueryAutoSyncDeviceGroup (1225)
/* cusdk:UserQueryAutoSyncDeviceGroup */
struct cusdk__UserQueryAutoSyncDeviceGroup
{
public:
	cusdk__UserQueryAutoSyncDeviceGroupReq req;	/* required element of type cusdk:UserQueryAutoSyncDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupQueryAutoSyncDeviceGroupReq
#define SOAP_TYPE_cusdk__UserGroupQueryAutoSyncDeviceGroupReq (1226)
/* cusdk:UserGroupQueryAutoSyncDeviceGroupReq */
class SOAP_CMAC cusdk__UserGroupQueryAutoSyncDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string usergrpId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1226; } /* = unique id SOAP_TYPE_cusdk__UserGroupQueryAutoSyncDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroupQueryAutoSyncDeviceGroupReq() { cusdk__UserGroupQueryAutoSyncDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserGroupQueryAutoSyncDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupQueryAutoSyncDeviceGroupRsp
#define SOAP_TYPE_cusdk__UserGroupQueryAutoSyncDeviceGroupRsp (1227)
/* cusdk:UserGroupQueryAutoSyncDeviceGroupRsp */
class SOAP_CMAC cusdk__UserGroupQueryAutoSyncDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	int totalnum;	/* required element of type xsd:int */
	std::vector<std::string >devgroupIds;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1227; } /* = unique id SOAP_TYPE_cusdk__UserGroupQueryAutoSyncDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroupQueryAutoSyncDeviceGroupRsp() { cusdk__UserGroupQueryAutoSyncDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserGroupQueryAutoSyncDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGroupQueryAutoSyncDeviceGroup
#define SOAP_TYPE_cusdk__UserGroupQueryAutoSyncDeviceGroup (1230)
/* cusdk:UserGroupQueryAutoSyncDeviceGroup */
struct cusdk__UserGroupQueryAutoSyncDeviceGroup
{
public:
	cusdk__UserGroupQueryAutoSyncDeviceGroupReq req;	/* required element of type cusdk:UserGroupQueryAutoSyncDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDomainListReq
#define SOAP_TYPE_cusdk__GetGBDomainListReq (1231)
/* cusdk:GetGBDomainListReq */
class SOAP_CMAC cusdk__GetGBDomainListReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 1231; } /* = unique id SOAP_TYPE_cusdk__GetGBDomainListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBDomainListReq() { cusdk__GetGBDomainListReq::soap_default(NULL); }
	virtual ~cusdk__GetGBDomainListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GBDomainInfo
#define SOAP_TYPE_cusdk__GBDomainInfo (1232)
/* cusdk:GBDomainInfo */
class SOAP_CMAC cusdk__GBDomainInfo
{
public:
	std::string gbDomainId;	/* required element of type xsd:string */
	std::string domainName;	/* required element of type xsd:string */
	std::string devTreeViewId;	/* required element of type xsd:string */
	std::string devTreeVersion;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1232; } /* = unique id SOAP_TYPE_cusdk__GBDomainInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GBDomainInfo() { cusdk__GBDomainInfo::soap_default(NULL); }
	virtual ~cusdk__GBDomainInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDomainListRsp
#define SOAP_TYPE_cusdk__GetGBDomainListRsp (1233)
/* cusdk:GetGBDomainListRsp */
class SOAP_CMAC cusdk__GetGBDomainListRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::vector<cusdk__GBDomainInfo >gbDomainList;	/* optional element of type cusdk:GBDomainInfo */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1233; } /* = unique id SOAP_TYPE_cusdk__GetGBDomainListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBDomainListRsp() { cusdk__GetGBDomainListRsp::soap_default(NULL); }
	virtual ~cusdk__GetGBDomainListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSuperGBDomainList
#define SOAP_TYPE_cusdk__GetSuperGBDomainList (1237)
/* cusdk:GetSuperGBDomainList */
struct cusdk__GetSuperGBDomainList
{
public:
	cusdk__GetGBDomainListReq req;	/* required element of type cusdk:GetGBDomainListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DevicePushReq
#define SOAP_TYPE_cusdk__DevicePushReq (1238)
/* cusdk:DevicePushReq */
class SOAP_CMAC cusdk__DevicePushReq : public cusdk__BaseReq
{
public:
	std::string userName;	/* required element of type xsd:string */
	std::string gbDomainId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1238; } /* = unique id SOAP_TYPE_cusdk__DevicePushReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevicePushReq() { cusdk__DevicePushReq::soap_default(NULL); }
	virtual ~cusdk__DevicePushReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevicePushRsp
#define SOAP_TYPE_cusdk__DevicePushRsp (1239)
/* cusdk:DevicePushRsp */
class SOAP_CMAC cusdk__DevicePushRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1239; } /* = unique id SOAP_TYPE_cusdk__DevicePushRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevicePushRsp() { cusdk__DevicePushRsp::soap_default(NULL); }
	virtual ~cusdk__DevicePushRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PushDevice
#define SOAP_TYPE_cusdk__PushDevice (1242)
/* cusdk:PushDevice */
struct cusdk__PushDevice
{
public:
	cusdk__DevicePushReq req;	/* required element of type cusdk:DevicePushReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDataVersionReq
#define SOAP_TYPE_cusdk__GetDataVersionReq (1244)
/* cusdk:GetDataVersionReq */
class SOAP_CMAC cusdk__GetDataVersionReq : public cusdk__BaseReq
{
public:
	int dataType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1244; } /* = unique id SOAP_TYPE_cusdk__GetDataVersionReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDataVersionReq() { cusdk__GetDataVersionReq::soap_default(NULL); }
	virtual ~cusdk__GetDataVersionReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDataVersionRsp
#define SOAP_TYPE_cusdk__GetDataVersionRsp (1245)
/* cusdk:GetDataVersionRsp */
class SOAP_CMAC cusdk__GetDataVersionRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string dataVersion;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1245; } /* = unique id SOAP_TYPE_cusdk__GetDataVersionRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDataVersionRsp() { cusdk__GetDataVersionRsp::soap_default(NULL); }
	virtual ~cusdk__GetDataVersionRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDataVersion
#define SOAP_TYPE_cusdk__GetDataVersion (1248)
/* cusdk:GetDataVersion */
struct cusdk__GetDataVersion
{
public:
	cusdk__GetDataVersionReq req;	/* required element of type cusdk:GetDataVersionReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDataFileExportReq
#define SOAP_TYPE_cusdk__StartDataFileExportReq (1249)
/* cusdk:StartDataFileExportReq */
class SOAP_CMAC cusdk__StartDataFileExportReq : public cusdk__BaseReq
{
public:
	int exportedDataType;	/* required element of type xsd:int */
	std::vector<std::string >params;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1249; } /* = unique id SOAP_TYPE_cusdk__StartDataFileExportReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartDataFileExportReq() { cusdk__StartDataFileExportReq::soap_default(NULL); }
	virtual ~cusdk__StartDataFileExportReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDataFileExportRsp
#define SOAP_TYPE_cusdk__StartDataFileExportRsp (1250)
/* cusdk:StartDataFileExportRsp */
class SOAP_CMAC cusdk__StartDataFileExportRsp
{
public:
	std::string fileUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string operationId;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1250; } /* = unique id SOAP_TYPE_cusdk__StartDataFileExportRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartDataFileExportRsp() { cusdk__StartDataFileExportRsp::soap_default(NULL); }
	virtual ~cusdk__StartDataFileExportRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDataFileExport
#define SOAP_TYPE_cusdk__StartDataFileExport (1253)
/* cusdk:StartDataFileExport */
struct cusdk__StartDataFileExport
{
public:
	cusdk__StartDataFileExportReq req;	/* required element of type cusdk:StartDataFileExportReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__EndDataFileExportReq
#define SOAP_TYPE_cusdk__EndDataFileExportReq (1254)
/* cusdk:EndDataFileExportReq */
class SOAP_CMAC cusdk__EndDataFileExportReq : public cusdk__BaseReq
{
public:
	std::string operationId;	/* required element of type xsd:string */
	std::vector<std::string >params;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1254; } /* = unique id SOAP_TYPE_cusdk__EndDataFileExportReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EndDataFileExportReq() { cusdk__EndDataFileExportReq::soap_default(NULL); }
	virtual ~cusdk__EndDataFileExportReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EndDataFileExportRsp
#define SOAP_TYPE_cusdk__EndDataFileExportRsp (1255)
/* cusdk:EndDataFileExportRsp */
class SOAP_CMAC cusdk__EndDataFileExportRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1255; } /* = unique id SOAP_TYPE_cusdk__EndDataFileExportRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EndDataFileExportRsp() { cusdk__EndDataFileExportRsp::soap_default(NULL); }
	virtual ~cusdk__EndDataFileExportRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EndDataFileExport
#define SOAP_TYPE_cusdk__EndDataFileExport (1258)
/* cusdk:EndDataFileExport */
struct cusdk__EndDataFileExport
{
public:
	cusdk__EndDataFileExportReq req;	/* required element of type cusdk:EndDataFileExportReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDataFileImportReq
#define SOAP_TYPE_cusdk__StartDataFileImportReq (1259)
/* cusdk:StartDataFileImportReq */
class SOAP_CMAC cusdk__StartDataFileImportReq : public cusdk__BaseReq
{
public:
	int importedDataType;	/* required element of type xsd:int */
	std::vector<std::string >params;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1259; } /* = unique id SOAP_TYPE_cusdk__StartDataFileImportReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartDataFileImportReq() { cusdk__StartDataFileImportReq::soap_default(NULL); }
	virtual ~cusdk__StartDataFileImportReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDataFileImportRsp
#define SOAP_TYPE_cusdk__StartDataFileImportRsp (1260)
/* cusdk:StartDataFileImportRsp */
class SOAP_CMAC cusdk__StartDataFileImportRsp
{
public:
	std::string fileUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string operationId;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1260; } /* = unique id SOAP_TYPE_cusdk__StartDataFileImportRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartDataFileImportRsp() { cusdk__StartDataFileImportRsp::soap_default(NULL); }
	virtual ~cusdk__StartDataFileImportRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDataFileImport
#define SOAP_TYPE_cusdk__StartDataFileImport (1263)
/* cusdk:StartDataFileImport */
struct cusdk__StartDataFileImport
{
public:
	cusdk__StartDataFileImportReq req;	/* required element of type cusdk:StartDataFileImportReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__EndDataFileImportReq
#define SOAP_TYPE_cusdk__EndDataFileImportReq (1264)
/* cusdk:EndDataFileImportReq */
class SOAP_CMAC cusdk__EndDataFileImportReq : public cusdk__BaseReq
{
public:
	std::string operationId;	/* required element of type xsd:string */
	bool cancelOperation;	/* required element of type xsd:boolean */
	std::vector<std::string >params;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1264; } /* = unique id SOAP_TYPE_cusdk__EndDataFileImportReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EndDataFileImportReq() { cusdk__EndDataFileImportReq::soap_default(NULL); }
	virtual ~cusdk__EndDataFileImportReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EndDataFileImportRsp
#define SOAP_TYPE_cusdk__EndDataFileImportRsp (1265)
/* cusdk:EndDataFileImportRsp */
class SOAP_CMAC cusdk__EndDataFileImportRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1265; } /* = unique id SOAP_TYPE_cusdk__EndDataFileImportRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EndDataFileImportRsp() { cusdk__EndDataFileImportRsp::soap_default(NULL); }
	virtual ~cusdk__EndDataFileImportRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EndDataFileImport
#define SOAP_TYPE_cusdk__EndDataFileImport (1268)
/* cusdk:EndDataFileImport */
struct cusdk__EndDataFileImport
{
public:
	cusdk__EndDataFileImportReq req;	/* required element of type cusdk:EndDataFileImportReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetOperationProgreeReq
#define SOAP_TYPE_cusdk__GetOperationProgreeReq (1269)
/* cusdk:GetOperationProgreeReq */
class SOAP_CMAC cusdk__GetOperationProgreeReq : public cusdk__BaseReq
{
public:
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1269; } /* = unique id SOAP_TYPE_cusdk__GetOperationProgreeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetOperationProgreeReq() { cusdk__GetOperationProgreeReq::soap_default(NULL); }
	virtual ~cusdk__GetOperationProgreeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetOperationProgreeRsp
#define SOAP_TYPE_cusdk__GetOperationProgreeRsp (1270)
/* cusdk:GetOperationProgreeRsp */
class SOAP_CMAC cusdk__GetOperationProgreeRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	int progress;	/* required element of type xsd:int */
	int total;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1270; } /* = unique id SOAP_TYPE_cusdk__GetOperationProgreeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetOperationProgreeRsp() { cusdk__GetOperationProgreeRsp::soap_default(NULL); }
	virtual ~cusdk__GetOperationProgreeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetOperationProgress
#define SOAP_TYPE_cusdk__GetOperationProgress (1273)
/* cusdk:GetOperationProgress */
struct cusdk__GetOperationProgress
{
public:
	cusdk__GetOperationProgreeReq req;	/* required element of type cusdk:GetOperationProgreeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ChildrenGBDomainInfo
#define SOAP_TYPE_cusdk__ChildrenGBDomainInfo (1274)
/* cusdk:ChildrenGBDomainInfo */
class SOAP_CMAC cusdk__ChildrenGBDomainInfo
{
public:
	std::string gbDomainId;	/* required element of type xsd:string */
	std::string domainName;	/* required element of type xsd:string */
	int status;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1274; } /* = unique id SOAP_TYPE_cusdk__ChildrenGBDomainInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ChildrenGBDomainInfo() { cusdk__ChildrenGBDomainInfo::soap_default(NULL); }
	virtual ~cusdk__ChildrenGBDomainInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetChildrenGBDomainListReq
#define SOAP_TYPE_cusdk__GetChildrenGBDomainListReq (1275)
/* cusdk:GetChildrenGBDomainListReq */
class SOAP_CMAC cusdk__GetChildrenGBDomainListReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 1275; } /* = unique id SOAP_TYPE_cusdk__GetChildrenGBDomainListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetChildrenGBDomainListReq() { cusdk__GetChildrenGBDomainListReq::soap_default(NULL); }
	virtual ~cusdk__GetChildrenGBDomainListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetChildrenGBDomainListRsp
#define SOAP_TYPE_cusdk__GetChildrenGBDomainListRsp (1276)
/* cusdk:GetChildrenGBDomainListRsp */
class SOAP_CMAC cusdk__GetChildrenGBDomainListRsp
{
public:
	std::vector<cusdk__ChildrenGBDomainInfo >domainIdList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:ChildrenGBDomainInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1276; } /* = unique id SOAP_TYPE_cusdk__GetChildrenGBDomainListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetChildrenGBDomainListRsp() { cusdk__GetChildrenGBDomainListRsp::soap_default(NULL); }
	virtual ~cusdk__GetChildrenGBDomainListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDevicePushDomainReq
#define SOAP_TYPE_cusdk__GetGBDevicePushDomainReq (1278)
/* cusdk:GetGBDevicePushDomainReq */
class SOAP_CMAC cusdk__GetGBDevicePushDomainReq : public cusdk__BaseReq
{
public:
	std::string superDomainId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1278; } /* = unique id SOAP_TYPE_cusdk__GetGBDevicePushDomainReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBDevicePushDomainReq() { cusdk__GetGBDevicePushDomainReq::soap_default(NULL); }
	virtual ~cusdk__GetGBDevicePushDomainReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDevicePushDomainRsp
#define SOAP_TYPE_cusdk__GetGBDevicePushDomainRsp (1279)
/* cusdk:GetGBDevicePushDomainRsp */
class SOAP_CMAC cusdk__GetGBDevicePushDomainRsp
{
public:
	std::vector<cusdk__ChildrenGBDomainInfo >domainIdList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:ChildrenGBDomainInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1279; } /* = unique id SOAP_TYPE_cusdk__GetGBDevicePushDomainRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBDevicePushDomainRsp() { cusdk__GetGBDevicePushDomainRsp::soap_default(NULL); }
	virtual ~cusdk__GetGBDevicePushDomainRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetGBDevicePushDomainReq
#define SOAP_TYPE_cusdk__SetGBDevicePushDomainReq (1280)
/* cusdk:SetGBDevicePushDomainReq */
class SOAP_CMAC cusdk__SetGBDevicePushDomainReq : public cusdk__BaseReq
{
public:
	std::vector<std::string >domainIdList;	/* optional element of type xsd:string */
	std::string superDomainId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1280; } /* = unique id SOAP_TYPE_cusdk__SetGBDevicePushDomainReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetGBDevicePushDomainReq() { cusdk__SetGBDevicePushDomainReq::soap_default(NULL); }
	virtual ~cusdk__SetGBDevicePushDomainReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetGBDevicePushDomainRsp
#define SOAP_TYPE_cusdk__SetGBDevicePushDomainRsp (1281)
/* cusdk:SetGBDevicePushDomainRsp */
class SOAP_CMAC cusdk__SetGBDevicePushDomainRsp
{
public:
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1281; } /* = unique id SOAP_TYPE_cusdk__SetGBDevicePushDomainRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetGBDevicePushDomainRsp() { cusdk__SetGBDevicePushDomainRsp::soap_default(NULL); }
	virtual ~cusdk__SetGBDevicePushDomainRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetChildrenGBDomainList
#define SOAP_TYPE_cusdk__GetChildrenGBDomainList (1284)
/* cusdk:GetChildrenGBDomainList */
struct cusdk__GetChildrenGBDomainList
{
public:
	cusdk__GetChildrenGBDomainListReq req;	/* required element of type cusdk:GetChildrenGBDomainListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDevciePushDomain
#define SOAP_TYPE_cusdk__GetGBDevciePushDomain (1287)
/* cusdk:GetGBDevciePushDomain */
struct cusdk__GetGBDevciePushDomain
{
public:
	cusdk__GetGBDevicePushDomainReq req;	/* required element of type cusdk:GetGBDevicePushDomainReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UpdateOperationProgreeReq
#define SOAP_TYPE_cusdk__UpdateOperationProgreeReq (1288)
/* cusdk:UpdateOperationProgreeReq */
class SOAP_CMAC cusdk__UpdateOperationProgreeReq : public cusdk__BaseReq
{
public:
	std::string operationId;	/* required element of type xsd:string */
	int progress;	/* required element of type xsd:int */
	int total;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1288; } /* = unique id SOAP_TYPE_cusdk__UpdateOperationProgreeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UpdateOperationProgreeReq() { cusdk__UpdateOperationProgreeReq::soap_default(NULL); }
	virtual ~cusdk__UpdateOperationProgreeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UpdateOperationProgreeRsp
#define SOAP_TYPE_cusdk__UpdateOperationProgreeRsp (1289)
/* cusdk:UpdateOperationProgreeRsp */
class SOAP_CMAC cusdk__UpdateOperationProgreeRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1289; } /* = unique id SOAP_TYPE_cusdk__UpdateOperationProgreeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UpdateOperationProgreeRsp() { cusdk__UpdateOperationProgreeRsp::soap_default(NULL); }
	virtual ~cusdk__UpdateOperationProgreeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UpdateOperationProgress
#define SOAP_TYPE_cusdk__UpdateOperationProgress (1292)
/* cusdk:UpdateOperationProgress */
struct cusdk__UpdateOperationProgress
{
public:
	cusdk__UpdateOperationProgreeReq req;	/* required element of type cusdk:UpdateOperationProgreeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ResInfoReq
#define SOAP_TYPE_cusdk__ResInfoReq (1293)
/* cusdk:ResInfoReq */
class SOAP_CMAC cusdk__ResInfoReq
{
public:
	int PlayMode;	/* required element of type xsd:int */
	int ServerIp;	/* required element of type xsd:int */
	int ServerPort;	/* required element of type xsd:int */
	std::string DomainId;	/* required element of type xsd:string */
	std::string DeviceId;	/* required element of type xsd:string */
	int ChannelId;	/* required element of type xsd:int */
	int ScreenWidth;	/* required element of type xsd:int */
	int ScreenHeight;	/* required element of type xsd:int */
	int Quality;	/* required element of type xsd:int */
	std::string Url;	/* required element of type xsd:string */
	std::string Context;	/* required element of type xsd:string */
	int StartTime;	/* required element of type xsd:int */
	int EndTime;	/* required element of type xsd:int */
	int VodType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1293; } /* = unique id SOAP_TYPE_cusdk__ResInfoReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ResInfoReq() { cusdk__ResInfoReq::soap_default(NULL); }
	virtual ~cusdk__ResInfoReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ResInfo
#define SOAP_TYPE_cusdk__ResInfo (1294)
/* cusdk:ResInfo */
class SOAP_CMAC cusdk__ResInfo
{
public:
	std::string Url;	/* required element of type xsd:string */
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	int FrameRate;	/* required element of type xsd:int */
	std::string Desc;	/* required element of type xsd:string */
	std::string ManuFactory;	/* required element of type xsd:string */
	std::string Reserve;	/* required element of type xsd:string */
	std::string VideoType;	/* required element of type xsd:string */
	int VideoSmpRate;	/* required element of type xsd:int */
	std::string AudioType;	/* required element of type xsd:string */
	int AudioSmpRate;	/* required element of type xsd:int */
	int AudioChnlNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1294; } /* = unique id SOAP_TYPE_cusdk__ResInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ResInfo() { cusdk__ResInfo::soap_default(NULL); }
	virtual ~cusdk__ResInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ResInfoRsp
#define SOAP_TYPE_cusdk__ResInfoRsp (1295)
/* cusdk:ResInfoRsp */
class SOAP_CMAC cusdk__ResInfoRsp
{
public:
	std::vector<cusdk__ResInfo >ResList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:ResInfo */
public:
	virtual int soap_type() const { return 1295; } /* = unique id SOAP_TYPE_cusdk__ResInfoRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ResInfoRsp() { cusdk__ResInfoRsp::soap_default(NULL); }
	virtual ~cusdk__ResInfoRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetResInfo
#define SOAP_TYPE_cusdk__GetResInfo (1299)
/* cusdk:GetResInfo */
struct cusdk__GetResInfo
{
public:
	cusdk__ResInfoReq cResInfoReq;	/* required element of type cusdk:ResInfoReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchDeviceReq
#define SOAP_TYPE_cusdk__SearchDeviceReq (1300)
/* cusdk:SearchDeviceReq */
class SOAP_CMAC cusdk__SearchDeviceReq : public cusdk__BaseReq
{
public:
	std::string keywords;	/* required element of type xsd:string */
	int maxResultItemNum;	/* required element of type xsd:int */
	int maxSearchTimeMSec;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1300; } /* = unique id SOAP_TYPE_cusdk__SearchDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchDeviceReq() { cusdk__SearchDeviceReq::soap_default(NULL); }
	virtual ~cusdk__SearchDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchDeviceRsp
#define SOAP_TYPE_cusdk__SearchDeviceRsp (1302)
/* cusdk:SearchDeviceRsp */
class SOAP_CMAC cusdk__SearchDeviceRsp
{
public:
	std::string operationId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1302; } /* = unique id SOAP_TYPE_cusdk__SearchDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchDeviceRsp() { cusdk__SearchDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__SearchDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchDevice
#define SOAP_TYPE_cusdk__SearchDevice (1305)
/* cusdk:SearchDevice */
struct cusdk__SearchDevice
{
public:
	cusdk__SearchDeviceReq req;	/* required element of type cusdk:SearchDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSearchResultReq
#define SOAP_TYPE_cusdk__GetSearchResultReq (1306)
/* cusdk:GetSearchResultReq */
class SOAP_CMAC cusdk__GetSearchResultReq : public cusdk__BaseReq
{
public:
	std::string operationId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1306; } /* = unique id SOAP_TYPE_cusdk__GetSearchResultReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetSearchResultReq() { cusdk__GetSearchResultReq::soap_default(NULL); }
	virtual ~cusdk__GetSearchResultReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupPathItem
#define SOAP_TYPE_cusdk__DeviceGroupPathItem (1307)
/* cusdk:DeviceGroupPathItem */
class SOAP_CMAC cusdk__DeviceGroupPathItem
{
public:
	std::string groupId;	/* required element of type xsd:string */
	std::string groupName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1307; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupPathItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupPathItem() { cusdk__DeviceGroupPathItem::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupPathItem() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchResultItem
#define SOAP_TYPE_cusdk__SearchResultItem (1308)
/* cusdk:SearchResultItem */
class SOAP_CMAC cusdk__SearchResultItem
{
public:
	int type;	/* required element of type xsd:int */
	std::string id;	/* required element of type xsd:string */
	int vsId;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	std::vector<cusdk__DeviceGroupPathItem >fullDeviceGroupPath;	/* optional element of type cusdk:DeviceGroupPathItem */
	bool online;	/* required element of type xsd:boolean */
	std::vector<int >deviceCapLabelList;	/* optional element of type xsd:int */
	std::string domainId;	/* required element of type xsd:string */
	std::string manufacturer;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1308; } /* = unique id SOAP_TYPE_cusdk__SearchResultItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchResultItem() { cusdk__SearchResultItem::soap_default(NULL); }
	virtual ~cusdk__SearchResultItem() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSearchResultRsp
#define SOAP_TYPE_cusdk__GetSearchResultRsp (1310)
/* cusdk:GetSearchResultRsp */
class SOAP_CMAC cusdk__GetSearchResultRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	bool lastPage;	/* required element of type xsd:boolean */
	int totalNum;	/* required element of type xsd:int */
	std::vector<cusdk__SearchResultItem >result;	/* optional element of type cusdk:SearchResultItem */
public:
	virtual int soap_type() const { return 1310; } /* = unique id SOAP_TYPE_cusdk__GetSearchResultRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetSearchResultRsp() { cusdk__GetSearchResultRsp::soap_default(NULL); }
	virtual ~cusdk__GetSearchResultRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSearchResult
#define SOAP_TYPE_cusdk__GetSearchResult (1314)
/* cusdk:GetSearchResult */
struct cusdk__GetSearchResult
{
public:
	cusdk__GetSearchResultReq req;	/* required element of type cusdk:GetSearchResultReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSearchResultByGroupReq
#define SOAP_TYPE_cusdk__GetSearchResultByGroupReq (1315)
/* cusdk:GetSearchResultByGroupReq */
class SOAP_CMAC cusdk__GetSearchResultByGroupReq : public cusdk__BaseReq
{
public:
	std::string operationId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
	std::string deviceGroupId;	/* required element of type xsd:string */
	int type;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1315; } /* = unique id SOAP_TYPE_cusdk__GetSearchResultByGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetSearchResultByGroupReq() { cusdk__GetSearchResultByGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetSearchResultByGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSearchResultByGroupRsp
#define SOAP_TYPE_cusdk__GetSearchResultByGroupRsp (1316)
/* cusdk:GetSearchResultByGroupRsp */
class SOAP_CMAC cusdk__GetSearchResultByGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	bool lastPage;	/* required element of type xsd:boolean */
	std::vector<cusdk__SearchResultItem >result;	/* optional element of type cusdk:SearchResultItem */
	int allVideoSrcNum;	/* required element of type xsd:int */
	int onlineVideoSrcNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1316; } /* = unique id SOAP_TYPE_cusdk__GetSearchResultByGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetSearchResultByGroupRsp() { cusdk__GetSearchResultByGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetSearchResultByGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetSearchResultByGroup
#define SOAP_TYPE_cusdk__GetSearchResultByGroup (1319)
/* cusdk:GetSearchResultByGroup */
struct cusdk__GetSearchResultByGroup
{
public:
	cusdk__GetSearchResultByGroupReq req;	/* required element of type cusdk:GetSearchResultByGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__EndOperationReq
#define SOAP_TYPE_cusdk__EndOperationReq (1320)
/* cusdk:EndOperationReq */
class SOAP_CMAC cusdk__EndOperationReq : public cusdk__BaseReq
{
public:
	std::string operationId;	/* required element of type xsd:string */
	std::vector<std::string >params;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1320; } /* = unique id SOAP_TYPE_cusdk__EndOperationReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EndOperationReq() { cusdk__EndOperationReq::soap_default(NULL); }
	virtual ~cusdk__EndOperationReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EndOperationRsp
#define SOAP_TYPE_cusdk__EndOperationRsp (1321)
/* cusdk:EndOperationRsp */
class SOAP_CMAC cusdk__EndOperationRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1321; } /* = unique id SOAP_TYPE_cusdk__EndOperationRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EndOperationRsp() { cusdk__EndOperationRsp::soap_default(NULL); }
	virtual ~cusdk__EndOperationRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EndOperation
#define SOAP_TYPE_cusdk__EndOperation (1324)
/* cusdk:EndOperation */
struct cusdk__EndOperation
{
public:
	cusdk__EndOperationReq req;	/* required element of type cusdk:EndOperationReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupReq
#define SOAP_TYPE_cusdk__GetDeviceGroupReq (1325)
/* cusdk:GetDeviceGroupReq */
class SOAP_CMAC cusdk__GetDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1325; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupReq() { cusdk__GetDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupRsp
#define SOAP_TYPE_cusdk__GetDeviceGroupRsp (1326)
/* cusdk:GetDeviceGroupRsp */
class SOAP_CMAC cusdk__GetDeviceGroupRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	cusdk__DeviceGroup group;	/* required element of type cusdk:DeviceGroup */
public:
	virtual int soap_type() const { return 1326; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupRsp() { cusdk__GetDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroup
#define SOAP_TYPE_cusdk__GetDeviceGroup (1329)
/* cusdk:GetDeviceGroup */
struct cusdk__GetDeviceGroup
{
public:
	cusdk__GetDeviceGroupReq req;	/* required element of type cusdk:GetDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceReq
#define SOAP_TYPE_cusdk__GetDeviceReq (1330)
/* cusdk:GetDeviceReq */
class SOAP_CMAC cusdk__GetDeviceReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1330; } /* = unique id SOAP_TYPE_cusdk__GetDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceReq() { cusdk__GetDeviceReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceRsp
#define SOAP_TYPE_cusdk__GetDeviceRsp (1331)
/* cusdk:GetDeviceRsp */
class SOAP_CMAC cusdk__GetDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	cusdk__DeviceInfo devInfo;	/* required element of type cusdk:DeviceInfo */
	cusdk__DevOnlineNotify online;	/* required element of type cusdk:DevOnlineNotify */
	cusdk__DevConfigNotify config;	/* required element of type cusdk:DevConfigNotify */
	cusdk__DevServiceStatusNotify service;	/* required element of type cusdk:DevServiceStatusNotify */
	std::vector<cusdk__DevAlarmNotify >alarm;	/* optional element of type cusdk:DevAlarmNotify */
public:
	virtual int soap_type() const { return 1331; } /* = unique id SOAP_TYPE_cusdk__GetDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceRsp() { cusdk__GetDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDevice
#define SOAP_TYPE_cusdk__GetDevice (1334)
/* cusdk:GetDevice */
struct cusdk__GetDevice
{
public:
	cusdk__GetDeviceReq req;	/* required element of type cusdk:GetDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupPathReq
#define SOAP_TYPE_cusdk__GetDeviceGroupPathReq (1335)
/* cusdk:GetDeviceGroupPathReq */
class SOAP_CMAC cusdk__GetDeviceGroupPathReq : public cusdk__BaseReq
{
public:
	std::string devTreeId;	/* required element of type xsd:string */
	std::string devId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1335; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupPathReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupPathReq() { cusdk__GetDeviceGroupPathReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupPathReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupPathRsp
#define SOAP_TYPE_cusdk__GetDeviceGroupPathRsp (1336)
/* cusdk:GetDeviceGroupPathRsp */
class SOAP_CMAC cusdk__GetDeviceGroupPathRsp
{
public:
	std::vector<cusdk__DeviceGroupInfo >devGroupPath;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceGroupInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1336; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupPathRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupPathRsp() { cusdk__GetDeviceGroupPathRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupPathRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupPath
#define SOAP_TYPE_cusdk__GetDeviceGroupPath (1339)
/* cusdk:GetDeviceGroupPath */
struct cusdk__GetDeviceGroupPath
{
public:
	cusdk__GetDeviceGroupPathReq req;	/* required element of type cusdk:GetDeviceGroupPathReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateCustomTreeViewReq
#define SOAP_TYPE_cusdk__CreateCustomTreeViewReq (1340)
/* cusdk:CreateCustomTreeViewReq */
class SOAP_CMAC cusdk__CreateCustomTreeViewReq : public cusdk__BaseReq
{
public:
	std::string name;	/* required element of type xsd:string */
	bool cloneFromAnotherTreeView;	/* required element of type xsd:boolean */
	std::string cloneSrcTreeViewId;	/* required element of type xsd:string */
	bool canUsedForGBPush;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1340; } /* = unique id SOAP_TYPE_cusdk__CreateCustomTreeViewReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateCustomTreeViewReq() { cusdk__CreateCustomTreeViewReq::soap_default(NULL); }
	virtual ~cusdk__CreateCustomTreeViewReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateCustomTreeViewRsp
#define SOAP_TYPE_cusdk__CreateCustomTreeViewRsp (1341)
/* cusdk:CreateCustomTreeViewRsp */
class SOAP_CMAC cusdk__CreateCustomTreeViewRsp
{
public:
	std::string id;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string operationId;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1341; } /* = unique id SOAP_TYPE_cusdk__CreateCustomTreeViewRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateCustomTreeViewRsp() { cusdk__CreateCustomTreeViewRsp::soap_default(NULL); }
	virtual ~cusdk__CreateCustomTreeViewRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateCustomTreeView
#define SOAP_TYPE_cusdk__CreateCustomTreeView (1344)
/* cusdk:CreateCustomTreeView */
struct cusdk__CreateCustomTreeView
{
public:
	cusdk__CreateCustomTreeViewReq req;	/* required element of type cusdk:CreateCustomTreeViewReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyCustomTreeViewNameReq
#define SOAP_TYPE_cusdk__ModifyCustomTreeViewNameReq (1345)
/* cusdk:ModifyCustomTreeViewNameReq */
class SOAP_CMAC cusdk__ModifyCustomTreeViewNameReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1345; } /* = unique id SOAP_TYPE_cusdk__ModifyCustomTreeViewNameReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyCustomTreeViewNameReq() { cusdk__ModifyCustomTreeViewNameReq::soap_default(NULL); }
	virtual ~cusdk__ModifyCustomTreeViewNameReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyCustomTreeViewNameRsp
#define SOAP_TYPE_cusdk__ModifyCustomTreeViewNameRsp (1346)
/* cusdk:ModifyCustomTreeViewNameRsp */
class SOAP_CMAC cusdk__ModifyCustomTreeViewNameRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1346; } /* = unique id SOAP_TYPE_cusdk__ModifyCustomTreeViewNameRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyCustomTreeViewNameRsp() { cusdk__ModifyCustomTreeViewNameRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyCustomTreeViewNameRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyCustomTreeViewName
#define SOAP_TYPE_cusdk__ModifyCustomTreeViewName (1349)
/* cusdk:ModifyCustomTreeViewName */
struct cusdk__ModifyCustomTreeViewName
{
public:
	cusdk__ModifyCustomTreeViewNameReq req;	/* required element of type cusdk:ModifyCustomTreeViewNameReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeleteCustomTreeViewReq
#define SOAP_TYPE_cusdk__DeleteCustomTreeViewReq (1350)
/* cusdk:DeleteCustomTreeViewReq */
class SOAP_CMAC cusdk__DeleteCustomTreeViewReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1350; } /* = unique id SOAP_TYPE_cusdk__DeleteCustomTreeViewReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeleteCustomTreeViewReq() { cusdk__DeleteCustomTreeViewReq::soap_default(NULL); }
	virtual ~cusdk__DeleteCustomTreeViewReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeleteCustomTreeViewRsp
#define SOAP_TYPE_cusdk__DeleteCustomTreeViewRsp (1351)
/* cusdk:DeleteCustomTreeViewRsp */
class SOAP_CMAC cusdk__DeleteCustomTreeViewRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1351; } /* = unique id SOAP_TYPE_cusdk__DeleteCustomTreeViewRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeleteCustomTreeViewRsp() { cusdk__DeleteCustomTreeViewRsp::soap_default(NULL); }
	virtual ~cusdk__DeleteCustomTreeViewRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeleteCustomTreeView
#define SOAP_TYPE_cusdk__DeleteCustomTreeView (1354)
/* cusdk:DeleteCustomTreeView */
struct cusdk__DeleteCustomTreeView
{
public:
	cusdk__DeleteCustomTreeViewReq req;	/* required element of type cusdk:DeleteCustomTreeViewReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CustomTreeViewInfo
#define SOAP_TYPE_cusdk__CustomTreeViewInfo (1356)
/* cusdk:CustomTreeViewInfo */
class SOAP_CMAC cusdk__CustomTreeViewInfo
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string dataVersion;	/* required element of type xsd:string */
	bool canUsedForGBPush;	/* required element of type xsd:boolean */
	int treeViewType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1356; } /* = unique id SOAP_TYPE_cusdk__CustomTreeViewInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CustomTreeViewInfo() { cusdk__CustomTreeViewInfo::soap_default(NULL); }
	virtual ~cusdk__CustomTreeViewInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCustomTreeViewListReq
#define SOAP_TYPE_cusdk__GetCustomTreeViewListReq (1357)
/* cusdk:GetCustomTreeViewListReq */
class SOAP_CMAC cusdk__GetCustomTreeViewListReq : public cusdk__BaseReq
{
public:
	bool includeFavorite;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1357; } /* = unique id SOAP_TYPE_cusdk__GetCustomTreeViewListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCustomTreeViewListReq() { cusdk__GetCustomTreeViewListReq::soap_default(NULL); }
	virtual ~cusdk__GetCustomTreeViewListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCustomTreeViewListRsp
#define SOAP_TYPE_cusdk__GetCustomTreeViewListRsp (1358)
/* cusdk:GetCustomTreeViewListRsp */
class SOAP_CMAC cusdk__GetCustomTreeViewListRsp
{
public:
	std::vector<cusdk__CustomTreeViewInfo >treeViewInfoList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:CustomTreeViewInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1358; } /* = unique id SOAP_TYPE_cusdk__GetCustomTreeViewListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCustomTreeViewListRsp() { cusdk__GetCustomTreeViewListRsp::soap_default(NULL); }
	virtual ~cusdk__GetCustomTreeViewListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCustomTreeViewList
#define SOAP_TYPE_cusdk__GetCustomTreeViewList (1362)
/* cusdk:GetCustomTreeViewList */
struct cusdk__GetCustomTreeViewList
{
public:
	cusdk__GetCustomTreeViewListReq req;	/* required element of type cusdk:GetCustomTreeViewListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDeviceInGroupReq
#define SOAP_TYPE_cusdk__GetUserDeviceInGroupReq (1363)
/* cusdk:GetUserDeviceInGroupReq */
class SOAP_CMAC cusdk__GetUserDeviceInGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string treeId;	/* required element of type xsd:string */
	std::string groupId;	/* required element of type xsd:string */
	bool recursive;	/* required element of type xsd:boolean */
	std::string queryTag;	/* required element of type xsd:string */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1363; } /* = unique id SOAP_TYPE_cusdk__GetUserDeviceInGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDeviceInGroupReq() { cusdk__GetUserDeviceInGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDeviceInGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SimpleUserDevice
#define SOAP_TYPE_cusdk__SimpleUserDevice (1364)
/* cusdk:SimpleUserDevice */
class SOAP_CMAC cusdk__SimpleUserDevice
{
public:
	std::string devId;	/* required element of type xsd:string */
	std::vector<int >videoSrcIdList;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 1364; } /* = unique id SOAP_TYPE_cusdk__SimpleUserDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SimpleUserDevice() { cusdk__SimpleUserDevice::soap_default(NULL); }
	virtual ~cusdk__SimpleUserDevice() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDeviceInGroupRsp
#define SOAP_TYPE_cusdk__GetUserDeviceInGroupRsp (1365)
/* cusdk:GetUserDeviceInGroupRsp */
class SOAP_CMAC cusdk__GetUserDeviceInGroupRsp
{
public:
	std::string queryTag;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	bool lastPage;	/* required element of type xsd:boolean */
	std::vector<cusdk__SimpleUserDevice >devList;	/* optional element of type cusdk:SimpleUserDevice */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1365; } /* = unique id SOAP_TYPE_cusdk__GetUserDeviceInGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDeviceInGroupRsp() { cusdk__GetUserDeviceInGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDeviceInGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDeviceInGroup
#define SOAP_TYPE_cusdk__GetUserDeviceInGroup (1369)
/* cusdk:GetUserDeviceInGroup */
struct cusdk__GetUserDeviceInGroup
{
public:
	cusdk__GetUserDeviceInGroupReq req;	/* required element of type cusdk:GetUserDeviceInGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__BatchOperationReq
#define SOAP_TYPE_cusdk__BatchOperationReq (1371)
/* cusdk:BatchOperationReq */
class SOAP_CMAC cusdk__BatchOperationReq : public cusdk__BaseReq
{
public:
	std::string treeId;	/* required element of type xsd:string */
	std::string groupId;	/* required element of type xsd:string */
	bool recursive;	/* required element of type xsd:boolean */
	int operationType;	/* required element of type xsd:int */
	std::vector<std::string >paramList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1371; } /* = unique id SOAP_TYPE_cusdk__BatchOperationReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BatchOperationReq() { cusdk__BatchOperationReq::soap_default(NULL); }
	virtual ~cusdk__BatchOperationReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BatchOperationRsp
#define SOAP_TYPE_cusdk__BatchOperationRsp (1372)
/* cusdk:BatchOperationRsp */
class SOAP_CMAC cusdk__BatchOperationRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1372; } /* = unique id SOAP_TYPE_cusdk__BatchOperationRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BatchOperationRsp() { cusdk__BatchOperationRsp::soap_default(NULL); }
	virtual ~cusdk__BatchOperationRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BatchOperation
#define SOAP_TYPE_cusdk__BatchOperation (1375)
/* cusdk:BatchOperation */
struct cusdk__BatchOperation
{
public:
	cusdk__BatchOperationReq req;	/* required element of type cusdk:BatchOperationReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GroupVSNum
#define SOAP_TYPE_cusdk__GroupVSNum (1376)
/* cusdk:GroupVSNum */
class SOAP_CMAC cusdk__GroupVSNum
{
public:
	std::string groupId;	/* required element of type xsd:string */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1376; } /* = unique id SOAP_TYPE_cusdk__GroupVSNum */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GroupVSNum() { cusdk__GroupVSNum::soap_default(NULL); }
	virtual ~cusdk__GroupVSNum() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupVideoSrcNumReq
#define SOAP_TYPE_cusdk__GetDeviceGroupVideoSrcNumReq (1377)
/* cusdk:GetDeviceGroupVideoSrcNumReq */
class SOAP_CMAC cusdk__GetDeviceGroupVideoSrcNumReq : public cusdk__BaseReq
{
public:
	std::string treeId;	/* required element of type xsd:string */
	std::vector<std::string >groupIdList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1377; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupVideoSrcNumReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupVideoSrcNumReq() { cusdk__GetDeviceGroupVideoSrcNumReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupVideoSrcNumReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupVideoSrcNumRsp
#define SOAP_TYPE_cusdk__GetDeviceGroupVideoSrcNumRsp (1378)
/* cusdk:GetDeviceGroupVideoSrcNumRsp */
class SOAP_CMAC cusdk__GetDeviceGroupVideoSrcNumRsp
{
public:
	std::vector<cusdk__GroupVSNum >grpvsNums;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:GroupVSNum */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1378; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupVideoSrcNumRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupVideoSrcNumRsp() { cusdk__GetDeviceGroupVideoSrcNumRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupVideoSrcNumRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupVideoSrcNum
#define SOAP_TYPE_cusdk__GetDeviceGroupVideoSrcNum (1382)
/* cusdk:GetDeviceGroupVideoSrcNum */
struct cusdk__GetDeviceGroupVideoSrcNum
{
public:
	cusdk__GetDeviceGroupVideoSrcNumReq req;	/* required element of type cusdk:GetDeviceGroupVideoSrcNumReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrcId
#define SOAP_TYPE_cusdk__VideoSrcId (1383)
/* cusdk:VideoSrcId */
class SOAP_CMAC cusdk__VideoSrcId
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int vsId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1383; } /* = unique id SOAP_TYPE_cusdk__VideoSrcId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrcId() { cusdk__VideoSrcId::soap_default(NULL); }
	virtual ~cusdk__VideoSrcId() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VSOfflineInfo
#define SOAP_TYPE_cusdk__VSOfflineInfo (1384)
/* cusdk:VSOfflineInfo */
class SOAP_CMAC cusdk__VSOfflineInfo
{
public:
	cusdk__VideoSrcId videosrcId;	/* required element of type cusdk:VideoSrcId */
	std::string groupId;	/* required element of type xsd:string */
	std::string devName;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string deviceIP;	/* required element of type xsd:string */
	double longitude;	/* required element of type xsd:double */
	double latitude;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 1384; } /* = unique id SOAP_TYPE_cusdk__VSOfflineInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VSOfflineInfo() { cusdk__VSOfflineInfo::soap_default(NULL); }
	virtual ~cusdk__VSOfflineInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetVSOfflineInfoReq
#define SOAP_TYPE_cusdk__GetVSOfflineInfoReq (1385)
/* cusdk:GetVSOfflineInfoReq */
class SOAP_CMAC cusdk__GetVSOfflineInfoReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__VideoSrcId >videosrclist;	/* optional element of type cusdk:VideoSrcId */
public:
	virtual int soap_type() const { return 1385; } /* = unique id SOAP_TYPE_cusdk__GetVSOfflineInfoReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetVSOfflineInfoReq() { cusdk__GetVSOfflineInfoReq::soap_default(NULL); }
	virtual ~cusdk__GetVSOfflineInfoReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetVSOfflineInfoRsp
#define SOAP_TYPE_cusdk__GetVSOfflineInfoRsp (1387)
/* cusdk:GetVSOfflineInfoRsp */
class SOAP_CMAC cusdk__GetVSOfflineInfoRsp
{
public:
	std::vector<cusdk__VSOfflineInfo >vsOfflineInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:VSOfflineInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1387; } /* = unique id SOAP_TYPE_cusdk__GetVSOfflineInfoRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetVSOfflineInfoRsp() { cusdk__GetVSOfflineInfoRsp::soap_default(NULL); }
	virtual ~cusdk__GetVSOfflineInfoRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetVSOfflineInfo
#define SOAP_TYPE_cusdk__GetVSOfflineInfo (1391)
/* cusdk:GetVSOfflineInfo */
struct cusdk__GetVSOfflineInfo
{
public:
	cusdk__GetVSOfflineInfoReq req;	/* required element of type cusdk:GetVSOfflineInfoReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDevAzimuthalAngleReq
#define SOAP_TYPE_cusdk__GetDevAzimuthalAngleReq (1392)
/* cusdk:GetDevAzimuthalAngleReq */
class SOAP_CMAC cusdk__GetDevAzimuthalAngleReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videosrcId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1392; } /* = unique id SOAP_TYPE_cusdk__GetDevAzimuthalAngleReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDevAzimuthalAngleReq() { cusdk__GetDevAzimuthalAngleReq::soap_default(NULL); }
	virtual ~cusdk__GetDevAzimuthalAngleReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDevAzimuthalAngleRsp
#define SOAP_TYPE_cusdk__GetDevAzimuthalAngleRsp (1393)
/* cusdk:GetDevAzimuthalAngleRsp */
class SOAP_CMAC cusdk__GetDevAzimuthalAngleRsp
{
public:
	std::string azimuthalAngleData;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1393; } /* = unique id SOAP_TYPE_cusdk__GetDevAzimuthalAngleRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDevAzimuthalAngleRsp() { cusdk__GetDevAzimuthalAngleRsp::soap_default(NULL); }
	virtual ~cusdk__GetDevAzimuthalAngleRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDevAzimuthalAngle
#define SOAP_TYPE_cusdk__GetDevAzimuthalAngle (1396)
/* cusdk:GetDevAzimuthalAngle */
struct cusdk__GetDevAzimuthalAngle
{
public:
	cusdk__GetDevAzimuthalAngleReq req;	/* required element of type cusdk:GetDevAzimuthalAngleReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeleteRecordReq
#define SOAP_TYPE_cusdk__DeleteRecordReq (1397)
/* cusdk:DeleteRecordReq */
class SOAP_CMAC cusdk__DeleteRecordReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int chnId;	/* required element of type xsd:int */
	cusdk__TimeRange timeRange;	/* required element of type cusdk:TimeRange */
public:
	virtual int soap_type() const { return 1397; } /* = unique id SOAP_TYPE_cusdk__DeleteRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeleteRecordReq() { cusdk__DeleteRecordReq::soap_default(NULL); }
	virtual ~cusdk__DeleteRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeleteRecordRsp
#define SOAP_TYPE_cusdk__DeleteRecordRsp (1398)
/* cusdk:DeleteRecordRsp */
class SOAP_CMAC cusdk__DeleteRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1398; } /* = unique id SOAP_TYPE_cusdk__DeleteRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeleteRecordRsp() { cusdk__DeleteRecordRsp::soap_default(NULL); }
	virtual ~cusdk__DeleteRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeleteRecord
#define SOAP_TYPE_cusdk__DeleteRecord (1401)
/* cusdk:DeleteRecord */
struct cusdk__DeleteRecord
{
public:
	cusdk__DeleteRecordReq req;	/* required element of type cusdk:DeleteRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__AutoMatchGBIdReq
#define SOAP_TYPE_cusdk__AutoMatchGBIdReq (1402)
/* cusdk:AutoMatchGBIdReq */
class SOAP_CMAC cusdk__AutoMatchGBIdReq : public cusdk__BaseReq
{
public:
	std::string devTreeViewId;	/* required element of type xsd:string */
	std::string devGroupId;	/* required element of type xsd:string */
	std::string deviceId;	/* required element of type xsd:string */
	int devVidIndex;	/* required element of type xsd:int */
	int devMatchType;	/* required element of type xsd:int */
	bool matchLastBits;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1402; } /* = unique id SOAP_TYPE_cusdk__AutoMatchGBIdReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AutoMatchGBIdReq() { cusdk__AutoMatchGBIdReq::soap_default(NULL); }
	virtual ~cusdk__AutoMatchGBIdReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AutoMatchGBIdRsp
#define SOAP_TYPE_cusdk__AutoMatchGBIdRsp (1403)
/* cusdk:AutoMatchGBIdRsp */
class SOAP_CMAC cusdk__AutoMatchGBIdRsp
{
public:
	std::string gbid;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::string operationId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1403; } /* = unique id SOAP_TYPE_cusdk__AutoMatchGBIdRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AutoMatchGBIdRsp() { cusdk__AutoMatchGBIdRsp::soap_default(NULL); }
	virtual ~cusdk__AutoMatchGBIdRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AutoMatchGBId
#define SOAP_TYPE_cusdk__AutoMatchGBId (1406)
/* cusdk:AutoMatchGBId */
struct cusdk__AutoMatchGBId
{
public:
	cusdk__AutoMatchGBIdReq req;	/* required element of type cusdk:AutoMatchGBIdReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGroupDevSumNumReq
#define SOAP_TYPE_cusdk__GetGroupDevSumNumReq (1407)
/* cusdk:GetGroupDevSumNumReq */
class SOAP_CMAC cusdk__GetGroupDevSumNumReq : public cusdk__BaseReq
{
public:
	std::string devTreeViewId;	/* required element of type xsd:string */
	std::string devGroupId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1407; } /* = unique id SOAP_TYPE_cusdk__GetGroupDevSumNumReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGroupDevSumNumReq() { cusdk__GetGroupDevSumNumReq::soap_default(NULL); }
	virtual ~cusdk__GetGroupDevSumNumReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGroupDevSumNumRsp
#define SOAP_TYPE_cusdk__GetGroupDevSumNumRsp (1408)
/* cusdk:GetGroupDevSumNumRsp */
class SOAP_CMAC cusdk__GetGroupDevSumNumRsp
{
public:
	int chnNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1408; } /* = unique id SOAP_TYPE_cusdk__GetGroupDevSumNumRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGroupDevSumNumRsp() { cusdk__GetGroupDevSumNumRsp::soap_default(NULL); }
	virtual ~cusdk__GetGroupDevSumNumRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGroupDevSumNum
#define SOAP_TYPE_cusdk__GetGroupDevSumNum (1411)
/* cusdk:GetGroupDevSumNum */
struct cusdk__GetGroupDevSumNum
{
public:
	cusdk__GetGroupDevSumNumReq req;	/* required element of type cusdk:GetGroupDevSumNumReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyGBDeviceGroupReq
#define SOAP_TYPE_cusdk__ModifyGBDeviceGroupReq (1413)
/* cusdk:ModifyGBDeviceGroupReq */
class SOAP_CMAC cusdk__ModifyGBDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string devTreeViewId;	/* required element of type xsd:string */
	std::string devGroupId;	/* required element of type xsd:string */
	std::string devGroupGBID;	/* required element of type xsd:string */
	int devicePushChnSelectType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1413; } /* = unique id SOAP_TYPE_cusdk__ModifyGBDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyGBDeviceGroupReq() { cusdk__ModifyGBDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__ModifyGBDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyGBDeviceGroupRsp
#define SOAP_TYPE_cusdk__ModifyGBDeviceGroupRsp (1414)
/* cusdk:ModifyGBDeviceGroupRsp */
class SOAP_CMAC cusdk__ModifyGBDeviceGroupRsp
{
public:
	std::string operationId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1414; } /* = unique id SOAP_TYPE_cusdk__ModifyGBDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyGBDeviceGroupRsp() { cusdk__ModifyGBDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyGBDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyGBDeviceGroup
#define SOAP_TYPE_cusdk__ModifyGBDeviceGroup (1417)
/* cusdk:ModifyGBDeviceGroup */
struct cusdk__ModifyGBDeviceGroup
{
public:
	cusdk__ModifyGBDeviceGroupReq req;	/* required element of type cusdk:ModifyGBDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyGBDeviceReq
#define SOAP_TYPE_cusdk__ModifyGBDeviceReq (1419)
/* cusdk:ModifyGBDeviceReq */
class SOAP_CMAC cusdk__ModifyGBDeviceReq : public cusdk__BaseReq
{
public:
	std::string devTreeViewId;	/* required element of type xsd:string */
	std::string devGroupId;	/* required element of type xsd:string */
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	int operationType;	/* required element of type xsd:int */
	std::string gbID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1419; } /* = unique id SOAP_TYPE_cusdk__ModifyGBDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyGBDeviceReq() { cusdk__ModifyGBDeviceReq::soap_default(NULL); }
	virtual ~cusdk__ModifyGBDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyGBDeviceRsp
#define SOAP_TYPE_cusdk__ModifyGBDeviceRsp (1420)
/* cusdk:ModifyGBDeviceRsp */
class SOAP_CMAC cusdk__ModifyGBDeviceRsp
{
public:
	std::string devtreeId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string devgroupId;	/* required element of type xsd:string */
	std::string deviceId;	/* required element of type xsd:string */
	int vidIndex;	/* required element of type xsd:int */
	std::string primaryOriginalGBId;	/* required element of type xsd:string */
	std::string secondOriginalGBId;	/* required element of type xsd:string */
	std::string primaryNewGBId;	/* required element of type xsd:string */
	std::string secondNewGBId;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1420; } /* = unique id SOAP_TYPE_cusdk__ModifyGBDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyGBDeviceRsp() { cusdk__ModifyGBDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyGBDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyGBDevice
#define SOAP_TYPE_cusdk__ModifyGBDevice (1423)
/* cusdk:ModifyGBDevice */
struct cusdk__ModifyGBDevice
{
public:
	cusdk__ModifyGBDeviceReq req;	/* required element of type cusdk:ModifyGBDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDevicePushReq
#define SOAP_TYPE_cusdk__StartDevicePushReq (1424)
/* cusdk:StartDevicePushReq */
class SOAP_CMAC cusdk__StartDevicePushReq : public cusdk__BaseReq
{
public:
	std::string parentDomainId;	/* required element of type xsd:string */
	std::string devTreeViewId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1424; } /* = unique id SOAP_TYPE_cusdk__StartDevicePushReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartDevicePushReq() { cusdk__StartDevicePushReq::soap_default(NULL); }
	virtual ~cusdk__StartDevicePushReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDevicePushRsp
#define SOAP_TYPE_cusdk__StartDevicePushRsp (1425)
/* cusdk:StartDevicePushRsp */
class SOAP_CMAC cusdk__StartDevicePushRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1425; } /* = unique id SOAP_TYPE_cusdk__StartDevicePushRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StartDevicePushRsp() { cusdk__StartDevicePushRsp::soap_default(NULL); }
	virtual ~cusdk__StartDevicePushRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StartDevicePush
#define SOAP_TYPE_cusdk__StartDevicePush (1428)
/* cusdk:StartDevicePush */
struct cusdk__StartDevicePush
{
public:
	cusdk__StartDevicePushReq req;	/* required element of type cusdk:StartDevicePushReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CVideoSrcInfoGB
#define SOAP_TYPE_cusdk__CVideoSrcInfoGB (1429)
/* cusdk:CVideoSrcInfoGB */
class SOAP_CMAC cusdk__CVideoSrcInfoGB
{
public:
	int videoSrcId;	/* required element of type xsd:int */
	std::string deviceId;	/* required element of type xsd:string */
	std::string deviceName;	/* required element of type xsd:string */
	std::string videoSrcName;	/* required element of type xsd:string */
	std::string primaryOriginalGBId;	/* required element of type xsd:string */
	std::string secondOriginalGBId;	/* required element of type xsd:string */
	std::string primaryNewGBId;	/* required element of type xsd:string */
	std::string secondNewGBId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1429; } /* = unique id SOAP_TYPE_cusdk__CVideoSrcInfoGB */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CVideoSrcInfoGB() { cusdk__CVideoSrcInfoGB::soap_default(NULL); }
	virtual ~cusdk__CVideoSrcInfoGB() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CVideoSrcInfoGBInGroup
#define SOAP_TYPE_cusdk__CVideoSrcInfoGBInGroup (1430)
/* cusdk:CVideoSrcInfoGBInGroup */
class SOAP_CMAC cusdk__CVideoSrcInfoGBInGroup : public cusdk__CVideoSrcInfoGB
{
public:
	std::vector<cusdk__DeviceGroupInfo >deviceGroupPath;	/* optional element of type cusdk:DeviceGroupInfo */
public:
	virtual int soap_type() const { return 1430; } /* = unique id SOAP_TYPE_cusdk__CVideoSrcInfoGBInGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CVideoSrcInfoGBInGroup() { cusdk__CVideoSrcInfoGBInGroup::soap_default(NULL); }
	virtual ~cusdk__CVideoSrcInfoGBInGroup() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CDeviceInfoGB
#define SOAP_TYPE_cusdk__CDeviceInfoGB (1431)
/* cusdk:CDeviceInfoGB */
class SOAP_CMAC cusdk__CDeviceInfoGB
{
public:
	std::string deviceTreeViewId;	/* required element of type xsd:string */
	std::string deviceGroupId;	/* required element of type xsd:string */
	std::string deviceName;	/* required element of type xsd:string */
	std::string deviceId;	/* required element of type xsd:string */
	std::vector<cusdk__CVideoSrcInfoGB >videoSrcList;	/* optional element of type cusdk:CVideoSrcInfoGB */
public:
	virtual int soap_type() const { return 1431; } /* = unique id SOAP_TYPE_cusdk__CDeviceInfoGB */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CDeviceInfoGB() { cusdk__CDeviceInfoGB::soap_default(NULL); }
	virtual ~cusdk__CDeviceInfoGB() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDeviceByGroupReq
#define SOAP_TYPE_cusdk__GetGBDeviceByGroupReq (1433)
/* cusdk:GetGBDeviceByGroupReq */
class SOAP_CMAC cusdk__GetGBDeviceByGroupReq : public cusdk__BaseReq
{
public:
	std::string treeId;	/* required element of type xsd:string */
	std::string groupId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1433; } /* = unique id SOAP_TYPE_cusdk__GetGBDeviceByGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBDeviceByGroupReq() { cusdk__GetGBDeviceByGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetGBDeviceByGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDeviceByGroupRsp
#define SOAP_TYPE_cusdk__GetGBDeviceByGroupRsp (1434)
/* cusdk:GetGBDeviceByGroupRsp */
class SOAP_CMAC cusdk__GetGBDeviceByGroupRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__CDeviceInfoGB >devList;	/* optional element of type cusdk:CDeviceInfoGB */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1434; } /* = unique id SOAP_TYPE_cusdk__GetGBDeviceByGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBDeviceByGroupRsp() { cusdk__GetGBDeviceByGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetGBDeviceByGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDeviceByGroup
#define SOAP_TYPE_cusdk__GetGBDeviceByGroup (1438)
/* cusdk:GetGBDeviceByGroup */
struct cusdk__GetGBDeviceByGroup
{
public:
	cusdk__GetGBDeviceByGroupReq req;	/* required element of type cusdk:GetGBDeviceByGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchGBDeviceReq
#define SOAP_TYPE_cusdk__SearchGBDeviceReq (1439)
/* cusdk:SearchGBDeviceReq */
class SOAP_CMAC cusdk__SearchGBDeviceReq : public cusdk__BaseReq
{
public:
	std::string deviceTreeViewId;	/* required element of type xsd:string */
	std::string deviceGBID;	/* required element of type xsd:string */
	std::string deviceName;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int requestNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1439; } /* = unique id SOAP_TYPE_cusdk__SearchGBDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchGBDeviceReq() { cusdk__SearchGBDeviceReq::soap_default(NULL); }
	virtual ~cusdk__SearchGBDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchGBDeviceRsp
#define SOAP_TYPE_cusdk__SearchGBDeviceRsp (1440)
/* cusdk:SearchGBDeviceRsp */
class SOAP_CMAC cusdk__SearchGBDeviceRsp
{
public:
	std::vector<cusdk__CVideoSrcInfoGBInGroup >searchResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:CVideoSrcInfoGBInGroup */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1440; } /* = unique id SOAP_TYPE_cusdk__SearchGBDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchGBDeviceRsp() { cusdk__SearchGBDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__SearchGBDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchGBDevice
#define SOAP_TYPE_cusdk__SearchGBDevice (1444)
/* cusdk:SearchGBDevice */
struct cusdk__SearchGBDevice
{
public:
	cusdk__SearchGBDeviceReq req;	/* required element of type cusdk:SearchGBDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchGBDeviceGroupInfo
#define SOAP_TYPE_cusdk__SearchGBDeviceGroupInfo (1445)
/* cusdk:SearchGBDeviceGroupInfo */
class SOAP_CMAC cusdk__SearchGBDeviceGroupInfo
{
public:
	std::vector<cusdk__DeviceGroupInfo >groupInfo;	/* optional element of type cusdk:DeviceGroupInfo */
public:
	virtual int soap_type() const { return 1445; } /* = unique id SOAP_TYPE_cusdk__SearchGBDeviceGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchGBDeviceGroupInfo() { cusdk__SearchGBDeviceGroupInfo::soap_default(NULL); }
	virtual ~cusdk__SearchGBDeviceGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchGBDeviceGroupReq
#define SOAP_TYPE_cusdk__SearchGBDeviceGroupReq (1446)
/* cusdk:SearchGBDeviceGroupReq */
class SOAP_CMAC cusdk__SearchGBDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string deviceTreeViewId;	/* required element of type xsd:string */
	std::string civilcode;	/* required element of type xsd:string */
	std::string groupName;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int requestNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1446; } /* = unique id SOAP_TYPE_cusdk__SearchGBDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchGBDeviceGroupReq() { cusdk__SearchGBDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__SearchGBDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchGBDeviceGroupRsp
#define SOAP_TYPE_cusdk__SearchGBDeviceGroupRsp (1447)
/* cusdk:SearchGBDeviceGroupRsp */
class SOAP_CMAC cusdk__SearchGBDeviceGroupRsp
{
public:
	std::vector<cusdk__SearchGBDeviceGroupInfo >searchResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:SearchGBDeviceGroupInfo */
	int totalNum;	/* required element of type xsd:int */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1447; } /* = unique id SOAP_TYPE_cusdk__SearchGBDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SearchGBDeviceGroupRsp() { cusdk__SearchGBDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__SearchGBDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SearchGBDeviceGroup
#define SOAP_TYPE_cusdk__SearchGBDeviceGroup (1451)
/* cusdk:SearchGBDeviceGroup */
struct cusdk__SearchGBDeviceGroup
{
public:
	cusdk__SearchGBDeviceGroupReq req;	/* required element of type cusdk:SearchGBDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DevicePushErrorInfo
#define SOAP_TYPE_cusdk__DevicePushErrorInfo (1453)
/* cusdk:DevicePushErrorInfo */
class SOAP_CMAC cusdk__DevicePushErrorInfo
{
public:
	int errorType;	/* required element of type xsd:int */
	cusdk__CVideoSrcInfoGBInGroup videoSrc;	/* required element of type cusdk:CVideoSrcInfoGBInGroup */
	std::string deviceGroupId;	/* required element of type xsd:string */
	int indexInDeviceGroup;	/* required element of type xsd:int */
	int errIndex;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1453; } /* = unique id SOAP_TYPE_cusdk__DevicePushErrorInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevicePushErrorInfo() { cusdk__DevicePushErrorInfo::soap_default(NULL); }
	virtual ~cusdk__DevicePushErrorInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNextDeviceGBIDErrorReq
#define SOAP_TYPE_cusdk__GetNextDeviceGBIDErrorReq (1454)
/* cusdk:GetNextDeviceGBIDErrorReq */
class SOAP_CMAC cusdk__GetNextDeviceGBIDErrorReq : public cusdk__BaseReq
{
public:
	std::string devTreeViewId;	/* required element of type xsd:string */
	std::string groupId;	/* required element of type xsd:string */
	int errIndex;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1454; } /* = unique id SOAP_TYPE_cusdk__GetNextDeviceGBIDErrorReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetNextDeviceGBIDErrorReq() { cusdk__GetNextDeviceGBIDErrorReq::soap_default(NULL); }
	virtual ~cusdk__GetNextDeviceGBIDErrorReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNextDeviceGBIDErrorRsp
#define SOAP_TYPE_cusdk__GetNextDeviceGBIDErrorRsp (1455)
/* cusdk:GetNextDeviceGBIDErrorRsp */
class SOAP_CMAC cusdk__GetNextDeviceGBIDErrorRsp
{
public:
	std::vector<cusdk__DevicePushErrorInfo >nextError;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DevicePushErrorInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1455; } /* = unique id SOAP_TYPE_cusdk__GetNextDeviceGBIDErrorRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetNextDeviceGBIDErrorRsp() { cusdk__GetNextDeviceGBIDErrorRsp::soap_default(NULL); }
	virtual ~cusdk__GetNextDeviceGBIDErrorRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNextDeviceGBIDError
#define SOAP_TYPE_cusdk__GetNextDeviceGBIDError (1459)
/* cusdk:GetNextDeviceGBIDError */
struct cusdk__GetNextDeviceGBIDError
{
public:
	cusdk__GetNextDeviceGBIDErrorReq req;	/* required element of type cusdk:GetNextDeviceGBIDErrorReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetServerConfigReq
#define SOAP_TYPE_cusdk__GetServerConfigReq (1460)
/* cusdk:GetServerConfigReq */
class SOAP_CMAC cusdk__GetServerConfigReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 1460; } /* = unique id SOAP_TYPE_cusdk__GetServerConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetServerConfigReq() { cusdk__GetServerConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetServerConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetServerConfigRsp
#define SOAP_TYPE_cusdk__GetServerConfigRsp (1461)
/* cusdk:GetServerConfigRsp */
class SOAP_CMAC cusdk__GetServerConfigRsp
{
public:
	bool enableDecoderShowAreaInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1461; } /* = unique id SOAP_TYPE_cusdk__GetServerConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetServerConfigRsp() { cusdk__GetServerConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetServerConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetServerConfig
#define SOAP_TYPE_cusdk__GetServerConfig (1464)
/* cusdk:GetServerConfig */
struct cusdk__GetServerConfig
{
public:
	cusdk__GetServerConfigReq req;	/* required element of type cusdk:GetServerConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetServerConfigReq
#define SOAP_TYPE_cusdk__SetServerConfigReq (1465)
/* cusdk:SetServerConfigReq */
class SOAP_CMAC cusdk__SetServerConfigReq : public cusdk__BaseReq
{
public:
	bool enableDecoderShowAreaInfo;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1465; } /* = unique id SOAP_TYPE_cusdk__SetServerConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetServerConfigReq() { cusdk__SetServerConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetServerConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetServerConfigRsp
#define SOAP_TYPE_cusdk__SetServerConfigRsp (1466)
/* cusdk:SetServerConfigRsp */
class SOAP_CMAC cusdk__SetServerConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1466; } /* = unique id SOAP_TYPE_cusdk__SetServerConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetServerConfigRsp() { cusdk__SetServerConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetServerConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetServerConfig
#define SOAP_TYPE_cusdk__SetServerConfig (1469)
/* cusdk:SetServerConfig */
struct cusdk__SetServerConfig
{
public:
	cusdk__SetServerConfigReq req;	/* required element of type cusdk:SetServerConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallClearAlarmReq
#define SOAP_TYPE_cusdk__TVWallClearAlarmReq (1470)
/* cusdk:TVWallClearAlarmReq */
class SOAP_CMAC cusdk__TVWallClearAlarmReq : public cusdk__BaseReq
{
public:
	std::string TVWallId;	/* required element of type xsd:string */
	int tvId;	/* required element of type xsd:int */
	int tvDivId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1470; } /* = unique id SOAP_TYPE_cusdk__TVWallClearAlarmReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallClearAlarmReq() { cusdk__TVWallClearAlarmReq::soap_default(NULL); }
	virtual ~cusdk__TVWallClearAlarmReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallClearAlarmRsp
#define SOAP_TYPE_cusdk__TVWallClearAlarmRsp (1471)
/* cusdk:TVWallClearAlarmRsp */
class SOAP_CMAC cusdk__TVWallClearAlarmRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1471; } /* = unique id SOAP_TYPE_cusdk__TVWallClearAlarmRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__TVWallClearAlarmRsp() { cusdk__TVWallClearAlarmRsp::soap_default(NULL); }
	virtual ~cusdk__TVWallClearAlarmRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__TVWallClearAlarm
#define SOAP_TYPE_cusdk__TVWallClearAlarm (1474)
/* cusdk:TVWallClearAlarm */
struct cusdk__TVWallClearAlarm
{
public:
	cusdk__TVWallClearAlarmReq req;	/* required element of type cusdk:TVWallClearAlarmReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__LockRecordReq
#define SOAP_TYPE_cusdk__LockRecordReq (1475)
/* cusdk:LockRecordReq */
class SOAP_CMAC cusdk__LockRecordReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__RecDuration >recordDurationList;	/* optional element of type cusdk:RecDuration */
public:
	virtual int soap_type() const { return 1475; } /* = unique id SOAP_TYPE_cusdk__LockRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LockRecordReq() { cusdk__LockRecordReq::soap_default(NULL); }
	virtual ~cusdk__LockRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LockRecordRsp
#define SOAP_TYPE_cusdk__LockRecordRsp (1476)
/* cusdk:LockRecordRsp */
class SOAP_CMAC cusdk__LockRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1476; } /* = unique id SOAP_TYPE_cusdk__LockRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LockRecordRsp() { cusdk__LockRecordRsp::soap_default(NULL); }
	virtual ~cusdk__LockRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LockRecord
#define SOAP_TYPE_cusdk__LockRecord (1479)
/* cusdk:LockRecord */
struct cusdk__LockRecord
{
public:
	cusdk__LockRecordReq req;	/* required element of type cusdk:LockRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UnlockRecordReq
#define SOAP_TYPE_cusdk__UnlockRecordReq (1480)
/* cusdk:UnlockRecordReq */
class SOAP_CMAC cusdk__UnlockRecordReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__RecDuration >recordDurationList;	/* optional element of type cusdk:RecDuration */
public:
	virtual int soap_type() const { return 1480; } /* = unique id SOAP_TYPE_cusdk__UnlockRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnlockRecordReq() { cusdk__UnlockRecordReq::soap_default(NULL); }
	virtual ~cusdk__UnlockRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnlockRecordRsp
#define SOAP_TYPE_cusdk__UnlockRecordRsp (1481)
/* cusdk:UnlockRecordRsp */
class SOAP_CMAC cusdk__UnlockRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1481; } /* = unique id SOAP_TYPE_cusdk__UnlockRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnlockRecordRsp() { cusdk__UnlockRecordRsp::soap_default(NULL); }
	virtual ~cusdk__UnlockRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnlockRecord
#define SOAP_TYPE_cusdk__UnlockRecord (1484)
/* cusdk:UnlockRecord */
struct cusdk__UnlockRecord
{
public:
	cusdk__UnlockRecordReq req;	/* required element of type cusdk:UnlockRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__LongOSDParam
#define SOAP_TYPE_cusdk__LongOSDParam (1486)
/* cusdk:LongOSDParam */
class SOAP_CMAC cusdk__LongOSDParam
{
public:
	int state;	/* required element of type xsd:int */
	int leftMargin;	/* required element of type xsd:int */
	int topMargin;	/* required element of type xsd:int */
	int color;	/* required element of type xsd:int */
	std::string text;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1486; } /* = unique id SOAP_TYPE_cusdk__LongOSDParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LongOSDParam() { cusdk__LongOSDParam::soap_default(NULL); }
	virtual ~cusdk__LongOSDParam() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPULongOSDReq
#define SOAP_TYPE_cusdk__GetPULongOSDReq (1487)
/* cusdk:GetPULongOSDReq */
class SOAP_CMAC cusdk__GetPULongOSDReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1487; } /* = unique id SOAP_TYPE_cusdk__GetPULongOSDReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetPULongOSDReq() { cusdk__GetPULongOSDReq::soap_default(NULL); }
	virtual ~cusdk__GetPULongOSDReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPULongOSDRsp
#define SOAP_TYPE_cusdk__GetPULongOSDRsp (1488)
/* cusdk:GetPULongOSDRsp */
class SOAP_CMAC cusdk__GetPULongOSDRsp
{
public:
	cusdk__LongOSDParam longOSDParam;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:LongOSDParam */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1488; } /* = unique id SOAP_TYPE_cusdk__GetPULongOSDRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetPULongOSDRsp() { cusdk__GetPULongOSDRsp::soap_default(NULL); }
	virtual ~cusdk__GetPULongOSDRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetPULongOSD
#define SOAP_TYPE_cusdk__GetPULongOSD (1491)
/* cusdk:GetPULongOSD */
struct cusdk__GetPULongOSD
{
public:
	cusdk__GetPULongOSDReq req;	/* required element of type cusdk:GetPULongOSDReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetPULongOSDReq
#define SOAP_TYPE_cusdk__SetPULongOSDReq (1492)
/* cusdk:SetPULongOSDReq */
class SOAP_CMAC cusdk__SetPULongOSDReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	cusdk__LongOSDParam longOSDParam;	/* required element of type cusdk:LongOSDParam */
public:
	virtual int soap_type() const { return 1492; } /* = unique id SOAP_TYPE_cusdk__SetPULongOSDReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetPULongOSDReq() { cusdk__SetPULongOSDReq::soap_default(NULL); }
	virtual ~cusdk__SetPULongOSDReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetPULongOSDRsp
#define SOAP_TYPE_cusdk__SetPULongOSDRsp (1493)
/* cusdk:SetPULongOSDRsp */
class SOAP_CMAC cusdk__SetPULongOSDRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1493; } /* = unique id SOAP_TYPE_cusdk__SetPULongOSDRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetPULongOSDRsp() { cusdk__SetPULongOSDRsp::soap_default(NULL); }
	virtual ~cusdk__SetPULongOSDRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetPULongOSD
#define SOAP_TYPE_cusdk__SetPULongOSD (1496)
/* cusdk:SetPULongOSD */
struct cusdk__SetPULongOSD
{
public:
	cusdk__SetPULongOSDReq req;	/* required element of type cusdk:SetPULongOSDReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceCertificateReq
#define SOAP_TYPE_cusdk__GetDeviceCertificateReq (1497)
/* cusdk:GetDeviceCertificateReq */
class SOAP_CMAC cusdk__GetDeviceCertificateReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1497; } /* = unique id SOAP_TYPE_cusdk__GetDeviceCertificateReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceCertificateReq() { cusdk__GetDeviceCertificateReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceCertificateReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceCertificateRsp
#define SOAP_TYPE_cusdk__GetDeviceCertificateRsp (1498)
/* cusdk:GetDeviceCertificateRsp */
class SOAP_CMAC cusdk__GetDeviceCertificateRsp
{
public:
	std::string signatureCert;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string encryptCert;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1498; } /* = unique id SOAP_TYPE_cusdk__GetDeviceCertificateRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceCertificateRsp() { cusdk__GetDeviceCertificateRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceCertificateRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceCertificate
#define SOAP_TYPE_cusdk__GetDeviceCertificate (1501)
/* cusdk:GetDeviceCertificate */
struct cusdk__GetDeviceCertificate
{
public:
	cusdk__GetDeviceCertificateReq req;	/* required element of type cusdk:GetDeviceCertificateReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceSignatrueCtrlReq
#define SOAP_TYPE_cusdk__DeviceSignatrueCtrlReq (1502)
/* cusdk:DeviceSignatrueCtrlReq */
class SOAP_CMAC cusdk__DeviceSignatrueCtrlReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1502; } /* = unique id SOAP_TYPE_cusdk__DeviceSignatrueCtrlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceSignatrueCtrlReq() { cusdk__DeviceSignatrueCtrlReq::soap_default(NULL); }
	virtual ~cusdk__DeviceSignatrueCtrlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceSignatrueCtrlRsp
#define SOAP_TYPE_cusdk__DeviceSignatrueCtrlRsp (1503)
/* cusdk:DeviceSignatrueCtrlRsp */
class SOAP_CMAC cusdk__DeviceSignatrueCtrlRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1503; } /* = unique id SOAP_TYPE_cusdk__DeviceSignatrueCtrlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceSignatrueCtrlRsp() { cusdk__DeviceSignatrueCtrlRsp::soap_default(NULL); }
	virtual ~cusdk__DeviceSignatrueCtrlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceSignatrueCtrl
#define SOAP_TYPE_cusdk__DeviceSignatrueCtrl (1506)
/* cusdk:DeviceSignatrueCtrl */
struct cusdk__DeviceSignatrueCtrl
{
public:
	cusdk__DeviceSignatrueCtrlReq req;	/* required element of type cusdk:DeviceSignatrueCtrlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceEncryptionCtrlReq
#define SOAP_TYPE_cusdk__DeviceEncryptionCtrlReq (1507)
/* cusdk:DeviceEncryptionCtrlReq */
class SOAP_CMAC cusdk__DeviceEncryptionCtrlReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1507; } /* = unique id SOAP_TYPE_cusdk__DeviceEncryptionCtrlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceEncryptionCtrlReq() { cusdk__DeviceEncryptionCtrlReq::soap_default(NULL); }
	virtual ~cusdk__DeviceEncryptionCtrlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceEncryptionCtrlRsp
#define SOAP_TYPE_cusdk__DeviceEncryptionCtrlRsp (1508)
/* cusdk:DeviceEncryptionCtrlRsp */
class SOAP_CMAC cusdk__DeviceEncryptionCtrlRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1508; } /* = unique id SOAP_TYPE_cusdk__DeviceEncryptionCtrlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceEncryptionCtrlRsp() { cusdk__DeviceEncryptionCtrlRsp::soap_default(NULL); }
	virtual ~cusdk__DeviceEncryptionCtrlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceEncryptionCtrl
#define SOAP_TYPE_cusdk__DeviceEncryptionCtrl (1511)
/* cusdk:DeviceEncryptionCtrl */
struct cusdk__DeviceEncryptionCtrl
{
public:
	cusdk__DeviceEncryptionCtrlReq req;	/* required element of type cusdk:DeviceEncryptionCtrlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__BidirectionalAuth1Req
#define SOAP_TYPE_cusdk__BidirectionalAuth1Req (1512)
/* cusdk:BidirectionalAuth1Req */
class SOAP_CMAC cusdk__BidirectionalAuth1Req : public cusdk__BaseReq
{
public:
	std::string algorithm;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1512; } /* = unique id SOAP_TYPE_cusdk__BidirectionalAuth1Req */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BidirectionalAuth1Req() { cusdk__BidirectionalAuth1Req::soap_default(NULL); }
	virtual ~cusdk__BidirectionalAuth1Req() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BidirectionalAuth1Rsp
#define SOAP_TYPE_cusdk__BidirectionalAuth1Rsp (1513)
/* cusdk:BidirectionalAuth1Rsp */
class SOAP_CMAC cusdk__BidirectionalAuth1Rsp
{
public:
	std::string algorithm;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string random1;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1513; } /* = unique id SOAP_TYPE_cusdk__BidirectionalAuth1Rsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BidirectionalAuth1Rsp() { cusdk__BidirectionalAuth1Rsp::soap_default(NULL); }
	virtual ~cusdk__BidirectionalAuth1Rsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BidirectionalAuth1
#define SOAP_TYPE_cusdk__BidirectionalAuth1 (1516)
/* cusdk:BidirectionalAuth1 */
struct cusdk__BidirectionalAuth1
{
public:
	cusdk__BidirectionalAuth1Req req;	/* required element of type cusdk:BidirectionalAuth1Req */
};
#endif

#ifndef SOAP_TYPE_cusdk__BidirectionalAuth2Req
#define SOAP_TYPE_cusdk__BidirectionalAuth2Req (1517)
/* cusdk:BidirectionalAuth2Req */
class SOAP_CMAC cusdk__BidirectionalAuth2Req : public cusdk__BaseReq
{
public:
	std::string random1;	/* required element of type xsd:string */
	std::string random2;	/* required element of type xsd:string */
	std::string serverId;	/* required element of type xsd:string */
	std::string sign1;	/* required element of type xsd:string */
	std::string algorithm;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1517; } /* = unique id SOAP_TYPE_cusdk__BidirectionalAuth2Req */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BidirectionalAuth2Req() { cusdk__BidirectionalAuth2Req::soap_default(NULL); }
	virtual ~cusdk__BidirectionalAuth2Req() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BidirectionalAuth2Rsp
#define SOAP_TYPE_cusdk__BidirectionalAuth2Rsp (1518)
/* cusdk:BidirectionalAuth2Rsp */
class SOAP_CMAC cusdk__BidirectionalAuth2Rsp
{
public:
	std::string random1;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string random2;	/* required element of type xsd:string */
	std::string cryptkey;	/* required element of type xsd:string */
	std::string sign2;	/* required element of type xsd:string */
	std::string algorithm;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1518; } /* = unique id SOAP_TYPE_cusdk__BidirectionalAuth2Rsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BidirectionalAuth2Rsp() { cusdk__BidirectionalAuth2Rsp::soap_default(NULL); }
	virtual ~cusdk__BidirectionalAuth2Rsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BidirectionalAuth2
#define SOAP_TYPE_cusdk__BidirectionalAuth2 (1521)
/* cusdk:BidirectionalAuth2 */
struct cusdk__BidirectionalAuth2
{
public:
	cusdk__BidirectionalAuth2Req req;	/* required element of type cusdk:BidirectionalAuth2Req */
};
#endif

#ifndef SOAP_TYPE_cusdk_DeviceVideoSrc
#define SOAP_TYPE_cusdk_DeviceVideoSrc (1523)
/* cusdk-DeviceVideoSrc */
class SOAP_CMAC cusdk_DeviceVideoSrc
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1523; } /* = unique id SOAP_TYPE_cusdk_DeviceVideoSrc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk_DeviceVideoSrc() { cusdk_DeviceVideoSrc::soap_default(NULL); }
	virtual ~cusdk_DeviceVideoSrc() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AdjustVideoSrcOrderReq
#define SOAP_TYPE_cusdk__AdjustVideoSrcOrderReq (1524)
/* cusdk:AdjustVideoSrcOrderReq */
class SOAP_CMAC cusdk__AdjustVideoSrcOrderReq : public cusdk__BaseReq
{
public:
	std::string treeId;	/* required element of type xsd:string */
	std::string groupId;	/* required element of type xsd:string */
	int moveOp;	/* required element of type xsd:int */
	cusdk_DeviceVideoSrc vsMove;	/* required element of type cusdk-DeviceVideoSrc */
	cusdk_DeviceVideoSrc vsRefer;	/* required element of type cusdk-DeviceVideoSrc */
public:
	virtual int soap_type() const { return 1524; } /* = unique id SOAP_TYPE_cusdk__AdjustVideoSrcOrderReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AdjustVideoSrcOrderReq() { cusdk__AdjustVideoSrcOrderReq::soap_default(NULL); }
	virtual ~cusdk__AdjustVideoSrcOrderReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AdjustVideoSrcOrderRsp
#define SOAP_TYPE_cusdk__AdjustVideoSrcOrderRsp (1525)
/* cusdk:AdjustVideoSrcOrderRsp */
class SOAP_CMAC cusdk__AdjustVideoSrcOrderRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1525; } /* = unique id SOAP_TYPE_cusdk__AdjustVideoSrcOrderRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AdjustVideoSrcOrderRsp() { cusdk__AdjustVideoSrcOrderRsp::soap_default(NULL); }
	virtual ~cusdk__AdjustVideoSrcOrderRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AdjustVideoSrcOrder
#define SOAP_TYPE_cusdk__AdjustVideoSrcOrder (1528)
/* cusdk:AdjustVideoSrcOrder */
struct cusdk__AdjustVideoSrcOrder
{
public:
	cusdk__AdjustVideoSrcOrderReq req;	/* required element of type cusdk:AdjustVideoSrcOrderReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__AlarmType
#define SOAP_TYPE_cusdk__AlarmType (1529)
/* cusdk:AlarmType */
class SOAP_CMAC cusdk__AlarmType
{
public:
	int alarmType;	/* required element of type xsd:int */
	std::string alarmTypeName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1529; } /* = unique id SOAP_TYPE_cusdk__AlarmType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AlarmType() { cusdk__AlarmType::soap_default(NULL); }
	virtual ~cusdk__AlarmType() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAlarmTypesReq
#define SOAP_TYPE_cusdk__GetAlarmTypesReq (1530)
/* cusdk:GetAlarmTypesReq */
class SOAP_CMAC cusdk__GetAlarmTypesReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 1530; } /* = unique id SOAP_TYPE_cusdk__GetAlarmTypesReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAlarmTypesReq() { cusdk__GetAlarmTypesReq::soap_default(NULL); }
	virtual ~cusdk__GetAlarmTypesReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAlarmTypesRsp
#define SOAP_TYPE_cusdk__GetAlarmTypesRsp (1531)
/* cusdk:GetAlarmTypesRsp */
class SOAP_CMAC cusdk__GetAlarmTypesRsp
{
public:
	std::vector<cusdk__AlarmType >alarmTypes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:AlarmType */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1531; } /* = unique id SOAP_TYPE_cusdk__GetAlarmTypesRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAlarmTypesRsp() { cusdk__GetAlarmTypesRsp::soap_default(NULL); }
	virtual ~cusdk__GetAlarmTypesRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAlarmTypes
#define SOAP_TYPE_cusdk__GetAlarmTypes (1535)
/* cusdk:GetAlarmTypes */
struct cusdk__GetAlarmTypes
{
public:
	cusdk__GetAlarmTypesReq req;	/* required element of type cusdk:GetAlarmTypesReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__EliminateAlarmReq
#define SOAP_TYPE_cusdk__EliminateAlarmReq (1536)
/* cusdk:EliminateAlarmReq */
class SOAP_CMAC cusdk__EliminateAlarmReq : public cusdk__BaseReq
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	int vsId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1536; } /* = unique id SOAP_TYPE_cusdk__EliminateAlarmReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EliminateAlarmReq() { cusdk__EliminateAlarmReq::soap_default(NULL); }
	virtual ~cusdk__EliminateAlarmReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EliminateAlarmRsp
#define SOAP_TYPE_cusdk__EliminateAlarmRsp (1537)
/* cusdk:EliminateAlarmRsp */
class SOAP_CMAC cusdk__EliminateAlarmRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1537; } /* = unique id SOAP_TYPE_cusdk__EliminateAlarmRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EliminateAlarmRsp() { cusdk__EliminateAlarmRsp::soap_default(NULL); }
	virtual ~cusdk__EliminateAlarmRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EliminateAlarm
#define SOAP_TYPE_cusdk__EliminateAlarm (1540)
/* cusdk:EliminateAlarm */
struct cusdk__EliminateAlarm
{
public:
	cusdk__EliminateAlarmReq req;	/* required element of type cusdk:EliminateAlarmReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceRecordsServerUrlReq
#define SOAP_TYPE_cusdk__GetDeviceRecordsServerUrlReq (1541)
/* cusdk:GetDeviceRecordsServerUrlReq */
class SOAP_CMAC cusdk__GetDeviceRecordsServerUrlReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 1541; } /* = unique id SOAP_TYPE_cusdk__GetDeviceRecordsServerUrlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceRecordsServerUrlReq() { cusdk__GetDeviceRecordsServerUrlReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceRecordsServerUrlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceRecordsServerUrlRsp
#define SOAP_TYPE_cusdk__GetDeviceRecordsServerUrlRsp (1542)
/* cusdk:GetDeviceRecordsServerUrlRsp */
class SOAP_CMAC cusdk__GetDeviceRecordsServerUrlRsp
{
public:
	std::vector<std::string >deviceRecordsServerUrls;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1542; } /* = unique id SOAP_TYPE_cusdk__GetDeviceRecordsServerUrlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceRecordsServerUrlRsp() { cusdk__GetDeviceRecordsServerUrlRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceRecordsServerUrlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceRecordsServerUrl
#define SOAP_TYPE_cusdk__GetDeviceRecordsServerUrl (1545)
/* cusdk:GetDeviceRecordsServerUrl */
struct cusdk__GetDeviceRecordsServerUrl
{
public:
	cusdk__GetDeviceRecordsServerUrlReq req;	/* required element of type cusdk:GetDeviceRecordsServerUrlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__LockRecordBatchReq
#define SOAP_TYPE_cusdk__LockRecordBatchReq (1546)
/* cusdk:LockRecordBatchReq */
class SOAP_CMAC cusdk__LockRecordBatchReq : public cusdk__BaseReq
{
public:
	cusdk__VideoSrcId devVideoSrc;	/* required element of type cusdk:VideoSrcId */
	cusdk__TimeRange timeRange;	/* required element of type cusdk:TimeRange */
public:
	virtual int soap_type() const { return 1546; } /* = unique id SOAP_TYPE_cusdk__LockRecordBatchReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LockRecordBatchReq() { cusdk__LockRecordBatchReq::soap_default(NULL); }
	virtual ~cusdk__LockRecordBatchReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LockRecordBatchRsp
#define SOAP_TYPE_cusdk__LockRecordBatchRsp (1547)
/* cusdk:LockRecordBatchRsp */
class SOAP_CMAC cusdk__LockRecordBatchRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1547; } /* = unique id SOAP_TYPE_cusdk__LockRecordBatchRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LockRecordBatchRsp() { cusdk__LockRecordBatchRsp::soap_default(NULL); }
	virtual ~cusdk__LockRecordBatchRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LockRecordBatch
#define SOAP_TYPE_cusdk__LockRecordBatch (1550)
/* cusdk:LockRecordBatch */
struct cusdk__LockRecordBatch
{
public:
	cusdk__LockRecordBatchReq req;	/* required element of type cusdk:LockRecordBatchReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UnlockRecordBatchReq
#define SOAP_TYPE_cusdk__UnlockRecordBatchReq (1551)
/* cusdk:UnlockRecordBatchReq */
class SOAP_CMAC cusdk__UnlockRecordBatchReq : public cusdk__BaseReq
{
public:
	cusdk__VideoSrcId devVideoSrc;	/* required element of type cusdk:VideoSrcId */
	bool enableTimeRange;	/* required element of type xsd:boolean */
	cusdk__TimeRange timeRange;	/* required element of type cusdk:TimeRange */
public:
	virtual int soap_type() const { return 1551; } /* = unique id SOAP_TYPE_cusdk__UnlockRecordBatchReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnlockRecordBatchReq() { cusdk__UnlockRecordBatchReq::soap_default(NULL); }
	virtual ~cusdk__UnlockRecordBatchReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnlockRecordBatchRsp
#define SOAP_TYPE_cusdk__UnlockRecordBatchRsp (1552)
/* cusdk:UnlockRecordBatchRsp */
class SOAP_CMAC cusdk__UnlockRecordBatchRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1552; } /* = unique id SOAP_TYPE_cusdk__UnlockRecordBatchRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnlockRecordBatchRsp() { cusdk__UnlockRecordBatchRsp::soap_default(NULL); }
	virtual ~cusdk__UnlockRecordBatchRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnlockRecordBatch
#define SOAP_TYPE_cusdk__UnlockRecordBatch (1555)
/* cusdk:UnlockRecordBatch */
struct cusdk__UnlockRecordBatch
{
public:
	cusdk__UnlockRecordBatchReq req;	/* required element of type cusdk:UnlockRecordBatchReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryLockedRecordReq
#define SOAP_TYPE_cusdk__QueryLockedRecordReq (1556)
/* cusdk:QueryLockedRecordReq */
class SOAP_CMAC cusdk__QueryLockedRecordReq : public cusdk__BaseReq
{
public:
	cusdk__VideoSrcId devVideoSrc;	/* required element of type cusdk:VideoSrcId */
	bool enableTimeRange;	/* required element of type xsd:boolean */
	cusdk__TimeRange timeRange;	/* required element of type cusdk:TimeRange */
	int maxResultNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1556; } /* = unique id SOAP_TYPE_cusdk__QueryLockedRecordReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryLockedRecordReq() { cusdk__QueryLockedRecordReq::soap_default(NULL); }
	virtual ~cusdk__QueryLockedRecordReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryLockedRecordRsp
#define SOAP_TYPE_cusdk__QueryLockedRecordRsp (1557)
/* cusdk:QueryLockedRecordRsp */
class SOAP_CMAC cusdk__QueryLockedRecordRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::vector<cusdk__RecDuration >recordDurationList;	/* optional element of type cusdk:RecDuration */
	bool hasMoreResult;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1557; } /* = unique id SOAP_TYPE_cusdk__QueryLockedRecordRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryLockedRecordRsp() { cusdk__QueryLockedRecordRsp::soap_default(NULL); }
	virtual ~cusdk__QueryLockedRecordRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryLockedRecord
#define SOAP_TYPE_cusdk__QueryLockedRecord (1560)
/* cusdk:QueryLockedRecord */
struct cusdk__QueryLockedRecord
{
public:
	cusdk__QueryLockedRecordReq req;	/* required element of type cusdk:QueryLockedRecordReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetStreamPreDispatchConfigReq
#define SOAP_TYPE_cusdk__GetStreamPreDispatchConfigReq (1561)
/* cusdk:GetStreamPreDispatchConfigReq */
class SOAP_CMAC cusdk__GetStreamPreDispatchConfigReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 1561; } /* = unique id SOAP_TYPE_cusdk__GetStreamPreDispatchConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetStreamPreDispatchConfigReq() { cusdk__GetStreamPreDispatchConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetStreamPreDispatchConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetStreamPreDispatchConfigRsp
#define SOAP_TYPE_cusdk__GetStreamPreDispatchConfigRsp (1562)
/* cusdk:GetStreamPreDispatchConfigRsp */
class SOAP_CMAC cusdk__GetStreamPreDispatchConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	bool enabled;	/* required element of type xsd:boolean */
	int streamType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1562; } /* = unique id SOAP_TYPE_cusdk__GetStreamPreDispatchConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetStreamPreDispatchConfigRsp() { cusdk__GetStreamPreDispatchConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetStreamPreDispatchConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetStreamPreDispatchConfig
#define SOAP_TYPE_cusdk__GetStreamPreDispatchConfig (1565)
/* cusdk:GetStreamPreDispatchConfig */
struct cusdk__GetStreamPreDispatchConfig
{
public:
	cusdk__GetStreamPreDispatchConfigReq req;	/* required element of type cusdk:GetStreamPreDispatchConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetStreamPreDispatchConfigReq
#define SOAP_TYPE_cusdk__SetStreamPreDispatchConfigReq (1566)
/* cusdk:SetStreamPreDispatchConfigReq */
class SOAP_CMAC cusdk__SetStreamPreDispatchConfigReq : public cusdk__BaseReq
{
public:
	bool enabled;	/* required element of type xsd:boolean */
	int streamType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1566; } /* = unique id SOAP_TYPE_cusdk__SetStreamPreDispatchConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetStreamPreDispatchConfigReq() { cusdk__SetStreamPreDispatchConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetStreamPreDispatchConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetStreamPreDispatchConfigRsp
#define SOAP_TYPE_cusdk__SetStreamPreDispatchConfigRsp (1567)
/* cusdk:SetStreamPreDispatchConfigRsp */
class SOAP_CMAC cusdk__SetStreamPreDispatchConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1567; } /* = unique id SOAP_TYPE_cusdk__SetStreamPreDispatchConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetStreamPreDispatchConfigRsp() { cusdk__SetStreamPreDispatchConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetStreamPreDispatchConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetStreamPreDispatchConfig
#define SOAP_TYPE_cusdk__SetStreamPreDispatchConfig (1570)
/* cusdk:SetStreamPreDispatchConfig */
struct cusdk__SetStreamPreDispatchConfig
{
public:
	cusdk__SetStreamPreDispatchConfigReq req;	/* required element of type cusdk:SetStreamPreDispatchConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryStreamPreDispatchDeviceReq
#define SOAP_TYPE_cusdk__QueryStreamPreDispatchDeviceReq (1571)
/* cusdk:QueryStreamPreDispatchDeviceReq */
class SOAP_CMAC cusdk__QueryStreamPreDispatchDeviceReq : public cusdk__BaseReq
{
public:
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1571; } /* = unique id SOAP_TYPE_cusdk__QueryStreamPreDispatchDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryStreamPreDispatchDeviceReq() { cusdk__QueryStreamPreDispatchDeviceReq::soap_default(NULL); }
	virtual ~cusdk__QueryStreamPreDispatchDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryStreamPreDispatchDeviceRsp
#define SOAP_TYPE_cusdk__QueryStreamPreDispatchDeviceRsp (1572)
/* cusdk:QueryStreamPreDispatchDeviceRsp */
class SOAP_CMAC cusdk__QueryStreamPreDispatchDeviceRsp
{
public:
	int totalNum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::vector<cusdk__VideoSrcId >videoSrcList;	/* optional element of type cusdk:VideoSrcId */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1572; } /* = unique id SOAP_TYPE_cusdk__QueryStreamPreDispatchDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__QueryStreamPreDispatchDeviceRsp() { cusdk__QueryStreamPreDispatchDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__QueryStreamPreDispatchDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__QueryStreamPreDispatchDevice
#define SOAP_TYPE_cusdk__QueryStreamPreDispatchDevice (1575)
/* cusdk:QueryStreamPreDispatchDevice */
struct cusdk__QueryStreamPreDispatchDevice
{
public:
	cusdk__QueryStreamPreDispatchDeviceReq req;	/* required element of type cusdk:QueryStreamPreDispatchDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StreamPreDispatchAddDeviceReq
#define SOAP_TYPE_cusdk__StreamPreDispatchAddDeviceReq (1576)
/* cusdk:StreamPreDispatchAddDeviceReq */
class SOAP_CMAC cusdk__StreamPreDispatchAddDeviceReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__VideoSrcId >videoSrcList;	/* optional element of type cusdk:VideoSrcId */
public:
	virtual int soap_type() const { return 1576; } /* = unique id SOAP_TYPE_cusdk__StreamPreDispatchAddDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StreamPreDispatchAddDeviceReq() { cusdk__StreamPreDispatchAddDeviceReq::soap_default(NULL); }
	virtual ~cusdk__StreamPreDispatchAddDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StreamPreDispatchAddDeviceRsp
#define SOAP_TYPE_cusdk__StreamPreDispatchAddDeviceRsp (1577)
/* cusdk:StreamPreDispatchAddDeviceRsp */
class SOAP_CMAC cusdk__StreamPreDispatchAddDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
	std::vector<cusdk__VideoSrcId >failedVideoSrcList;	/* optional element of type cusdk:VideoSrcId */
public:
	virtual int soap_type() const { return 1577; } /* = unique id SOAP_TYPE_cusdk__StreamPreDispatchAddDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StreamPreDispatchAddDeviceRsp() { cusdk__StreamPreDispatchAddDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__StreamPreDispatchAddDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StreamPreDispatchAddDevice
#define SOAP_TYPE_cusdk__StreamPreDispatchAddDevice (1580)
/* cusdk:StreamPreDispatchAddDevice */
struct cusdk__StreamPreDispatchAddDevice
{
public:
	cusdk__StreamPreDispatchAddDeviceReq req;	/* required element of type cusdk:StreamPreDispatchAddDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StreamPreDispatchDelDeviceReq
#define SOAP_TYPE_cusdk__StreamPreDispatchDelDeviceReq (1581)
/* cusdk:StreamPreDispatchDelDeviceReq */
class SOAP_CMAC cusdk__StreamPreDispatchDelDeviceReq : public cusdk__BaseReq
{
public:
	cusdk__VideoSrcId deviceVideoSrc;	/* required element of type cusdk:VideoSrcId */
public:
	virtual int soap_type() const { return 1581; } /* = unique id SOAP_TYPE_cusdk__StreamPreDispatchDelDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StreamPreDispatchDelDeviceReq() { cusdk__StreamPreDispatchDelDeviceReq::soap_default(NULL); }
	virtual ~cusdk__StreamPreDispatchDelDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StreamPreDispatchDelDeviceRsp
#define SOAP_TYPE_cusdk__StreamPreDispatchDelDeviceRsp (1582)
/* cusdk:StreamPreDispatchDelDeviceRsp */
class SOAP_CMAC cusdk__StreamPreDispatchDelDeviceRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1582; } /* = unique id SOAP_TYPE_cusdk__StreamPreDispatchDelDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StreamPreDispatchDelDeviceRsp() { cusdk__StreamPreDispatchDelDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__StreamPreDispatchDelDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StreamPreDispatchDelDevice
#define SOAP_TYPE_cusdk__StreamPreDispatchDelDevice (1585)
/* cusdk:StreamPreDispatchDelDevice */
struct cusdk__StreamPreDispatchDelDevice
{
public:
	cusdk__StreamPreDispatchDelDeviceReq req;	/* required element of type cusdk:StreamPreDispatchDelDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__EncChnRes
#define SOAP_TYPE_cusdk__EncChnRes (1586)
/* cusdk:EncChnRes */
class SOAP_CMAC cusdk__EncChnRes
{
public:
	cusdk__DevChannel encChn;	/* required element of type cusdk:DevChannel */
	std::string manuFactory;	/* required element of type xsd:string */
	int videoWidth;	/* required element of type xsd:int */
	int videoHeight;	/* required element of type xsd:int */
	std::string videoFormat;	/* required element of type xsd:string */
	std::string desc;	/* required element of type xsd:string */
	std::string reserve;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1586; } /* = unique id SOAP_TYPE_cusdk__EncChnRes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncChnRes() { cusdk__EncChnRes::soap_default(NULL); }
	virtual ~cusdk__EncChnRes() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetEncChnResReq
#define SOAP_TYPE_cusdk__GetEncChnResReq (1587)
/* cusdk:GetEncChnResReq */
class SOAP_CMAC cusdk__GetEncChnResReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel vidSrcChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 1587; } /* = unique id SOAP_TYPE_cusdk__GetEncChnResReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetEncChnResReq() { cusdk__GetEncChnResReq::soap_default(NULL); }
	virtual ~cusdk__GetEncChnResReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetEncChnResRsp
#define SOAP_TYPE_cusdk__GetEncChnResRsp (1588)
/* cusdk:GetEncChnResRsp */
class SOAP_CMAC cusdk__GetEncChnResRsp
{
public:
	std::vector<cusdk__EncChnRes >encChnResList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:EncChnRes */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1588; } /* = unique id SOAP_TYPE_cusdk__GetEncChnResRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetEncChnResRsp() { cusdk__GetEncChnResRsp::soap_default(NULL); }
	virtual ~cusdk__GetEncChnResRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetEncChnRes
#define SOAP_TYPE_cusdk__GetEncChnRes (1592)
/* cusdk:GetEncChnRes */
struct cusdk__GetEncChnRes
{
public:
	cusdk__GetEncChnResReq req;	/* required element of type cusdk:GetEncChnResReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__AllocEncChnResReq
#define SOAP_TYPE_cusdk__AllocEncChnResReq (1593)
/* cusdk:AllocEncChnResReq */
class SOAP_CMAC cusdk__AllocEncChnResReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
	cusdk__EncChnRes encChnRes;	/* required element of type cusdk:EncChnRes */
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* optional element of type cusdk:MediaDescription */
public:
	virtual int soap_type() const { return 1593; } /* = unique id SOAP_TYPE_cusdk__AllocEncChnResReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AllocEncChnResReq() { cusdk__AllocEncChnResReq::soap_default(NULL); }
	virtual ~cusdk__AllocEncChnResReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AllocEncChnResRsp
#define SOAP_TYPE_cusdk__AllocEncChnResRsp (1594)
/* cusdk:AllocEncChnResRsp */
class SOAP_CMAC cusdk__AllocEncChnResRsp
{
public:
	std::vector<cusdk__MediaDescription >mediaDescriptionList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:MediaDescription */
	std::vector<cusdk__MediaExtInfo >mediaExtInfo;	/* optional element of type cusdk:MediaExtInfo */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1594; } /* = unique id SOAP_TYPE_cusdk__AllocEncChnResRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AllocEncChnResRsp() { cusdk__AllocEncChnResRsp::soap_default(NULL); }
	virtual ~cusdk__AllocEncChnResRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AllocEncChnRes
#define SOAP_TYPE_cusdk__AllocEncChnRes (1597)
/* cusdk:AllocEncChnRes */
struct cusdk__AllocEncChnRes
{
public:
	cusdk__AllocEncChnResReq req;	/* required element of type cusdk:AllocEncChnResReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ReleaseEncChnResReq
#define SOAP_TYPE_cusdk__ReleaseEncChnResReq (1598)
/* cusdk:ReleaseEncChnResReq */
class SOAP_CMAC cusdk__ReleaseEncChnResReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1598; } /* = unique id SOAP_TYPE_cusdk__ReleaseEncChnResReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ReleaseEncChnResReq() { cusdk__ReleaseEncChnResReq::soap_default(NULL); }
	virtual ~cusdk__ReleaseEncChnResReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ReleaseEncChnResRsp
#define SOAP_TYPE_cusdk__ReleaseEncChnResRsp (1599)
/* cusdk:ReleaseEncChnResRsp */
class SOAP_CMAC cusdk__ReleaseEncChnResRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1599; } /* = unique id SOAP_TYPE_cusdk__ReleaseEncChnResRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ReleaseEncChnResRsp() { cusdk__ReleaseEncChnResRsp::soap_default(NULL); }
	virtual ~cusdk__ReleaseEncChnResRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ReleaseEncChnRes
#define SOAP_TYPE_cusdk__ReleaseEncChnRes (1602)
/* cusdk:ReleaseEncChnRes */
struct cusdk__ReleaseEncChnRes
{
public:
	cusdk__ReleaseEncChnResReq req;	/* required element of type cusdk:ReleaseEncChnResReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GBPuTransdataSsSetReq
#define SOAP_TYPE_cusdk__GBPuTransdataSsSetReq (1603)
/* cusdk:GBPuTransdataSsSetReq */
class SOAP_CMAC cusdk__GBPuTransdataSsSetReq : public cusdk__BaseReq
{
public:
	cusdk__DevChannel devChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 1603; } /* = unique id SOAP_TYPE_cusdk__GBPuTransdataSsSetReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GBPuTransdataSsSetReq() { cusdk__GBPuTransdataSsSetReq::soap_default(NULL); }
	virtual ~cusdk__GBPuTransdataSsSetReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GBPuTransdataSsSetRsp
#define SOAP_TYPE_cusdk__GBPuTransdataSsSetRsp (1604)
/* cusdk:GBPuTransdataSsSetRsp */
class SOAP_CMAC cusdk__GBPuTransdataSsSetRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1604; } /* = unique id SOAP_TYPE_cusdk__GBPuTransdataSsSetRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GBPuTransdataSsSetRsp() { cusdk__GBPuTransdataSsSetRsp::soap_default(NULL); }
	virtual ~cusdk__GBPuTransdataSsSetRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GBPuTransdataSsSet
#define SOAP_TYPE_cusdk__GBPuTransdataSsSet (1607)
/* cusdk:GBPuTransdataSsSet */
struct cusdk__GBPuTransdataSsSet
{
public:
	cusdk__GBPuTransdataSsSetReq req;	/* required element of type cusdk:GBPuTransdataSsSetReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDomainPrivilegeReq
#define SOAP_TYPE_cusdk__GetGBDomainPrivilegeReq (1608)
/* cusdk:GetGBDomainPrivilegeReq */
class SOAP_CMAC cusdk__GetGBDomainPrivilegeReq : public cusdk__BaseReq
{
public:
	std::string domainId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1608; } /* = unique id SOAP_TYPE_cusdk__GetGBDomainPrivilegeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBDomainPrivilegeReq() { cusdk__GetGBDomainPrivilegeReq::soap_default(NULL); }
	virtual ~cusdk__GetGBDomainPrivilegeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDomainPrivilegeRsp
#define SOAP_TYPE_cusdk__GetGBDomainPrivilegeRsp (1609)
/* cusdk:GetGBDomainPrivilegeRsp */
class SOAP_CMAC cusdk__GetGBDomainPrivilegeRsp
{
public:
	std::string domainId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	bool priRecordPlay;	/* required element of type xsd:boolean */
	bool priRecordDownload;	/* required element of type xsd:boolean */
	bool priPTZ;	/* required element of type xsd:boolean */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1609; } /* = unique id SOAP_TYPE_cusdk__GetGBDomainPrivilegeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBDomainPrivilegeRsp() { cusdk__GetGBDomainPrivilegeRsp::soap_default(NULL); }
	virtual ~cusdk__GetGBDomainPrivilegeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBDomainPrivilege
#define SOAP_TYPE_cusdk__GetGBDomainPrivilege (1612)
/* cusdk:GetGBDomainPrivilege */
struct cusdk__GetGBDomainPrivilege
{
public:
	cusdk__GetGBDomainPrivilegeReq req;	/* required element of type cusdk:GetGBDomainPrivilegeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetGBDomainPrivilegeReq
#define SOAP_TYPE_cusdk__SetGBDomainPrivilegeReq (1613)
/* cusdk:SetGBDomainPrivilegeReq */
class SOAP_CMAC cusdk__SetGBDomainPrivilegeReq : public cusdk__BaseReq
{
public:
	std::string domainId;	/* required element of type xsd:string */
	bool priRecordPlay;	/* required element of type xsd:boolean */
	bool priRecordDownload;	/* required element of type xsd:boolean */
	bool priPTZ;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1613; } /* = unique id SOAP_TYPE_cusdk__SetGBDomainPrivilegeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetGBDomainPrivilegeReq() { cusdk__SetGBDomainPrivilegeReq::soap_default(NULL); }
	virtual ~cusdk__SetGBDomainPrivilegeReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetGBDomainPrivilegeRsp
#define SOAP_TYPE_cusdk__SetGBDomainPrivilegeRsp (1614)
/* cusdk:SetGBDomainPrivilegeRsp */
class SOAP_CMAC cusdk__SetGBDomainPrivilegeRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1614; } /* = unique id SOAP_TYPE_cusdk__SetGBDomainPrivilegeRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetGBDomainPrivilegeRsp() { cusdk__SetGBDomainPrivilegeRsp::soap_default(NULL); }
	virtual ~cusdk__SetGBDomainPrivilegeRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetGBDomainPrivilege
#define SOAP_TYPE_cusdk__SetGBDomainPrivilege (1617)
/* cusdk:SetGBDomainPrivilege */
struct cusdk__SetGBDomainPrivilege
{
public:
	cusdk__SetGBDomainPrivilegeReq req;	/* required element of type cusdk:SetGBDomainPrivilegeReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBConfigReq
#define SOAP_TYPE_cusdk__GetGBConfigReq (1618)
/* cusdk:GetGBConfigReq */
class SOAP_CMAC cusdk__GetGBConfigReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 1618; } /* = unique id SOAP_TYPE_cusdk__GetGBConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBConfigReq() { cusdk__GetGBConfigReq::soap_default(NULL); }
	virtual ~cusdk__GetGBConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBConfigRsp
#define SOAP_TYPE_cusdk__GetGBConfigRsp (1619)
/* cusdk:GetGBConfigRsp */
class SOAP_CMAC cusdk__GetGBConfigRsp
{
public:
	bool syncLatitudeAndLongitudeFromDevice;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1619; } /* = unique id SOAP_TYPE_cusdk__GetGBConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetGBConfigRsp() { cusdk__GetGBConfigRsp::soap_default(NULL); }
	virtual ~cusdk__GetGBConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetGBConfig
#define SOAP_TYPE_cusdk__GetGBConfig (1622)
/* cusdk:GetGBConfig */
struct cusdk__GetGBConfig
{
public:
	cusdk__GetGBConfigReq req;	/* required element of type cusdk:GetGBConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetGBConfigReq
#define SOAP_TYPE_cusdk__SetGBConfigReq (1623)
/* cusdk:SetGBConfigReq */
class SOAP_CMAC cusdk__SetGBConfigReq : public cusdk__BaseReq
{
public:
	bool syncLatitudeAndLongitudeFromDevice;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1623; } /* = unique id SOAP_TYPE_cusdk__SetGBConfigReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetGBConfigReq() { cusdk__SetGBConfigReq::soap_default(NULL); }
	virtual ~cusdk__SetGBConfigReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetGBConfigRsp
#define SOAP_TYPE_cusdk__SetGBConfigRsp (1624)
/* cusdk:SetGBConfigRsp */
class SOAP_CMAC cusdk__SetGBConfigRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1624; } /* = unique id SOAP_TYPE_cusdk__SetGBConfigRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetGBConfigRsp() { cusdk__SetGBConfigRsp::soap_default(NULL); }
	virtual ~cusdk__SetGBConfigRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetGBConfig
#define SOAP_TYPE_cusdk__SetGBConfig (1627)
/* cusdk:SetGBConfig */
struct cusdk__SetGBConfig
{
public:
	cusdk__SetGBConfigReq req;	/* required element of type cusdk:SetGBConfigReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetCertificateReq
#define SOAP_TYPE_cusdk__SetCertificateReq (1628)
/* cusdk:SetCertificateReq */
class SOAP_CMAC cusdk__SetCertificateReq : public cusdk__BaseReq
{
public:
	int type;	/* required element of type xsd:int */
	std::string ownerid;	/* required element of type xsd:string */
	std::string validField;	/* required element of type xsd:string */
	std::string cert4sign;	/* required element of type xsd:string */
	std::string cert4encry;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1628; } /* = unique id SOAP_TYPE_cusdk__SetCertificateReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetCertificateReq() { cusdk__SetCertificateReq::soap_default(NULL); }
	virtual ~cusdk__SetCertificateReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetCertificateRsp
#define SOAP_TYPE_cusdk__SetCertificateRsp (1629)
/* cusdk:SetCertificateRsp */
class SOAP_CMAC cusdk__SetCertificateRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1629; } /* = unique id SOAP_TYPE_cusdk__SetCertificateRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetCertificateRsp() { cusdk__SetCertificateRsp::soap_default(NULL); }
	virtual ~cusdk__SetCertificateRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetCertificate
#define SOAP_TYPE_cusdk__SetCertificate (1632)
/* cusdk:SetCertificate */
struct cusdk__SetCertificate
{
public:
	cusdk__SetCertificateReq req;	/* required element of type cusdk:SetCertificateReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCertificateReq
#define SOAP_TYPE_cusdk__GetCertificateReq (1633)
/* cusdk:GetCertificateReq */
class SOAP_CMAC cusdk__GetCertificateReq : public cusdk__BaseReq
{
public:
	std::string ownerid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1633; } /* = unique id SOAP_TYPE_cusdk__GetCertificateReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCertificateReq() { cusdk__GetCertificateReq::soap_default(NULL); }
	virtual ~cusdk__GetCertificateReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCertificateRsp
#define SOAP_TYPE_cusdk__GetCertificateRsp (1634)
/* cusdk:GetCertificateRsp */
class SOAP_CMAC cusdk__GetCertificateRsp
{
public:
	int type;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string ownerid;	/* required element of type xsd:string */
	std::string validField;	/* required element of type xsd:string */
	std::string cert4sign;	/* required element of type xsd:string */
	std::string cert4encry;	/* required element of type xsd:string */
	std::string session;	/* required element of type xsd:string */
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1634; } /* = unique id SOAP_TYPE_cusdk__GetCertificateRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCertificateRsp() { cusdk__GetCertificateRsp::soap_default(NULL); }
	virtual ~cusdk__GetCertificateRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCertificate
#define SOAP_TYPE_cusdk__GetCertificate (1637)
/* cusdk:GetCertificate */
struct cusdk__GetCertificate
{
public:
	cusdk__GetCertificateReq req;	/* required element of type cusdk:GetCertificateReq */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (1638)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (1639)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (1641)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (1644)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (1645)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (10)
typedef std::string xsd__string;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (11)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (12)
typedef std::string xsd__dateTime;
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (14)
typedef float xsd__float;
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (15)
typedef int xsd__int;
#endif

#ifndef SOAP_TYPE_time_duration
#define SOAP_TYPE_time_duration (16)
typedef int time_duration;
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (18)
typedef bool xsd__boolean;
#endif

#ifndef SOAP_TYPE_xsd__positiveInteger
#define SOAP_TYPE_xsd__positiveInteger (23)
typedef ULONG64 xsd__positiveInteger;
#endif

#ifndef SOAP_TYPE_cusdk__PuVidSrcOSDList
#define SOAP_TYPE_cusdk__PuVidSrcOSDList (991)
typedef std::vector<cusdk__PuVidSrcOSDItem >cusdk__PuVidSrcOSDList;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
