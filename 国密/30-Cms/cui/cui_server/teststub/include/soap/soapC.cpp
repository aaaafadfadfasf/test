/* soapC.cpp
   Generated by gSOAP 2.8.0 from cusdk.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.0 2012-02-24 07:57:31 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_cusdk__AssignAlarminputChn:
		return soap_in_cusdk__AssignAlarminputChn(soap, NULL, NULL, "cusdk:AssignAlarminputChn");
	case SOAP_TYPE_time_duration:
		return soap_in_time_duration(soap, NULL, NULL, "time-duration");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_in_xsd__positiveInteger(soap, NULL, NULL, "xsd:positiveInteger");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_cusdk__EAudioFormat:
		return soap_in_cusdk__EAudioFormat(soap, NULL, NULL, "cusdk:EAudioFormat");
	case SOAP_TYPE_cusdk__EUserOrUserGroup:
		return soap_in_cusdk__EUserOrUserGroup(soap, NULL, NULL, "cusdk:EUserOrUserGroup");
	case SOAP_TYPE_cusdk__EVideoSolution:
		return soap_in_cusdk__EVideoSolution(soap, NULL, NULL, "cusdk:EVideoSolution");
	case SOAP_TYPE_cusdk__EVideoFormat:
		return soap_in_cusdk__EVideoFormat(soap, NULL, NULL, "cusdk:EVideoFormat");
	case SOAP_TYPE_cusdk__EPtzCmd:
		return soap_in_cusdk__EPtzCmd(soap, NULL, NULL, "cusdk:EPtzCmd");
	case SOAP_TYPE_cusdk__EPuSubscribeType:
		return soap_in_cusdk__EPuSubscribeType(soap, NULL, NULL, "cusdk:EPuSubscribeType");
	case SOAP_TYPE_cusdk__EDeviceType:
		return soap_in_cusdk__EDeviceType(soap, NULL, NULL, "cusdk:EDeviceType");
	case SOAP_TYPE_cusdk__EDevicePri:
		return soap_in_cusdk__EDevicePri(soap, NULL, NULL, "cusdk:EDevicePri");
	case SOAP_TYPE_cusdk__EUserPri:
		return soap_in_cusdk__EUserPri(soap, NULL, NULL, "cusdk:EUserPri");
	case SOAP_TYPE_cusdk__EUserType:
		return soap_in_cusdk__EUserType(soap, NULL, NULL, "cusdk:EUserType");
	case SOAP_TYPE_cusdk__ETransMode:
		return soap_in_cusdk__ETransMode(soap, NULL, NULL, "cusdk:ETransMode");
	case SOAP_TYPE_cusdk__EPlayMode:
		return soap_in_cusdk__EPlayMode(soap, NULL, NULL, "cusdk:EPlayMode");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp:
		return soap_in_cusdk__GetDeviceBaseInfoRsp(soap, NULL, NULL, "cusdk:GetDeviceBaseInfoRsp");
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoReq:
		return soap_in_cusdk__GetDeviceBaseInfoReq(soap, NULL, NULL, "cusdk:GetDeviceBaseInfoReq");
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp:
		return soap_in_cusdk__ModifyAuthorizationDeviceRsp(soap, NULL, NULL, "cusdk:ModifyAuthorizationDeviceRsp");
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq:
		return soap_in_cusdk__ModifyAuthorizationDeviceReq(soap, NULL, NULL, "cusdk:ModifyAuthorizationDeviceReq");
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp:
		return soap_in_cusdk__DelAuthorizationDeviceRsp(soap, NULL, NULL, "cusdk:DelAuthorizationDeviceRsp");
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceReq:
		return soap_in_cusdk__DelAuthorizationDeviceReq(soap, NULL, NULL, "cusdk:DelAuthorizationDeviceReq");
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp:
		return soap_in_cusdk__AddAuthorizationDeviceRsp(soap, NULL, NULL, "cusdk:AddAuthorizationDeviceRsp");
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceReq:
		return soap_in_cusdk__AddAuthorizationDeviceReq(soap, NULL, NULL, "cusdk:AddAuthorizationDeviceReq");
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp:
		return soap_in_cusdk__GetAuthorizationDeviceRsp(soap, NULL, NULL, "cusdk:GetAuthorizationDeviceRsp");
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceReq:
		return soap_in_cusdk__GetAuthorizationDeviceReq(soap, NULL, NULL, "cusdk:GetAuthorizationDeviceReq");
	case SOAP_TYPE_cusdk__UserModifyDeviceRsp:
		return soap_in_cusdk__UserModifyDeviceRsp(soap, NULL, NULL, "cusdk:UserModifyDeviceRsp");
	case SOAP_TYPE_cusdk__UserModifyDeviceReq:
		return soap_in_cusdk__UserModifyDeviceReq(soap, NULL, NULL, "cusdk:UserModifyDeviceReq");
	case SOAP_TYPE_cusdk__UserDelDeviceRsp:
		return soap_in_cusdk__UserDelDeviceRsp(soap, NULL, NULL, "cusdk:UserDelDeviceRsp");
	case SOAP_TYPE_cusdk__UserDelDeviceReq:
		return soap_in_cusdk__UserDelDeviceReq(soap, NULL, NULL, "cusdk:UserDelDeviceReq");
	case SOAP_TYPE_cusdk__UserAddDeviceRsp:
		return soap_in_cusdk__UserAddDeviceRsp(soap, NULL, NULL, "cusdk:UserAddDeviceRsp");
	case SOAP_TYPE_cusdk__UserAddDeviceReq:
		return soap_in_cusdk__UserAddDeviceReq(soap, NULL, NULL, "cusdk:UserAddDeviceReq");
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp:
		return soap_in_cusdk__UserGetDeviceByGroupRsp(soap, NULL, NULL, "cusdk:UserGetDeviceByGroupRsp");
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupReq:
		return soap_in_cusdk__UserGetDeviceByGroupReq(soap, NULL, NULL, "cusdk:UserGetDeviceByGroupReq");
	case SOAP_TYPE_cusdk__ModifyUserRsp:
		return soap_in_cusdk__ModifyUserRsp(soap, NULL, NULL, "cusdk:ModifyUserRsp");
	case SOAP_TYPE_cusdk__ModifyUserReq:
		return soap_in_cusdk__ModifyUserReq(soap, NULL, NULL, "cusdk:ModifyUserReq");
	case SOAP_TYPE_cusdk__DelUserRsp:
		return soap_in_cusdk__DelUserRsp(soap, NULL, NULL, "cusdk:DelUserRsp");
	case SOAP_TYPE_cusdk__DelUserReq:
		return soap_in_cusdk__DelUserReq(soap, NULL, NULL, "cusdk:DelUserReq");
	case SOAP_TYPE_cusdk__CreateUserRsp:
		return soap_in_cusdk__CreateUserRsp(soap, NULL, NULL, "cusdk:CreateUserRsp");
	case SOAP_TYPE_cusdk__CreateUserReq:
		return soap_in_cusdk__CreateUserReq(soap, NULL, NULL, "cusdk:CreateUserReq");
	case SOAP_TYPE_cusdk__ModifyUserGroupRsp:
		return soap_in_cusdk__ModifyUserGroupRsp(soap, NULL, NULL, "cusdk:ModifyUserGroupRsp");
	case SOAP_TYPE_cusdk__ModifyUserGroupReq:
		return soap_in_cusdk__ModifyUserGroupReq(soap, NULL, NULL, "cusdk:ModifyUserGroupReq");
	case SOAP_TYPE_cusdk__DelUserGroupRsp:
		return soap_in_cusdk__DelUserGroupRsp(soap, NULL, NULL, "cusdk:DelUserGroupRsp");
	case SOAP_TYPE_cusdk__DelUserGroupReq:
		return soap_in_cusdk__DelUserGroupReq(soap, NULL, NULL, "cusdk:DelUserGroupReq");
	case SOAP_TYPE_cusdk__CreateUserGroupRsp:
		return soap_in_cusdk__CreateUserGroupRsp(soap, NULL, NULL, "cusdk:CreateUserGroupRsp");
	case SOAP_TYPE_cusdk__CreateUserGroupReq:
		return soap_in_cusdk__CreateUserGroupReq(soap, NULL, NULL, "cusdk:CreateUserGroupReq");
	case SOAP_TYPE_cusdk__GetUserGroupListRsp:
		return soap_in_cusdk__GetUserGroupListRsp(soap, NULL, NULL, "cusdk:GetUserGroupListRsp");
	case SOAP_TYPE_cusdk__GetUserGroupListReq:
		return soap_in_cusdk__GetUserGroupListReq(soap, NULL, NULL, "cusdk:GetUserGroupListReq");
	case SOAP_TYPE_cusdk__GetUserListRsp:
		return soap_in_cusdk__GetUserListRsp(soap, NULL, NULL, "cusdk:GetUserListRsp");
	case SOAP_TYPE_cusdk__GetUserListReq:
		return soap_in_cusdk__GetUserListReq(soap, NULL, NULL, "cusdk:GetUserListReq");
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp:
		return soap_in_cusdk__DeviceGroupDelDeviceRsp(soap, NULL, NULL, "cusdk:DeviceGroupDelDeviceRsp");
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq:
		return soap_in_cusdk__DeviceGroupDelDeviceReq(soap, NULL, NULL, "cusdk:DeviceGroupDelDeviceReq");
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp:
		return soap_in_cusdk__DeviceGroupAddDeviceRsp(soap, NULL, NULL, "cusdk:DeviceGroupAddDeviceRsp");
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq:
		return soap_in_cusdk__DeviceGroupAddDeviceReq(soap, NULL, NULL, "cusdk:DeviceGroupAddDeviceReq");
	case SOAP_TYPE_cusdk__ModifyDeviceGroupRsp:
		return soap_in_cusdk__ModifyDeviceGroupRsp(soap, NULL, NULL, "cusdk:ModifyDeviceGroupRsp");
	case SOAP_TYPE_cusdk__ModifyDeviceGroupReq:
		return soap_in_cusdk__ModifyDeviceGroupReq(soap, NULL, NULL, "cusdk:ModifyDeviceGroupReq");
	case SOAP_TYPE_cusdk__DelDeviceGroupRsp:
		return soap_in_cusdk__DelDeviceGroupRsp(soap, NULL, NULL, "cusdk:DelDeviceGroupRsp");
	case SOAP_TYPE_cusdk__DelDeviceGroupReq:
		return soap_in_cusdk__DelDeviceGroupReq(soap, NULL, NULL, "cusdk:DelDeviceGroupReq");
	case SOAP_TYPE_cusdk__CreateDeviceGroupRsp:
		return soap_in_cusdk__CreateDeviceGroupRsp(soap, NULL, NULL, "cusdk:CreateDeviceGroupRsp");
	case SOAP_TYPE_cusdk__CreateDeviceGroupReq:
		return soap_in_cusdk__CreateDeviceGroupReq(soap, NULL, NULL, "cusdk:CreateDeviceGroupReq");
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp:
		return soap_in_cusdk__GetDeviceGroupDeviceRelationsRsp(soap, NULL, NULL, "cusdk:GetDeviceGroupDeviceRelationsRsp");
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq:
		return soap_in_cusdk__GetDeviceGroupDeviceRelationsReq(soap, NULL, NULL, "cusdk:GetDeviceGroupDeviceRelationsReq");
	case SOAP_TYPE_cusdk__GetDevByDomainRsp:
		return soap_in_cusdk__GetDevByDomainRsp(soap, NULL, NULL, "cusdk:GetDevByDomainRsp");
	case SOAP_TYPE_cusdk__GetDevByDomainReq:
		return soap_in_cusdk__GetDevByDomainReq(soap, NULL, NULL, "cusdk:GetDevByDomainReq");
	case SOAP_TYPE_cusdk__GetUserDevRsp:
		return soap_in_cusdk__GetUserDevRsp(soap, NULL, NULL, "cusdk:GetUserDevRsp");
	case SOAP_TYPE_cusdk__GetUserDevReq:
		return soap_in_cusdk__GetUserDevReq(soap, NULL, NULL, "cusdk:GetUserDevReq");
	case SOAP_TYPE_cusdk__GetDomainDevGroupRsp:
		return soap_in_cusdk__GetDomainDevGroupRsp(soap, NULL, NULL, "cusdk:GetDomainDevGroupRsp");
	case SOAP_TYPE_cusdk__GetDomainDevGroupReq:
		return soap_in_cusdk__GetDomainDevGroupReq(soap, NULL, NULL, "cusdk:GetDomainDevGroupReq");
	case SOAP_TYPE_cusdk__GetUserDevGroupRsp:
		return soap_in_cusdk__GetUserDevGroupRsp(soap, NULL, NULL, "cusdk:GetUserDevGroupRsp");
	case SOAP_TYPE_cusdk__GetUserDevGroupReq:
		return soap_in_cusdk__GetUserDevGroupReq(soap, NULL, NULL, "cusdk:GetUserDevGroupReq");
	case SOAP_TYPE_cusdk__GetUserDevByGroupRsp:
		return soap_in_cusdk__GetUserDevByGroupRsp(soap, NULL, NULL, "cusdk:GetUserDevByGroupRsp");
	case SOAP_TYPE_cusdk__GetUserDevByGroupReq:
		return soap_in_cusdk__GetUserDevByGroupReq(soap, NULL, NULL, "cusdk:GetUserDevByGroupReq");
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp:
		return soap_in_cusdk__GetUserDevGroupByGroupRsp(soap, NULL, NULL, "cusdk:GetUserDevGroupByGroupRsp");
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq:
		return soap_in_cusdk__GetUserDevGroupByGroupReq(soap, NULL, NULL, "cusdk:GetUserDevGroupByGroupReq");
	case SOAP_TYPE_cusdk__SetUserDataRsp:
		return soap_in_cusdk__SetUserDataRsp(soap, NULL, NULL, "cusdk:SetUserDataRsp");
	case SOAP_TYPE_cusdk__SetUserDataReq:
		return soap_in_cusdk__SetUserDataReq(soap, NULL, NULL, "cusdk:SetUserDataReq");
	case SOAP_TYPE_cusdk__GetUserDataRsp:
		return soap_in_cusdk__GetUserDataRsp(soap, NULL, NULL, "cusdk:GetUserDataRsp");
	case SOAP_TYPE_cusdk__GetUserDataReq:
		return soap_in_cusdk__GetUserDataReq(soap, NULL, NULL, "cusdk:GetUserDataReq");
	case SOAP_TYPE_cusdk__GetUserGroupInfoRsp:
		return soap_in_cusdk__GetUserGroupInfoRsp(soap, NULL, NULL, "cusdk:GetUserGroupInfoRsp");
	case SOAP_TYPE_cusdk__GetUserGroupInfoReq:
		return soap_in_cusdk__GetUserGroupInfoReq(soap, NULL, NULL, "cusdk:GetUserGroupInfoReq");
	case SOAP_TYPE_cusdk__GetUserInfoRsp:
		return soap_in_cusdk__GetUserInfoRsp(soap, NULL, NULL, "cusdk:GetUserInfoRsp");
	case SOAP_TYPE_cusdk__GetUserInfoReq:
		return soap_in_cusdk__GetUserInfoReq(soap, NULL, NULL, "cusdk:GetUserInfoReq");
	case SOAP_TYPE_cusdk__SendTransDataRsp:
		return soap_in_cusdk__SendTransDataRsp(soap, NULL, NULL, "cusdk:SendTransDataRsp");
	case SOAP_TYPE_cusdk__SendTransDataReq:
		return soap_in_cusdk__SendTransDataReq(soap, NULL, NULL, "cusdk:SendTransDataReq");
	case SOAP_TYPE_cusdk__PtzUnlockRsp:
		return soap_in_cusdk__PtzUnlockRsp(soap, NULL, NULL, "cusdk:PtzUnlockRsp");
	case SOAP_TYPE_cusdk__PtzUnlockReq:
		return soap_in_cusdk__PtzUnlockReq(soap, NULL, NULL, "cusdk:PtzUnlockReq");
	case SOAP_TYPE_cusdk__PtzLockRsp:
		return soap_in_cusdk__PtzLockRsp(soap, NULL, NULL, "cusdk:PtzLockRsp");
	case SOAP_TYPE_cusdk__PtzLockReq:
		return soap_in_cusdk__PtzLockReq(soap, NULL, NULL, "cusdk:PtzLockReq");
	case SOAP_TYPE_cusdk__PtzCtrlRsp:
		return soap_in_cusdk__PtzCtrlRsp(soap, NULL, NULL, "cusdk:PtzCtrlRsp");
	case SOAP_TYPE_cusdk__PtzCtrlReq:
		return soap_in_cusdk__PtzCtrlReq(soap, NULL, NULL, "cusdk:PtzCtrlReq");
	case SOAP_TYPE_cusdk__StopStreamRsp:
		return soap_in_cusdk__StopStreamRsp(soap, NULL, NULL, "cusdk:StopStreamRsp");
	case SOAP_TYPE_cusdk__StopStreamReq:
		return soap_in_cusdk__StopStreamReq(soap, NULL, NULL, "cusdk:StopStreamReq");
	case SOAP_TYPE_cusdk__PlayStreamRsp:
		return soap_in_cusdk__PlayStreamRsp(soap, NULL, NULL, "cusdk:PlayStreamRsp");
	case SOAP_TYPE_cusdk__PlayStreamReq:
		return soap_in_cusdk__PlayStreamReq(soap, NULL, NULL, "cusdk:PlayStreamReq");
	case SOAP_TYPE_cusdk__SetupStreamRsp:
		return soap_in_cusdk__SetupStreamRsp(soap, NULL, NULL, "cusdk:SetupStreamRsp");
	case SOAP_TYPE_cusdk__SetupStreamReq:
		return soap_in_cusdk__SetupStreamReq(soap, NULL, NULL, "cusdk:SetupStreamReq");
	case SOAP_TYPE_cusdk__GetCUIListRsp:
		return soap_in_cusdk__GetCUIListRsp(soap, NULL, NULL, "cusdk:GetCUIListRsp");
	case SOAP_TYPE_cusdk__GetCUIListReq:
		return soap_in_cusdk__GetCUIListReq(soap, NULL, NULL, "cusdk:GetCUIListReq");
	case SOAP_TYPE_cusdk__GetNotifyRsp:
		return soap_in_cusdk__GetNotifyRsp(soap, NULL, NULL, "cusdk:GetNotifyRsp");
	case SOAP_TYPE_cusdk__GetNotifyReq:
		return soap_in_cusdk__GetNotifyReq(soap, NULL, NULL, "cusdk:GetNotifyReq");
	case SOAP_TYPE_cusdk__DeviceFullInfo:
		return soap_in_cusdk__DeviceFullInfo(soap, NULL, NULL, "cusdk:DeviceFullInfo");
	case SOAP_TYPE_cusdk__UnsubscribePuStatusRsp:
		return soap_in_cusdk__UnsubscribePuStatusRsp(soap, NULL, NULL, "cusdk:UnsubscribePuStatusRsp");
	case SOAP_TYPE_cusdk__UnsubscribePuStatusReq:
		return soap_in_cusdk__UnsubscribePuStatusReq(soap, NULL, NULL, "cusdk:UnsubscribePuStatusReq");
	case SOAP_TYPE_cusdk__SubscribePuStatusRsp:
		return soap_in_cusdk__SubscribePuStatusRsp(soap, NULL, NULL, "cusdk:SubscribePuStatusRsp");
	case SOAP_TYPE_cusdk__SubscribePuStatusReq:
		return soap_in_cusdk__SubscribePuStatusReq(soap, NULL, NULL, "cusdk:SubscribePuStatusReq");
	case SOAP_TYPE_cusdk__PuStatusSubscription:
		return soap_in_cusdk__PuStatusSubscription(soap, NULL, NULL, "cusdk:PuStatusSubscription");
	case SOAP_TYPE_cusdk__LogoutRsp:
		return soap_in_cusdk__LogoutRsp(soap, NULL, NULL, "cusdk:LogoutRsp");
	case SOAP_TYPE_cusdk__LogoutReq:
		return soap_in_cusdk__LogoutReq(soap, NULL, NULL, "cusdk:LogoutReq");
	case SOAP_TYPE_cusdk__LoginRsp:
		return soap_in_cusdk__LoginRsp(soap, NULL, NULL, "cusdk:LoginRsp");
	case SOAP_TYPE_cusdk__LoginReq:
		return soap_in_cusdk__LoginReq(soap, NULL, NULL, "cusdk:LoginReq");
	case SOAP_TYPE_cusdk__STUNServerInfo:
		return soap_in_cusdk__STUNServerInfo(soap, NULL, NULL, "cusdk:STUNServerInfo");
	case SOAP_TYPE_cusdk__BaseRsp:
		return soap_in_cusdk__BaseRsp(soap, NULL, NULL, "cusdk:BaseRsp");
	case SOAP_TYPE_cusdk__BaseReq:
		return soap_in_cusdk__BaseReq(soap, NULL, NULL, "cusdk:BaseReq");
	case SOAP_TYPE_cusdk__OrderMediaFormat:
		return soap_in_cusdk__OrderMediaFormat(soap, NULL, NULL, "cusdk:OrderMediaFormat");
	case SOAP_TYPE_cusdk__MediaNetInfo:
		return soap_in_cusdk__MediaNetInfo(soap, NULL, NULL, "cusdk:MediaNetInfo");
	case SOAP_TYPE_cusdk__NatInfo:
		return soap_in_cusdk__NatInfo(soap, NULL, NULL, "cusdk:NatInfo");
	case SOAP_TYPE_cusdk__NetworkAddr:
		return soap_in_cusdk__NetworkAddr(soap, NULL, NULL, "cusdk:NetworkAddr");
	case SOAP_TYPE_cusdk__DevAlarmNotify:
		return soap_in_cusdk__DevAlarmNotify(soap, NULL, NULL, "cusdk:DevAlarmNotify");
	case SOAP_TYPE_cusdk__AlarmChannelToAlarmData:
		return soap_in_cusdk__AlarmChannelToAlarmData(soap, NULL, NULL, "cusdk:AlarmChannelToAlarmData");
	case SOAP_TYPE_cusdk__DevAlarmData:
		return soap_in_cusdk__DevAlarmData(soap, NULL, NULL, "cusdk:DevAlarmData");
	case SOAP_TYPE_cusdk__DevServiceStatusNotify:
		return soap_in_cusdk__DevServiceStatusNotify(soap, NULL, NULL, "cusdk:DevServiceStatusNotify");
	case SOAP_TYPE_cusdk__DecoderStatusStr:
		return soap_in_cusdk__DecoderStatusStr(soap, NULL, NULL, "cusdk:DecoderStatusStr");
	case SOAP_TYPE_cusdk__EncoderStatusStr:
		return soap_in_cusdk__EncoderStatusStr(soap, NULL, NULL, "cusdk:EncoderStatusStr");
	case SOAP_TYPE_cusdk__EncoderStatusInt:
		return soap_in_cusdk__EncoderStatusInt(soap, NULL, NULL, "cusdk:EncoderStatusInt");
	case SOAP_TYPE_cusdk__AudDecoderToCuChn:
		return soap_in_cusdk__AudDecoderToCuChn(soap, NULL, NULL, "cusdk:AudDecoderToCuChn");
	case SOAP_TYPE_cusdk__VidDecoderToPuChn:
		return soap_in_cusdk__VidDecoderToPuChn(soap, NULL, NULL, "cusdk:VidDecoderToPuChn");
	case SOAP_TYPE_cusdk__DevConfigNotify:
		return soap_in_cusdk__DevConfigNotify(soap, NULL, NULL, "cusdk:DevConfigNotify");
	case SOAP_TYPE_cusdk__EncoderBitrate:
		return soap_in_cusdk__EncoderBitrate(soap, NULL, NULL, "cusdk:EncoderBitrate");
	case SOAP_TYPE_cusdk__VideoSrcCamID:
		return soap_in_cusdk__VideoSrcCamID(soap, NULL, NULL, "cusdk:VideoSrcCamID");
	case SOAP_TYPE_cusdk__VideoSrcCamType:
		return soap_in_cusdk__VideoSrcCamType(soap, NULL, NULL, "cusdk:VideoSrcCamType");
	case SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet:
		return soap_in_cusdk__EncoderAvailableVidSrcSet(soap, NULL, NULL, "cusdk:EncoderAvailableVidSrcSet");
	case SOAP_TYPE_cusdk__VideoSrcEncoderSet:
		return soap_in_cusdk__VideoSrcEncoderSet(soap, NULL, NULL, "cusdk:VideoSrcEncoderSet");
	case SOAP_TYPE_cusdk__ChannelVidDynValue:
		return soap_in_cusdk__ChannelVidDynValue(soap, NULL, NULL, "cusdk:ChannelVidDynValue");
	case SOAP_TYPE_cusdk__ChannelVideoFormat:
		return soap_in_cusdk__ChannelVideoFormat(soap, NULL, NULL, "cusdk:ChannelVideoFormat");
	case SOAP_TYPE_cusdk__InputPinEnable:
		return soap_in_cusdk__InputPinEnable(soap, NULL, NULL, "cusdk:InputPinEnable");
	case SOAP_TYPE_cusdk__PuExtCap:
		return soap_in_cusdk__PuExtCap(soap, NULL, NULL, "cusdk:PuExtCap");
	case SOAP_TYPE_cusdk__PuBaseCapSet:
		return soap_in_cusdk__PuBaseCapSet(soap, NULL, NULL, "cusdk:PuBaseCapSet");
	case SOAP_TYPE_cusdk__DevOnlineNotify:
		return soap_in_cusdk__DevOnlineNotify(soap, NULL, NULL, "cusdk:DevOnlineNotify");
	case SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify:
		return soap_in_cusdk__VideoSrcAliasChangeNotify(soap, NULL, NULL, "cusdk:VideoSrcAliasChangeNotify");
	case SOAP_TYPE_cusdk__AuthorizationDeviceInfo:
		return soap_in_cusdk__AuthorizationDeviceInfo(soap, NULL, NULL, "cusdk:AuthorizationDeviceInfo");
	case SOAP_TYPE_cusdk__AssignDeviceInfo:
		return soap_in_cusdk__AssignDeviceInfo(soap, NULL, NULL, "cusdk:AssignDeviceInfo");
	case SOAP_TYPE_cusdk__AssignVideoSrc:
		return soap_in_cusdk__AssignVideoSrc(soap, NULL, NULL, "cusdk:AssignVideoSrc");
	case SOAP_TYPE_cusdk__DeviceGroupRelation:
		return soap_in_cusdk__DeviceGroupRelation(soap, NULL, NULL, "cusdk:DeviceGroupRelation");
	case SOAP_TYPE_cusdk__DeviceInfo:
		return soap_in_cusdk__DeviceInfo(soap, NULL, NULL, "cusdk:DeviceInfo");
	case SOAP_TYPE_cusdk__AlarmInputChn:
		return soap_in_cusdk__AlarmInputChn(soap, NULL, NULL, "cusdk:AlarmInputChn");
	case SOAP_TYPE_cusdk__VideoSrc:
		return soap_in_cusdk__VideoSrc(soap, NULL, NULL, "cusdk:VideoSrc");
	case SOAP_TYPE_cusdk__DevChannel:
		return soap_in_cusdk__DevChannel(soap, NULL, NULL, "cusdk:DevChannel");
	case SOAP_TYPE_cusdk__EncoderChn:
		return soap_in_cusdk__EncoderChn(soap, NULL, NULL, "cusdk:EncoderChn");
	case SOAP_TYPE_cusdk__DeviceGroup:
		return soap_in_cusdk__DeviceGroup(soap, NULL, NULL, "cusdk:DeviceGroup");
	case SOAP_TYPE_cusdk__UserInfo:
		return soap_in_cusdk__UserInfo(soap, NULL, NULL, "cusdk:UserInfo");
	case SOAP_TYPE_cusdk__UserGroup:
		return soap_in_cusdk__UserGroup(soap, NULL, NULL, "cusdk:UserGroup");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_cusdk__GetDeviceBaseInfo:
		return soap_in_cusdk__GetDeviceBaseInfo(soap, NULL, NULL, "cusdk:GetDeviceBaseInfo");
	case SOAP_TYPE_cusdk__ModifyAuthorizationDevice:
		return soap_in_cusdk__ModifyAuthorizationDevice(soap, NULL, NULL, "cusdk:ModifyAuthorizationDevice");
	case SOAP_TYPE_cusdk__DelAuthorizationDevice:
		return soap_in_cusdk__DelAuthorizationDevice(soap, NULL, NULL, "cusdk:DelAuthorizationDevice");
	case SOAP_TYPE_cusdk__AddAuthorizationDevice:
		return soap_in_cusdk__AddAuthorizationDevice(soap, NULL, NULL, "cusdk:AddAuthorizationDevice");
	case SOAP_TYPE_cusdk__GetAuthorizationDevice:
		return soap_in_cusdk__GetAuthorizationDevice(soap, NULL, NULL, "cusdk:GetAuthorizationDevice");
	case SOAP_TYPE_cusdk__UserModifyDevice:
		return soap_in_cusdk__UserModifyDevice(soap, NULL, NULL, "cusdk:UserModifyDevice");
	case SOAP_TYPE_cusdk__UserDelDevice:
		return soap_in_cusdk__UserDelDevice(soap, NULL, NULL, "cusdk:UserDelDevice");
	case SOAP_TYPE_cusdk__UserAddDevice:
		return soap_in_cusdk__UserAddDevice(soap, NULL, NULL, "cusdk:UserAddDevice");
	case SOAP_TYPE_cusdk__UserGetDeviceByGroup:
		return soap_in_cusdk__UserGetDeviceByGroup(soap, NULL, NULL, "cusdk:UserGetDeviceByGroup");
	case SOAP_TYPE_cusdk__ModifyUser:
		return soap_in_cusdk__ModifyUser(soap, NULL, NULL, "cusdk:ModifyUser");
	case SOAP_TYPE_cusdk__DelUser:
		return soap_in_cusdk__DelUser(soap, NULL, NULL, "cusdk:DelUser");
	case SOAP_TYPE_cusdk__CreateUser:
		return soap_in_cusdk__CreateUser(soap, NULL, NULL, "cusdk:CreateUser");
	case SOAP_TYPE_cusdk__ModifyUserGroup:
		return soap_in_cusdk__ModifyUserGroup(soap, NULL, NULL, "cusdk:ModifyUserGroup");
	case SOAP_TYPE_cusdk__DelUserGroup:
		return soap_in_cusdk__DelUserGroup(soap, NULL, NULL, "cusdk:DelUserGroup");
	case SOAP_TYPE_cusdk__CreateUserGroup:
		return soap_in_cusdk__CreateUserGroup(soap, NULL, NULL, "cusdk:CreateUserGroup");
	case SOAP_TYPE_cusdk__GetUserGroupList:
		return soap_in_cusdk__GetUserGroupList(soap, NULL, NULL, "cusdk:GetUserGroupList");
	case SOAP_TYPE_cusdk__GetUserList:
		return soap_in_cusdk__GetUserList(soap, NULL, NULL, "cusdk:GetUserList");
	case SOAP_TYPE_cusdk__DeviceGroupDelDevice:
		return soap_in_cusdk__DeviceGroupDelDevice(soap, NULL, NULL, "cusdk:DeviceGroupDelDevice");
	case SOAP_TYPE_cusdk__DeviceGroupAddDevice:
		return soap_in_cusdk__DeviceGroupAddDevice(soap, NULL, NULL, "cusdk:DeviceGroupAddDevice");
	case SOAP_TYPE_cusdk__ModifyDeviceGroup:
		return soap_in_cusdk__ModifyDeviceGroup(soap, NULL, NULL, "cusdk:ModifyDeviceGroup");
	case SOAP_TYPE_cusdk__DelDeviceGroup:
		return soap_in_cusdk__DelDeviceGroup(soap, NULL, NULL, "cusdk:DelDeviceGroup");
	case SOAP_TYPE_cusdk__CreateDeviceGroup:
		return soap_in_cusdk__CreateDeviceGroup(soap, NULL, NULL, "cusdk:CreateDeviceGroup");
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations:
		return soap_in_cusdk__GetDeviceGroupDeviceRelations(soap, NULL, NULL, "cusdk:GetDeviceGroupDeviceRelations");
	case SOAP_TYPE_cusdk__GetUserDevByDomain:
		return soap_in_cusdk__GetUserDevByDomain(soap, NULL, NULL, "cusdk:GetUserDevByDomain");
	case SOAP_TYPE_cusdk__GetUserDev:
		return soap_in_cusdk__GetUserDev(soap, NULL, NULL, "cusdk:GetUserDev");
	case SOAP_TYPE_cusdk__GetDomainDevGroup:
		return soap_in_cusdk__GetDomainDevGroup(soap, NULL, NULL, "cusdk:GetDomainDevGroup");
	case SOAP_TYPE_cusdk__GetUserDevGroup:
		return soap_in_cusdk__GetUserDevGroup(soap, NULL, NULL, "cusdk:GetUserDevGroup");
	case SOAP_TYPE_cusdk__GetUserDevByGroup:
		return soap_in_cusdk__GetUserDevByGroup(soap, NULL, NULL, "cusdk:GetUserDevByGroup");
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroup:
		return soap_in_cusdk__GetUserDevGroupByGroup(soap, NULL, NULL, "cusdk:GetUserDevGroupByGroup");
	case SOAP_TYPE_cusdk__SetUserData:
		return soap_in_cusdk__SetUserData(soap, NULL, NULL, "cusdk:SetUserData");
	case SOAP_TYPE_cusdk__GetUserData:
		return soap_in_cusdk__GetUserData(soap, NULL, NULL, "cusdk:GetUserData");
	case SOAP_TYPE_cusdk__GetUserGroupInfo:
		return soap_in_cusdk__GetUserGroupInfo(soap, NULL, NULL, "cusdk:GetUserGroupInfo");
	case SOAP_TYPE_cusdk__GetUserInfo:
		return soap_in_cusdk__GetUserInfo(soap, NULL, NULL, "cusdk:GetUserInfo");
	case SOAP_TYPE_cusdk__SendTransData:
		return soap_in_cusdk__SendTransData(soap, NULL, NULL, "cusdk:SendTransData");
	case SOAP_TYPE_cusdk__PtzUnlock:
		return soap_in_cusdk__PtzUnlock(soap, NULL, NULL, "cusdk:PtzUnlock");
	case SOAP_TYPE_cusdk__PtzLock:
		return soap_in_cusdk__PtzLock(soap, NULL, NULL, "cusdk:PtzLock");
	case SOAP_TYPE_cusdk__PtzCtrl:
		return soap_in_cusdk__PtzCtrl(soap, NULL, NULL, "cusdk:PtzCtrl");
	case SOAP_TYPE_cusdk__StopStream:
		return soap_in_cusdk__StopStream(soap, NULL, NULL, "cusdk:StopStream");
	case SOAP_TYPE_cusdk__PlayStream:
		return soap_in_cusdk__PlayStream(soap, NULL, NULL, "cusdk:PlayStream");
	case SOAP_TYPE_cusdk__SetupStream:
		return soap_in_cusdk__SetupStream(soap, NULL, NULL, "cusdk:SetupStream");
	case SOAP_TYPE_cusdk__GetCUIList:
		return soap_in_cusdk__GetCUIList(soap, NULL, NULL, "cusdk:GetCUIList");
	case SOAP_TYPE_cusdk__GetNotify:
		return soap_in_cusdk__GetNotify(soap, NULL, NULL, "cusdk:GetNotify");
	case SOAP_TYPE_cusdk__UnsubscribePuStatus:
		return soap_in_cusdk__UnsubscribePuStatus(soap, NULL, NULL, "cusdk:UnsubscribePuStatus");
	case SOAP_TYPE_cusdk__SubscribePuStatus:
		return soap_in_cusdk__SubscribePuStatus(soap, NULL, NULL, "cusdk:SubscribePuStatus");
	case SOAP_TYPE_cusdk__logout:
		return soap_in_cusdk__logout(soap, NULL, NULL, "cusdk:logout");
	case SOAP_TYPE_cusdk__login:
		return soap_in_cusdk__login(soap, NULL, NULL, "cusdk:login");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "cusdk:GetDeviceBaseInfoRsp"))
		{	*type = SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp;
			return soap_in_cusdk__GetDeviceBaseInfoRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDeviceBaseInfoReq"))
		{	*type = SOAP_TYPE_cusdk__GetDeviceBaseInfoReq;
			return soap_in_cusdk__GetDeviceBaseInfoReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyAuthorizationDeviceRsp"))
		{	*type = SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp;
			return soap_in_cusdk__ModifyAuthorizationDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyAuthorizationDeviceReq"))
		{	*type = SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq;
			return soap_in_cusdk__ModifyAuthorizationDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelAuthorizationDeviceRsp"))
		{	*type = SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp;
			return soap_in_cusdk__DelAuthorizationDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelAuthorizationDeviceReq"))
		{	*type = SOAP_TYPE_cusdk__DelAuthorizationDeviceReq;
			return soap_in_cusdk__DelAuthorizationDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AddAuthorizationDeviceRsp"))
		{	*type = SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp;
			return soap_in_cusdk__AddAuthorizationDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AddAuthorizationDeviceReq"))
		{	*type = SOAP_TYPE_cusdk__AddAuthorizationDeviceReq;
			return soap_in_cusdk__AddAuthorizationDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetAuthorizationDeviceRsp"))
		{	*type = SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp;
			return soap_in_cusdk__GetAuthorizationDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetAuthorizationDeviceReq"))
		{	*type = SOAP_TYPE_cusdk__GetAuthorizationDeviceReq;
			return soap_in_cusdk__GetAuthorizationDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserModifyDeviceRsp"))
		{	*type = SOAP_TYPE_cusdk__UserModifyDeviceRsp;
			return soap_in_cusdk__UserModifyDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserModifyDeviceReq"))
		{	*type = SOAP_TYPE_cusdk__UserModifyDeviceReq;
			return soap_in_cusdk__UserModifyDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserDelDeviceRsp"))
		{	*type = SOAP_TYPE_cusdk__UserDelDeviceRsp;
			return soap_in_cusdk__UserDelDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserDelDeviceReq"))
		{	*type = SOAP_TYPE_cusdk__UserDelDeviceReq;
			return soap_in_cusdk__UserDelDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserAddDeviceRsp"))
		{	*type = SOAP_TYPE_cusdk__UserAddDeviceRsp;
			return soap_in_cusdk__UserAddDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserAddDeviceReq"))
		{	*type = SOAP_TYPE_cusdk__UserAddDeviceReq;
			return soap_in_cusdk__UserAddDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserGetDeviceByGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp;
			return soap_in_cusdk__UserGetDeviceByGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserGetDeviceByGroupReq"))
		{	*type = SOAP_TYPE_cusdk__UserGetDeviceByGroupReq;
			return soap_in_cusdk__UserGetDeviceByGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyUserRsp"))
		{	*type = SOAP_TYPE_cusdk__ModifyUserRsp;
			return soap_in_cusdk__ModifyUserRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyUserReq"))
		{	*type = SOAP_TYPE_cusdk__ModifyUserReq;
			return soap_in_cusdk__ModifyUserReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelUserRsp"))
		{	*type = SOAP_TYPE_cusdk__DelUserRsp;
			return soap_in_cusdk__DelUserRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelUserReq"))
		{	*type = SOAP_TYPE_cusdk__DelUserReq;
			return soap_in_cusdk__DelUserReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:CreateUserRsp"))
		{	*type = SOAP_TYPE_cusdk__CreateUserRsp;
			return soap_in_cusdk__CreateUserRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:CreateUserReq"))
		{	*type = SOAP_TYPE_cusdk__CreateUserReq;
			return soap_in_cusdk__CreateUserReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyUserGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__ModifyUserGroupRsp;
			return soap_in_cusdk__ModifyUserGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyUserGroupReq"))
		{	*type = SOAP_TYPE_cusdk__ModifyUserGroupReq;
			return soap_in_cusdk__ModifyUserGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelUserGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__DelUserGroupRsp;
			return soap_in_cusdk__DelUserGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelUserGroupReq"))
		{	*type = SOAP_TYPE_cusdk__DelUserGroupReq;
			return soap_in_cusdk__DelUserGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:CreateUserGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__CreateUserGroupRsp;
			return soap_in_cusdk__CreateUserGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:CreateUserGroupReq"))
		{	*type = SOAP_TYPE_cusdk__CreateUserGroupReq;
			return soap_in_cusdk__CreateUserGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserGroupListRsp"))
		{	*type = SOAP_TYPE_cusdk__GetUserGroupListRsp;
			return soap_in_cusdk__GetUserGroupListRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserGroupListReq"))
		{	*type = SOAP_TYPE_cusdk__GetUserGroupListReq;
			return soap_in_cusdk__GetUserGroupListReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserListRsp"))
		{	*type = SOAP_TYPE_cusdk__GetUserListRsp;
			return soap_in_cusdk__GetUserListRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserListReq"))
		{	*type = SOAP_TYPE_cusdk__GetUserListReq;
			return soap_in_cusdk__GetUserListReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceGroupDelDeviceRsp"))
		{	*type = SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp;
			return soap_in_cusdk__DeviceGroupDelDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceGroupDelDeviceReq"))
		{	*type = SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq;
			return soap_in_cusdk__DeviceGroupDelDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceGroupAddDeviceRsp"))
		{	*type = SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp;
			return soap_in_cusdk__DeviceGroupAddDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceGroupAddDeviceReq"))
		{	*type = SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq;
			return soap_in_cusdk__DeviceGroupAddDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyDeviceGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__ModifyDeviceGroupRsp;
			return soap_in_cusdk__ModifyDeviceGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyDeviceGroupReq"))
		{	*type = SOAP_TYPE_cusdk__ModifyDeviceGroupReq;
			return soap_in_cusdk__ModifyDeviceGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelDeviceGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__DelDeviceGroupRsp;
			return soap_in_cusdk__DelDeviceGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelDeviceGroupReq"))
		{	*type = SOAP_TYPE_cusdk__DelDeviceGroupReq;
			return soap_in_cusdk__DelDeviceGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:CreateDeviceGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__CreateDeviceGroupRsp;
			return soap_in_cusdk__CreateDeviceGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:CreateDeviceGroupReq"))
		{	*type = SOAP_TYPE_cusdk__CreateDeviceGroupReq;
			return soap_in_cusdk__CreateDeviceGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDeviceGroupDeviceRelationsRsp"))
		{	*type = SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp;
			return soap_in_cusdk__GetDeviceGroupDeviceRelationsRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDeviceGroupDeviceRelationsReq"))
		{	*type = SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq;
			return soap_in_cusdk__GetDeviceGroupDeviceRelationsReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDevByDomainRsp"))
		{	*type = SOAP_TYPE_cusdk__GetDevByDomainRsp;
			return soap_in_cusdk__GetDevByDomainRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDevByDomainReq"))
		{	*type = SOAP_TYPE_cusdk__GetDevByDomainReq;
			return soap_in_cusdk__GetDevByDomainReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevRsp"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevRsp;
			return soap_in_cusdk__GetUserDevRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevReq"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevReq;
			return soap_in_cusdk__GetUserDevReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDomainDevGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__GetDomainDevGroupRsp;
			return soap_in_cusdk__GetDomainDevGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDomainDevGroupReq"))
		{	*type = SOAP_TYPE_cusdk__GetDomainDevGroupReq;
			return soap_in_cusdk__GetDomainDevGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevGroupRsp;
			return soap_in_cusdk__GetUserDevGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevGroupReq"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevGroupReq;
			return soap_in_cusdk__GetUserDevGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevByGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevByGroupRsp;
			return soap_in_cusdk__GetUserDevByGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevByGroupReq"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevByGroupReq;
			return soap_in_cusdk__GetUserDevByGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevGroupByGroupRsp"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp;
			return soap_in_cusdk__GetUserDevGroupByGroupRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevGroupByGroupReq"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq;
			return soap_in_cusdk__GetUserDevGroupByGroupReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SetUserDataRsp"))
		{	*type = SOAP_TYPE_cusdk__SetUserDataRsp;
			return soap_in_cusdk__SetUserDataRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SetUserDataReq"))
		{	*type = SOAP_TYPE_cusdk__SetUserDataReq;
			return soap_in_cusdk__SetUserDataReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDataRsp"))
		{	*type = SOAP_TYPE_cusdk__GetUserDataRsp;
			return soap_in_cusdk__GetUserDataRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDataReq"))
		{	*type = SOAP_TYPE_cusdk__GetUserDataReq;
			return soap_in_cusdk__GetUserDataReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserGroupInfoRsp"))
		{	*type = SOAP_TYPE_cusdk__GetUserGroupInfoRsp;
			return soap_in_cusdk__GetUserGroupInfoRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserGroupInfoReq"))
		{	*type = SOAP_TYPE_cusdk__GetUserGroupInfoReq;
			return soap_in_cusdk__GetUserGroupInfoReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserInfoRsp"))
		{	*type = SOAP_TYPE_cusdk__GetUserInfoRsp;
			return soap_in_cusdk__GetUserInfoRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserInfoReq"))
		{	*type = SOAP_TYPE_cusdk__GetUserInfoReq;
			return soap_in_cusdk__GetUserInfoReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SendTransDataRsp"))
		{	*type = SOAP_TYPE_cusdk__SendTransDataRsp;
			return soap_in_cusdk__SendTransDataRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SendTransDataReq"))
		{	*type = SOAP_TYPE_cusdk__SendTransDataReq;
			return soap_in_cusdk__SendTransDataReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PtzUnlockRsp"))
		{	*type = SOAP_TYPE_cusdk__PtzUnlockRsp;
			return soap_in_cusdk__PtzUnlockRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PtzUnlockReq"))
		{	*type = SOAP_TYPE_cusdk__PtzUnlockReq;
			return soap_in_cusdk__PtzUnlockReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PtzLockRsp"))
		{	*type = SOAP_TYPE_cusdk__PtzLockRsp;
			return soap_in_cusdk__PtzLockRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PtzLockReq"))
		{	*type = SOAP_TYPE_cusdk__PtzLockReq;
			return soap_in_cusdk__PtzLockReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PtzCtrlRsp"))
		{	*type = SOAP_TYPE_cusdk__PtzCtrlRsp;
			return soap_in_cusdk__PtzCtrlRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PtzCtrlReq"))
		{	*type = SOAP_TYPE_cusdk__PtzCtrlReq;
			return soap_in_cusdk__PtzCtrlReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:StopStreamRsp"))
		{	*type = SOAP_TYPE_cusdk__StopStreamRsp;
			return soap_in_cusdk__StopStreamRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:StopStreamReq"))
		{	*type = SOAP_TYPE_cusdk__StopStreamReq;
			return soap_in_cusdk__StopStreamReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PlayStreamRsp"))
		{	*type = SOAP_TYPE_cusdk__PlayStreamRsp;
			return soap_in_cusdk__PlayStreamRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PlayStreamReq"))
		{	*type = SOAP_TYPE_cusdk__PlayStreamReq;
			return soap_in_cusdk__PlayStreamReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SetupStreamRsp"))
		{	*type = SOAP_TYPE_cusdk__SetupStreamRsp;
			return soap_in_cusdk__SetupStreamRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SetupStreamReq"))
		{	*type = SOAP_TYPE_cusdk__SetupStreamReq;
			return soap_in_cusdk__SetupStreamReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetCUIListRsp"))
		{	*type = SOAP_TYPE_cusdk__GetCUIListRsp;
			return soap_in_cusdk__GetCUIListRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetCUIListReq"))
		{	*type = SOAP_TYPE_cusdk__GetCUIListReq;
			return soap_in_cusdk__GetCUIListReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetNotifyRsp"))
		{	*type = SOAP_TYPE_cusdk__GetNotifyRsp;
			return soap_in_cusdk__GetNotifyRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetNotifyReq"))
		{	*type = SOAP_TYPE_cusdk__GetNotifyReq;
			return soap_in_cusdk__GetNotifyReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceFullInfo"))
		{	*type = SOAP_TYPE_cusdk__DeviceFullInfo;
			return soap_in_cusdk__DeviceFullInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UnsubscribePuStatusRsp"))
		{	*type = SOAP_TYPE_cusdk__UnsubscribePuStatusRsp;
			return soap_in_cusdk__UnsubscribePuStatusRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UnsubscribePuStatusReq"))
		{	*type = SOAP_TYPE_cusdk__UnsubscribePuStatusReq;
			return soap_in_cusdk__UnsubscribePuStatusReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SubscribePuStatusRsp"))
		{	*type = SOAP_TYPE_cusdk__SubscribePuStatusRsp;
			return soap_in_cusdk__SubscribePuStatusRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SubscribePuStatusReq"))
		{	*type = SOAP_TYPE_cusdk__SubscribePuStatusReq;
			return soap_in_cusdk__SubscribePuStatusReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PuStatusSubscription"))
		{	*type = SOAP_TYPE_cusdk__PuStatusSubscription;
			return soap_in_cusdk__PuStatusSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:LogoutRsp"))
		{	*type = SOAP_TYPE_cusdk__LogoutRsp;
			return soap_in_cusdk__LogoutRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:LogoutReq"))
		{	*type = SOAP_TYPE_cusdk__LogoutReq;
			return soap_in_cusdk__LogoutReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:LoginRsp"))
		{	*type = SOAP_TYPE_cusdk__LoginRsp;
			return soap_in_cusdk__LoginRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:LoginReq"))
		{	*type = SOAP_TYPE_cusdk__LoginReq;
			return soap_in_cusdk__LoginReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:STUNServerInfo"))
		{	*type = SOAP_TYPE_cusdk__STUNServerInfo;
			return soap_in_cusdk__STUNServerInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:BaseRsp"))
		{	*type = SOAP_TYPE_cusdk__BaseRsp;
			return soap_in_cusdk__BaseRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:BaseReq"))
		{	*type = SOAP_TYPE_cusdk__BaseReq;
			return soap_in_cusdk__BaseReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:OrderMediaFormat"))
		{	*type = SOAP_TYPE_cusdk__OrderMediaFormat;
			return soap_in_cusdk__OrderMediaFormat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:MediaNetInfo"))
		{	*type = SOAP_TYPE_cusdk__MediaNetInfo;
			return soap_in_cusdk__MediaNetInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:NatInfo"))
		{	*type = SOAP_TYPE_cusdk__NatInfo;
			return soap_in_cusdk__NatInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:NetworkAddr"))
		{	*type = SOAP_TYPE_cusdk__NetworkAddr;
			return soap_in_cusdk__NetworkAddr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DevAlarmNotify"))
		{	*type = SOAP_TYPE_cusdk__DevAlarmNotify;
			return soap_in_cusdk__DevAlarmNotify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AlarmChannelToAlarmData"))
		{	*type = SOAP_TYPE_cusdk__AlarmChannelToAlarmData;
			return soap_in_cusdk__AlarmChannelToAlarmData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DevAlarmData"))
		{	*type = SOAP_TYPE_cusdk__DevAlarmData;
			return soap_in_cusdk__DevAlarmData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DevServiceStatusNotify"))
		{	*type = SOAP_TYPE_cusdk__DevServiceStatusNotify;
			return soap_in_cusdk__DevServiceStatusNotify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DecoderStatusStr"))
		{	*type = SOAP_TYPE_cusdk__DecoderStatusStr;
			return soap_in_cusdk__DecoderStatusStr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EncoderStatusStr"))
		{	*type = SOAP_TYPE_cusdk__EncoderStatusStr;
			return soap_in_cusdk__EncoderStatusStr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EncoderStatusInt"))
		{	*type = SOAP_TYPE_cusdk__EncoderStatusInt;
			return soap_in_cusdk__EncoderStatusInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AudDecoderToCuChn"))
		{	*type = SOAP_TYPE_cusdk__AudDecoderToCuChn;
			return soap_in_cusdk__AudDecoderToCuChn(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:VidDecoderToPuChn"))
		{	*type = SOAP_TYPE_cusdk__VidDecoderToPuChn;
			return soap_in_cusdk__VidDecoderToPuChn(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DevConfigNotify"))
		{	*type = SOAP_TYPE_cusdk__DevConfigNotify;
			return soap_in_cusdk__DevConfigNotify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EncoderBitrate"))
		{	*type = SOAP_TYPE_cusdk__EncoderBitrate;
			return soap_in_cusdk__EncoderBitrate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:VideoSrcCamID"))
		{	*type = SOAP_TYPE_cusdk__VideoSrcCamID;
			return soap_in_cusdk__VideoSrcCamID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:VideoSrcCamType"))
		{	*type = SOAP_TYPE_cusdk__VideoSrcCamType;
			return soap_in_cusdk__VideoSrcCamType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EncoderAvailableVidSrcSet"))
		{	*type = SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet;
			return soap_in_cusdk__EncoderAvailableVidSrcSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:VideoSrcEncoderSet"))
		{	*type = SOAP_TYPE_cusdk__VideoSrcEncoderSet;
			return soap_in_cusdk__VideoSrcEncoderSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ChannelVidDynValue"))
		{	*type = SOAP_TYPE_cusdk__ChannelVidDynValue;
			return soap_in_cusdk__ChannelVidDynValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ChannelVideoFormat"))
		{	*type = SOAP_TYPE_cusdk__ChannelVideoFormat;
			return soap_in_cusdk__ChannelVideoFormat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:InputPinEnable"))
		{	*type = SOAP_TYPE_cusdk__InputPinEnable;
			return soap_in_cusdk__InputPinEnable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PuExtCap"))
		{	*type = SOAP_TYPE_cusdk__PuExtCap;
			return soap_in_cusdk__PuExtCap(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PuBaseCapSet"))
		{	*type = SOAP_TYPE_cusdk__PuBaseCapSet;
			return soap_in_cusdk__PuBaseCapSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DevOnlineNotify"))
		{	*type = SOAP_TYPE_cusdk__DevOnlineNotify;
			return soap_in_cusdk__DevOnlineNotify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:VideoSrcAliasChangeNotify"))
		{	*type = SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify;
			return soap_in_cusdk__VideoSrcAliasChangeNotify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AuthorizationDeviceInfo"))
		{	*type = SOAP_TYPE_cusdk__AuthorizationDeviceInfo;
			return soap_in_cusdk__AuthorizationDeviceInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AssignDeviceInfo"))
		{	*type = SOAP_TYPE_cusdk__AssignDeviceInfo;
			return soap_in_cusdk__AssignDeviceInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AssignVideoSrc"))
		{	*type = SOAP_TYPE_cusdk__AssignVideoSrc;
			return soap_in_cusdk__AssignVideoSrc(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceGroupRelation"))
		{	*type = SOAP_TYPE_cusdk__DeviceGroupRelation;
			return soap_in_cusdk__DeviceGroupRelation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceInfo"))
		{	*type = SOAP_TYPE_cusdk__DeviceInfo;
			return soap_in_cusdk__DeviceInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AlarmInputChn"))
		{	*type = SOAP_TYPE_cusdk__AlarmInputChn;
			return soap_in_cusdk__AlarmInputChn(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:VideoSrc"))
		{	*type = SOAP_TYPE_cusdk__VideoSrc;
			return soap_in_cusdk__VideoSrc(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DevChannel"))
		{	*type = SOAP_TYPE_cusdk__DevChannel;
			return soap_in_cusdk__DevChannel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EncoderChn"))
		{	*type = SOAP_TYPE_cusdk__EncoderChn;
			return soap_in_cusdk__EncoderChn(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceGroup"))
		{	*type = SOAP_TYPE_cusdk__DeviceGroup;
			return soap_in_cusdk__DeviceGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserInfo"))
		{	*type = SOAP_TYPE_cusdk__UserInfo;
			return soap_in_cusdk__UserInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserGroup"))
		{	*type = SOAP_TYPE_cusdk__UserGroup;
			return soap_in_cusdk__UserGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AssignAlarminputChn"))
		{	*type = SOAP_TYPE_cusdk__AssignAlarminputChn;
			return soap_in_cusdk__AssignAlarminputChn(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "time-duration"))
		{	*type = SOAP_TYPE_time_duration;
			return soap_in_time_duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:positiveInteger"))
		{	*type = SOAP_TYPE_xsd__positiveInteger;
			return soap_in_xsd__positiveInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EAudioFormat"))
		{	*type = SOAP_TYPE_cusdk__EAudioFormat;
			return soap_in_cusdk__EAudioFormat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EUserOrUserGroup"))
		{	*type = SOAP_TYPE_cusdk__EUserOrUserGroup;
			return soap_in_cusdk__EUserOrUserGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EVideoSolution"))
		{	*type = SOAP_TYPE_cusdk__EVideoSolution;
			return soap_in_cusdk__EVideoSolution(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EVideoFormat"))
		{	*type = SOAP_TYPE_cusdk__EVideoFormat;
			return soap_in_cusdk__EVideoFormat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EPtzCmd"))
		{	*type = SOAP_TYPE_cusdk__EPtzCmd;
			return soap_in_cusdk__EPtzCmd(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EPuSubscribeType"))
		{	*type = SOAP_TYPE_cusdk__EPuSubscribeType;
			return soap_in_cusdk__EPuSubscribeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EDeviceType"))
		{	*type = SOAP_TYPE_cusdk__EDeviceType;
			return soap_in_cusdk__EDeviceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EDevicePri"))
		{	*type = SOAP_TYPE_cusdk__EDevicePri;
			return soap_in_cusdk__EDevicePri(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EUserPri"))
		{	*type = SOAP_TYPE_cusdk__EUserPri;
			return soap_in_cusdk__EUserPri(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EUserType"))
		{	*type = SOAP_TYPE_cusdk__EUserType;
			return soap_in_cusdk__EUserType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ETransMode"))
		{	*type = SOAP_TYPE_cusdk__ETransMode;
			return soap_in_cusdk__ETransMode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:EPlayMode"))
		{	*type = SOAP_TYPE_cusdk__EPlayMode;
			return soap_in_cusdk__EPlayMode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDeviceBaseInfo"))
		{	*type = SOAP_TYPE_cusdk__GetDeviceBaseInfo;
			return soap_in_cusdk__GetDeviceBaseInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyAuthorizationDevice"))
		{	*type = SOAP_TYPE_cusdk__ModifyAuthorizationDevice;
			return soap_in_cusdk__ModifyAuthorizationDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelAuthorizationDevice"))
		{	*type = SOAP_TYPE_cusdk__DelAuthorizationDevice;
			return soap_in_cusdk__DelAuthorizationDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:AddAuthorizationDevice"))
		{	*type = SOAP_TYPE_cusdk__AddAuthorizationDevice;
			return soap_in_cusdk__AddAuthorizationDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetAuthorizationDevice"))
		{	*type = SOAP_TYPE_cusdk__GetAuthorizationDevice;
			return soap_in_cusdk__GetAuthorizationDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserModifyDevice"))
		{	*type = SOAP_TYPE_cusdk__UserModifyDevice;
			return soap_in_cusdk__UserModifyDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserDelDevice"))
		{	*type = SOAP_TYPE_cusdk__UserDelDevice;
			return soap_in_cusdk__UserDelDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserAddDevice"))
		{	*type = SOAP_TYPE_cusdk__UserAddDevice;
			return soap_in_cusdk__UserAddDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UserGetDeviceByGroup"))
		{	*type = SOAP_TYPE_cusdk__UserGetDeviceByGroup;
			return soap_in_cusdk__UserGetDeviceByGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyUser"))
		{	*type = SOAP_TYPE_cusdk__ModifyUser;
			return soap_in_cusdk__ModifyUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelUser"))
		{	*type = SOAP_TYPE_cusdk__DelUser;
			return soap_in_cusdk__DelUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:CreateUser"))
		{	*type = SOAP_TYPE_cusdk__CreateUser;
			return soap_in_cusdk__CreateUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyUserGroup"))
		{	*type = SOAP_TYPE_cusdk__ModifyUserGroup;
			return soap_in_cusdk__ModifyUserGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelUserGroup"))
		{	*type = SOAP_TYPE_cusdk__DelUserGroup;
			return soap_in_cusdk__DelUserGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:CreateUserGroup"))
		{	*type = SOAP_TYPE_cusdk__CreateUserGroup;
			return soap_in_cusdk__CreateUserGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserGroupList"))
		{	*type = SOAP_TYPE_cusdk__GetUserGroupList;
			return soap_in_cusdk__GetUserGroupList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserList"))
		{	*type = SOAP_TYPE_cusdk__GetUserList;
			return soap_in_cusdk__GetUserList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceGroupDelDevice"))
		{	*type = SOAP_TYPE_cusdk__DeviceGroupDelDevice;
			return soap_in_cusdk__DeviceGroupDelDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DeviceGroupAddDevice"))
		{	*type = SOAP_TYPE_cusdk__DeviceGroupAddDevice;
			return soap_in_cusdk__DeviceGroupAddDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:ModifyDeviceGroup"))
		{	*type = SOAP_TYPE_cusdk__ModifyDeviceGroup;
			return soap_in_cusdk__ModifyDeviceGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:DelDeviceGroup"))
		{	*type = SOAP_TYPE_cusdk__DelDeviceGroup;
			return soap_in_cusdk__DelDeviceGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:CreateDeviceGroup"))
		{	*type = SOAP_TYPE_cusdk__CreateDeviceGroup;
			return soap_in_cusdk__CreateDeviceGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDeviceGroupDeviceRelations"))
		{	*type = SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations;
			return soap_in_cusdk__GetDeviceGroupDeviceRelations(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevByDomain"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevByDomain;
			return soap_in_cusdk__GetUserDevByDomain(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDev"))
		{	*type = SOAP_TYPE_cusdk__GetUserDev;
			return soap_in_cusdk__GetUserDev(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetDomainDevGroup"))
		{	*type = SOAP_TYPE_cusdk__GetDomainDevGroup;
			return soap_in_cusdk__GetDomainDevGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevGroup"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevGroup;
			return soap_in_cusdk__GetUserDevGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevByGroup"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevByGroup;
			return soap_in_cusdk__GetUserDevByGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserDevGroupByGroup"))
		{	*type = SOAP_TYPE_cusdk__GetUserDevGroupByGroup;
			return soap_in_cusdk__GetUserDevGroupByGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SetUserData"))
		{	*type = SOAP_TYPE_cusdk__SetUserData;
			return soap_in_cusdk__SetUserData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserData"))
		{	*type = SOAP_TYPE_cusdk__GetUserData;
			return soap_in_cusdk__GetUserData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserGroupInfo"))
		{	*type = SOAP_TYPE_cusdk__GetUserGroupInfo;
			return soap_in_cusdk__GetUserGroupInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetUserInfo"))
		{	*type = SOAP_TYPE_cusdk__GetUserInfo;
			return soap_in_cusdk__GetUserInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SendTransData"))
		{	*type = SOAP_TYPE_cusdk__SendTransData;
			return soap_in_cusdk__SendTransData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PtzUnlock"))
		{	*type = SOAP_TYPE_cusdk__PtzUnlock;
			return soap_in_cusdk__PtzUnlock(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PtzLock"))
		{	*type = SOAP_TYPE_cusdk__PtzLock;
			return soap_in_cusdk__PtzLock(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PtzCtrl"))
		{	*type = SOAP_TYPE_cusdk__PtzCtrl;
			return soap_in_cusdk__PtzCtrl(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:StopStream"))
		{	*type = SOAP_TYPE_cusdk__StopStream;
			return soap_in_cusdk__StopStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:PlayStream"))
		{	*type = SOAP_TYPE_cusdk__PlayStream;
			return soap_in_cusdk__PlayStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SetupStream"))
		{	*type = SOAP_TYPE_cusdk__SetupStream;
			return soap_in_cusdk__SetupStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetCUIList"))
		{	*type = SOAP_TYPE_cusdk__GetCUIList;
			return soap_in_cusdk__GetCUIList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:GetNotify"))
		{	*type = SOAP_TYPE_cusdk__GetNotify;
			return soap_in_cusdk__GetNotify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:UnsubscribePuStatus"))
		{	*type = SOAP_TYPE_cusdk__UnsubscribePuStatus;
			return soap_in_cusdk__UnsubscribePuStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:SubscribePuStatus"))
		{	*type = SOAP_TYPE_cusdk__SubscribePuStatus;
			return soap_in_cusdk__SubscribePuStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:logout"))
		{	*type = SOAP_TYPE_cusdk__logout;
			return soap_in_cusdk__logout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "cusdk:login"))
		{	*type = SOAP_TYPE_cusdk__login;
			return soap_in_cusdk__login(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_cusdk__AssignAlarminputChn:
		return soap_out_cusdk__AssignAlarminputChn(soap, tag, id, (const int *)ptr, "cusdk:AssignAlarminputChn");
	case SOAP_TYPE_time_duration:
		return soap_out_time_duration(soap, tag, id, (const int *)ptr, "time-duration");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_out_xsd__float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_out_xsd__positiveInteger(soap, tag, id, (const ULONG64 *)ptr, "xsd:positiveInteger");
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_cusdk__EAudioFormat:
		return soap_out_cusdk__EAudioFormat(soap, tag, id, (const enum cusdk__EAudioFormat *)ptr, "cusdk:EAudioFormat");
	case SOAP_TYPE_cusdk__EUserOrUserGroup:
		return soap_out_cusdk__EUserOrUserGroup(soap, tag, id, (const enum cusdk__EUserOrUserGroup *)ptr, "cusdk:EUserOrUserGroup");
	case SOAP_TYPE_cusdk__EVideoSolution:
		return soap_out_cusdk__EVideoSolution(soap, tag, id, (const enum cusdk__EVideoSolution *)ptr, "cusdk:EVideoSolution");
	case SOAP_TYPE_cusdk__EVideoFormat:
		return soap_out_cusdk__EVideoFormat(soap, tag, id, (const enum cusdk__EVideoFormat *)ptr, "cusdk:EVideoFormat");
	case SOAP_TYPE_cusdk__EPtzCmd:
		return soap_out_cusdk__EPtzCmd(soap, tag, id, (const enum cusdk__EPtzCmd *)ptr, "cusdk:EPtzCmd");
	case SOAP_TYPE_cusdk__EPuSubscribeType:
		return soap_out_cusdk__EPuSubscribeType(soap, tag, id, (const enum cusdk__EPuSubscribeType *)ptr, "cusdk:EPuSubscribeType");
	case SOAP_TYPE_cusdk__EDeviceType:
		return soap_out_cusdk__EDeviceType(soap, tag, id, (const enum cusdk__EDeviceType *)ptr, "cusdk:EDeviceType");
	case SOAP_TYPE_cusdk__EDevicePri:
		return soap_out_cusdk__EDevicePri(soap, tag, id, (const enum cusdk__EDevicePri *)ptr, "cusdk:EDevicePri");
	case SOAP_TYPE_cusdk__EUserPri:
		return soap_out_cusdk__EUserPri(soap, tag, id, (const enum cusdk__EUserPri *)ptr, "cusdk:EUserPri");
	case SOAP_TYPE_cusdk__EUserType:
		return soap_out_cusdk__EUserType(soap, tag, id, (const enum cusdk__EUserType *)ptr, "cusdk:EUserType");
	case SOAP_TYPE_cusdk__ETransMode:
		return soap_out_cusdk__ETransMode(soap, tag, id, (const enum cusdk__ETransMode *)ptr, "cusdk:ETransMode");
	case SOAP_TYPE_cusdk__EPlayMode:
		return soap_out_cusdk__EPlayMode(soap, tag, id, (const enum cusdk__EPlayMode *)ptr, "cusdk:EPlayMode");
	case SOAP_TYPE_xsd__boolean:
		return soap_out_xsd__boolean(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp:
		return ((cusdk__GetDeviceBaseInfoRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetDeviceBaseInfoRsp");
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoReq:
		return ((cusdk__GetDeviceBaseInfoReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetDeviceBaseInfoReq");
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp:
		return ((cusdk__ModifyAuthorizationDeviceRsp *)ptr)->soap_out(soap, tag, id, "cusdk:ModifyAuthorizationDeviceRsp");
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq:
		return ((cusdk__ModifyAuthorizationDeviceReq *)ptr)->soap_out(soap, tag, id, "cusdk:ModifyAuthorizationDeviceReq");
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp:
		return ((cusdk__DelAuthorizationDeviceRsp *)ptr)->soap_out(soap, tag, id, "cusdk:DelAuthorizationDeviceRsp");
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceReq:
		return ((cusdk__DelAuthorizationDeviceReq *)ptr)->soap_out(soap, tag, id, "cusdk:DelAuthorizationDeviceReq");
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp:
		return ((cusdk__AddAuthorizationDeviceRsp *)ptr)->soap_out(soap, tag, id, "cusdk:AddAuthorizationDeviceRsp");
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceReq:
		return ((cusdk__AddAuthorizationDeviceReq *)ptr)->soap_out(soap, tag, id, "cusdk:AddAuthorizationDeviceReq");
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp:
		return ((cusdk__GetAuthorizationDeviceRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetAuthorizationDeviceRsp");
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceReq:
		return ((cusdk__GetAuthorizationDeviceReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetAuthorizationDeviceReq");
	case SOAP_TYPE_cusdk__UserModifyDeviceRsp:
		return ((cusdk__UserModifyDeviceRsp *)ptr)->soap_out(soap, tag, id, "cusdk:UserModifyDeviceRsp");
	case SOAP_TYPE_cusdk__UserModifyDeviceReq:
		return ((cusdk__UserModifyDeviceReq *)ptr)->soap_out(soap, tag, id, "cusdk:UserModifyDeviceReq");
	case SOAP_TYPE_cusdk__UserDelDeviceRsp:
		return ((cusdk__UserDelDeviceRsp *)ptr)->soap_out(soap, tag, id, "cusdk:UserDelDeviceRsp");
	case SOAP_TYPE_cusdk__UserDelDeviceReq:
		return ((cusdk__UserDelDeviceReq *)ptr)->soap_out(soap, tag, id, "cusdk:UserDelDeviceReq");
	case SOAP_TYPE_cusdk__UserAddDeviceRsp:
		return ((cusdk__UserAddDeviceRsp *)ptr)->soap_out(soap, tag, id, "cusdk:UserAddDeviceRsp");
	case SOAP_TYPE_cusdk__UserAddDeviceReq:
		return ((cusdk__UserAddDeviceReq *)ptr)->soap_out(soap, tag, id, "cusdk:UserAddDeviceReq");
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp:
		return ((cusdk__UserGetDeviceByGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:UserGetDeviceByGroupRsp");
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupReq:
		return ((cusdk__UserGetDeviceByGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:UserGetDeviceByGroupReq");
	case SOAP_TYPE_cusdk__ModifyUserRsp:
		return ((cusdk__ModifyUserRsp *)ptr)->soap_out(soap, tag, id, "cusdk:ModifyUserRsp");
	case SOAP_TYPE_cusdk__ModifyUserReq:
		return ((cusdk__ModifyUserReq *)ptr)->soap_out(soap, tag, id, "cusdk:ModifyUserReq");
	case SOAP_TYPE_cusdk__DelUserRsp:
		return ((cusdk__DelUserRsp *)ptr)->soap_out(soap, tag, id, "cusdk:DelUserRsp");
	case SOAP_TYPE_cusdk__DelUserReq:
		return ((cusdk__DelUserReq *)ptr)->soap_out(soap, tag, id, "cusdk:DelUserReq");
	case SOAP_TYPE_cusdk__CreateUserRsp:
		return ((cusdk__CreateUserRsp *)ptr)->soap_out(soap, tag, id, "cusdk:CreateUserRsp");
	case SOAP_TYPE_cusdk__CreateUserReq:
		return ((cusdk__CreateUserReq *)ptr)->soap_out(soap, tag, id, "cusdk:CreateUserReq");
	case SOAP_TYPE_cusdk__ModifyUserGroupRsp:
		return ((cusdk__ModifyUserGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:ModifyUserGroupRsp");
	case SOAP_TYPE_cusdk__ModifyUserGroupReq:
		return ((cusdk__ModifyUserGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:ModifyUserGroupReq");
	case SOAP_TYPE_cusdk__DelUserGroupRsp:
		return ((cusdk__DelUserGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:DelUserGroupRsp");
	case SOAP_TYPE_cusdk__DelUserGroupReq:
		return ((cusdk__DelUserGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:DelUserGroupReq");
	case SOAP_TYPE_cusdk__CreateUserGroupRsp:
		return ((cusdk__CreateUserGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:CreateUserGroupRsp");
	case SOAP_TYPE_cusdk__CreateUserGroupReq:
		return ((cusdk__CreateUserGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:CreateUserGroupReq");
	case SOAP_TYPE_cusdk__GetUserGroupListRsp:
		return ((cusdk__GetUserGroupListRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserGroupListRsp");
	case SOAP_TYPE_cusdk__GetUserGroupListReq:
		return ((cusdk__GetUserGroupListReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserGroupListReq");
	case SOAP_TYPE_cusdk__GetUserListRsp:
		return ((cusdk__GetUserListRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserListRsp");
	case SOAP_TYPE_cusdk__GetUserListReq:
		return ((cusdk__GetUserListReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserListReq");
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp:
		return ((cusdk__DeviceGroupDelDeviceRsp *)ptr)->soap_out(soap, tag, id, "cusdk:DeviceGroupDelDeviceRsp");
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq:
		return ((cusdk__DeviceGroupDelDeviceReq *)ptr)->soap_out(soap, tag, id, "cusdk:DeviceGroupDelDeviceReq");
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp:
		return ((cusdk__DeviceGroupAddDeviceRsp *)ptr)->soap_out(soap, tag, id, "cusdk:DeviceGroupAddDeviceRsp");
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq:
		return ((cusdk__DeviceGroupAddDeviceReq *)ptr)->soap_out(soap, tag, id, "cusdk:DeviceGroupAddDeviceReq");
	case SOAP_TYPE_cusdk__ModifyDeviceGroupRsp:
		return ((cusdk__ModifyDeviceGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:ModifyDeviceGroupRsp");
	case SOAP_TYPE_cusdk__ModifyDeviceGroupReq:
		return ((cusdk__ModifyDeviceGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:ModifyDeviceGroupReq");
	case SOAP_TYPE_cusdk__DelDeviceGroupRsp:
		return ((cusdk__DelDeviceGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:DelDeviceGroupRsp");
	case SOAP_TYPE_cusdk__DelDeviceGroupReq:
		return ((cusdk__DelDeviceGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:DelDeviceGroupReq");
	case SOAP_TYPE_cusdk__CreateDeviceGroupRsp:
		return ((cusdk__CreateDeviceGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:CreateDeviceGroupRsp");
	case SOAP_TYPE_cusdk__CreateDeviceGroupReq:
		return ((cusdk__CreateDeviceGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:CreateDeviceGroupReq");
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp:
		return ((cusdk__GetDeviceGroupDeviceRelationsRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetDeviceGroupDeviceRelationsRsp");
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq:
		return ((cusdk__GetDeviceGroupDeviceRelationsReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetDeviceGroupDeviceRelationsReq");
	case SOAP_TYPE_cusdk__GetDevByDomainRsp:
		return ((cusdk__GetDevByDomainRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetDevByDomainRsp");
	case SOAP_TYPE_cusdk__GetDevByDomainReq:
		return ((cusdk__GetDevByDomainReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetDevByDomainReq");
	case SOAP_TYPE_cusdk__GetUserDevRsp:
		return ((cusdk__GetUserDevRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDevRsp");
	case SOAP_TYPE_cusdk__GetUserDevReq:
		return ((cusdk__GetUserDevReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDevReq");
	case SOAP_TYPE_cusdk__GetDomainDevGroupRsp:
		return ((cusdk__GetDomainDevGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetDomainDevGroupRsp");
	case SOAP_TYPE_cusdk__GetDomainDevGroupReq:
		return ((cusdk__GetDomainDevGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetDomainDevGroupReq");
	case SOAP_TYPE_cusdk__GetUserDevGroupRsp:
		return ((cusdk__GetUserDevGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDevGroupRsp");
	case SOAP_TYPE_cusdk__GetUserDevGroupReq:
		return ((cusdk__GetUserDevGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDevGroupReq");
	case SOAP_TYPE_cusdk__GetUserDevByGroupRsp:
		return ((cusdk__GetUserDevByGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDevByGroupRsp");
	case SOAP_TYPE_cusdk__GetUserDevByGroupReq:
		return ((cusdk__GetUserDevByGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDevByGroupReq");
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp:
		return ((cusdk__GetUserDevGroupByGroupRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDevGroupByGroupRsp");
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq:
		return ((cusdk__GetUserDevGroupByGroupReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDevGroupByGroupReq");
	case SOAP_TYPE_cusdk__SetUserDataRsp:
		return ((cusdk__SetUserDataRsp *)ptr)->soap_out(soap, tag, id, "cusdk:SetUserDataRsp");
	case SOAP_TYPE_cusdk__SetUserDataReq:
		return ((cusdk__SetUserDataReq *)ptr)->soap_out(soap, tag, id, "cusdk:SetUserDataReq");
	case SOAP_TYPE_cusdk__GetUserDataRsp:
		return ((cusdk__GetUserDataRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDataRsp");
	case SOAP_TYPE_cusdk__GetUserDataReq:
		return ((cusdk__GetUserDataReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserDataReq");
	case SOAP_TYPE_cusdk__GetUserGroupInfoRsp:
		return ((cusdk__GetUserGroupInfoRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserGroupInfoRsp");
	case SOAP_TYPE_cusdk__GetUserGroupInfoReq:
		return ((cusdk__GetUserGroupInfoReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserGroupInfoReq");
	case SOAP_TYPE_cusdk__GetUserInfoRsp:
		return ((cusdk__GetUserInfoRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserInfoRsp");
	case SOAP_TYPE_cusdk__GetUserInfoReq:
		return ((cusdk__GetUserInfoReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetUserInfoReq");
	case SOAP_TYPE_cusdk__SendTransDataRsp:
		return ((cusdk__SendTransDataRsp *)ptr)->soap_out(soap, tag, id, "cusdk:SendTransDataRsp");
	case SOAP_TYPE_cusdk__SendTransDataReq:
		return ((cusdk__SendTransDataReq *)ptr)->soap_out(soap, tag, id, "cusdk:SendTransDataReq");
	case SOAP_TYPE_cusdk__PtzUnlockRsp:
		return ((cusdk__PtzUnlockRsp *)ptr)->soap_out(soap, tag, id, "cusdk:PtzUnlockRsp");
	case SOAP_TYPE_cusdk__PtzUnlockReq:
		return ((cusdk__PtzUnlockReq *)ptr)->soap_out(soap, tag, id, "cusdk:PtzUnlockReq");
	case SOAP_TYPE_cusdk__PtzLockRsp:
		return ((cusdk__PtzLockRsp *)ptr)->soap_out(soap, tag, id, "cusdk:PtzLockRsp");
	case SOAP_TYPE_cusdk__PtzLockReq:
		return ((cusdk__PtzLockReq *)ptr)->soap_out(soap, tag, id, "cusdk:PtzLockReq");
	case SOAP_TYPE_cusdk__PtzCtrlRsp:
		return ((cusdk__PtzCtrlRsp *)ptr)->soap_out(soap, tag, id, "cusdk:PtzCtrlRsp");
	case SOAP_TYPE_cusdk__PtzCtrlReq:
		return ((cusdk__PtzCtrlReq *)ptr)->soap_out(soap, tag, id, "cusdk:PtzCtrlReq");
	case SOAP_TYPE_cusdk__StopStreamRsp:
		return ((cusdk__StopStreamRsp *)ptr)->soap_out(soap, tag, id, "cusdk:StopStreamRsp");
	case SOAP_TYPE_cusdk__StopStreamReq:
		return ((cusdk__StopStreamReq *)ptr)->soap_out(soap, tag, id, "cusdk:StopStreamReq");
	case SOAP_TYPE_cusdk__PlayStreamRsp:
		return ((cusdk__PlayStreamRsp *)ptr)->soap_out(soap, tag, id, "cusdk:PlayStreamRsp");
	case SOAP_TYPE_cusdk__PlayStreamReq:
		return ((cusdk__PlayStreamReq *)ptr)->soap_out(soap, tag, id, "cusdk:PlayStreamReq");
	case SOAP_TYPE_cusdk__SetupStreamRsp:
		return ((cusdk__SetupStreamRsp *)ptr)->soap_out(soap, tag, id, "cusdk:SetupStreamRsp");
	case SOAP_TYPE_cusdk__SetupStreamReq:
		return ((cusdk__SetupStreamReq *)ptr)->soap_out(soap, tag, id, "cusdk:SetupStreamReq");
	case SOAP_TYPE_cusdk__GetCUIListRsp:
		return ((cusdk__GetCUIListRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetCUIListRsp");
	case SOAP_TYPE_cusdk__GetCUIListReq:
		return ((cusdk__GetCUIListReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetCUIListReq");
	case SOAP_TYPE_cusdk__GetNotifyRsp:
		return ((cusdk__GetNotifyRsp *)ptr)->soap_out(soap, tag, id, "cusdk:GetNotifyRsp");
	case SOAP_TYPE_cusdk__GetNotifyReq:
		return ((cusdk__GetNotifyReq *)ptr)->soap_out(soap, tag, id, "cusdk:GetNotifyReq");
	case SOAP_TYPE_cusdk__DeviceFullInfo:
		return ((cusdk__DeviceFullInfo *)ptr)->soap_out(soap, tag, id, "cusdk:DeviceFullInfo");
	case SOAP_TYPE_cusdk__UnsubscribePuStatusRsp:
		return ((cusdk__UnsubscribePuStatusRsp *)ptr)->soap_out(soap, tag, id, "cusdk:UnsubscribePuStatusRsp");
	case SOAP_TYPE_cusdk__UnsubscribePuStatusReq:
		return ((cusdk__UnsubscribePuStatusReq *)ptr)->soap_out(soap, tag, id, "cusdk:UnsubscribePuStatusReq");
	case SOAP_TYPE_cusdk__SubscribePuStatusRsp:
		return ((cusdk__SubscribePuStatusRsp *)ptr)->soap_out(soap, tag, id, "cusdk:SubscribePuStatusRsp");
	case SOAP_TYPE_cusdk__SubscribePuStatusReq:
		return ((cusdk__SubscribePuStatusReq *)ptr)->soap_out(soap, tag, id, "cusdk:SubscribePuStatusReq");
	case SOAP_TYPE_cusdk__PuStatusSubscription:
		return ((cusdk__PuStatusSubscription *)ptr)->soap_out(soap, tag, id, "cusdk:PuStatusSubscription");
	case SOAP_TYPE_cusdk__LogoutRsp:
		return ((cusdk__LogoutRsp *)ptr)->soap_out(soap, tag, id, "cusdk:LogoutRsp");
	case SOAP_TYPE_cusdk__LogoutReq:
		return ((cusdk__LogoutReq *)ptr)->soap_out(soap, tag, id, "cusdk:LogoutReq");
	case SOAP_TYPE_cusdk__LoginRsp:
		return ((cusdk__LoginRsp *)ptr)->soap_out(soap, tag, id, "cusdk:LoginRsp");
	case SOAP_TYPE_cusdk__LoginReq:
		return ((cusdk__LoginReq *)ptr)->soap_out(soap, tag, id, "cusdk:LoginReq");
	case SOAP_TYPE_cusdk__STUNServerInfo:
		return ((cusdk__STUNServerInfo *)ptr)->soap_out(soap, tag, id, "cusdk:STUNServerInfo");
	case SOAP_TYPE_cusdk__BaseRsp:
		return ((cusdk__BaseRsp *)ptr)->soap_out(soap, tag, id, "cusdk:BaseRsp");
	case SOAP_TYPE_cusdk__BaseReq:
		return ((cusdk__BaseReq *)ptr)->soap_out(soap, tag, id, "cusdk:BaseReq");
	case SOAP_TYPE_cusdk__OrderMediaFormat:
		return ((cusdk__OrderMediaFormat *)ptr)->soap_out(soap, tag, id, "cusdk:OrderMediaFormat");
	case SOAP_TYPE_cusdk__MediaNetInfo:
		return ((cusdk__MediaNetInfo *)ptr)->soap_out(soap, tag, id, "cusdk:MediaNetInfo");
	case SOAP_TYPE_cusdk__NatInfo:
		return ((cusdk__NatInfo *)ptr)->soap_out(soap, tag, id, "cusdk:NatInfo");
	case SOAP_TYPE_cusdk__NetworkAddr:
		return ((cusdk__NetworkAddr *)ptr)->soap_out(soap, tag, id, "cusdk:NetworkAddr");
	case SOAP_TYPE_cusdk__DevAlarmNotify:
		return ((cusdk__DevAlarmNotify *)ptr)->soap_out(soap, tag, id, "cusdk:DevAlarmNotify");
	case SOAP_TYPE_cusdk__AlarmChannelToAlarmData:
		return ((cusdk__AlarmChannelToAlarmData *)ptr)->soap_out(soap, tag, id, "cusdk:AlarmChannelToAlarmData");
	case SOAP_TYPE_cusdk__DevAlarmData:
		return ((cusdk__DevAlarmData *)ptr)->soap_out(soap, tag, id, "cusdk:DevAlarmData");
	case SOAP_TYPE_cusdk__DevServiceStatusNotify:
		return ((cusdk__DevServiceStatusNotify *)ptr)->soap_out(soap, tag, id, "cusdk:DevServiceStatusNotify");
	case SOAP_TYPE_cusdk__DecoderStatusStr:
		return ((cusdk__DecoderStatusStr *)ptr)->soap_out(soap, tag, id, "cusdk:DecoderStatusStr");
	case SOAP_TYPE_cusdk__EncoderStatusStr:
		return ((cusdk__EncoderStatusStr *)ptr)->soap_out(soap, tag, id, "cusdk:EncoderStatusStr");
	case SOAP_TYPE_cusdk__EncoderStatusInt:
		return ((cusdk__EncoderStatusInt *)ptr)->soap_out(soap, tag, id, "cusdk:EncoderStatusInt");
	case SOAP_TYPE_cusdk__AudDecoderToCuChn:
		return ((cusdk__AudDecoderToCuChn *)ptr)->soap_out(soap, tag, id, "cusdk:AudDecoderToCuChn");
	case SOAP_TYPE_cusdk__VidDecoderToPuChn:
		return ((cusdk__VidDecoderToPuChn *)ptr)->soap_out(soap, tag, id, "cusdk:VidDecoderToPuChn");
	case SOAP_TYPE_cusdk__DevConfigNotify:
		return ((cusdk__DevConfigNotify *)ptr)->soap_out(soap, tag, id, "cusdk:DevConfigNotify");
	case SOAP_TYPE_cusdk__EncoderBitrate:
		return ((cusdk__EncoderBitrate *)ptr)->soap_out(soap, tag, id, "cusdk:EncoderBitrate");
	case SOAP_TYPE_cusdk__VideoSrcCamID:
		return ((cusdk__VideoSrcCamID *)ptr)->soap_out(soap, tag, id, "cusdk:VideoSrcCamID");
	case SOAP_TYPE_cusdk__VideoSrcCamType:
		return ((cusdk__VideoSrcCamType *)ptr)->soap_out(soap, tag, id, "cusdk:VideoSrcCamType");
	case SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet:
		return ((cusdk__EncoderAvailableVidSrcSet *)ptr)->soap_out(soap, tag, id, "cusdk:EncoderAvailableVidSrcSet");
	case SOAP_TYPE_cusdk__VideoSrcEncoderSet:
		return ((cusdk__VideoSrcEncoderSet *)ptr)->soap_out(soap, tag, id, "cusdk:VideoSrcEncoderSet");
	case SOAP_TYPE_cusdk__ChannelVidDynValue:
		return ((cusdk__ChannelVidDynValue *)ptr)->soap_out(soap, tag, id, "cusdk:ChannelVidDynValue");
	case SOAP_TYPE_cusdk__ChannelVideoFormat:
		return ((cusdk__ChannelVideoFormat *)ptr)->soap_out(soap, tag, id, "cusdk:ChannelVideoFormat");
	case SOAP_TYPE_cusdk__InputPinEnable:
		return ((cusdk__InputPinEnable *)ptr)->soap_out(soap, tag, id, "cusdk:InputPinEnable");
	case SOAP_TYPE_cusdk__PuExtCap:
		return ((cusdk__PuExtCap *)ptr)->soap_out(soap, tag, id, "cusdk:PuExtCap");
	case SOAP_TYPE_cusdk__PuBaseCapSet:
		return ((cusdk__PuBaseCapSet *)ptr)->soap_out(soap, tag, id, "cusdk:PuBaseCapSet");
	case SOAP_TYPE_cusdk__DevOnlineNotify:
		return ((cusdk__DevOnlineNotify *)ptr)->soap_out(soap, tag, id, "cusdk:DevOnlineNotify");
	case SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify:
		return ((cusdk__VideoSrcAliasChangeNotify *)ptr)->soap_out(soap, tag, id, "cusdk:VideoSrcAliasChangeNotify");
	case SOAP_TYPE_cusdk__AuthorizationDeviceInfo:
		return ((cusdk__AuthorizationDeviceInfo *)ptr)->soap_out(soap, tag, id, "cusdk:AuthorizationDeviceInfo");
	case SOAP_TYPE_cusdk__AssignDeviceInfo:
		return ((cusdk__AssignDeviceInfo *)ptr)->soap_out(soap, tag, id, "cusdk:AssignDeviceInfo");
	case SOAP_TYPE_cusdk__AssignVideoSrc:
		return ((cusdk__AssignVideoSrc *)ptr)->soap_out(soap, tag, id, "cusdk:AssignVideoSrc");
	case SOAP_TYPE_cusdk__DeviceGroupRelation:
		return ((cusdk__DeviceGroupRelation *)ptr)->soap_out(soap, tag, id, "cusdk:DeviceGroupRelation");
	case SOAP_TYPE_cusdk__DeviceInfo:
		return ((cusdk__DeviceInfo *)ptr)->soap_out(soap, tag, id, "cusdk:DeviceInfo");
	case SOAP_TYPE_cusdk__AlarmInputChn:
		return ((cusdk__AlarmInputChn *)ptr)->soap_out(soap, tag, id, "cusdk:AlarmInputChn");
	case SOAP_TYPE_cusdk__VideoSrc:
		return ((cusdk__VideoSrc *)ptr)->soap_out(soap, tag, id, "cusdk:VideoSrc");
	case SOAP_TYPE_cusdk__DevChannel:
		return ((cusdk__DevChannel *)ptr)->soap_out(soap, tag, id, "cusdk:DevChannel");
	case SOAP_TYPE_cusdk__EncoderChn:
		return ((cusdk__EncoderChn *)ptr)->soap_out(soap, tag, id, "cusdk:EncoderChn");
	case SOAP_TYPE_cusdk__DeviceGroup:
		return ((cusdk__DeviceGroup *)ptr)->soap_out(soap, tag, id, "cusdk:DeviceGroup");
	case SOAP_TYPE_cusdk__UserInfo:
		return ((cusdk__UserInfo *)ptr)->soap_out(soap, tag, id, "cusdk:UserInfo");
	case SOAP_TYPE_cusdk__UserGroup:
		return ((cusdk__UserGroup *)ptr)->soap_out(soap, tag, id, "cusdk:UserGroup");
	case SOAP_TYPE_xsd__dateTime:
		return soap_out_xsd__dateTime(soap, tag, id, (const std::string *)ptr, "xsd:dateTime");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__string:
		return soap_out_xsd__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_cusdk__GetDeviceBaseInfo:
		return soap_out_cusdk__GetDeviceBaseInfo(soap, tag, id, (const struct cusdk__GetDeviceBaseInfo *)ptr, "cusdk:GetDeviceBaseInfo");
	case SOAP_TYPE_cusdk__ModifyAuthorizationDevice:
		return soap_out_cusdk__ModifyAuthorizationDevice(soap, tag, id, (const struct cusdk__ModifyAuthorizationDevice *)ptr, "cusdk:ModifyAuthorizationDevice");
	case SOAP_TYPE_cusdk__DelAuthorizationDevice:
		return soap_out_cusdk__DelAuthorizationDevice(soap, tag, id, (const struct cusdk__DelAuthorizationDevice *)ptr, "cusdk:DelAuthorizationDevice");
	case SOAP_TYPE_cusdk__AddAuthorizationDevice:
		return soap_out_cusdk__AddAuthorizationDevice(soap, tag, id, (const struct cusdk__AddAuthorizationDevice *)ptr, "cusdk:AddAuthorizationDevice");
	case SOAP_TYPE_cusdk__GetAuthorizationDevice:
		return soap_out_cusdk__GetAuthorizationDevice(soap, tag, id, (const struct cusdk__GetAuthorizationDevice *)ptr, "cusdk:GetAuthorizationDevice");
	case SOAP_TYPE_cusdk__UserModifyDevice:
		return soap_out_cusdk__UserModifyDevice(soap, tag, id, (const struct cusdk__UserModifyDevice *)ptr, "cusdk:UserModifyDevice");
	case SOAP_TYPE_cusdk__UserDelDevice:
		return soap_out_cusdk__UserDelDevice(soap, tag, id, (const struct cusdk__UserDelDevice *)ptr, "cusdk:UserDelDevice");
	case SOAP_TYPE_cusdk__UserAddDevice:
		return soap_out_cusdk__UserAddDevice(soap, tag, id, (const struct cusdk__UserAddDevice *)ptr, "cusdk:UserAddDevice");
	case SOAP_TYPE_cusdk__UserGetDeviceByGroup:
		return soap_out_cusdk__UserGetDeviceByGroup(soap, tag, id, (const struct cusdk__UserGetDeviceByGroup *)ptr, "cusdk:UserGetDeviceByGroup");
	case SOAP_TYPE_cusdk__ModifyUser:
		return soap_out_cusdk__ModifyUser(soap, tag, id, (const struct cusdk__ModifyUser *)ptr, "cusdk:ModifyUser");
	case SOAP_TYPE_cusdk__DelUser:
		return soap_out_cusdk__DelUser(soap, tag, id, (const struct cusdk__DelUser *)ptr, "cusdk:DelUser");
	case SOAP_TYPE_cusdk__CreateUser:
		return soap_out_cusdk__CreateUser(soap, tag, id, (const struct cusdk__CreateUser *)ptr, "cusdk:CreateUser");
	case SOAP_TYPE_cusdk__ModifyUserGroup:
		return soap_out_cusdk__ModifyUserGroup(soap, tag, id, (const struct cusdk__ModifyUserGroup *)ptr, "cusdk:ModifyUserGroup");
	case SOAP_TYPE_cusdk__DelUserGroup:
		return soap_out_cusdk__DelUserGroup(soap, tag, id, (const struct cusdk__DelUserGroup *)ptr, "cusdk:DelUserGroup");
	case SOAP_TYPE_cusdk__CreateUserGroup:
		return soap_out_cusdk__CreateUserGroup(soap, tag, id, (const struct cusdk__CreateUserGroup *)ptr, "cusdk:CreateUserGroup");
	case SOAP_TYPE_cusdk__GetUserGroupList:
		return soap_out_cusdk__GetUserGroupList(soap, tag, id, (const struct cusdk__GetUserGroupList *)ptr, "cusdk:GetUserGroupList");
	case SOAP_TYPE_cusdk__GetUserList:
		return soap_out_cusdk__GetUserList(soap, tag, id, (const struct cusdk__GetUserList *)ptr, "cusdk:GetUserList");
	case SOAP_TYPE_cusdk__DeviceGroupDelDevice:
		return soap_out_cusdk__DeviceGroupDelDevice(soap, tag, id, (const struct cusdk__DeviceGroupDelDevice *)ptr, "cusdk:DeviceGroupDelDevice");
	case SOAP_TYPE_cusdk__DeviceGroupAddDevice:
		return soap_out_cusdk__DeviceGroupAddDevice(soap, tag, id, (const struct cusdk__DeviceGroupAddDevice *)ptr, "cusdk:DeviceGroupAddDevice");
	case SOAP_TYPE_cusdk__ModifyDeviceGroup:
		return soap_out_cusdk__ModifyDeviceGroup(soap, tag, id, (const struct cusdk__ModifyDeviceGroup *)ptr, "cusdk:ModifyDeviceGroup");
	case SOAP_TYPE_cusdk__DelDeviceGroup:
		return soap_out_cusdk__DelDeviceGroup(soap, tag, id, (const struct cusdk__DelDeviceGroup *)ptr, "cusdk:DelDeviceGroup");
	case SOAP_TYPE_cusdk__CreateDeviceGroup:
		return soap_out_cusdk__CreateDeviceGroup(soap, tag, id, (const struct cusdk__CreateDeviceGroup *)ptr, "cusdk:CreateDeviceGroup");
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations:
		return soap_out_cusdk__GetDeviceGroupDeviceRelations(soap, tag, id, (const struct cusdk__GetDeviceGroupDeviceRelations *)ptr, "cusdk:GetDeviceGroupDeviceRelations");
	case SOAP_TYPE_cusdk__GetUserDevByDomain:
		return soap_out_cusdk__GetUserDevByDomain(soap, tag, id, (const struct cusdk__GetUserDevByDomain *)ptr, "cusdk:GetUserDevByDomain");
	case SOAP_TYPE_cusdk__GetUserDev:
		return soap_out_cusdk__GetUserDev(soap, tag, id, (const struct cusdk__GetUserDev *)ptr, "cusdk:GetUserDev");
	case SOAP_TYPE_cusdk__GetDomainDevGroup:
		return soap_out_cusdk__GetDomainDevGroup(soap, tag, id, (const struct cusdk__GetDomainDevGroup *)ptr, "cusdk:GetDomainDevGroup");
	case SOAP_TYPE_cusdk__GetUserDevGroup:
		return soap_out_cusdk__GetUserDevGroup(soap, tag, id, (const struct cusdk__GetUserDevGroup *)ptr, "cusdk:GetUserDevGroup");
	case SOAP_TYPE_cusdk__GetUserDevByGroup:
		return soap_out_cusdk__GetUserDevByGroup(soap, tag, id, (const struct cusdk__GetUserDevByGroup *)ptr, "cusdk:GetUserDevByGroup");
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroup:
		return soap_out_cusdk__GetUserDevGroupByGroup(soap, tag, id, (const struct cusdk__GetUserDevGroupByGroup *)ptr, "cusdk:GetUserDevGroupByGroup");
	case SOAP_TYPE_cusdk__SetUserData:
		return soap_out_cusdk__SetUserData(soap, tag, id, (const struct cusdk__SetUserData *)ptr, "cusdk:SetUserData");
	case SOAP_TYPE_cusdk__GetUserData:
		return soap_out_cusdk__GetUserData(soap, tag, id, (const struct cusdk__GetUserData *)ptr, "cusdk:GetUserData");
	case SOAP_TYPE_cusdk__GetUserGroupInfo:
		return soap_out_cusdk__GetUserGroupInfo(soap, tag, id, (const struct cusdk__GetUserGroupInfo *)ptr, "cusdk:GetUserGroupInfo");
	case SOAP_TYPE_cusdk__GetUserInfo:
		return soap_out_cusdk__GetUserInfo(soap, tag, id, (const struct cusdk__GetUserInfo *)ptr, "cusdk:GetUserInfo");
	case SOAP_TYPE_cusdk__SendTransData:
		return soap_out_cusdk__SendTransData(soap, tag, id, (const struct cusdk__SendTransData *)ptr, "cusdk:SendTransData");
	case SOAP_TYPE_cusdk__PtzUnlock:
		return soap_out_cusdk__PtzUnlock(soap, tag, id, (const struct cusdk__PtzUnlock *)ptr, "cusdk:PtzUnlock");
	case SOAP_TYPE_cusdk__PtzLock:
		return soap_out_cusdk__PtzLock(soap, tag, id, (const struct cusdk__PtzLock *)ptr, "cusdk:PtzLock");
	case SOAP_TYPE_cusdk__PtzCtrl:
		return soap_out_cusdk__PtzCtrl(soap, tag, id, (const struct cusdk__PtzCtrl *)ptr, "cusdk:PtzCtrl");
	case SOAP_TYPE_cusdk__StopStream:
		return soap_out_cusdk__StopStream(soap, tag, id, (const struct cusdk__StopStream *)ptr, "cusdk:StopStream");
	case SOAP_TYPE_cusdk__PlayStream:
		return soap_out_cusdk__PlayStream(soap, tag, id, (const struct cusdk__PlayStream *)ptr, "cusdk:PlayStream");
	case SOAP_TYPE_cusdk__SetupStream:
		return soap_out_cusdk__SetupStream(soap, tag, id, (const struct cusdk__SetupStream *)ptr, "cusdk:SetupStream");
	case SOAP_TYPE_cusdk__GetCUIList:
		return soap_out_cusdk__GetCUIList(soap, tag, id, (const struct cusdk__GetCUIList *)ptr, "cusdk:GetCUIList");
	case SOAP_TYPE_cusdk__GetNotify:
		return soap_out_cusdk__GetNotify(soap, tag, id, (const struct cusdk__GetNotify *)ptr, "cusdk:GetNotify");
	case SOAP_TYPE_cusdk__UnsubscribePuStatus:
		return soap_out_cusdk__UnsubscribePuStatus(soap, tag, id, (const struct cusdk__UnsubscribePuStatus *)ptr, "cusdk:UnsubscribePuStatus");
	case SOAP_TYPE_cusdk__SubscribePuStatus:
		return soap_out_cusdk__SubscribePuStatus(soap, tag, id, (const struct cusdk__SubscribePuStatus *)ptr, "cusdk:SubscribePuStatus");
	case SOAP_TYPE_cusdk__logout:
		return soap_out_cusdk__logout(soap, tag, id, (const struct cusdk__logout *)ptr, "cusdk:logout");
	case SOAP_TYPE_cusdk__login:
		return soap_out_cusdk__login(soap, tag, id, (const struct cusdk__login *)ptr, "cusdk:login");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp:
		((cusdk__GetDeviceBaseInfoRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoReq:
		((cusdk__GetDeviceBaseInfoReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp:
		((cusdk__ModifyAuthorizationDeviceRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq:
		((cusdk__ModifyAuthorizationDeviceReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp:
		((cusdk__DelAuthorizationDeviceRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceReq:
		((cusdk__DelAuthorizationDeviceReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp:
		((cusdk__AddAuthorizationDeviceRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceReq:
		((cusdk__AddAuthorizationDeviceReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp:
		((cusdk__GetAuthorizationDeviceRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceReq:
		((cusdk__GetAuthorizationDeviceReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserModifyDeviceRsp:
		((cusdk__UserModifyDeviceRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserModifyDeviceReq:
		((cusdk__UserModifyDeviceReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserDelDeviceRsp:
		((cusdk__UserDelDeviceRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserDelDeviceReq:
		((cusdk__UserDelDeviceReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserAddDeviceRsp:
		((cusdk__UserAddDeviceRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserAddDeviceReq:
		((cusdk__UserAddDeviceReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp:
		((cusdk__UserGetDeviceByGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupReq:
		((cusdk__UserGetDeviceByGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ModifyUserRsp:
		((cusdk__ModifyUserRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ModifyUserReq:
		((cusdk__ModifyUserReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DelUserRsp:
		((cusdk__DelUserRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DelUserReq:
		((cusdk__DelUserReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__CreateUserRsp:
		((cusdk__CreateUserRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__CreateUserReq:
		((cusdk__CreateUserReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ModifyUserGroupRsp:
		((cusdk__ModifyUserGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ModifyUserGroupReq:
		((cusdk__ModifyUserGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DelUserGroupRsp:
		((cusdk__DelUserGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DelUserGroupReq:
		((cusdk__DelUserGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__CreateUserGroupRsp:
		((cusdk__CreateUserGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__CreateUserGroupReq:
		((cusdk__CreateUserGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupListRsp:
		((cusdk__GetUserGroupListRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupListReq:
		((cusdk__GetUserGroupListReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserListRsp:
		((cusdk__GetUserListRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserListReq:
		((cusdk__GetUserListReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp:
		((cusdk__DeviceGroupDelDeviceRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq:
		((cusdk__DeviceGroupDelDeviceReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp:
		((cusdk__DeviceGroupAddDeviceRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq:
		((cusdk__DeviceGroupAddDeviceReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ModifyDeviceGroupRsp:
		((cusdk__ModifyDeviceGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ModifyDeviceGroupReq:
		((cusdk__ModifyDeviceGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DelDeviceGroupRsp:
		((cusdk__DelDeviceGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DelDeviceGroupReq:
		((cusdk__DelDeviceGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__CreateDeviceGroupRsp:
		((cusdk__CreateDeviceGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__CreateDeviceGroupReq:
		((cusdk__CreateDeviceGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp:
		((cusdk__GetDeviceGroupDeviceRelationsRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq:
		((cusdk__GetDeviceGroupDeviceRelationsReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetDevByDomainRsp:
		((cusdk__GetDevByDomainRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetDevByDomainReq:
		((cusdk__GetDevByDomainReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDevRsp:
		((cusdk__GetUserDevRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDevReq:
		((cusdk__GetUserDevReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetDomainDevGroupRsp:
		((cusdk__GetDomainDevGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetDomainDevGroupReq:
		((cusdk__GetDomainDevGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupRsp:
		((cusdk__GetUserDevGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupReq:
		((cusdk__GetUserDevGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDevByGroupRsp:
		((cusdk__GetUserDevByGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDevByGroupReq:
		((cusdk__GetUserDevByGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp:
		((cusdk__GetUserDevGroupByGroupRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq:
		((cusdk__GetUserDevGroupByGroupReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__SetUserDataRsp:
		((cusdk__SetUserDataRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__SetUserDataReq:
		((cusdk__SetUserDataReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDataRsp:
		((cusdk__GetUserDataRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserDataReq:
		((cusdk__GetUserDataReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupInfoRsp:
		((cusdk__GetUserGroupInfoRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupInfoReq:
		((cusdk__GetUserGroupInfoReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserInfoRsp:
		((cusdk__GetUserInfoRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetUserInfoReq:
		((cusdk__GetUserInfoReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__SendTransDataRsp:
		((cusdk__SendTransDataRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__SendTransDataReq:
		((cusdk__SendTransDataReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PtzUnlockRsp:
		((cusdk__PtzUnlockRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PtzUnlockReq:
		((cusdk__PtzUnlockReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PtzLockRsp:
		((cusdk__PtzLockRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PtzLockReq:
		((cusdk__PtzLockReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PtzCtrlRsp:
		((cusdk__PtzCtrlRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PtzCtrlReq:
		((cusdk__PtzCtrlReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__StopStreamRsp:
		((cusdk__StopStreamRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__StopStreamReq:
		((cusdk__StopStreamReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PlayStreamRsp:
		((cusdk__PlayStreamRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PlayStreamReq:
		((cusdk__PlayStreamReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__SetupStreamRsp:
		((cusdk__SetupStreamRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__SetupStreamReq:
		((cusdk__SetupStreamReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetCUIListRsp:
		((cusdk__GetCUIListRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetCUIListReq:
		((cusdk__GetCUIListReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetNotifyRsp:
		((cusdk__GetNotifyRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__GetNotifyReq:
		((cusdk__GetNotifyReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DeviceFullInfo:
		((cusdk__DeviceFullInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UnsubscribePuStatusRsp:
		((cusdk__UnsubscribePuStatusRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UnsubscribePuStatusReq:
		((cusdk__UnsubscribePuStatusReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__SubscribePuStatusRsp:
		((cusdk__SubscribePuStatusRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__SubscribePuStatusReq:
		((cusdk__SubscribePuStatusReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PuStatusSubscription:
		((cusdk__PuStatusSubscription *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__LogoutRsp:
		((cusdk__LogoutRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__LogoutReq:
		((cusdk__LogoutReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__LoginRsp:
		((cusdk__LoginRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__LoginReq:
		((cusdk__LoginReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__STUNServerInfo:
		((cusdk__STUNServerInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__BaseRsp:
		((cusdk__BaseRsp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__BaseReq:
		((cusdk__BaseReq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__OrderMediaFormat:
		((cusdk__OrderMediaFormat *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__MediaNetInfo:
		((cusdk__MediaNetInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__NatInfo:
		((cusdk__NatInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__NetworkAddr:
		((cusdk__NetworkAddr *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DevAlarmNotify:
		((cusdk__DevAlarmNotify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__AlarmChannelToAlarmData:
		((cusdk__AlarmChannelToAlarmData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DevAlarmData:
		((cusdk__DevAlarmData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DevServiceStatusNotify:
		((cusdk__DevServiceStatusNotify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DecoderStatusStr:
		((cusdk__DecoderStatusStr *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__EncoderStatusStr:
		((cusdk__EncoderStatusStr *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__EncoderStatusInt:
		((cusdk__EncoderStatusInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__AudDecoderToCuChn:
		((cusdk__AudDecoderToCuChn *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__VidDecoderToPuChn:
		((cusdk__VidDecoderToPuChn *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DevConfigNotify:
		((cusdk__DevConfigNotify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__EncoderBitrate:
		((cusdk__EncoderBitrate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__VideoSrcCamID:
		((cusdk__VideoSrcCamID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__VideoSrcCamType:
		((cusdk__VideoSrcCamType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet:
		((cusdk__EncoderAvailableVidSrcSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__VideoSrcEncoderSet:
		((cusdk__VideoSrcEncoderSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ChannelVidDynValue:
		((cusdk__ChannelVidDynValue *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__ChannelVideoFormat:
		((cusdk__ChannelVideoFormat *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__InputPinEnable:
		((cusdk__InputPinEnable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PuExtCap:
		((cusdk__PuExtCap *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__PuBaseCapSet:
		((cusdk__PuBaseCapSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DevOnlineNotify:
		((cusdk__DevOnlineNotify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify:
		((cusdk__VideoSrcAliasChangeNotify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__AuthorizationDeviceInfo:
		((cusdk__AuthorizationDeviceInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__AssignDeviceInfo:
		((cusdk__AssignDeviceInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__AssignVideoSrc:
		((cusdk__AssignVideoSrc *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupRelation:
		((cusdk__DeviceGroupRelation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DeviceInfo:
		((cusdk__DeviceInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__AlarmInputChn:
		((cusdk__AlarmInputChn *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__VideoSrc:
		((cusdk__VideoSrc *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DevChannel:
		((cusdk__DevChannel *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__EncoderChn:
		((cusdk__EncoderChn *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__DeviceGroup:
		((cusdk__DeviceGroup *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserInfo:
		((cusdk__UserInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cusdk__UserGroup:
		((cusdk__UserGroup *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__dateTime:
		soap_serialize_xsd__dateTime(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_serialize_xsd__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetDeviceBaseInfo:
		soap_serialize_cusdk__GetDeviceBaseInfo(soap, (const struct cusdk__GetDeviceBaseInfo *)ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyAuthorizationDevice:
		soap_serialize_cusdk__ModifyAuthorizationDevice(soap, (const struct cusdk__ModifyAuthorizationDevice *)ptr);
		break;
	case SOAP_TYPE_cusdk__DelAuthorizationDevice:
		soap_serialize_cusdk__DelAuthorizationDevice(soap, (const struct cusdk__DelAuthorizationDevice *)ptr);
		break;
	case SOAP_TYPE_cusdk__AddAuthorizationDevice:
		soap_serialize_cusdk__AddAuthorizationDevice(soap, (const struct cusdk__AddAuthorizationDevice *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetAuthorizationDevice:
		soap_serialize_cusdk__GetAuthorizationDevice(soap, (const struct cusdk__GetAuthorizationDevice *)ptr);
		break;
	case SOAP_TYPE_cusdk__UserModifyDevice:
		soap_serialize_cusdk__UserModifyDevice(soap, (const struct cusdk__UserModifyDevice *)ptr);
		break;
	case SOAP_TYPE_cusdk__UserDelDevice:
		soap_serialize_cusdk__UserDelDevice(soap, (const struct cusdk__UserDelDevice *)ptr);
		break;
	case SOAP_TYPE_cusdk__UserAddDevice:
		soap_serialize_cusdk__UserAddDevice(soap, (const struct cusdk__UserAddDevice *)ptr);
		break;
	case SOAP_TYPE_cusdk__UserGetDeviceByGroup:
		soap_serialize_cusdk__UserGetDeviceByGroup(soap, (const struct cusdk__UserGetDeviceByGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyUser:
		soap_serialize_cusdk__ModifyUser(soap, (const struct cusdk__ModifyUser *)ptr);
		break;
	case SOAP_TYPE_cusdk__DelUser:
		soap_serialize_cusdk__DelUser(soap, (const struct cusdk__DelUser *)ptr);
		break;
	case SOAP_TYPE_cusdk__CreateUser:
		soap_serialize_cusdk__CreateUser(soap, (const struct cusdk__CreateUser *)ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyUserGroup:
		soap_serialize_cusdk__ModifyUserGroup(soap, (const struct cusdk__ModifyUserGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__DelUserGroup:
		soap_serialize_cusdk__DelUserGroup(soap, (const struct cusdk__DelUserGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__CreateUserGroup:
		soap_serialize_cusdk__CreateUserGroup(soap, (const struct cusdk__CreateUserGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupList:
		soap_serialize_cusdk__GetUserGroupList(soap, (const struct cusdk__GetUserGroupList *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserList:
		soap_serialize_cusdk__GetUserList(soap, (const struct cusdk__GetUserList *)ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupDelDevice:
		soap_serialize_cusdk__DeviceGroupDelDevice(soap, (const struct cusdk__DeviceGroupDelDevice *)ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupAddDevice:
		soap_serialize_cusdk__DeviceGroupAddDevice(soap, (const struct cusdk__DeviceGroupAddDevice *)ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyDeviceGroup:
		soap_serialize_cusdk__ModifyDeviceGroup(soap, (const struct cusdk__ModifyDeviceGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__DelDeviceGroup:
		soap_serialize_cusdk__DelDeviceGroup(soap, (const struct cusdk__DelDeviceGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__CreateDeviceGroup:
		soap_serialize_cusdk__CreateDeviceGroup(soap, (const struct cusdk__CreateDeviceGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations:
		soap_serialize_cusdk__GetDeviceGroupDeviceRelations(soap, (const struct cusdk__GetDeviceGroupDeviceRelations *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevByDomain:
		soap_serialize_cusdk__GetUserDevByDomain(soap, (const struct cusdk__GetUserDevByDomain *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDev:
		soap_serialize_cusdk__GetUserDev(soap, (const struct cusdk__GetUserDev *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetDomainDevGroup:
		soap_serialize_cusdk__GetDomainDevGroup(soap, (const struct cusdk__GetDomainDevGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroup:
		soap_serialize_cusdk__GetUserDevGroup(soap, (const struct cusdk__GetUserDevGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevByGroup:
		soap_serialize_cusdk__GetUserDevByGroup(soap, (const struct cusdk__GetUserDevByGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroup:
		soap_serialize_cusdk__GetUserDevGroupByGroup(soap, (const struct cusdk__GetUserDevGroupByGroup *)ptr);
		break;
	case SOAP_TYPE_cusdk__SetUserData:
		soap_serialize_cusdk__SetUserData(soap, (const struct cusdk__SetUserData *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserData:
		soap_serialize_cusdk__GetUserData(soap, (const struct cusdk__GetUserData *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupInfo:
		soap_serialize_cusdk__GetUserGroupInfo(soap, (const struct cusdk__GetUserGroupInfo *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserInfo:
		soap_serialize_cusdk__GetUserInfo(soap, (const struct cusdk__GetUserInfo *)ptr);
		break;
	case SOAP_TYPE_cusdk__SendTransData:
		soap_serialize_cusdk__SendTransData(soap, (const struct cusdk__SendTransData *)ptr);
		break;
	case SOAP_TYPE_cusdk__PtzUnlock:
		soap_serialize_cusdk__PtzUnlock(soap, (const struct cusdk__PtzUnlock *)ptr);
		break;
	case SOAP_TYPE_cusdk__PtzLock:
		soap_serialize_cusdk__PtzLock(soap, (const struct cusdk__PtzLock *)ptr);
		break;
	case SOAP_TYPE_cusdk__PtzCtrl:
		soap_serialize_cusdk__PtzCtrl(soap, (const struct cusdk__PtzCtrl *)ptr);
		break;
	case SOAP_TYPE_cusdk__StopStream:
		soap_serialize_cusdk__StopStream(soap, (const struct cusdk__StopStream *)ptr);
		break;
	case SOAP_TYPE_cusdk__PlayStream:
		soap_serialize_cusdk__PlayStream(soap, (const struct cusdk__PlayStream *)ptr);
		break;
	case SOAP_TYPE_cusdk__SetupStream:
		soap_serialize_cusdk__SetupStream(soap, (const struct cusdk__SetupStream *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetCUIList:
		soap_serialize_cusdk__GetCUIList(soap, (const struct cusdk__GetCUIList *)ptr);
		break;
	case SOAP_TYPE_cusdk__GetNotify:
		soap_serialize_cusdk__GetNotify(soap, (const struct cusdk__GetNotify *)ptr);
		break;
	case SOAP_TYPE_cusdk__UnsubscribePuStatus:
		soap_serialize_cusdk__UnsubscribePuStatus(soap, (const struct cusdk__UnsubscribePuStatus *)ptr);
		break;
	case SOAP_TYPE_cusdk__SubscribePuStatus:
		soap_serialize_cusdk__SubscribePuStatus(soap, (const struct cusdk__SubscribePuStatus *)ptr);
		break;
	case SOAP_TYPE_cusdk__logout:
		soap_serialize_cusdk__logout(soap, (const struct cusdk__logout *)ptr);
		break;
	case SOAP_TYPE_cusdk__login:
		soap_serialize_cusdk__login(soap, (const struct cusdk__login *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserGroup:
		return (void*)soap_instantiate_cusdk__UserGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserInfo:
		return (void*)soap_instantiate_cusdk__UserInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceGroup:
		return (void*)soap_instantiate_cusdk__DeviceGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__EncoderChn:
		return (void*)soap_instantiate_cusdk__EncoderChn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DevChannel:
		return (void*)soap_instantiate_cusdk__DevChannel(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__VideoSrc:
		return (void*)soap_instantiate_cusdk__VideoSrc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__AlarmInputChn:
		return (void*)soap_instantiate_cusdk__AlarmInputChn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceInfo:
		return (void*)soap_instantiate_cusdk__DeviceInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceGroupRelation:
		return (void*)soap_instantiate_cusdk__DeviceGroupRelation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__AssignVideoSrc:
		return (void*)soap_instantiate_cusdk__AssignVideoSrc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__AssignDeviceInfo:
		return (void*)soap_instantiate_cusdk__AssignDeviceInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__AuthorizationDeviceInfo:
		return (void*)soap_instantiate_cusdk__AuthorizationDeviceInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify:
		return (void*)soap_instantiate_cusdk__VideoSrcAliasChangeNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DevOnlineNotify:
		return (void*)soap_instantiate_cusdk__DevOnlineNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PuBaseCapSet:
		return (void*)soap_instantiate_cusdk__PuBaseCapSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PuExtCap:
		return (void*)soap_instantiate_cusdk__PuExtCap(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__InputPinEnable:
		return (void*)soap_instantiate_cusdk__InputPinEnable(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ChannelVideoFormat:
		return (void*)soap_instantiate_cusdk__ChannelVideoFormat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ChannelVidDynValue:
		return (void*)soap_instantiate_cusdk__ChannelVidDynValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__VideoSrcEncoderSet:
		return (void*)soap_instantiate_cusdk__VideoSrcEncoderSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet:
		return (void*)soap_instantiate_cusdk__EncoderAvailableVidSrcSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__VideoSrcCamType:
		return (void*)soap_instantiate_cusdk__VideoSrcCamType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__VideoSrcCamID:
		return (void*)soap_instantiate_cusdk__VideoSrcCamID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__EncoderBitrate:
		return (void*)soap_instantiate_cusdk__EncoderBitrate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DevConfigNotify:
		return (void*)soap_instantiate_cusdk__DevConfigNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__VidDecoderToPuChn:
		return (void*)soap_instantiate_cusdk__VidDecoderToPuChn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__AudDecoderToCuChn:
		return (void*)soap_instantiate_cusdk__AudDecoderToCuChn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__EncoderStatusInt:
		return (void*)soap_instantiate_cusdk__EncoderStatusInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__EncoderStatusStr:
		return (void*)soap_instantiate_cusdk__EncoderStatusStr(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DecoderStatusStr:
		return (void*)soap_instantiate_cusdk__DecoderStatusStr(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DevServiceStatusNotify:
		return (void*)soap_instantiate_cusdk__DevServiceStatusNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DevAlarmData:
		return (void*)soap_instantiate_cusdk__DevAlarmData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__AlarmChannelToAlarmData:
		return (void*)soap_instantiate_cusdk__AlarmChannelToAlarmData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DevAlarmNotify:
		return (void*)soap_instantiate_cusdk__DevAlarmNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__NetworkAddr:
		return (void*)soap_instantiate_cusdk__NetworkAddr(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__NatInfo:
		return (void*)soap_instantiate_cusdk__NatInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__MediaNetInfo:
		return (void*)soap_instantiate_cusdk__MediaNetInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__OrderMediaFormat:
		return (void*)soap_instantiate_cusdk__OrderMediaFormat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__BaseReq:
		return (void*)soap_instantiate_cusdk__BaseReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__BaseRsp:
		return (void*)soap_instantiate_cusdk__BaseRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__STUNServerInfo:
		return (void*)soap_instantiate_cusdk__STUNServerInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__LoginReq:
		return (void*)soap_instantiate_cusdk__LoginReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__LoginRsp:
		return (void*)soap_instantiate_cusdk__LoginRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__login:
		return (void*)soap_instantiate_cusdk__login(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__LogoutReq:
		return (void*)soap_instantiate_cusdk__LogoutReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__LogoutRsp:
		return (void*)soap_instantiate_cusdk__LogoutRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__logout:
		return (void*)soap_instantiate_cusdk__logout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PuStatusSubscription:
		return (void*)soap_instantiate_cusdk__PuStatusSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SubscribePuStatusReq:
		return (void*)soap_instantiate_cusdk__SubscribePuStatusReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SubscribePuStatusRsp:
		return (void*)soap_instantiate_cusdk__SubscribePuStatusRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SubscribePuStatus:
		return (void*)soap_instantiate_cusdk__SubscribePuStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UnsubscribePuStatusReq:
		return (void*)soap_instantiate_cusdk__UnsubscribePuStatusReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UnsubscribePuStatusRsp:
		return (void*)soap_instantiate_cusdk__UnsubscribePuStatusRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UnsubscribePuStatus:
		return (void*)soap_instantiate_cusdk__UnsubscribePuStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceFullInfo:
		return (void*)soap_instantiate_cusdk__DeviceFullInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetNotifyReq:
		return (void*)soap_instantiate_cusdk__GetNotifyReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetNotifyRsp:
		return (void*)soap_instantiate_cusdk__GetNotifyRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetNotify:
		return (void*)soap_instantiate_cusdk__GetNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetCUIListReq:
		return (void*)soap_instantiate_cusdk__GetCUIListReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetCUIListRsp:
		return (void*)soap_instantiate_cusdk__GetCUIListRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetCUIList:
		return (void*)soap_instantiate_cusdk__GetCUIList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SetupStreamReq:
		return (void*)soap_instantiate_cusdk__SetupStreamReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SetupStreamRsp:
		return (void*)soap_instantiate_cusdk__SetupStreamRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SetupStream:
		return (void*)soap_instantiate_cusdk__SetupStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PlayStreamReq:
		return (void*)soap_instantiate_cusdk__PlayStreamReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PlayStreamRsp:
		return (void*)soap_instantiate_cusdk__PlayStreamRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PlayStream:
		return (void*)soap_instantiate_cusdk__PlayStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__StopStreamReq:
		return (void*)soap_instantiate_cusdk__StopStreamReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__StopStreamRsp:
		return (void*)soap_instantiate_cusdk__StopStreamRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__StopStream:
		return (void*)soap_instantiate_cusdk__StopStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PtzCtrlReq:
		return (void*)soap_instantiate_cusdk__PtzCtrlReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PtzCtrlRsp:
		return (void*)soap_instantiate_cusdk__PtzCtrlRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PtzCtrl:
		return (void*)soap_instantiate_cusdk__PtzCtrl(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PtzLockReq:
		return (void*)soap_instantiate_cusdk__PtzLockReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PtzLockRsp:
		return (void*)soap_instantiate_cusdk__PtzLockRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PtzLock:
		return (void*)soap_instantiate_cusdk__PtzLock(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PtzUnlockReq:
		return (void*)soap_instantiate_cusdk__PtzUnlockReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PtzUnlockRsp:
		return (void*)soap_instantiate_cusdk__PtzUnlockRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__PtzUnlock:
		return (void*)soap_instantiate_cusdk__PtzUnlock(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SendTransDataReq:
		return (void*)soap_instantiate_cusdk__SendTransDataReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SendTransDataRsp:
		return (void*)soap_instantiate_cusdk__SendTransDataRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SendTransData:
		return (void*)soap_instantiate_cusdk__SendTransData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserInfoReq:
		return (void*)soap_instantiate_cusdk__GetUserInfoReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserInfoRsp:
		return (void*)soap_instantiate_cusdk__GetUserInfoRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserInfo:
		return (void*)soap_instantiate_cusdk__GetUserInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserGroupInfoReq:
		return (void*)soap_instantiate_cusdk__GetUserGroupInfoReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserGroupInfoRsp:
		return (void*)soap_instantiate_cusdk__GetUserGroupInfoRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserGroupInfo:
		return (void*)soap_instantiate_cusdk__GetUserGroupInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDataReq:
		return (void*)soap_instantiate_cusdk__GetUserDataReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDataRsp:
		return (void*)soap_instantiate_cusdk__GetUserDataRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserData:
		return (void*)soap_instantiate_cusdk__GetUserData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SetUserDataReq:
		return (void*)soap_instantiate_cusdk__SetUserDataReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SetUserDataRsp:
		return (void*)soap_instantiate_cusdk__SetUserDataRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__SetUserData:
		return (void*)soap_instantiate_cusdk__SetUserData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq:
		return (void*)soap_instantiate_cusdk__GetUserDevGroupByGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp:
		return (void*)soap_instantiate_cusdk__GetUserDevGroupByGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroup:
		return (void*)soap_instantiate_cusdk__GetUserDevGroupByGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevByGroupReq:
		return (void*)soap_instantiate_cusdk__GetUserDevByGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevByGroupRsp:
		return (void*)soap_instantiate_cusdk__GetUserDevByGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevByGroup:
		return (void*)soap_instantiate_cusdk__GetUserDevByGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevGroupReq:
		return (void*)soap_instantiate_cusdk__GetUserDevGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevGroupRsp:
		return (void*)soap_instantiate_cusdk__GetUserDevGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevGroup:
		return (void*)soap_instantiate_cusdk__GetUserDevGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDomainDevGroupReq:
		return (void*)soap_instantiate_cusdk__GetDomainDevGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDomainDevGroupRsp:
		return (void*)soap_instantiate_cusdk__GetDomainDevGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDomainDevGroup:
		return (void*)soap_instantiate_cusdk__GetDomainDevGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevReq:
		return (void*)soap_instantiate_cusdk__GetUserDevReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevRsp:
		return (void*)soap_instantiate_cusdk__GetUserDevRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDev:
		return (void*)soap_instantiate_cusdk__GetUserDev(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDevByDomainReq:
		return (void*)soap_instantiate_cusdk__GetDevByDomainReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDevByDomainRsp:
		return (void*)soap_instantiate_cusdk__GetDevByDomainRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserDevByDomain:
		return (void*)soap_instantiate_cusdk__GetUserDevByDomain(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq:
		return (void*)soap_instantiate_cusdk__GetDeviceGroupDeviceRelationsReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp:
		return (void*)soap_instantiate_cusdk__GetDeviceGroupDeviceRelationsRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations:
		return (void*)soap_instantiate_cusdk__GetDeviceGroupDeviceRelations(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__CreateDeviceGroupReq:
		return (void*)soap_instantiate_cusdk__CreateDeviceGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__CreateDeviceGroupRsp:
		return (void*)soap_instantiate_cusdk__CreateDeviceGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__CreateDeviceGroup:
		return (void*)soap_instantiate_cusdk__CreateDeviceGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelDeviceGroupReq:
		return (void*)soap_instantiate_cusdk__DelDeviceGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelDeviceGroupRsp:
		return (void*)soap_instantiate_cusdk__DelDeviceGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelDeviceGroup:
		return (void*)soap_instantiate_cusdk__DelDeviceGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyDeviceGroupReq:
		return (void*)soap_instantiate_cusdk__ModifyDeviceGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyDeviceGroupRsp:
		return (void*)soap_instantiate_cusdk__ModifyDeviceGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyDeviceGroup:
		return (void*)soap_instantiate_cusdk__ModifyDeviceGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq:
		return (void*)soap_instantiate_cusdk__DeviceGroupAddDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp:
		return (void*)soap_instantiate_cusdk__DeviceGroupAddDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceGroupAddDevice:
		return (void*)soap_instantiate_cusdk__DeviceGroupAddDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq:
		return (void*)soap_instantiate_cusdk__DeviceGroupDelDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp:
		return (void*)soap_instantiate_cusdk__DeviceGroupDelDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DeviceGroupDelDevice:
		return (void*)soap_instantiate_cusdk__DeviceGroupDelDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserListReq:
		return (void*)soap_instantiate_cusdk__GetUserListReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserListRsp:
		return (void*)soap_instantiate_cusdk__GetUserListRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserList:
		return (void*)soap_instantiate_cusdk__GetUserList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserGroupListReq:
		return (void*)soap_instantiate_cusdk__GetUserGroupListReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserGroupListRsp:
		return (void*)soap_instantiate_cusdk__GetUserGroupListRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetUserGroupList:
		return (void*)soap_instantiate_cusdk__GetUserGroupList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__CreateUserGroupReq:
		return (void*)soap_instantiate_cusdk__CreateUserGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__CreateUserGroupRsp:
		return (void*)soap_instantiate_cusdk__CreateUserGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__CreateUserGroup:
		return (void*)soap_instantiate_cusdk__CreateUserGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelUserGroupReq:
		return (void*)soap_instantiate_cusdk__DelUserGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelUserGroupRsp:
		return (void*)soap_instantiate_cusdk__DelUserGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelUserGroup:
		return (void*)soap_instantiate_cusdk__DelUserGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyUserGroupReq:
		return (void*)soap_instantiate_cusdk__ModifyUserGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyUserGroupRsp:
		return (void*)soap_instantiate_cusdk__ModifyUserGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyUserGroup:
		return (void*)soap_instantiate_cusdk__ModifyUserGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__CreateUserReq:
		return (void*)soap_instantiate_cusdk__CreateUserReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__CreateUserRsp:
		return (void*)soap_instantiate_cusdk__CreateUserRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__CreateUser:
		return (void*)soap_instantiate_cusdk__CreateUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelUserReq:
		return (void*)soap_instantiate_cusdk__DelUserReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelUserRsp:
		return (void*)soap_instantiate_cusdk__DelUserRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelUser:
		return (void*)soap_instantiate_cusdk__DelUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyUserReq:
		return (void*)soap_instantiate_cusdk__ModifyUserReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyUserRsp:
		return (void*)soap_instantiate_cusdk__ModifyUserRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyUser:
		return (void*)soap_instantiate_cusdk__ModifyUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupReq:
		return (void*)soap_instantiate_cusdk__UserGetDeviceByGroupReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp:
		return (void*)soap_instantiate_cusdk__UserGetDeviceByGroupRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserGetDeviceByGroup:
		return (void*)soap_instantiate_cusdk__UserGetDeviceByGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserAddDeviceReq:
		return (void*)soap_instantiate_cusdk__UserAddDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserAddDeviceRsp:
		return (void*)soap_instantiate_cusdk__UserAddDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserAddDevice:
		return (void*)soap_instantiate_cusdk__UserAddDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserDelDeviceReq:
		return (void*)soap_instantiate_cusdk__UserDelDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserDelDeviceRsp:
		return (void*)soap_instantiate_cusdk__UserDelDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserDelDevice:
		return (void*)soap_instantiate_cusdk__UserDelDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserModifyDeviceReq:
		return (void*)soap_instantiate_cusdk__UserModifyDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserModifyDeviceRsp:
		return (void*)soap_instantiate_cusdk__UserModifyDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__UserModifyDevice:
		return (void*)soap_instantiate_cusdk__UserModifyDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceReq:
		return (void*)soap_instantiate_cusdk__GetAuthorizationDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp:
		return (void*)soap_instantiate_cusdk__GetAuthorizationDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetAuthorizationDevice:
		return (void*)soap_instantiate_cusdk__GetAuthorizationDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceReq:
		return (void*)soap_instantiate_cusdk__AddAuthorizationDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp:
		return (void*)soap_instantiate_cusdk__AddAuthorizationDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__AddAuthorizationDevice:
		return (void*)soap_instantiate_cusdk__AddAuthorizationDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceReq:
		return (void*)soap_instantiate_cusdk__DelAuthorizationDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp:
		return (void*)soap_instantiate_cusdk__DelAuthorizationDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__DelAuthorizationDevice:
		return (void*)soap_instantiate_cusdk__DelAuthorizationDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq:
		return (void*)soap_instantiate_cusdk__ModifyAuthorizationDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp:
		return (void*)soap_instantiate_cusdk__ModifyAuthorizationDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__ModifyAuthorizationDevice:
		return (void*)soap_instantiate_cusdk__ModifyAuthorizationDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoReq:
		return (void*)soap_instantiate_cusdk__GetDeviceBaseInfoReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp:
		return (void*)soap_instantiate_cusdk__GetDeviceBaseInfoRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cusdk__GetDeviceBaseInfo:
		return (void*)soap_instantiate_cusdk__GetDeviceBaseInfo(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AssignDeviceInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__UserGroup:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__UserGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__UserInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__UserInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__DeviceInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__MediaNetInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__MediaNetInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfxsd__int:
		return (void*)soap_instantiate_std__vectorTemplateOfxsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevAlarmNotify:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__DevAlarmNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevServiceStatusNotify:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__DevServiceStatusNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevConfigNotify:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__DevConfigNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevOnlineNotify:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__DevOnlineNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroup:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__DeviceGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfxsd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfxsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceFullInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroupRelation:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__PuStatusSubscription:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__setTemplateOfcusdk__EPuSubscribeType:
		return (void*)soap_instantiate_std__setTemplateOfcusdk__EPuSubscribeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DecoderStatusStr:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__DecoderStatusStr(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusStr:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__EncoderStatusStr(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusInt:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AudDecoderToCuChn:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__AudDecoderToCuChn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VidDecoderToPuChn:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__VidDecoderToPuChn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderBitrate:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__EncoderBitrate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamID:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcCamID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamType:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcCamType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcEncoderSet:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVidDynValue:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__ChannelVidDynValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVideoFormat:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__ChannelVideoFormat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__InputPinEnable:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__InputPinEnable(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__PuExtCap:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__PuExtCap(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__setTemplateOfxsd__int:
		return (void*)soap_instantiate_std__setTemplateOfxsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AssignAlarminputChn:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__AssignAlarminputChn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AssignVideoSrc:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__AssignVideoSrc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmInputChn:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__AlarmInputChn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__setTemplateOfcusdk__EDevicePri:
		return (void*)soap_instantiate_std__setTemplateOfcusdk__EDevicePri(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrc:
		return (void*)soap_instantiate_std__vectorTemplateOfcusdk__VideoSrc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__setTemplateOfcusdk__EUserPri:
		return (void*)soap_instantiate_std__setTemplateOfcusdk__EUserPri(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserGroup:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserInfo:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroup:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DeviceGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DeviceGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__EncoderChn:
		if (p->size < 0)
			SOAP_DELETE((cusdk__EncoderChn*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__EncoderChn*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DevChannel:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DevChannel*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DevChannel*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__VideoSrc:
		if (p->size < 0)
			SOAP_DELETE((cusdk__VideoSrc*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__VideoSrc*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__AlarmInputChn:
		if (p->size < 0)
			SOAP_DELETE((cusdk__AlarmInputChn*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__AlarmInputChn*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceInfo:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DeviceInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DeviceInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupRelation:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DeviceGroupRelation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DeviceGroupRelation*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__AssignVideoSrc:
		if (p->size < 0)
			SOAP_DELETE((cusdk__AssignVideoSrc*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__AssignVideoSrc*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__AssignDeviceInfo:
		if (p->size < 0)
			SOAP_DELETE((cusdk__AssignDeviceInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__AssignDeviceInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__AuthorizationDeviceInfo:
		if (p->size < 0)
			SOAP_DELETE((cusdk__AuthorizationDeviceInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__AuthorizationDeviceInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify:
		if (p->size < 0)
			SOAP_DELETE((cusdk__VideoSrcAliasChangeNotify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__VideoSrcAliasChangeNotify*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DevOnlineNotify:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DevOnlineNotify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DevOnlineNotify*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PuBaseCapSet:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PuBaseCapSet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PuBaseCapSet*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PuExtCap:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PuExtCap*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PuExtCap*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__InputPinEnable:
		if (p->size < 0)
			SOAP_DELETE((cusdk__InputPinEnable*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__InputPinEnable*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ChannelVideoFormat:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ChannelVideoFormat*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ChannelVideoFormat*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ChannelVidDynValue:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ChannelVidDynValue*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ChannelVidDynValue*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__VideoSrcEncoderSet:
		if (p->size < 0)
			SOAP_DELETE((cusdk__VideoSrcEncoderSet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__VideoSrcEncoderSet*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet:
		if (p->size < 0)
			SOAP_DELETE((cusdk__EncoderAvailableVidSrcSet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__EncoderAvailableVidSrcSet*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__VideoSrcCamType:
		if (p->size < 0)
			SOAP_DELETE((cusdk__VideoSrcCamType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__VideoSrcCamType*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__VideoSrcCamID:
		if (p->size < 0)
			SOAP_DELETE((cusdk__VideoSrcCamID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__VideoSrcCamID*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__EncoderBitrate:
		if (p->size < 0)
			SOAP_DELETE((cusdk__EncoderBitrate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__EncoderBitrate*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DevConfigNotify:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DevConfigNotify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DevConfigNotify*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__VidDecoderToPuChn:
		if (p->size < 0)
			SOAP_DELETE((cusdk__VidDecoderToPuChn*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__VidDecoderToPuChn*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__AudDecoderToCuChn:
		if (p->size < 0)
			SOAP_DELETE((cusdk__AudDecoderToCuChn*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__AudDecoderToCuChn*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__EncoderStatusInt:
		if (p->size < 0)
			SOAP_DELETE((cusdk__EncoderStatusInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__EncoderStatusInt*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__EncoderStatusStr:
		if (p->size < 0)
			SOAP_DELETE((cusdk__EncoderStatusStr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__EncoderStatusStr*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DecoderStatusStr:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DecoderStatusStr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DecoderStatusStr*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DevServiceStatusNotify:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DevServiceStatusNotify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DevServiceStatusNotify*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DevAlarmData:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DevAlarmData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DevAlarmData*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__AlarmChannelToAlarmData:
		if (p->size < 0)
			SOAP_DELETE((cusdk__AlarmChannelToAlarmData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__AlarmChannelToAlarmData*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DevAlarmNotify:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DevAlarmNotify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DevAlarmNotify*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__NetworkAddr:
		if (p->size < 0)
			SOAP_DELETE((cusdk__NetworkAddr*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__NetworkAddr*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__NatInfo:
		if (p->size < 0)
			SOAP_DELETE((cusdk__NatInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__NatInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__MediaNetInfo:
		if (p->size < 0)
			SOAP_DELETE((cusdk__MediaNetInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__MediaNetInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__OrderMediaFormat:
		if (p->size < 0)
			SOAP_DELETE((cusdk__OrderMediaFormat*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__OrderMediaFormat*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__BaseReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__BaseReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__BaseReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__BaseRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__BaseRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__BaseRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__STUNServerInfo:
		if (p->size < 0)
			SOAP_DELETE((cusdk__STUNServerInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__STUNServerInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__LoginReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__LoginReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__LoginReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__LoginRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__LoginRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__LoginRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__login:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__login*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__LogoutReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__LogoutReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__LogoutReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__LogoutRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__LogoutRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__LogoutRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__logout:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__logout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__logout*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PuStatusSubscription:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PuStatusSubscription*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PuStatusSubscription*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SubscribePuStatusReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__SubscribePuStatusReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__SubscribePuStatusReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SubscribePuStatusRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__SubscribePuStatusRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__SubscribePuStatusRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SubscribePuStatus:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__SubscribePuStatus*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__SubscribePuStatus*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UnsubscribePuStatusReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UnsubscribePuStatusReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UnsubscribePuStatusReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UnsubscribePuStatusRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UnsubscribePuStatusRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UnsubscribePuStatusRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UnsubscribePuStatus:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__UnsubscribePuStatus*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__UnsubscribePuStatus*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceFullInfo:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DeviceFullInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DeviceFullInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetNotifyReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetNotifyReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetNotifyReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetNotifyRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetNotifyRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetNotifyRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetNotify:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetNotify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetNotify*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetCUIListReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetCUIListReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetCUIListReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetCUIListRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetCUIListRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetCUIListRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetCUIList:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetCUIList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetCUIList*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SetupStreamReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__SetupStreamReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__SetupStreamReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SetupStreamRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__SetupStreamRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__SetupStreamRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SetupStream:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__SetupStream*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__SetupStream*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PlayStreamReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PlayStreamReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PlayStreamReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PlayStreamRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PlayStreamRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PlayStreamRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PlayStream:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__PlayStream*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__PlayStream*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__StopStreamReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__StopStreamReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__StopStreamReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__StopStreamRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__StopStreamRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__StopStreamRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__StopStream:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__StopStream*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__StopStream*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PtzCtrlReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PtzCtrlReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PtzCtrlReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PtzCtrlRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PtzCtrlRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PtzCtrlRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PtzCtrl:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__PtzCtrl*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__PtzCtrl*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PtzLockReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PtzLockReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PtzLockReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PtzLockRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PtzLockRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PtzLockRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PtzLock:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__PtzLock*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__PtzLock*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PtzUnlockReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PtzUnlockReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PtzUnlockReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PtzUnlockRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__PtzUnlockRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__PtzUnlockRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__PtzUnlock:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__PtzUnlock*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__PtzUnlock*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SendTransDataReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__SendTransDataReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__SendTransDataReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SendTransDataRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__SendTransDataRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__SendTransDataRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SendTransData:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__SendTransData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__SendTransData*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserInfoReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserInfoReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserInfoReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserInfoRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserInfoRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserInfoRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserInfo:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupInfoReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserGroupInfoReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserGroupInfoReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupInfoRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserGroupInfoRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserGroupInfoRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupInfo:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserGroupInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserGroupInfo*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDataReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDataReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDataReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDataRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDataRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDataRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserData:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserData*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SetUserDataReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__SetUserDataReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__SetUserDataReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SetUserDataRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__SetUserDataRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__SetUserDataRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__SetUserData:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__SetUserData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__SetUserData*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDevGroupByGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDevGroupByGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDevGroupByGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDevGroupByGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupByGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserDevGroupByGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserDevGroupByGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevByGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDevByGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDevByGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevByGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDevByGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDevByGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevByGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserDevByGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserDevByGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDevGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDevGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDevGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDevGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserDevGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserDevGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDomainDevGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetDomainDevGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetDomainDevGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDomainDevGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetDomainDevGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetDomainDevGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDomainDevGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetDomainDevGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetDomainDevGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDevReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDevReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserDevRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserDevRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDev:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserDev*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserDev*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDevByDomainReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetDevByDomainReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetDevByDomainReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDevByDomainRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetDevByDomainRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetDevByDomainRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserDevByDomain:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserDevByDomain*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserDevByDomain*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetDeviceGroupDeviceRelationsReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetDeviceGroupDeviceRelationsReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetDeviceGroupDeviceRelationsRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetDeviceGroupDeviceRelationsRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetDeviceGroupDeviceRelations*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetDeviceGroupDeviceRelations*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__CreateDeviceGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__CreateDeviceGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__CreateDeviceGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__CreateDeviceGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__CreateDeviceGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__CreateDeviceGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__CreateDeviceGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__CreateDeviceGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__CreateDeviceGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelDeviceGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DelDeviceGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DelDeviceGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelDeviceGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DelDeviceGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DelDeviceGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelDeviceGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__DelDeviceGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__DelDeviceGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyDeviceGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ModifyDeviceGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ModifyDeviceGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyDeviceGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ModifyDeviceGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ModifyDeviceGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyDeviceGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__ModifyDeviceGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__ModifyDeviceGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DeviceGroupAddDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DeviceGroupAddDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DeviceGroupAddDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DeviceGroupAddDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupAddDevice:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__DeviceGroupAddDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__DeviceGroupAddDevice*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DeviceGroupDelDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DeviceGroupDelDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DeviceGroupDelDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DeviceGroupDelDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DeviceGroupDelDevice:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__DeviceGroupDelDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__DeviceGroupDelDevice*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserListReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserListReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserListReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserListRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserListRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserListRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserList:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserList*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupListReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserGroupListReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserGroupListReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupListRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetUserGroupListRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetUserGroupListRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetUserGroupList:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetUserGroupList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetUserGroupList*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__CreateUserGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__CreateUserGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__CreateUserGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__CreateUserGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__CreateUserGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__CreateUserGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__CreateUserGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__CreateUserGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__CreateUserGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelUserGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DelUserGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DelUserGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelUserGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DelUserGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DelUserGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelUserGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__DelUserGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__DelUserGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyUserGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ModifyUserGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ModifyUserGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyUserGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ModifyUserGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ModifyUserGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyUserGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__ModifyUserGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__ModifyUserGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__CreateUserReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__CreateUserReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__CreateUserReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__CreateUserRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__CreateUserRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__CreateUserRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__CreateUser:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__CreateUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__CreateUser*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelUserReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DelUserReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DelUserReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelUserRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DelUserRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DelUserRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelUser:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__DelUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__DelUser*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyUserReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ModifyUserReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ModifyUserReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyUserRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ModifyUserRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ModifyUserRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyUser:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__ModifyUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__ModifyUser*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserGetDeviceByGroupReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserGetDeviceByGroupReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserGetDeviceByGroupRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserGetDeviceByGroupRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserGetDeviceByGroup:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__UserGetDeviceByGroup*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__UserGetDeviceByGroup*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserAddDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserAddDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserAddDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserAddDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserAddDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserAddDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserAddDevice:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__UserAddDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__UserAddDevice*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserDelDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserDelDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserDelDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserDelDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserDelDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserDelDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserDelDevice:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__UserDelDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__UserDelDevice*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserModifyDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserModifyDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserModifyDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserModifyDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__UserModifyDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__UserModifyDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__UserModifyDevice:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__UserModifyDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__UserModifyDevice*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetAuthorizationDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetAuthorizationDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetAuthorizationDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetAuthorizationDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetAuthorizationDevice:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetAuthorizationDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetAuthorizationDevice*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__AddAuthorizationDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__AddAuthorizationDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__AddAuthorizationDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__AddAuthorizationDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__AddAuthorizationDevice:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__AddAuthorizationDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__AddAuthorizationDevice*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DelAuthorizationDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DelAuthorizationDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__DelAuthorizationDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__DelAuthorizationDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__DelAuthorizationDevice:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__DelAuthorizationDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__DelAuthorizationDevice*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ModifyAuthorizationDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ModifyAuthorizationDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__ModifyAuthorizationDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__ModifyAuthorizationDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__ModifyAuthorizationDevice:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__ModifyAuthorizationDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__ModifyAuthorizationDevice*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoReq:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetDeviceBaseInfoReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetDeviceBaseInfoReq*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp:
		if (p->size < 0)
			SOAP_DELETE((cusdk__GetDeviceBaseInfoRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((cusdk__GetDeviceBaseInfoRsp*)p->ptr);
		break;
	case SOAP_TYPE_cusdk__GetDeviceBaseInfo:
		if (p->size < 0)
			SOAP_DELETE((struct cusdk__GetDeviceBaseInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct cusdk__GetDeviceBaseInfo*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__AuthorizationDeviceInfo >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__AuthorizationDeviceInfo >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AssignDeviceInfo:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__AssignDeviceInfo >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__AssignDeviceInfo >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__UserGroup:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__UserGroup >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__UserGroup >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__UserInfo:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__UserInfo >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__UserInfo >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceInfo:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__DeviceInfo >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__DeviceInfo >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__MediaNetInfo:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__MediaNetInfo >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__MediaNetInfo >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__int:
		if (p->size < 0)
			SOAP_DELETE((std::vector<int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<int >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevAlarmNotify:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__DevAlarmNotify >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__DevAlarmNotify >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevServiceStatusNotify:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__DevServiceStatusNotify >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__DevServiceStatusNotify >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevConfigNotify:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__DevConfigNotify >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__DevConfigNotify >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevOnlineNotify:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__DevOnlineNotify >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__DevOnlineNotify >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroup:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__DeviceGroup >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__DeviceGroup >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__VideoSrcAliasChangeNotify >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__VideoSrcAliasChangeNotify >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__string:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::string >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceFullInfo:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__DeviceFullInfo >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__DeviceFullInfo >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroupRelation:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__DeviceGroupRelation >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__DeviceGroupRelation >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__PuStatusSubscription:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__PuStatusSubscription >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__PuStatusSubscription >*)p->ptr);
		break;
	case SOAP_TYPE_std__setTemplateOfcusdk__EPuSubscribeType:
		if (p->size < 0)
			SOAP_DELETE((std::set<enum cusdk__EPuSubscribeType >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::set<enum cusdk__EPuSubscribeType >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__AlarmChannelToAlarmData >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__AlarmChannelToAlarmData >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DecoderStatusStr:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__DecoderStatusStr >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__DecoderStatusStr >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusStr:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__EncoderStatusStr >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__EncoderStatusStr >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusInt:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__EncoderStatusInt >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__EncoderStatusInt >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AudDecoderToCuChn:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__AudDecoderToCuChn >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__AudDecoderToCuChn >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VidDecoderToPuChn:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__VidDecoderToPuChn >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__VidDecoderToPuChn >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderBitrate:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__EncoderBitrate >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__EncoderBitrate >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamID:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__VideoSrcCamID >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__VideoSrcCamID >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamType:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__VideoSrcCamType >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__VideoSrcCamType >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__EncoderAvailableVidSrcSet >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__EncoderAvailableVidSrcSet >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcEncoderSet:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__VideoSrcEncoderSet >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__VideoSrcEncoderSet >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVidDynValue:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__ChannelVidDynValue >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__ChannelVidDynValue >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVideoFormat:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__ChannelVideoFormat >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__ChannelVideoFormat >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__InputPinEnable:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__InputPinEnable >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__InputPinEnable >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__PuExtCap:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__PuExtCap >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__PuExtCap >*)p->ptr);
		break;
	case SOAP_TYPE_std__setTemplateOfxsd__int:
		if (p->size < 0)
			SOAP_DELETE((std::set<int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::set<int >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AssignAlarminputChn:
		if (p->size < 0)
			SOAP_DELETE((std::vector<int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<int >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AssignVideoSrc:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__AssignVideoSrc >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__AssignVideoSrc >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE((std::vector<int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<int >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmInputChn:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__AlarmInputChn >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__AlarmInputChn >*)p->ptr);
		break;
	case SOAP_TYPE_std__setTemplateOfcusdk__EDevicePri:
		if (p->size < 0)
			SOAP_DELETE((std::set<enum cusdk__EDevicePri >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::set<enum cusdk__EDevicePri >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrc:
		if (p->size < 0)
			SOAP_DELETE((std::vector<cusdk__VideoSrc >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<cusdk__VideoSrc >*)p->ptr);
		break;
	case SOAP_TYPE_std__setTemplateOfcusdk__EUserPri:
		if (p->size < 0)
			SOAP_DELETE((std::set<enum cusdk__EUserPri >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::set<enum cusdk__EUserPri >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__AuthorizationDeviceInfo >*)p)[len] = *(cusdk__AuthorizationDeviceInfo *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AssignDeviceInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__AssignDeviceInfo >*)p)[len] = *(cusdk__AssignDeviceInfo *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__UserGroup:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__UserGroup >*)p)[len] = *(cusdk__UserGroup *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__UserInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__UserInfo >*)p)[len] = *(cusdk__UserInfo *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__DeviceInfo >*)p)[len] = *(cusdk__DeviceInfo *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__MediaNetInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__MediaNetInfo >*)p)[len] = *(cusdk__MediaNetInfo *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__int:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevAlarmNotify:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__DevAlarmNotify >*)p)[len] = *(cusdk__DevAlarmNotify *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevServiceStatusNotify:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__DevServiceStatusNotify >*)p)[len] = *(cusdk__DevServiceStatusNotify *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevConfigNotify:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__DevConfigNotify >*)p)[len] = *(cusdk__DevConfigNotify *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DevOnlineNotify:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__DevOnlineNotify >*)p)[len] = *(cusdk__DevOnlineNotify *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroup:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__DeviceGroup >*)p)[len] = *(cusdk__DeviceGroup *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__VideoSrcAliasChangeNotify >*)p)[len] = *(cusdk__VideoSrcAliasChangeNotify *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfxsd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceFullInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__DeviceFullInfo >*)p)[len] = *(cusdk__DeviceFullInfo *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroupRelation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__DeviceGroupRelation >*)p)[len] = *(cusdk__DeviceGroupRelation *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__PuStatusSubscription:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__PuStatusSubscription >*)p)[len] = *(cusdk__PuStatusSubscription *)q;
		break;
	case SOAP_TYPE_std__setTemplateOfcusdk__EPuSubscribeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::set<enum cusdk__EPuSubscribeType >*)p)->insert(((std::set<enum cusdk__EPuSubscribeType >*)p)->end(), *(enum cusdk__EPuSubscribeType *)q);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__AlarmChannelToAlarmData >*)p)[len] = *(cusdk__AlarmChannelToAlarmData *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__DecoderStatusStr:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__DecoderStatusStr >*)p)[len] = *(cusdk__DecoderStatusStr *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusStr:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__EncoderStatusStr >*)p)[len] = *(cusdk__EncoderStatusStr *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusInt:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__EncoderStatusInt >*)p)[len] = *(cusdk__EncoderStatusInt *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AudDecoderToCuChn:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__AudDecoderToCuChn >*)p)[len] = *(cusdk__AudDecoderToCuChn *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VidDecoderToPuChn:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__VidDecoderToPuChn >*)p)[len] = *(cusdk__VidDecoderToPuChn *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderBitrate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__EncoderBitrate >*)p)[len] = *(cusdk__EncoderBitrate *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__VideoSrcCamID >*)p)[len] = *(cusdk__VideoSrcCamID *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__VideoSrcCamType >*)p)[len] = *(cusdk__VideoSrcCamType *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__EncoderAvailableVidSrcSet >*)p)[len] = *(cusdk__EncoderAvailableVidSrcSet *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcEncoderSet:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__VideoSrcEncoderSet >*)p)[len] = *(cusdk__VideoSrcEncoderSet *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVidDynValue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__ChannelVidDynValue >*)p)[len] = *(cusdk__ChannelVidDynValue *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVideoFormat:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__ChannelVideoFormat >*)p)[len] = *(cusdk__ChannelVideoFormat *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__InputPinEnable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__InputPinEnable >*)p)[len] = *(cusdk__InputPinEnable *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__PuExtCap:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__PuExtCap >*)p)[len] = *(cusdk__PuExtCap *)q;
		break;
	case SOAP_TYPE_std__setTemplateOfxsd__int:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::set<int >*)p)->insert(((std::set<int >*)p)->end(), *(int *)q);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AssignAlarminputChn:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AssignVideoSrc:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__AssignVideoSrc >*)p)[len] = *(cusdk__AssignVideoSrc *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmInputChn:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__AlarmInputChn >*)p)[len] = *(cusdk__AlarmInputChn *)q;
		break;
	case SOAP_TYPE_std__setTemplateOfcusdk__EDevicePri:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::set<enum cusdk__EDevicePri >*)p)->insert(((std::set<enum cusdk__EDevicePri >*)p)->end(), *(enum cusdk__EDevicePri *)q);
		break;
	case SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrc:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<cusdk__VideoSrc >*)p)[len] = *(cusdk__VideoSrc *)q;
		break;
	case SOAP_TYPE_std__setTemplateOfcusdk__EUserPri:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		((std::set<enum cusdk__EUserPri >*)p)->insert(((std::set<enum cusdk__EUserPri >*)p)->end(), *(enum cusdk__EUserPri *)q);
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AssignAlarminputChn(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_cusdk__AssignAlarminputChn);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_cusdk__AssignAlarminputChn(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_cusdk__AssignAlarminputChn);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__AssignAlarminputChn(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__AssignAlarminputChn);
	if (soap_out_cusdk__AssignAlarminputChn(soap, tag?tag:"cusdk:AssignAlarminputChn", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_cusdk__AssignAlarminputChn(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AssignAlarminputChn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time_duration(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_time_duration);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_time_duration(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_time_duration);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time_duration(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time_duration);
	if (soap_out_time_duration(soap, tag?tag:"time-duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_time_duration(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_time_duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_xsd__int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (soap_out_xsd__int(soap, tag?tag:"xsd:int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{	long *p;
	p = soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_long);
	if (soap_out_long(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_xsd__float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__float);
	if (soap_out_xsd__float(soap, tag?tag:"xsd:float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__positiveInteger);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{	ULONG64 *p;
	p = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_xsd__positiveInteger);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__positiveInteger);
	if (soap_out_xsd__positiveInteger(soap, tag?tag:"xsd:positiveInteger", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__positiveInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{	ULONG64 *p;
	p = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EAudioFormat(struct soap *soap, enum cusdk__EAudioFormat *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EAudioFormat
	*a = SOAP_DEFAULT_cusdk__EAudioFormat;
#else
	*a = (enum cusdk__EAudioFormat)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EAudioFormat[] =
{	{ (long)cusdk__MP3, "cusdk:MP3" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EAudioFormat2s(struct soap *soap, enum cusdk__EAudioFormat n)
{	const char *s = soap_code_str(soap_codes_cusdk__EAudioFormat, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EAudioFormat(struct soap *soap, const char *tag, int id, const enum cusdk__EAudioFormat *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EAudioFormat), type) || soap_send(soap, soap_cusdk__EAudioFormat2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EAudioFormat(struct soap *soap, const char *s, enum cusdk__EAudioFormat *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EAudioFormat, t);
	if (map)
		*a = (enum cusdk__EAudioFormat)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 0)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EAudioFormat)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EAudioFormat * SOAP_FMAC4 soap_in_cusdk__EAudioFormat(struct soap *soap, const char *tag, enum cusdk__EAudioFormat *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EAudioFormat *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EAudioFormat, sizeof(enum cusdk__EAudioFormat), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EAudioFormat(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EAudioFormat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EAudioFormat, 0, sizeof(enum cusdk__EAudioFormat), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EAudioFormat(struct soap *soap, const enum cusdk__EAudioFormat *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EAudioFormat);
	if (soap_out_cusdk__EAudioFormat(soap, tag?tag:"cusdk:EAudioFormat", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EAudioFormat * SOAP_FMAC4 soap_get_cusdk__EAudioFormat(struct soap *soap, enum cusdk__EAudioFormat *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EAudioFormat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EUserOrUserGroup(struct soap *soap, enum cusdk__EUserOrUserGroup *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EUserOrUserGroup
	*a = SOAP_DEFAULT_cusdk__EUserOrUserGroup;
#else
	*a = (enum cusdk__EUserOrUserGroup)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EUserOrUserGroup[] =
{	{ (long)cusdk__TypeUser, "cusdk:TypeUser" },
	{ (long)cusdk__TypeUserGroup, "cusdk:TypeUserGroup" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EUserOrUserGroup2s(struct soap *soap, enum cusdk__EUserOrUserGroup n)
{	const char *s = soap_code_str(soap_codes_cusdk__EUserOrUserGroup, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EUserOrUserGroup(struct soap *soap, const char *tag, int id, const enum cusdk__EUserOrUserGroup *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EUserOrUserGroup), type) || soap_send(soap, soap_cusdk__EUserOrUserGroup2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EUserOrUserGroup(struct soap *soap, const char *s, enum cusdk__EUserOrUserGroup *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EUserOrUserGroup, t);
	if (map)
		*a = (enum cusdk__EUserOrUserGroup)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EUserOrUserGroup)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EUserOrUserGroup * SOAP_FMAC4 soap_in_cusdk__EUserOrUserGroup(struct soap *soap, const char *tag, enum cusdk__EUserOrUserGroup *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EUserOrUserGroup *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EUserOrUserGroup, sizeof(enum cusdk__EUserOrUserGroup), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EUserOrUserGroup(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EUserOrUserGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EUserOrUserGroup, 0, sizeof(enum cusdk__EUserOrUserGroup), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EUserOrUserGroup(struct soap *soap, const enum cusdk__EUserOrUserGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EUserOrUserGroup);
	if (soap_out_cusdk__EUserOrUserGroup(soap, tag?tag:"cusdk:EUserOrUserGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EUserOrUserGroup * SOAP_FMAC4 soap_get_cusdk__EUserOrUserGroup(struct soap *soap, enum cusdk__EUserOrUserGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EUserOrUserGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EVideoSolution(struct soap *soap, enum cusdk__EVideoSolution *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EVideoSolution
	*a = SOAP_DEFAULT_cusdk__EVideoSolution;
#else
	*a = (enum cusdk__EVideoSolution)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EVideoSolution[] =
{	{ (long)cusdk__QCIF, "cusdk:QCIF" },
	{ (long)cusdk__CIF, "cusdk:CIF" },
	{ (long)cusdk__QVGA, "cusdk:QVGA" },
	{ (long)cusdk__VGA, "cusdk:VGA" },
	{ (long)cusdk__D1, "cusdk:D1" },
	{ (long)cusdk__HD720P, "cusdk:HD720P" },
	{ (long)cusdk__HD1080A, "cusdk:HD1080A" },
	{ (long)cusdk__HD1080P, "cusdk:HD1080P" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EVideoSolution2s(struct soap *soap, enum cusdk__EVideoSolution n)
{	const char *s = soap_code_str(soap_codes_cusdk__EVideoSolution, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EVideoSolution(struct soap *soap, const char *tag, int id, const enum cusdk__EVideoSolution *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EVideoSolution), type) || soap_send(soap, soap_cusdk__EVideoSolution2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EVideoSolution(struct soap *soap, const char *s, enum cusdk__EVideoSolution *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EVideoSolution, t);
	if (map)
		*a = (enum cusdk__EVideoSolution)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 7)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EVideoSolution)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EVideoSolution * SOAP_FMAC4 soap_in_cusdk__EVideoSolution(struct soap *soap, const char *tag, enum cusdk__EVideoSolution *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EVideoSolution *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EVideoSolution, sizeof(enum cusdk__EVideoSolution), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EVideoSolution(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EVideoSolution *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EVideoSolution, 0, sizeof(enum cusdk__EVideoSolution), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EVideoSolution(struct soap *soap, const enum cusdk__EVideoSolution *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EVideoSolution);
	if (soap_out_cusdk__EVideoSolution(soap, tag?tag:"cusdk:EVideoSolution", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EVideoSolution * SOAP_FMAC4 soap_get_cusdk__EVideoSolution(struct soap *soap, enum cusdk__EVideoSolution *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EVideoSolution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EVideoFormat(struct soap *soap, enum cusdk__EVideoFormat *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EVideoFormat
	*a = SOAP_DEFAULT_cusdk__EVideoFormat;
#else
	*a = (enum cusdk__EVideoFormat)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EVideoFormat[] =
{	{ (long)cusdk__H264, "cusdk:H264" },
	{ (long)cusdk__MPEG4, "cusdk:MPEG4" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EVideoFormat2s(struct soap *soap, enum cusdk__EVideoFormat n)
{	const char *s = soap_code_str(soap_codes_cusdk__EVideoFormat, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EVideoFormat(struct soap *soap, const char *tag, int id, const enum cusdk__EVideoFormat *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EVideoFormat), type) || soap_send(soap, soap_cusdk__EVideoFormat2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EVideoFormat(struct soap *soap, const char *s, enum cusdk__EVideoFormat *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EVideoFormat, t);
	if (map)
		*a = (enum cusdk__EVideoFormat)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EVideoFormat)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EVideoFormat * SOAP_FMAC4 soap_in_cusdk__EVideoFormat(struct soap *soap, const char *tag, enum cusdk__EVideoFormat *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EVideoFormat *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EVideoFormat, sizeof(enum cusdk__EVideoFormat), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EVideoFormat(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EVideoFormat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EVideoFormat, 0, sizeof(enum cusdk__EVideoFormat), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EVideoFormat(struct soap *soap, const enum cusdk__EVideoFormat *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EVideoFormat);
	if (soap_out_cusdk__EVideoFormat(soap, tag?tag:"cusdk:EVideoFormat", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EVideoFormat * SOAP_FMAC4 soap_get_cusdk__EVideoFormat(struct soap *soap, enum cusdk__EVideoFormat *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EVideoFormat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EPtzCmd(struct soap *soap, enum cusdk__EPtzCmd *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EPtzCmd
	*a = SOAP_DEFAULT_cusdk__EPtzCmd;
#else
	*a = (enum cusdk__EPtzCmd)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EPtzCmd[] =
{	{ (long)cusdk__PtzMoveUp, "cusdk:PtzMoveUp" },
	{ (long)cusdk__PtzMoveDown, "cusdk:PtzMoveDown" },
	{ (long)cusdk__PtzMoveLeft, "cusdk:PtzMoveLeft" },
	{ (long)cusdk__PtzMoveRight, "cusdk:PtzMoveRight" },
	{ (long)cusdk__PtzMoveHome, "cusdk:PtzMoveHome" },
	{ (long)cusdk__PtzMoveStop, "cusdk:PtzMoveStop" },
	{ (long)cusdk__PtzZoomIn, "cusdk:PtzZoomIn" },
	{ (long)cusdk__PtzZoomOut, "cusdk:PtzZoomOut" },
	{ (long)cusdk__PtzZoomStop, "cusdk:PtzZoomStop" },
	{ (long)cusdk__PtzFocusFar, "cusdk:PtzFocusFar" },
	{ (long)cusdk__PtzFocusNear, "cusdk:PtzFocusNear" },
	{ (long)cusdk__PtzFocusAuto, "cusdk:PtzFocusAuto" },
	{ (long)cusdk__PtzFocusStop, "cusdk:PtzFocusStop" },
	{ (long)cusdk__PtzPresetSave, "cusdk:PtzPresetSave" },
	{ (long)cusdk__PtzPresetCall, "cusdk:PtzPresetCall" },
	{ (long)cusdk__PtzChangeVideoSrc, "cusdk:PtzChangeVideoSrc" },
	{ (long)cusdk__PtzBrightUp, "cusdk:PtzBrightUp" },
	{ (long)cusdk__PtzBrightDown, "cusdk:PtzBrightDown" },
	{ (long)cusdk__PtzBrightStop, "cusdk:PtzBrightStop" },
	{ (long)cusdk__PtzCommandNew, "cusdk:PtzCommandNew" },
	{ (long)cusdk__PtzCommandAppend, "cusdk:PtzCommandAppend" },
	{ (long)cusdk__PtzGotoPoint, "cusdk:PtzGotoPoint" },
	{ (long)cusdk__PtzZoomArea, "cusdk:PtzZoomArea" },
	{ (long)cusdk__PtzAlecPanSpeed, "cusdk:PtzAlecPanSpeed" },
	{ (long)cusdk__PtzAlecTiltSpeed, "cusdk:PtzAlecTiltSpeed" },
	{ (long)cusdk__PtzSonySetBright, "cusdk:PtzSonySetBright" },
	{ (long)cusdk__PtzMatrixSwitch, "cusdk:PtzMatrixSwitch" },
	{ (long)cusdk__PtzMatrixVideoMix4, "cusdk:PtzMatrixVideoMix4" },
	{ (long)cusdk__PtzMatrixVideoMix9, "cusdk:PtzMatrixVideoMix9" },
	{ (long)cusdk__PtzMatrixVideoMix16, "cusdk:PtzMatrixVideoMix16" },
	{ (long)cusdk__PtzMatrixVideoMixPP, "cusdk:PtzMatrixVideoMixPP" },
	{ (long)cusdk__PtzZoomAreaStop, "cusdk:PtzZoomAreaStop" },
	{ (long)cusdk__PtzMenuUp, "cusdk:PtzMenuUp" },
	{ (long)cusdk__PtzMenuDown, "cusdk:PtzMenuDown" },
	{ (long)cusdk__PtzMenuLeft, "cusdk:PtzMenuLeft" },
	{ (long)cusdk__PtzMenuRight, "cusdk:PtzMenuRight" },
	{ (long)cusdk__PtzMenuShow, "cusdk:PtzMenuShow" },
	{ (long)cusdk__PtzMenuHide, "cusdk:PtzMenuHide" },
	{ (long)cusdk__PtzMenuEnter, "cusdk:PtzMenuEnter" },
	{ (long)cusdk__PtzMenuCancel, "cusdk:PtzMenuCancel" },
	{ (long)cusdk__PtzPresetDel, "cusdk:PtzPresetDel" },
	{ (long)cusdk__PtzMatrixSwitchASC, "cusdk:PtzMatrixSwitchASC" },
	{ (long)cusdk__PtzMatrixSwitchESC, "cusdk:PtzMatrixSwitchESC" },
	{ (long)cusdk__PtzMatrixHoldImage, "cusdk:PtzMatrixHoldImage" },
	{ (long)cusdk__PtzMoveLeftUp, "cusdk:PtzMoveLeftUp" },
	{ (long)cusdk__PtzMoveLeftDown, "cusdk:PtzMoveLeftDown" },
	{ (long)cusdk__PtzMoveRightUp, "cusdk:PtzMoveRightUp" },
	{ (long)cusdk__PtzMoveRightDown, "cusdk:PtzMoveRightDown" },
	{ (long)cusdk__PtzAutoScanStart, "cusdk:PtzAutoScanStart" },
	{ (long)cusdk__PtzAutoScanStop, "cusdk:PtzAutoScanStop" },
	{ (long)cusdk__PtzPresetScanStart, "cusdk:PtzPresetScanStart" },
	{ (long)cusdk__PtzPresetScanStop, "cusdk:PtzPresetScanStop" },
	{ (long)cusdk__PtzScanSpeedSet, "cusdk:PtzScanSpeedSet" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EPtzCmd2s(struct soap *soap, enum cusdk__EPtzCmd n)
{	const char *s = soap_code_str(soap_codes_cusdk__EPtzCmd, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EPtzCmd(struct soap *soap, const char *tag, int id, const enum cusdk__EPtzCmd *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EPtzCmd), type) || soap_send(soap, soap_cusdk__EPtzCmd2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EPtzCmd(struct soap *soap, const char *s, enum cusdk__EPtzCmd *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EPtzCmd, t);
	if (map)
		*a = (enum cusdk__EPtzCmd)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 132)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EPtzCmd)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EPtzCmd * SOAP_FMAC4 soap_in_cusdk__EPtzCmd(struct soap *soap, const char *tag, enum cusdk__EPtzCmd *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EPtzCmd *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EPtzCmd, sizeof(enum cusdk__EPtzCmd), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EPtzCmd(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EPtzCmd *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EPtzCmd, 0, sizeof(enum cusdk__EPtzCmd), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EPtzCmd(struct soap *soap, const enum cusdk__EPtzCmd *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EPtzCmd);
	if (soap_out_cusdk__EPtzCmd(soap, tag?tag:"cusdk:EPtzCmd", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EPtzCmd * SOAP_FMAC4 soap_get_cusdk__EPtzCmd(struct soap *soap, enum cusdk__EPtzCmd *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EPtzCmd(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EPuSubscribeType(struct soap *soap, enum cusdk__EPuSubscribeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EPuSubscribeType
	*a = SOAP_DEFAULT_cusdk__EPuSubscribeType;
#else
	*a = (enum cusdk__EPuSubscribeType)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EPuSubscribeType[] =
{	{ (long)cusdk__SubscribeOnlineStatus, "cusdk:SubscribeOnlineStatus" },
	{ (long)cusdk__SubscribeConfigStatus, "cusdk:SubscribeConfigStatus" },
	{ (long)cusdk__SubscribeServiceStatus, "cusdk:SubscribeServiceStatus" },
	{ (long)cusdk__SubscribeAlarmStatus, "cusdk:SubscribeAlarmStatus" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EPuSubscribeType2s(struct soap *soap, enum cusdk__EPuSubscribeType n)
{	const char *s = soap_code_str(soap_codes_cusdk__EPuSubscribeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EPuSubscribeType(struct soap *soap, const char *tag, int id, const enum cusdk__EPuSubscribeType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EPuSubscribeType), type) || soap_send(soap, soap_cusdk__EPuSubscribeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EPuSubscribeType(struct soap *soap, const char *s, enum cusdk__EPuSubscribeType *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EPuSubscribeType, t);
	if (map)
		*a = (enum cusdk__EPuSubscribeType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EPuSubscribeType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EPuSubscribeType * SOAP_FMAC4 soap_in_cusdk__EPuSubscribeType(struct soap *soap, const char *tag, enum cusdk__EPuSubscribeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EPuSubscribeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EPuSubscribeType, sizeof(enum cusdk__EPuSubscribeType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EPuSubscribeType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EPuSubscribeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EPuSubscribeType, 0, sizeof(enum cusdk__EPuSubscribeType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EPuSubscribeType(struct soap *soap, const enum cusdk__EPuSubscribeType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EPuSubscribeType);
	if (soap_out_cusdk__EPuSubscribeType(soap, tag?tag:"cusdk:EPuSubscribeType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EPuSubscribeType * SOAP_FMAC4 soap_get_cusdk__EPuSubscribeType(struct soap *soap, enum cusdk__EPuSubscribeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EPuSubscribeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EDeviceType(struct soap *soap, enum cusdk__EDeviceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EDeviceType
	*a = SOAP_DEFAULT_cusdk__EDeviceType;
#else
	*a = (enum cusdk__EDeviceType)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EDeviceType[] =
{	{ (long)cusdk__DevTypeUnknown, "cusdk:DevTypeUnknown" },
	{ (long)cusdk__DevTypeEncoder, "cusdk:DevTypeEncoder" },
	{ (long)cusdk__DevTypePUS, "cusdk:DevTypePUS" },
	{ (long)cusdk__DevTypeDecoder, "cusdk:DevTypeDecoder" },
	{ (long)cusdk__DevTypeTVWall, "cusdk:DevTypeTVWall" },
	{ (long)cusdk__DevTypeNVR, "cusdk:DevTypeNVR" },
	{ (long)cusdk__DevTypeSVR, "cusdk:DevTypeSVR" },
	{ (long)cusdk__DevAlarmHost, "cusdk:DevAlarmHost" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EDeviceType2s(struct soap *soap, enum cusdk__EDeviceType n)
{	const char *s = soap_code_str(soap_codes_cusdk__EDeviceType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EDeviceType(struct soap *soap, const char *tag, int id, const enum cusdk__EDeviceType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EDeviceType), type) || soap_send(soap, soap_cusdk__EDeviceType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EDeviceType(struct soap *soap, const char *s, enum cusdk__EDeviceType *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EDeviceType, t);
	if (map)
		*a = (enum cusdk__EDeviceType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 7)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EDeviceType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EDeviceType * SOAP_FMAC4 soap_in_cusdk__EDeviceType(struct soap *soap, const char *tag, enum cusdk__EDeviceType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EDeviceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EDeviceType, sizeof(enum cusdk__EDeviceType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EDeviceType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EDeviceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EDeviceType, 0, sizeof(enum cusdk__EDeviceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EDeviceType(struct soap *soap, const enum cusdk__EDeviceType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EDeviceType);
	if (soap_out_cusdk__EDeviceType(soap, tag?tag:"cusdk:EDeviceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EDeviceType * SOAP_FMAC4 soap_get_cusdk__EDeviceType(struct soap *soap, enum cusdk__EDeviceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EDeviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EDevicePri(struct soap *soap, enum cusdk__EDevicePri *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EDevicePri
	*a = SOAP_DEFAULT_cusdk__EDevicePri;
#else
	*a = (enum cusdk__EDevicePri)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EDevicePri[] =
{	{ (long)cusdk__PriPUPtz, "cusdk:PriPUPtz" },
	{ (long)cusdk__PriPURecStart, "cusdk:PriPURecStart" },
	{ (long)cusdk__PriPURecPlay, "cusdk:PriPURecPlay" },
	{ (long)cusdk__PriPURecDel, "cusdk:PriPURecDel" },
	{ (long)cusdk__PriPURecDownload, "cusdk:PriPURecDownload" },
	{ (long)cusdk__PriPUConfig, "cusdk:PriPUConfig" },
	{ (long)cusdk__PriPUAlarmInput, "cusdk:PriPUAlarmInput" },
	{ (long)cusdk__PriPUArmConfig, "cusdk:PriPUArmConfig" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EDevicePri2s(struct soap *soap, enum cusdk__EDevicePri n)
{	const char *s = soap_code_str(soap_codes_cusdk__EDevicePri, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EDevicePri(struct soap *soap, const char *tag, int id, const enum cusdk__EDevicePri *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EDevicePri), type) || soap_send(soap, soap_cusdk__EDevicePri2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EDevicePri(struct soap *soap, const char *s, enum cusdk__EDevicePri *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EDevicePri, t);
	if (map)
		*a = (enum cusdk__EDevicePri)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 7)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EDevicePri)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EDevicePri * SOAP_FMAC4 soap_in_cusdk__EDevicePri(struct soap *soap, const char *tag, enum cusdk__EDevicePri *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EDevicePri *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EDevicePri, sizeof(enum cusdk__EDevicePri), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EDevicePri(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EDevicePri *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EDevicePri, 0, sizeof(enum cusdk__EDevicePri), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EDevicePri(struct soap *soap, const enum cusdk__EDevicePri *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EDevicePri);
	if (soap_out_cusdk__EDevicePri(soap, tag?tag:"cusdk:EDevicePri", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EDevicePri * SOAP_FMAC4 soap_get_cusdk__EDevicePri(struct soap *soap, enum cusdk__EDevicePri *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EDevicePri(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EUserPri(struct soap *soap, enum cusdk__EUserPri *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EUserPri
	*a = SOAP_DEFAULT_cusdk__EUserPri;
#else
	*a = (enum cusdk__EUserPri)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EUserPri[] =
{	{ (long)cusdk__PriUserCMSRecStart, "cusdk:PriUserCMSRecStart" },
	{ (long)cusdk__PriUserCMSRecPlay, "cusdk:PriUserCMSRecPlay" },
	{ (long)cusdk__PriUserCMSRecDel, "cusdk:PriUserCMSRecDel" },
	{ (long)cusdk__PriUserCMSRecDownload, "cusdk:PriUserCMSRecDownload" },
	{ (long)cusdk__PriUserLocalRec, "cusdk:PriUserLocalRec" },
	{ (long)cusdk__PriUserCMSRecPlayOtherDomain, "cusdk:PriUserCMSRecPlayOtherDomain" },
	{ (long)cusdk__PriUserPUCall, "cusdk:PriUserPUCall" },
	{ (long)cusdk__PriUserAlarmLog, "cusdk:PriUserAlarmLog" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EUserPri2s(struct soap *soap, enum cusdk__EUserPri n)
{	const char *s = soap_code_str(soap_codes_cusdk__EUserPri, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EUserPri(struct soap *soap, const char *tag, int id, const enum cusdk__EUserPri *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EUserPri), type) || soap_send(soap, soap_cusdk__EUserPri2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EUserPri(struct soap *soap, const char *s, enum cusdk__EUserPri *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EUserPri, t);
	if (map)
		*a = (enum cusdk__EUserPri)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 7)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EUserPri)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EUserPri * SOAP_FMAC4 soap_in_cusdk__EUserPri(struct soap *soap, const char *tag, enum cusdk__EUserPri *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EUserPri *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EUserPri, sizeof(enum cusdk__EUserPri), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EUserPri(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EUserPri *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EUserPri, 0, sizeof(enum cusdk__EUserPri), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EUserPri(struct soap *soap, const enum cusdk__EUserPri *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EUserPri);
	if (soap_out_cusdk__EUserPri(soap, tag?tag:"cusdk:EUserPri", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EUserPri * SOAP_FMAC4 soap_get_cusdk__EUserPri(struct soap *soap, enum cusdk__EUserPri *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EUserPri(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EUserType(struct soap *soap, enum cusdk__EUserType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EUserType
	*a = SOAP_DEFAULT_cusdk__EUserType;
#else
	*a = (enum cusdk__EUserType)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EUserType[] =
{	{ (long)cusdk__UserTypeInvalid, "cusdk:UserTypeInvalid" },
	{ (long)cusdk__SuperAdmin, "cusdk:SuperAdmin" },
	{ (long)cusdk__Admin, "cusdk:Admin" },
	{ (long)cusdk__Operator, "cusdk:Operator" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EUserType2s(struct soap *soap, enum cusdk__EUserType n)
{	const char *s = soap_code_str(soap_codes_cusdk__EUserType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EUserType(struct soap *soap, const char *tag, int id, const enum cusdk__EUserType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EUserType), type) || soap_send(soap, soap_cusdk__EUserType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EUserType(struct soap *soap, const char *s, enum cusdk__EUserType *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EUserType, t);
	if (map)
		*a = (enum cusdk__EUserType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EUserType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EUserType * SOAP_FMAC4 soap_in_cusdk__EUserType(struct soap *soap, const char *tag, enum cusdk__EUserType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EUserType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EUserType, sizeof(enum cusdk__EUserType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EUserType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EUserType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EUserType, 0, sizeof(enum cusdk__EUserType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EUserType(struct soap *soap, const enum cusdk__EUserType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EUserType);
	if (soap_out_cusdk__EUserType(soap, tag?tag:"cusdk:EUserType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EUserType * SOAP_FMAC4 soap_get_cusdk__EUserType(struct soap *soap, enum cusdk__EUserType *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EUserType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__ETransMode(struct soap *soap, enum cusdk__ETransMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__ETransMode
	*a = SOAP_DEFAULT_cusdk__ETransMode;
#else
	*a = (enum cusdk__ETransMode)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__ETransMode[] =
{	{ (long)cusdk__UDP, "cusdk:UDP" },
	{ (long)cusdk__TCP, "cusdk:TCP" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__ETransMode2s(struct soap *soap, enum cusdk__ETransMode n)
{	const char *s = soap_code_str(soap_codes_cusdk__ETransMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ETransMode(struct soap *soap, const char *tag, int id, const enum cusdk__ETransMode *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ETransMode), type) || soap_send(soap, soap_cusdk__ETransMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__ETransMode(struct soap *soap, const char *s, enum cusdk__ETransMode *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__ETransMode, t);
	if (map)
		*a = (enum cusdk__ETransMode)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__ETransMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__ETransMode * SOAP_FMAC4 soap_in_cusdk__ETransMode(struct soap *soap, const char *tag, enum cusdk__ETransMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__ETransMode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ETransMode, sizeof(enum cusdk__ETransMode), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__ETransMode(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__ETransMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ETransMode, 0, sizeof(enum cusdk__ETransMode), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__ETransMode(struct soap *soap, const enum cusdk__ETransMode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__ETransMode);
	if (soap_out_cusdk__ETransMode(soap, tag?tag:"cusdk:ETransMode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__ETransMode * SOAP_FMAC4 soap_get_cusdk__ETransMode(struct soap *soap, enum cusdk__ETransMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ETransMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__EPlayMode(struct soap *soap, enum cusdk__EPlayMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_cusdk__EPlayMode
	*a = SOAP_DEFAULT_cusdk__EPlayMode;
#else
	*a = (enum cusdk__EPlayMode)0;
#endif
}

static const struct soap_code_map soap_codes_cusdk__EPlayMode[] =
{	{ (long)cusdk__VideoAudioBoth, "cusdk:VideoAudioBoth" },
	{ (long)cusdk__VideoOnly, "cusdk:VideoOnly" },
	{ (long)cusdk__AudioOnly, "cusdk:AudioOnly" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_cusdk__EPlayMode2s(struct soap *soap, enum cusdk__EPlayMode n)
{	const char *s = soap_code_str(soap_codes_cusdk__EPlayMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EPlayMode(struct soap *soap, const char *tag, int id, const enum cusdk__EPlayMode *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EPlayMode), type) || soap_send(soap, soap_cusdk__EPlayMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2cusdk__EPlayMode(struct soap *soap, const char *s, enum cusdk__EPlayMode *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_cusdk__EPlayMode, t);
	if (map)
		*a = (enum cusdk__EPlayMode)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum cusdk__EPlayMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum cusdk__EPlayMode * SOAP_FMAC4 soap_in_cusdk__EPlayMode(struct soap *soap, const char *tag, enum cusdk__EPlayMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum cusdk__EPlayMode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EPlayMode, sizeof(enum cusdk__EPlayMode), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2cusdk__EPlayMode(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum cusdk__EPlayMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EPlayMode, 0, sizeof(enum cusdk__EPlayMode), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__EPlayMode(struct soap *soap, const enum cusdk__EPlayMode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__EPlayMode);
	if (soap_out_cusdk__EPlayMode(soap, tag?tag:"cusdk:EPlayMode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum cusdk__EPlayMode * SOAP_FMAC4 soap_get_cusdk__EPlayMode(struct soap *soap, enum cusdk__EPlayMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EPlayMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__boolean2s(struct soap *soap, bool n)
{	return soap_bool2s(soap, n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__boolean), type) || soap_send(soap, soap_xsd__boolean2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__boolean(struct soap *soap, const char *s, bool *a)
{
	return soap_s2bool(soap, s, a);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2xsd__boolean(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__boolean, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__boolean);
	if (soap_out_xsd__boolean(soap, tag?tag:"xsd:boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void cusdk__GetDeviceBaseInfoRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__GetDeviceBaseInfoRsp::devInfo.cusdk__DeviceInfo::soap_default(soap);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetDeviceBaseInfoRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__GetDeviceBaseInfoRsp::devInfo.soap_serialize(soap);
}

int cusdk__GetDeviceBaseInfoRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetDeviceBaseInfoRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDeviceBaseInfoRsp(struct soap *soap, const char *tag, int id, const cusdk__GetDeviceBaseInfoRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp), "cusdk:GetDeviceBaseInfoRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:devInfo");
	if ((a->cusdk__GetDeviceBaseInfoRsp::devInfo).soap_out(soap, "cusdk:devInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetDeviceBaseInfoRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetDeviceBaseInfoRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetDeviceBaseInfoRsp * SOAP_FMAC4 soap_in_cusdk__GetDeviceBaseInfoRsp(struct soap *soap, const char *tag, cusdk__GetDeviceBaseInfoRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetDeviceBaseInfoRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp, sizeof(cusdk__GetDeviceBaseInfoRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetDeviceBaseInfoRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_devInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_devInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__GetDeviceBaseInfoRsp::devInfo).soap_in(soap, "cusdk:devInfo", "cusdk:DeviceInfo"))
				{	soap_flag_devInfo1--;
					continue;
				}
			soap_check_result(soap, "cusdk:devInfo");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetDeviceBaseInfoRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp, 0, sizeof(cusdk__GetDeviceBaseInfoRsp), 0, soap_copy_cusdk__GetDeviceBaseInfoRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_devInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetDeviceBaseInfoRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetDeviceBaseInfoRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetDeviceBaseInfoRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetDeviceBaseInfoRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetDeviceBaseInfoRsp * SOAP_FMAC4 soap_get_cusdk__GetDeviceBaseInfoRsp(struct soap *soap, cusdk__GetDeviceBaseInfoRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDeviceBaseInfoRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetDeviceBaseInfoRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetDeviceBaseInfoRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDeviceBaseInfoRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceBaseInfoRsp);
		if (size)
			*size = sizeof(cusdk__GetDeviceBaseInfoRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceBaseInfoRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetDeviceBaseInfoRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetDeviceBaseInfoRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDeviceBaseInfoRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetDeviceBaseInfoRsp %p -> %p\n", q, p));
	*(cusdk__GetDeviceBaseInfoRsp*)p = *(cusdk__GetDeviceBaseInfoRsp*)q;
}

void cusdk__GetDeviceBaseInfoReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetDeviceBaseInfoReq::devId);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetDeviceBaseInfoReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetDeviceBaseInfoReq::devId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetDeviceBaseInfoReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetDeviceBaseInfoReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDeviceBaseInfoReq(struct soap *soap, const char *tag, int id, const cusdk__GetDeviceBaseInfoReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDeviceBaseInfoReq), "cusdk:GetDeviceBaseInfoReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devId", -1, &(a->cusdk__GetDeviceBaseInfoReq::devId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetDeviceBaseInfoReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetDeviceBaseInfoReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetDeviceBaseInfoReq * SOAP_FMAC4 soap_in_cusdk__GetDeviceBaseInfoReq(struct soap *soap, const char *tag, cusdk__GetDeviceBaseInfoReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetDeviceBaseInfoReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDeviceBaseInfoReq, sizeof(cusdk__GetDeviceBaseInfoReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetDeviceBaseInfoReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetDeviceBaseInfoReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_devId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_devId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devId", &(a->cusdk__GetDeviceBaseInfoReq::devId), "xsd:string"))
				{	soap_flag_devId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetDeviceBaseInfoReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDeviceBaseInfoReq, 0, sizeof(cusdk__GetDeviceBaseInfoReq), 0, soap_copy_cusdk__GetDeviceBaseInfoReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_devId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetDeviceBaseInfoReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetDeviceBaseInfoReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetDeviceBaseInfoReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetDeviceBaseInfoReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetDeviceBaseInfoReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetDeviceBaseInfoReq * SOAP_FMAC4 soap_get_cusdk__GetDeviceBaseInfoReq(struct soap *soap, cusdk__GetDeviceBaseInfoReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDeviceBaseInfoReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetDeviceBaseInfoReq * SOAP_FMAC2 soap_instantiate_cusdk__GetDeviceBaseInfoReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDeviceBaseInfoReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDeviceBaseInfoReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceBaseInfoReq);
		if (size)
			*size = sizeof(cusdk__GetDeviceBaseInfoReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceBaseInfoReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetDeviceBaseInfoReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetDeviceBaseInfoReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDeviceBaseInfoReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetDeviceBaseInfoReq %p -> %p\n", q, p));
	*(cusdk__GetDeviceBaseInfoReq*)p = *(cusdk__GetDeviceBaseInfoReq*)q;
}

void cusdk__ModifyAuthorizationDeviceRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__ModifyAuthorizationDeviceRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__ModifyAuthorizationDeviceRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ModifyAuthorizationDeviceRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyAuthorizationDeviceRsp(struct soap *soap, const char *tag, int id, const cusdk__ModifyAuthorizationDeviceRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp), "cusdk:ModifyAuthorizationDeviceRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ModifyAuthorizationDeviceRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ModifyAuthorizationDeviceRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ModifyAuthorizationDeviceRsp * SOAP_FMAC4 soap_in_cusdk__ModifyAuthorizationDeviceRsp(struct soap *soap, const char *tag, cusdk__ModifyAuthorizationDeviceRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ModifyAuthorizationDeviceRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp, sizeof(cusdk__ModifyAuthorizationDeviceRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ModifyAuthorizationDeviceRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ModifyAuthorizationDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp, 0, sizeof(cusdk__ModifyAuthorizationDeviceRsp), 0, soap_copy_cusdk__ModifyAuthorizationDeviceRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ModifyAuthorizationDeviceRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:ModifyAuthorizationDeviceRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ModifyAuthorizationDeviceRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ModifyAuthorizationDeviceRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ModifyAuthorizationDeviceRsp * SOAP_FMAC4 soap_get_cusdk__ModifyAuthorizationDeviceRsp(struct soap *soap, cusdk__ModifyAuthorizationDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyAuthorizationDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ModifyAuthorizationDeviceRsp * SOAP_FMAC2 soap_instantiate_cusdk__ModifyAuthorizationDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyAuthorizationDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyAuthorizationDeviceRsp);
		if (size)
			*size = sizeof(cusdk__ModifyAuthorizationDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyAuthorizationDeviceRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ModifyAuthorizationDeviceRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ModifyAuthorizationDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyAuthorizationDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ModifyAuthorizationDeviceRsp %p -> %p\n", q, p));
	*(cusdk__ModifyAuthorizationDeviceRsp*)p = *(cusdk__ModifyAuthorizationDeviceRsp*)q;
}

void cusdk__ModifyAuthorizationDeviceReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__ModifyAuthorizationDeviceReq::authorizedDev.cusdk__AuthorizationDeviceInfo::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__ModifyAuthorizationDeviceReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__ModifyAuthorizationDeviceReq::authorizedDev.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__ModifyAuthorizationDeviceReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ModifyAuthorizationDeviceReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyAuthorizationDeviceReq(struct soap *soap, const char *tag, int id, const cusdk__ModifyAuthorizationDeviceReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq), "cusdk:ModifyAuthorizationDeviceReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if ((a->cusdk__ModifyAuthorizationDeviceReq::authorizedDev).soap_out(soap, "cusdk:authorizedDev", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ModifyAuthorizationDeviceReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ModifyAuthorizationDeviceReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ModifyAuthorizationDeviceReq * SOAP_FMAC4 soap_in_cusdk__ModifyAuthorizationDeviceReq(struct soap *soap, const char *tag, cusdk__ModifyAuthorizationDeviceReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ModifyAuthorizationDeviceReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq, sizeof(cusdk__ModifyAuthorizationDeviceReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ModifyAuthorizationDeviceReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_authorizedDev1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_authorizedDev1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__ModifyAuthorizationDeviceReq::authorizedDev).soap_in(soap, "cusdk:authorizedDev", "cusdk:AuthorizationDeviceInfo"))
				{	soap_flag_authorizedDev1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ModifyAuthorizationDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq, 0, sizeof(cusdk__ModifyAuthorizationDeviceReq), 0, soap_copy_cusdk__ModifyAuthorizationDeviceReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_authorizedDev1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ModifyAuthorizationDeviceReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq);
	if (this->soap_out(soap, tag?tag:"cusdk:ModifyAuthorizationDeviceReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ModifyAuthorizationDeviceReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ModifyAuthorizationDeviceReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ModifyAuthorizationDeviceReq * SOAP_FMAC4 soap_get_cusdk__ModifyAuthorizationDeviceReq(struct soap *soap, cusdk__ModifyAuthorizationDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyAuthorizationDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ModifyAuthorizationDeviceReq * SOAP_FMAC2 soap_instantiate_cusdk__ModifyAuthorizationDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyAuthorizationDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyAuthorizationDeviceReq);
		if (size)
			*size = sizeof(cusdk__ModifyAuthorizationDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyAuthorizationDeviceReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ModifyAuthorizationDeviceReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ModifyAuthorizationDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyAuthorizationDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ModifyAuthorizationDeviceReq %p -> %p\n", q, p));
	*(cusdk__ModifyAuthorizationDeviceReq*)p = *(cusdk__ModifyAuthorizationDeviceReq*)q;
}

void cusdk__DelAuthorizationDeviceRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__DelAuthorizationDeviceRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__DelAuthorizationDeviceRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DelAuthorizationDeviceRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelAuthorizationDeviceRsp(struct soap *soap, const char *tag, int id, const cusdk__DelAuthorizationDeviceRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp), "cusdk:DelAuthorizationDeviceRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DelAuthorizationDeviceRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DelAuthorizationDeviceRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DelAuthorizationDeviceRsp * SOAP_FMAC4 soap_in_cusdk__DelAuthorizationDeviceRsp(struct soap *soap, const char *tag, cusdk__DelAuthorizationDeviceRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DelAuthorizationDeviceRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp, sizeof(cusdk__DelAuthorizationDeviceRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DelAuthorizationDeviceRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DelAuthorizationDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp, 0, sizeof(cusdk__DelAuthorizationDeviceRsp), 0, soap_copy_cusdk__DelAuthorizationDeviceRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DelAuthorizationDeviceRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:DelAuthorizationDeviceRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DelAuthorizationDeviceRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DelAuthorizationDeviceRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DelAuthorizationDeviceRsp * SOAP_FMAC4 soap_get_cusdk__DelAuthorizationDeviceRsp(struct soap *soap, cusdk__DelAuthorizationDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelAuthorizationDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DelAuthorizationDeviceRsp * SOAP_FMAC2 soap_instantiate_cusdk__DelAuthorizationDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelAuthorizationDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelAuthorizationDeviceRsp);
		if (size)
			*size = sizeof(cusdk__DelAuthorizationDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelAuthorizationDeviceRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DelAuthorizationDeviceRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DelAuthorizationDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelAuthorizationDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DelAuthorizationDeviceRsp %p -> %p\n", q, p));
	*(cusdk__DelAuthorizationDeviceRsp*)p = *(cusdk__DelAuthorizationDeviceRsp*)q;
}

void cusdk__DelAuthorizationDeviceReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__DelAuthorizationDeviceReq::authorizedDev.cusdk__AuthorizationDeviceInfo::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__DelAuthorizationDeviceReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__DelAuthorizationDeviceReq::authorizedDev.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__DelAuthorizationDeviceReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DelAuthorizationDeviceReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelAuthorizationDeviceReq(struct soap *soap, const char *tag, int id, const cusdk__DelAuthorizationDeviceReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelAuthorizationDeviceReq), "cusdk:DelAuthorizationDeviceReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if ((a->cusdk__DelAuthorizationDeviceReq::authorizedDev).soap_out(soap, "cusdk:authorizedDev", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DelAuthorizationDeviceReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DelAuthorizationDeviceReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DelAuthorizationDeviceReq * SOAP_FMAC4 soap_in_cusdk__DelAuthorizationDeviceReq(struct soap *soap, const char *tag, cusdk__DelAuthorizationDeviceReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DelAuthorizationDeviceReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelAuthorizationDeviceReq, sizeof(cusdk__DelAuthorizationDeviceReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DelAuthorizationDeviceReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DelAuthorizationDeviceReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_authorizedDev1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_authorizedDev1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__DelAuthorizationDeviceReq::authorizedDev).soap_in(soap, "cusdk:authorizedDev", "cusdk:AuthorizationDeviceInfo"))
				{	soap_flag_authorizedDev1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DelAuthorizationDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelAuthorizationDeviceReq, 0, sizeof(cusdk__DelAuthorizationDeviceReq), 0, soap_copy_cusdk__DelAuthorizationDeviceReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_authorizedDev1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DelAuthorizationDeviceReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DelAuthorizationDeviceReq);
	if (this->soap_out(soap, tag?tag:"cusdk:DelAuthorizationDeviceReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DelAuthorizationDeviceReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DelAuthorizationDeviceReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DelAuthorizationDeviceReq * SOAP_FMAC4 soap_get_cusdk__DelAuthorizationDeviceReq(struct soap *soap, cusdk__DelAuthorizationDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelAuthorizationDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DelAuthorizationDeviceReq * SOAP_FMAC2 soap_instantiate_cusdk__DelAuthorizationDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelAuthorizationDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelAuthorizationDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelAuthorizationDeviceReq);
		if (size)
			*size = sizeof(cusdk__DelAuthorizationDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelAuthorizationDeviceReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DelAuthorizationDeviceReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DelAuthorizationDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelAuthorizationDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DelAuthorizationDeviceReq %p -> %p\n", q, p));
	*(cusdk__DelAuthorizationDeviceReq*)p = *(cusdk__DelAuthorizationDeviceReq*)q;
}

void cusdk__AddAuthorizationDeviceRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_time(soap, &this->cusdk__AddAuthorizationDeviceRsp::createTime);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__AddAuthorizationDeviceRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__AddAuthorizationDeviceRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__AddAuthorizationDeviceRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AddAuthorizationDeviceRsp(struct soap *soap, const char *tag, int id, const cusdk__AddAuthorizationDeviceRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp), "cusdk:AddAuthorizationDeviceRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:createTime");
	if (soap_out_time(soap, "cusdk:createTime", -1, &(a->cusdk__AddAuthorizationDeviceRsp::createTime), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__AddAuthorizationDeviceRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__AddAuthorizationDeviceRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__AddAuthorizationDeviceRsp * SOAP_FMAC4 soap_in_cusdk__AddAuthorizationDeviceRsp(struct soap *soap, const char *tag, cusdk__AddAuthorizationDeviceRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__AddAuthorizationDeviceRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp, sizeof(cusdk__AddAuthorizationDeviceRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__AddAuthorizationDeviceRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_createTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_createTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "cusdk:createTime", &(a->cusdk__AddAuthorizationDeviceRsp::createTime), "xsd:dateTime"))
				{	soap_flag_createTime1--;
					continue;
				}
			soap_check_result(soap, "cusdk:createTime");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__AddAuthorizationDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp, 0, sizeof(cusdk__AddAuthorizationDeviceRsp), 0, soap_copy_cusdk__AddAuthorizationDeviceRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_createTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__AddAuthorizationDeviceRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:AddAuthorizationDeviceRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__AddAuthorizationDeviceRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__AddAuthorizationDeviceRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__AddAuthorizationDeviceRsp * SOAP_FMAC4 soap_get_cusdk__AddAuthorizationDeviceRsp(struct soap *soap, cusdk__AddAuthorizationDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AddAuthorizationDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__AddAuthorizationDeviceRsp * SOAP_FMAC2 soap_instantiate_cusdk__AddAuthorizationDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__AddAuthorizationDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AddAuthorizationDeviceRsp);
		if (size)
			*size = sizeof(cusdk__AddAuthorizationDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AddAuthorizationDeviceRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__AddAuthorizationDeviceRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__AddAuthorizationDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__AddAuthorizationDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__AddAuthorizationDeviceRsp %p -> %p\n", q, p));
	*(cusdk__AddAuthorizationDeviceRsp*)p = *(cusdk__AddAuthorizationDeviceRsp*)q;
}

void cusdk__AddAuthorizationDeviceReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__AddAuthorizationDeviceReq::authorizedDev.cusdk__AuthorizationDeviceInfo::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__AddAuthorizationDeviceReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__AddAuthorizationDeviceReq::authorizedDev.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__AddAuthorizationDeviceReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__AddAuthorizationDeviceReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AddAuthorizationDeviceReq(struct soap *soap, const char *tag, int id, const cusdk__AddAuthorizationDeviceReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__AddAuthorizationDeviceReq), "cusdk:AddAuthorizationDeviceReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if ((a->cusdk__AddAuthorizationDeviceReq::authorizedDev).soap_out(soap, "cusdk:authorizedDev", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__AddAuthorizationDeviceReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__AddAuthorizationDeviceReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__AddAuthorizationDeviceReq * SOAP_FMAC4 soap_in_cusdk__AddAuthorizationDeviceReq(struct soap *soap, const char *tag, cusdk__AddAuthorizationDeviceReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__AddAuthorizationDeviceReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__AddAuthorizationDeviceReq, sizeof(cusdk__AddAuthorizationDeviceReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__AddAuthorizationDeviceReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__AddAuthorizationDeviceReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_authorizedDev1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_authorizedDev1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__AddAuthorizationDeviceReq::authorizedDev).soap_in(soap, "cusdk:authorizedDev", "cusdk:AuthorizationDeviceInfo"))
				{	soap_flag_authorizedDev1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__AddAuthorizationDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__AddAuthorizationDeviceReq, 0, sizeof(cusdk__AddAuthorizationDeviceReq), 0, soap_copy_cusdk__AddAuthorizationDeviceReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_authorizedDev1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__AddAuthorizationDeviceReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__AddAuthorizationDeviceReq);
	if (this->soap_out(soap, tag?tag:"cusdk:AddAuthorizationDeviceReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__AddAuthorizationDeviceReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__AddAuthorizationDeviceReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__AddAuthorizationDeviceReq * SOAP_FMAC4 soap_get_cusdk__AddAuthorizationDeviceReq(struct soap *soap, cusdk__AddAuthorizationDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AddAuthorizationDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__AddAuthorizationDeviceReq * SOAP_FMAC2 soap_instantiate_cusdk__AddAuthorizationDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__AddAuthorizationDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__AddAuthorizationDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AddAuthorizationDeviceReq);
		if (size)
			*size = sizeof(cusdk__AddAuthorizationDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AddAuthorizationDeviceReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__AddAuthorizationDeviceReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__AddAuthorizationDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__AddAuthorizationDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__AddAuthorizationDeviceReq %p -> %p\n", q, p));
	*(cusdk__AddAuthorizationDeviceReq*)p = *(cusdk__AddAuthorizationDeviceReq*)q;
}

void cusdk__GetAuthorizationDeviceRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(soap, &this->cusdk__GetAuthorizationDeviceRsp::authorizedDeviceList);
	soap_default_int(soap, &this->cusdk__GetAuthorizationDeviceRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetAuthorizationDeviceRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(soap, &this->cusdk__GetAuthorizationDeviceRsp::authorizedDeviceList);
}

int cusdk__GetAuthorizationDeviceRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetAuthorizationDeviceRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetAuthorizationDeviceRsp(struct soap *soap, const char *tag, int id, const cusdk__GetAuthorizationDeviceRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp), "cusdk:GetAuthorizationDeviceRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:authorizedDeviceList");
	if (soap_out_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(soap, "cusdk:authorizedDeviceList", -1, &(a->cusdk__GetAuthorizationDeviceRsp::authorizedDeviceList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetAuthorizationDeviceRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetAuthorizationDeviceRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetAuthorizationDeviceRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetAuthorizationDeviceRsp * SOAP_FMAC4 soap_in_cusdk__GetAuthorizationDeviceRsp(struct soap *soap, const char *tag, cusdk__GetAuthorizationDeviceRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetAuthorizationDeviceRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp, sizeof(cusdk__GetAuthorizationDeviceRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetAuthorizationDeviceRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(soap, "cusdk:authorizedDeviceList", &(a->cusdk__GetAuthorizationDeviceRsp::authorizedDeviceList), "cusdk:AuthorizationDeviceInfo"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetAuthorizationDeviceRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:authorizedDeviceList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetAuthorizationDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp, 0, sizeof(cusdk__GetAuthorizationDeviceRsp), 0, soap_copy_cusdk__GetAuthorizationDeviceRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetAuthorizationDeviceRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetAuthorizationDeviceRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetAuthorizationDeviceRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetAuthorizationDeviceRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetAuthorizationDeviceRsp * SOAP_FMAC4 soap_get_cusdk__GetAuthorizationDeviceRsp(struct soap *soap, cusdk__GetAuthorizationDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetAuthorizationDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetAuthorizationDeviceRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetAuthorizationDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetAuthorizationDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetAuthorizationDeviceRsp);
		if (size)
			*size = sizeof(cusdk__GetAuthorizationDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetAuthorizationDeviceRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetAuthorizationDeviceRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetAuthorizationDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetAuthorizationDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetAuthorizationDeviceRsp %p -> %p\n", q, p));
	*(cusdk__GetAuthorizationDeviceRsp*)p = *(cusdk__GetAuthorizationDeviceRsp*)q;
}

void cusdk__GetAuthorizationDeviceReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__GetAuthorizationDeviceReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetAuthorizationDeviceReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetAuthorizationDeviceReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetAuthorizationDeviceReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetAuthorizationDeviceReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetAuthorizationDeviceReq(struct soap *soap, const char *tag, int id, const cusdk__GetAuthorizationDeviceReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetAuthorizationDeviceReq), "cusdk:GetAuthorizationDeviceReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetAuthorizationDeviceReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetAuthorizationDeviceReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetAuthorizationDeviceReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetAuthorizationDeviceReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetAuthorizationDeviceReq * SOAP_FMAC4 soap_in_cusdk__GetAuthorizationDeviceReq(struct soap *soap, const char *tag, cusdk__GetAuthorizationDeviceReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetAuthorizationDeviceReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetAuthorizationDeviceReq, sizeof(cusdk__GetAuthorizationDeviceReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetAuthorizationDeviceReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetAuthorizationDeviceReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetAuthorizationDeviceReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetAuthorizationDeviceReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetAuthorizationDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetAuthorizationDeviceReq, 0, sizeof(cusdk__GetAuthorizationDeviceReq), 0, soap_copy_cusdk__GetAuthorizationDeviceReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetAuthorizationDeviceReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetAuthorizationDeviceReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetAuthorizationDeviceReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetAuthorizationDeviceReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetAuthorizationDeviceReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetAuthorizationDeviceReq * SOAP_FMAC4 soap_get_cusdk__GetAuthorizationDeviceReq(struct soap *soap, cusdk__GetAuthorizationDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetAuthorizationDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetAuthorizationDeviceReq * SOAP_FMAC2 soap_instantiate_cusdk__GetAuthorizationDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetAuthorizationDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetAuthorizationDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetAuthorizationDeviceReq);
		if (size)
			*size = sizeof(cusdk__GetAuthorizationDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetAuthorizationDeviceReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetAuthorizationDeviceReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetAuthorizationDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetAuthorizationDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetAuthorizationDeviceReq %p -> %p\n", q, p));
	*(cusdk__GetAuthorizationDeviceReq*)p = *(cusdk__GetAuthorizationDeviceReq*)q;
}

void cusdk__UserModifyDeviceRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__UserModifyDeviceRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__UserModifyDeviceRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserModifyDeviceRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserModifyDeviceRsp(struct soap *soap, const char *tag, int id, const cusdk__UserModifyDeviceRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserModifyDeviceRsp), "cusdk:UserModifyDeviceRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserModifyDeviceRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserModifyDeviceRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserModifyDeviceRsp * SOAP_FMAC4 soap_in_cusdk__UserModifyDeviceRsp(struct soap *soap, const char *tag, cusdk__UserModifyDeviceRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserModifyDeviceRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserModifyDeviceRsp, sizeof(cusdk__UserModifyDeviceRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserModifyDeviceRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserModifyDeviceRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserModifyDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserModifyDeviceRsp, 0, sizeof(cusdk__UserModifyDeviceRsp), 0, soap_copy_cusdk__UserModifyDeviceRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserModifyDeviceRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserModifyDeviceRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:UserModifyDeviceRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserModifyDeviceRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserModifyDeviceRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserModifyDeviceRsp * SOAP_FMAC4 soap_get_cusdk__UserModifyDeviceRsp(struct soap *soap, cusdk__UserModifyDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserModifyDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserModifyDeviceRsp * SOAP_FMAC2 soap_instantiate_cusdk__UserModifyDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserModifyDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserModifyDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserModifyDeviceRsp);
		if (size)
			*size = sizeof(cusdk__UserModifyDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserModifyDeviceRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserModifyDeviceRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserModifyDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserModifyDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserModifyDeviceRsp %p -> %p\n", q, p));
	*(cusdk__UserModifyDeviceRsp*)p = *(cusdk__UserModifyDeviceRsp*)q;
}

void cusdk__UserModifyDeviceReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__UserModifyDeviceReq::id);
	soap_default_cusdk__EUserOrUserGroup(soap, &this->cusdk__UserModifyDeviceReq::type);
	soap_default_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, &this->cusdk__UserModifyDeviceReq::deviceList);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__UserModifyDeviceReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__UserModifyDeviceReq::id);
	soap_serialize_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, &this->cusdk__UserModifyDeviceReq::deviceList);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__UserModifyDeviceReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserModifyDeviceReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserModifyDeviceReq(struct soap *soap, const char *tag, int id, const cusdk__UserModifyDeviceReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserModifyDeviceReq), "cusdk:UserModifyDeviceReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:id", -1, &(a->cusdk__UserModifyDeviceReq::id), ""))
		return soap->error;
	if (soap_out_cusdk__EUserOrUserGroup(soap, "cusdk:type", -1, &(a->cusdk__UserModifyDeviceReq::type), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, "cusdk:deviceList", -1, &(a->cusdk__UserModifyDeviceReq::deviceList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserModifyDeviceReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserModifyDeviceReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserModifyDeviceReq * SOAP_FMAC4 soap_in_cusdk__UserModifyDeviceReq(struct soap *soap, const char *tag, cusdk__UserModifyDeviceReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserModifyDeviceReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserModifyDeviceReq, sizeof(cusdk__UserModifyDeviceReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserModifyDeviceReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserModifyDeviceReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_type1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:id", &(a->cusdk__UserModifyDeviceReq::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EUserOrUserGroup(soap, "cusdk:type", &(a->cusdk__UserModifyDeviceReq::type), "cusdk:EUserOrUserGroup"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, "cusdk:deviceList", &(a->cusdk__UserModifyDeviceReq::deviceList), "cusdk:AssignDeviceInfo"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserModifyDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserModifyDeviceReq, 0, sizeof(cusdk__UserModifyDeviceReq), 0, soap_copy_cusdk__UserModifyDeviceReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_id1 > 0 || soap_flag_type1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserModifyDeviceReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserModifyDeviceReq);
	if (this->soap_out(soap, tag?tag:"cusdk:UserModifyDeviceReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserModifyDeviceReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserModifyDeviceReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserModifyDeviceReq * SOAP_FMAC4 soap_get_cusdk__UserModifyDeviceReq(struct soap *soap, cusdk__UserModifyDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserModifyDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserModifyDeviceReq * SOAP_FMAC2 soap_instantiate_cusdk__UserModifyDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserModifyDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserModifyDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserModifyDeviceReq);
		if (size)
			*size = sizeof(cusdk__UserModifyDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserModifyDeviceReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserModifyDeviceReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserModifyDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserModifyDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserModifyDeviceReq %p -> %p\n", q, p));
	*(cusdk__UserModifyDeviceReq*)p = *(cusdk__UserModifyDeviceReq*)q;
}

void cusdk__UserDelDeviceRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__UserDelDeviceRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__UserDelDeviceRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserDelDeviceRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserDelDeviceRsp(struct soap *soap, const char *tag, int id, const cusdk__UserDelDeviceRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserDelDeviceRsp), "cusdk:UserDelDeviceRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserDelDeviceRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserDelDeviceRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserDelDeviceRsp * SOAP_FMAC4 soap_in_cusdk__UserDelDeviceRsp(struct soap *soap, const char *tag, cusdk__UserDelDeviceRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserDelDeviceRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserDelDeviceRsp, sizeof(cusdk__UserDelDeviceRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserDelDeviceRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserDelDeviceRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserDelDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserDelDeviceRsp, 0, sizeof(cusdk__UserDelDeviceRsp), 0, soap_copy_cusdk__UserDelDeviceRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserDelDeviceRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserDelDeviceRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:UserDelDeviceRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserDelDeviceRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserDelDeviceRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserDelDeviceRsp * SOAP_FMAC4 soap_get_cusdk__UserDelDeviceRsp(struct soap *soap, cusdk__UserDelDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserDelDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserDelDeviceRsp * SOAP_FMAC2 soap_instantiate_cusdk__UserDelDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserDelDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserDelDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserDelDeviceRsp);
		if (size)
			*size = sizeof(cusdk__UserDelDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserDelDeviceRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserDelDeviceRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserDelDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserDelDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserDelDeviceRsp %p -> %p\n", q, p));
	*(cusdk__UserDelDeviceRsp*)p = *(cusdk__UserDelDeviceRsp*)q;
}

void cusdk__UserDelDeviceReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__UserDelDeviceReq::id);
	soap_default_cusdk__EUserOrUserGroup(soap, &this->cusdk__UserDelDeviceReq::type);
	soap_default_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, &this->cusdk__UserDelDeviceReq::deviceList);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__UserDelDeviceReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__UserDelDeviceReq::id);
	soap_serialize_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, &this->cusdk__UserDelDeviceReq::deviceList);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__UserDelDeviceReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserDelDeviceReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserDelDeviceReq(struct soap *soap, const char *tag, int id, const cusdk__UserDelDeviceReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserDelDeviceReq), "cusdk:UserDelDeviceReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:id", -1, &(a->cusdk__UserDelDeviceReq::id), ""))
		return soap->error;
	if (soap_out_cusdk__EUserOrUserGroup(soap, "cusdk:type", -1, &(a->cusdk__UserDelDeviceReq::type), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, "cusdk:deviceList", -1, &(a->cusdk__UserDelDeviceReq::deviceList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserDelDeviceReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserDelDeviceReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserDelDeviceReq * SOAP_FMAC4 soap_in_cusdk__UserDelDeviceReq(struct soap *soap, const char *tag, cusdk__UserDelDeviceReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserDelDeviceReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserDelDeviceReq, sizeof(cusdk__UserDelDeviceReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserDelDeviceReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserDelDeviceReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_type1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:id", &(a->cusdk__UserDelDeviceReq::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EUserOrUserGroup(soap, "cusdk:type", &(a->cusdk__UserDelDeviceReq::type), "cusdk:EUserOrUserGroup"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, "cusdk:deviceList", &(a->cusdk__UserDelDeviceReq::deviceList), "cusdk:AssignDeviceInfo"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserDelDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserDelDeviceReq, 0, sizeof(cusdk__UserDelDeviceReq), 0, soap_copy_cusdk__UserDelDeviceReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_id1 > 0 || soap_flag_type1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserDelDeviceReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserDelDeviceReq);
	if (this->soap_out(soap, tag?tag:"cusdk:UserDelDeviceReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserDelDeviceReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserDelDeviceReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserDelDeviceReq * SOAP_FMAC4 soap_get_cusdk__UserDelDeviceReq(struct soap *soap, cusdk__UserDelDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserDelDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserDelDeviceReq * SOAP_FMAC2 soap_instantiate_cusdk__UserDelDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserDelDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserDelDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserDelDeviceReq);
		if (size)
			*size = sizeof(cusdk__UserDelDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserDelDeviceReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserDelDeviceReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserDelDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserDelDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserDelDeviceReq %p -> %p\n", q, p));
	*(cusdk__UserDelDeviceReq*)p = *(cusdk__UserDelDeviceReq*)q;
}

void cusdk__UserAddDeviceRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__UserAddDeviceRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__UserAddDeviceRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserAddDeviceRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserAddDeviceRsp(struct soap *soap, const char *tag, int id, const cusdk__UserAddDeviceRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserAddDeviceRsp), "cusdk:UserAddDeviceRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserAddDeviceRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserAddDeviceRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserAddDeviceRsp * SOAP_FMAC4 soap_in_cusdk__UserAddDeviceRsp(struct soap *soap, const char *tag, cusdk__UserAddDeviceRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserAddDeviceRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserAddDeviceRsp, sizeof(cusdk__UserAddDeviceRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserAddDeviceRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserAddDeviceRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserAddDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserAddDeviceRsp, 0, sizeof(cusdk__UserAddDeviceRsp), 0, soap_copy_cusdk__UserAddDeviceRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserAddDeviceRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserAddDeviceRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:UserAddDeviceRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserAddDeviceRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserAddDeviceRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserAddDeviceRsp * SOAP_FMAC4 soap_get_cusdk__UserAddDeviceRsp(struct soap *soap, cusdk__UserAddDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserAddDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserAddDeviceRsp * SOAP_FMAC2 soap_instantiate_cusdk__UserAddDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserAddDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserAddDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserAddDeviceRsp);
		if (size)
			*size = sizeof(cusdk__UserAddDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserAddDeviceRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserAddDeviceRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserAddDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserAddDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserAddDeviceRsp %p -> %p\n", q, p));
	*(cusdk__UserAddDeviceRsp*)p = *(cusdk__UserAddDeviceRsp*)q;
}

void cusdk__UserAddDeviceReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__UserAddDeviceReq::id);
	soap_default_cusdk__EUserOrUserGroup(soap, &this->cusdk__UserAddDeviceReq::type);
	soap_default_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, &this->cusdk__UserAddDeviceReq::deviceList);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__UserAddDeviceReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__UserAddDeviceReq::id);
	soap_serialize_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, &this->cusdk__UserAddDeviceReq::deviceList);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__UserAddDeviceReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserAddDeviceReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserAddDeviceReq(struct soap *soap, const char *tag, int id, const cusdk__UserAddDeviceReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserAddDeviceReq), "cusdk:UserAddDeviceReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:id", -1, &(a->cusdk__UserAddDeviceReq::id), ""))
		return soap->error;
	if (soap_out_cusdk__EUserOrUserGroup(soap, "cusdk:type", -1, &(a->cusdk__UserAddDeviceReq::type), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, "cusdk:deviceList", -1, &(a->cusdk__UserAddDeviceReq::deviceList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserAddDeviceReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserAddDeviceReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserAddDeviceReq * SOAP_FMAC4 soap_in_cusdk__UserAddDeviceReq(struct soap *soap, const char *tag, cusdk__UserAddDeviceReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserAddDeviceReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserAddDeviceReq, sizeof(cusdk__UserAddDeviceReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserAddDeviceReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserAddDeviceReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_type1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:id", &(a->cusdk__UserAddDeviceReq::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EUserOrUserGroup(soap, "cusdk:type", &(a->cusdk__UserAddDeviceReq::type), "cusdk:EUserOrUserGroup"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, "cusdk:deviceList", &(a->cusdk__UserAddDeviceReq::deviceList), "cusdk:AssignDeviceInfo"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserAddDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserAddDeviceReq, 0, sizeof(cusdk__UserAddDeviceReq), 0, soap_copy_cusdk__UserAddDeviceReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_id1 > 0 || soap_flag_type1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserAddDeviceReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserAddDeviceReq);
	if (this->soap_out(soap, tag?tag:"cusdk:UserAddDeviceReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserAddDeviceReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserAddDeviceReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserAddDeviceReq * SOAP_FMAC4 soap_get_cusdk__UserAddDeviceReq(struct soap *soap, cusdk__UserAddDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserAddDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserAddDeviceReq * SOAP_FMAC2 soap_instantiate_cusdk__UserAddDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserAddDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserAddDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserAddDeviceReq);
		if (size)
			*size = sizeof(cusdk__UserAddDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserAddDeviceReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserAddDeviceReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserAddDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserAddDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserAddDeviceReq %p -> %p\n", q, p));
	*(cusdk__UserAddDeviceReq*)p = *(cusdk__UserAddDeviceReq*)q;
}

void cusdk__UserGetDeviceByGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, &this->cusdk__UserGetDeviceByGroupRsp::deviceList);
	soap_default_int(soap, &this->cusdk__UserGetDeviceByGroupRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__UserGetDeviceByGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, &this->cusdk__UserGetDeviceByGroupRsp::deviceList);
}

int cusdk__UserGetDeviceByGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserGetDeviceByGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserGetDeviceByGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__UserGetDeviceByGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp), "cusdk:UserGetDeviceByGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:deviceList");
	if (soap_out_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, "cusdk:deviceList", -1, &(a->cusdk__UserGetDeviceByGroupRsp::deviceList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__UserGetDeviceByGroupRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserGetDeviceByGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserGetDeviceByGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserGetDeviceByGroupRsp * SOAP_FMAC4 soap_in_cusdk__UserGetDeviceByGroupRsp(struct soap *soap, const char *tag, cusdk__UserGetDeviceByGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserGetDeviceByGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp, sizeof(cusdk__UserGetDeviceByGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserGetDeviceByGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, "cusdk:deviceList", &(a->cusdk__UserGetDeviceByGroupRsp::deviceList), "cusdk:AssignDeviceInfo"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__UserGetDeviceByGroupRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:deviceList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserGetDeviceByGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp, 0, sizeof(cusdk__UserGetDeviceByGroupRsp), 0, soap_copy_cusdk__UserGetDeviceByGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserGetDeviceByGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:UserGetDeviceByGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserGetDeviceByGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserGetDeviceByGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserGetDeviceByGroupRsp * SOAP_FMAC4 soap_get_cusdk__UserGetDeviceByGroupRsp(struct soap *soap, cusdk__UserGetDeviceByGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserGetDeviceByGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserGetDeviceByGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__UserGetDeviceByGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserGetDeviceByGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGetDeviceByGroupRsp);
		if (size)
			*size = sizeof(cusdk__UserGetDeviceByGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGetDeviceByGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserGetDeviceByGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserGetDeviceByGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserGetDeviceByGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserGetDeviceByGroupRsp %p -> %p\n", q, p));
	*(cusdk__UserGetDeviceByGroupRsp*)p = *(cusdk__UserGetDeviceByGroupRsp*)q;
}

void cusdk__UserGetDeviceByGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__UserGetDeviceByGroupReq::id);
	soap_default_cusdk__EUserOrUserGroup(soap, &this->cusdk__UserGetDeviceByGroupReq::type);
	soap_default_xsd__string(soap, &this->cusdk__UserGetDeviceByGroupReq::deviceGroupId);
	soap_default_xsd__int(soap, &this->cusdk__UserGetDeviceByGroupReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__UserGetDeviceByGroupReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__UserGetDeviceByGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__UserGetDeviceByGroupReq::id);
	soap_serialize_xsd__string(soap, &this->cusdk__UserGetDeviceByGroupReq::deviceGroupId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__UserGetDeviceByGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserGetDeviceByGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserGetDeviceByGroupReq(struct soap *soap, const char *tag, int id, const cusdk__UserGetDeviceByGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserGetDeviceByGroupReq), "cusdk:UserGetDeviceByGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:id", -1, &(a->cusdk__UserGetDeviceByGroupReq::id), ""))
		return soap->error;
	if (soap_out_cusdk__EUserOrUserGroup(soap, "cusdk:type", -1, &(a->cusdk__UserGetDeviceByGroupReq::type), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:deviceGroupId", -1, &(a->cusdk__UserGetDeviceByGroupReq::deviceGroupId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__UserGetDeviceByGroupReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__UserGetDeviceByGroupReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserGetDeviceByGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserGetDeviceByGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserGetDeviceByGroupReq * SOAP_FMAC4 soap_in_cusdk__UserGetDeviceByGroupReq(struct soap *soap, const char *tag, cusdk__UserGetDeviceByGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserGetDeviceByGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserGetDeviceByGroupReq, sizeof(cusdk__UserGetDeviceByGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserGetDeviceByGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserGetDeviceByGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_type1 = 1;
	size_t soap_flag_deviceGroupId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:id", &(a->cusdk__UserGetDeviceByGroupReq::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EUserOrUserGroup(soap, "cusdk:type", &(a->cusdk__UserGetDeviceByGroupReq::type), "cusdk:EUserOrUserGroup"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_deviceGroupId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:deviceGroupId", &(a->cusdk__UserGetDeviceByGroupReq::deviceGroupId), "xsd:string"))
				{	soap_flag_deviceGroupId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__UserGetDeviceByGroupReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__UserGetDeviceByGroupReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserGetDeviceByGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserGetDeviceByGroupReq, 0, sizeof(cusdk__UserGetDeviceByGroupReq), 0, soap_copy_cusdk__UserGetDeviceByGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_id1 > 0 || soap_flag_type1 > 0 || soap_flag_deviceGroupId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserGetDeviceByGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserGetDeviceByGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:UserGetDeviceByGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserGetDeviceByGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserGetDeviceByGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserGetDeviceByGroupReq * SOAP_FMAC4 soap_get_cusdk__UserGetDeviceByGroupReq(struct soap *soap, cusdk__UserGetDeviceByGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserGetDeviceByGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserGetDeviceByGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__UserGetDeviceByGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserGetDeviceByGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserGetDeviceByGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGetDeviceByGroupReq);
		if (size)
			*size = sizeof(cusdk__UserGetDeviceByGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGetDeviceByGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserGetDeviceByGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserGetDeviceByGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserGetDeviceByGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserGetDeviceByGroupReq %p -> %p\n", q, p));
	*(cusdk__UserGetDeviceByGroupReq*)p = *(cusdk__UserGetDeviceByGroupReq*)q;
}

void cusdk__ModifyUserRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__ModifyUserRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__ModifyUserRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ModifyUserRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyUserRsp(struct soap *soap, const char *tag, int id, const cusdk__ModifyUserRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyUserRsp), "cusdk:ModifyUserRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ModifyUserRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ModifyUserRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ModifyUserRsp * SOAP_FMAC4 soap_in_cusdk__ModifyUserRsp(struct soap *soap, const char *tag, cusdk__ModifyUserRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ModifyUserRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyUserRsp, sizeof(cusdk__ModifyUserRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ModifyUserRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ModifyUserRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ModifyUserRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyUserRsp, 0, sizeof(cusdk__ModifyUserRsp), 0, soap_copy_cusdk__ModifyUserRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ModifyUserRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyUserRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:ModifyUserRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ModifyUserRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ModifyUserRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ModifyUserRsp * SOAP_FMAC4 soap_get_cusdk__ModifyUserRsp(struct soap *soap, cusdk__ModifyUserRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyUserRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ModifyUserRsp * SOAP_FMAC2 soap_instantiate_cusdk__ModifyUserRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyUserRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyUserRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserRsp);
		if (size)
			*size = sizeof(cusdk__ModifyUserRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ModifyUserRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ModifyUserRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyUserRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ModifyUserRsp %p -> %p\n", q, p));
	*(cusdk__ModifyUserRsp*)p = *(cusdk__ModifyUserRsp*)q;
}

void cusdk__ModifyUserReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__ModifyUserReq::userInfo.cusdk__UserInfo::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__ModifyUserReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__ModifyUserReq::userInfo.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__ModifyUserReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ModifyUserReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyUserReq(struct soap *soap, const char *tag, int id, const cusdk__ModifyUserReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyUserReq), "cusdk:ModifyUserReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if ((a->cusdk__ModifyUserReq::userInfo).soap_out(soap, "cusdk:userInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ModifyUserReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ModifyUserReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ModifyUserReq * SOAP_FMAC4 soap_in_cusdk__ModifyUserReq(struct soap *soap, const char *tag, cusdk__ModifyUserReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ModifyUserReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyUserReq, sizeof(cusdk__ModifyUserReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ModifyUserReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ModifyUserReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__ModifyUserReq::userInfo).soap_in(soap, "cusdk:userInfo", "cusdk:UserInfo"))
				{	soap_flag_userInfo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ModifyUserReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyUserReq, 0, sizeof(cusdk__ModifyUserReq), 0, soap_copy_cusdk__ModifyUserReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ModifyUserReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyUserReq);
	if (this->soap_out(soap, tag?tag:"cusdk:ModifyUserReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ModifyUserReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ModifyUserReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ModifyUserReq * SOAP_FMAC4 soap_get_cusdk__ModifyUserReq(struct soap *soap, cusdk__ModifyUserReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyUserReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ModifyUserReq * SOAP_FMAC2 soap_instantiate_cusdk__ModifyUserReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyUserReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyUserReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserReq);
		if (size)
			*size = sizeof(cusdk__ModifyUserReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ModifyUserReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ModifyUserReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyUserReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ModifyUserReq %p -> %p\n", q, p));
	*(cusdk__ModifyUserReq*)p = *(cusdk__ModifyUserReq*)q;
}

void cusdk__DelUserRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__DelUserRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__DelUserRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DelUserRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelUserRsp(struct soap *soap, const char *tag, int id, const cusdk__DelUserRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelUserRsp), "cusdk:DelUserRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DelUserRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DelUserRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DelUserRsp * SOAP_FMAC4 soap_in_cusdk__DelUserRsp(struct soap *soap, const char *tag, cusdk__DelUserRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DelUserRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelUserRsp, sizeof(cusdk__DelUserRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DelUserRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DelUserRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DelUserRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelUserRsp, 0, sizeof(cusdk__DelUserRsp), 0, soap_copy_cusdk__DelUserRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DelUserRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DelUserRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:DelUserRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DelUserRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DelUserRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DelUserRsp * SOAP_FMAC4 soap_get_cusdk__DelUserRsp(struct soap *soap, cusdk__DelUserRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelUserRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DelUserRsp * SOAP_FMAC2 soap_instantiate_cusdk__DelUserRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelUserRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelUserRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserRsp);
		if (size)
			*size = sizeof(cusdk__DelUserRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DelUserRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DelUserRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelUserRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DelUserRsp %p -> %p\n", q, p));
	*(cusdk__DelUserRsp*)p = *(cusdk__DelUserRsp*)q;
}

void cusdk__DelUserReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DelUserReq::userId);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__DelUserReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DelUserReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__DelUserReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DelUserReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelUserReq(struct soap *soap, const char *tag, int id, const cusdk__DelUserReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelUserReq), "cusdk:DelUserReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__DelUserReq::userId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DelUserReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DelUserReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DelUserReq * SOAP_FMAC4 soap_in_cusdk__DelUserReq(struct soap *soap, const char *tag, cusdk__DelUserReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DelUserReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelUserReq, sizeof(cusdk__DelUserReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DelUserReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DelUserReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__DelUserReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DelUserReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelUserReq, 0, sizeof(cusdk__DelUserReq), 0, soap_copy_cusdk__DelUserReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DelUserReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DelUserReq);
	if (this->soap_out(soap, tag?tag:"cusdk:DelUserReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DelUserReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DelUserReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DelUserReq * SOAP_FMAC4 soap_get_cusdk__DelUserReq(struct soap *soap, cusdk__DelUserReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelUserReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DelUserReq * SOAP_FMAC2 soap_instantiate_cusdk__DelUserReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelUserReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelUserReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserReq);
		if (size)
			*size = sizeof(cusdk__DelUserReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DelUserReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DelUserReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelUserReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DelUserReq %p -> %p\n", q, p));
	*(cusdk__DelUserReq*)p = *(cusdk__DelUserReq*)q;
}

void cusdk__CreateUserRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__CreateUserRsp::userId);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__CreateUserRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__CreateUserRsp::userId);
}

int cusdk__CreateUserRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__CreateUserRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__CreateUserRsp(struct soap *soap, const char *tag, int id, const cusdk__CreateUserRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__CreateUserRsp), "cusdk:CreateUserRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:userId");
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__CreateUserRsp::userId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__CreateUserRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__CreateUserRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__CreateUserRsp * SOAP_FMAC4 soap_in_cusdk__CreateUserRsp(struct soap *soap, const char *tag, cusdk__CreateUserRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__CreateUserRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__CreateUserRsp, sizeof(cusdk__CreateUserRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__CreateUserRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__CreateUserRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_userId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__CreateUserRsp::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			soap_check_result(soap, "cusdk:userId");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__CreateUserRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__CreateUserRsp, 0, sizeof(cusdk__CreateUserRsp), 0, soap_copy_cusdk__CreateUserRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_userId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__CreateUserRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__CreateUserRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:CreateUserRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__CreateUserRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__CreateUserRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__CreateUserRsp * SOAP_FMAC4 soap_get_cusdk__CreateUserRsp(struct soap *soap, cusdk__CreateUserRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__CreateUserRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__CreateUserRsp * SOAP_FMAC2 soap_instantiate_cusdk__CreateUserRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__CreateUserRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__CreateUserRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserRsp);
		if (size)
			*size = sizeof(cusdk__CreateUserRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__CreateUserRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__CreateUserRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__CreateUserRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__CreateUserRsp %p -> %p\n", q, p));
	*(cusdk__CreateUserRsp*)p = *(cusdk__CreateUserRsp*)q;
}

void cusdk__CreateUserReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__CreateUserReq::userInfo.cusdk__UserInfo::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__CreateUserReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__CreateUserReq::userInfo.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__CreateUserReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__CreateUserReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__CreateUserReq(struct soap *soap, const char *tag, int id, const cusdk__CreateUserReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__CreateUserReq), "cusdk:CreateUserReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if ((a->cusdk__CreateUserReq::userInfo).soap_out(soap, "cusdk:userInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__CreateUserReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__CreateUserReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__CreateUserReq * SOAP_FMAC4 soap_in_cusdk__CreateUserReq(struct soap *soap, const char *tag, cusdk__CreateUserReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__CreateUserReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__CreateUserReq, sizeof(cusdk__CreateUserReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__CreateUserReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__CreateUserReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__CreateUserReq::userInfo).soap_in(soap, "cusdk:userInfo", "cusdk:UserInfo"))
				{	soap_flag_userInfo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__CreateUserReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__CreateUserReq, 0, sizeof(cusdk__CreateUserReq), 0, soap_copy_cusdk__CreateUserReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__CreateUserReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__CreateUserReq);
	if (this->soap_out(soap, tag?tag:"cusdk:CreateUserReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__CreateUserReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__CreateUserReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__CreateUserReq * SOAP_FMAC4 soap_get_cusdk__CreateUserReq(struct soap *soap, cusdk__CreateUserReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__CreateUserReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__CreateUserReq * SOAP_FMAC2 soap_instantiate_cusdk__CreateUserReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__CreateUserReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__CreateUserReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserReq);
		if (size)
			*size = sizeof(cusdk__CreateUserReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__CreateUserReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__CreateUserReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__CreateUserReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__CreateUserReq %p -> %p\n", q, p));
	*(cusdk__CreateUserReq*)p = *(cusdk__CreateUserReq*)q;
}

void cusdk__ModifyUserGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__ModifyUserGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__ModifyUserGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ModifyUserGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyUserGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__ModifyUserGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyUserGroupRsp), "cusdk:ModifyUserGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ModifyUserGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ModifyUserGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ModifyUserGroupRsp * SOAP_FMAC4 soap_in_cusdk__ModifyUserGroupRsp(struct soap *soap, const char *tag, cusdk__ModifyUserGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ModifyUserGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyUserGroupRsp, sizeof(cusdk__ModifyUserGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ModifyUserGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ModifyUserGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ModifyUserGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyUserGroupRsp, 0, sizeof(cusdk__ModifyUserGroupRsp), 0, soap_copy_cusdk__ModifyUserGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ModifyUserGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyUserGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:ModifyUserGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ModifyUserGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ModifyUserGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ModifyUserGroupRsp * SOAP_FMAC4 soap_get_cusdk__ModifyUserGroupRsp(struct soap *soap, cusdk__ModifyUserGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyUserGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ModifyUserGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__ModifyUserGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyUserGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyUserGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserGroupRsp);
		if (size)
			*size = sizeof(cusdk__ModifyUserGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ModifyUserGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ModifyUserGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyUserGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ModifyUserGroupRsp %p -> %p\n", q, p));
	*(cusdk__ModifyUserGroupRsp*)p = *(cusdk__ModifyUserGroupRsp*)q;
}

void cusdk__ModifyUserGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__ModifyUserGroupReq::userGroupInfo.cusdk__UserGroup::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__ModifyUserGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__ModifyUserGroupReq::userGroupInfo.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__ModifyUserGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ModifyUserGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyUserGroupReq(struct soap *soap, const char *tag, int id, const cusdk__ModifyUserGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyUserGroupReq), "cusdk:ModifyUserGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if ((a->cusdk__ModifyUserGroupReq::userGroupInfo).soap_out(soap, "cusdk:userGroupInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ModifyUserGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ModifyUserGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ModifyUserGroupReq * SOAP_FMAC4 soap_in_cusdk__ModifyUserGroupReq(struct soap *soap, const char *tag, cusdk__ModifyUserGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ModifyUserGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyUserGroupReq, sizeof(cusdk__ModifyUserGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ModifyUserGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ModifyUserGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userGroupInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userGroupInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__ModifyUserGroupReq::userGroupInfo).soap_in(soap, "cusdk:userGroupInfo", "cusdk:UserGroup"))
				{	soap_flag_userGroupInfo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ModifyUserGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyUserGroupReq, 0, sizeof(cusdk__ModifyUserGroupReq), 0, soap_copy_cusdk__ModifyUserGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userGroupInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ModifyUserGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyUserGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:ModifyUserGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ModifyUserGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ModifyUserGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ModifyUserGroupReq * SOAP_FMAC4 soap_get_cusdk__ModifyUserGroupReq(struct soap *soap, cusdk__ModifyUserGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyUserGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ModifyUserGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__ModifyUserGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyUserGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyUserGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserGroupReq);
		if (size)
			*size = sizeof(cusdk__ModifyUserGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ModifyUserGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ModifyUserGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyUserGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ModifyUserGroupReq %p -> %p\n", q, p));
	*(cusdk__ModifyUserGroupReq*)p = *(cusdk__ModifyUserGroupReq*)q;
}

void cusdk__DelUserGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__DelUserGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__DelUserGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DelUserGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelUserGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__DelUserGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelUserGroupRsp), "cusdk:DelUserGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DelUserGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DelUserGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DelUserGroupRsp * SOAP_FMAC4 soap_in_cusdk__DelUserGroupRsp(struct soap *soap, const char *tag, cusdk__DelUserGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DelUserGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelUserGroupRsp, sizeof(cusdk__DelUserGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DelUserGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DelUserGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DelUserGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelUserGroupRsp, 0, sizeof(cusdk__DelUserGroupRsp), 0, soap_copy_cusdk__DelUserGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DelUserGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DelUserGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:DelUserGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DelUserGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DelUserGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DelUserGroupRsp * SOAP_FMAC4 soap_get_cusdk__DelUserGroupRsp(struct soap *soap, cusdk__DelUserGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelUserGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DelUserGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__DelUserGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelUserGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelUserGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserGroupRsp);
		if (size)
			*size = sizeof(cusdk__DelUserGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DelUserGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DelUserGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelUserGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DelUserGroupRsp %p -> %p\n", q, p));
	*(cusdk__DelUserGroupRsp*)p = *(cusdk__DelUserGroupRsp*)q;
}

void cusdk__DelUserGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DelUserGroupReq::userGroupId);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__DelUserGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DelUserGroupReq::userGroupId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__DelUserGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DelUserGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelUserGroupReq(struct soap *soap, const char *tag, int id, const cusdk__DelUserGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelUserGroupReq), "cusdk:DelUserGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userGroupId", -1, &(a->cusdk__DelUserGroupReq::userGroupId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DelUserGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DelUserGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DelUserGroupReq * SOAP_FMAC4 soap_in_cusdk__DelUserGroupReq(struct soap *soap, const char *tag, cusdk__DelUserGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DelUserGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelUserGroupReq, sizeof(cusdk__DelUserGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DelUserGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DelUserGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userGroupId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userGroupId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userGroupId", &(a->cusdk__DelUserGroupReq::userGroupId), "xsd:string"))
				{	soap_flag_userGroupId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DelUserGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelUserGroupReq, 0, sizeof(cusdk__DelUserGroupReq), 0, soap_copy_cusdk__DelUserGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userGroupId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DelUserGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DelUserGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:DelUserGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DelUserGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DelUserGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DelUserGroupReq * SOAP_FMAC4 soap_get_cusdk__DelUserGroupReq(struct soap *soap, cusdk__DelUserGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelUserGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DelUserGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__DelUserGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelUserGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelUserGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserGroupReq);
		if (size)
			*size = sizeof(cusdk__DelUserGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DelUserGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DelUserGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelUserGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DelUserGroupReq %p -> %p\n", q, p));
	*(cusdk__DelUserGroupReq*)p = *(cusdk__DelUserGroupReq*)q;
}

void cusdk__CreateUserGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__CreateUserGroupRsp::userGroupId);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__CreateUserGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__CreateUserGroupRsp::userGroupId);
}

int cusdk__CreateUserGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__CreateUserGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__CreateUserGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__CreateUserGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__CreateUserGroupRsp), "cusdk:CreateUserGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:userGroupId");
	if (soap_out_xsd__string(soap, "cusdk:userGroupId", -1, &(a->cusdk__CreateUserGroupRsp::userGroupId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__CreateUserGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__CreateUserGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__CreateUserGroupRsp * SOAP_FMAC4 soap_in_cusdk__CreateUserGroupRsp(struct soap *soap, const char *tag, cusdk__CreateUserGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__CreateUserGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__CreateUserGroupRsp, sizeof(cusdk__CreateUserGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__CreateUserGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__CreateUserGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_userGroupId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_userGroupId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userGroupId", &(a->cusdk__CreateUserGroupRsp::userGroupId), "xsd:string"))
				{	soap_flag_userGroupId1--;
					continue;
				}
			soap_check_result(soap, "cusdk:userGroupId");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__CreateUserGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__CreateUserGroupRsp, 0, sizeof(cusdk__CreateUserGroupRsp), 0, soap_copy_cusdk__CreateUserGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_userGroupId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__CreateUserGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__CreateUserGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:CreateUserGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__CreateUserGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__CreateUserGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__CreateUserGroupRsp * SOAP_FMAC4 soap_get_cusdk__CreateUserGroupRsp(struct soap *soap, cusdk__CreateUserGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__CreateUserGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__CreateUserGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__CreateUserGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__CreateUserGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__CreateUserGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserGroupRsp);
		if (size)
			*size = sizeof(cusdk__CreateUserGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__CreateUserGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__CreateUserGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__CreateUserGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__CreateUserGroupRsp %p -> %p\n", q, p));
	*(cusdk__CreateUserGroupRsp*)p = *(cusdk__CreateUserGroupRsp*)q;
}

void cusdk__CreateUserGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__CreateUserGroupReq::userGroupInfo.cusdk__UserGroup::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__CreateUserGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__CreateUserGroupReq::userGroupInfo.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__CreateUserGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__CreateUserGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__CreateUserGroupReq(struct soap *soap, const char *tag, int id, const cusdk__CreateUserGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__CreateUserGroupReq), "cusdk:CreateUserGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if ((a->cusdk__CreateUserGroupReq::userGroupInfo).soap_out(soap, "cusdk:userGroupInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__CreateUserGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__CreateUserGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__CreateUserGroupReq * SOAP_FMAC4 soap_in_cusdk__CreateUserGroupReq(struct soap *soap, const char *tag, cusdk__CreateUserGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__CreateUserGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__CreateUserGroupReq, sizeof(cusdk__CreateUserGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__CreateUserGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__CreateUserGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userGroupInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userGroupInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__CreateUserGroupReq::userGroupInfo).soap_in(soap, "cusdk:userGroupInfo", "cusdk:UserGroup"))
				{	soap_flag_userGroupInfo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__CreateUserGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__CreateUserGroupReq, 0, sizeof(cusdk__CreateUserGroupReq), 0, soap_copy_cusdk__CreateUserGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userGroupInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__CreateUserGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__CreateUserGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:CreateUserGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__CreateUserGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__CreateUserGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__CreateUserGroupReq * SOAP_FMAC4 soap_get_cusdk__CreateUserGroupReq(struct soap *soap, cusdk__CreateUserGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__CreateUserGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__CreateUserGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__CreateUserGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__CreateUserGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__CreateUserGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserGroupReq);
		if (size)
			*size = sizeof(cusdk__CreateUserGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__CreateUserGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__CreateUserGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__CreateUserGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__CreateUserGroupReq %p -> %p\n", q, p));
	*(cusdk__CreateUserGroupReq*)p = *(cusdk__CreateUserGroupReq*)q;
}

void cusdk__GetUserGroupListRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__UserGroup(soap, &this->cusdk__GetUserGroupListRsp::userGroupList);
	soap_default_int(soap, &this->cusdk__GetUserGroupListRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetUserGroupListRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__UserGroup(soap, &this->cusdk__GetUserGroupListRsp::userGroupList);
}

int cusdk__GetUserGroupListRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserGroupListRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserGroupListRsp(struct soap *soap, const char *tag, int id, const cusdk__GetUserGroupListRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserGroupListRsp), "cusdk:GetUserGroupListRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:userGroupList");
	if (soap_out_std__vectorTemplateOfcusdk__UserGroup(soap, "cusdk:userGroupList", -1, &(a->cusdk__GetUserGroupListRsp::userGroupList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetUserGroupListRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserGroupListRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserGroupListRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserGroupListRsp * SOAP_FMAC4 soap_in_cusdk__GetUserGroupListRsp(struct soap *soap, const char *tag, cusdk__GetUserGroupListRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserGroupListRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserGroupListRsp, sizeof(cusdk__GetUserGroupListRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserGroupListRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserGroupListRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__UserGroup(soap, "cusdk:userGroupList", &(a->cusdk__GetUserGroupListRsp::userGroupList), "cusdk:UserGroup"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetUserGroupListRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:userGroupList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserGroupListRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserGroupListRsp, 0, sizeof(cusdk__GetUserGroupListRsp), 0, soap_copy_cusdk__GetUserGroupListRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserGroupListRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserGroupListRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserGroupListRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserGroupListRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserGroupListRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserGroupListRsp * SOAP_FMAC4 soap_get_cusdk__GetUserGroupListRsp(struct soap *soap, cusdk__GetUserGroupListRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserGroupListRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserGroupListRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetUserGroupListRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserGroupListRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserGroupListRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupListRsp);
		if (size)
			*size = sizeof(cusdk__GetUserGroupListRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupListRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserGroupListRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserGroupListRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserGroupListRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserGroupListRsp %p -> %p\n", q, p));
	*(cusdk__GetUserGroupListRsp*)p = *(cusdk__GetUserGroupListRsp*)q;
}

void cusdk__GetUserGroupListReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserGroupListReq::userId);
	soap_default_xsd__int(soap, &this->cusdk__GetUserGroupListReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetUserGroupListReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetUserGroupListReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserGroupListReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetUserGroupListReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserGroupListReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserGroupListReq(struct soap *soap, const char *tag, int id, const cusdk__GetUserGroupListReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserGroupListReq), "cusdk:GetUserGroupListReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__GetUserGroupListReq::userId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetUserGroupListReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetUserGroupListReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserGroupListReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserGroupListReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserGroupListReq * SOAP_FMAC4 soap_in_cusdk__GetUserGroupListReq(struct soap *soap, const char *tag, cusdk__GetUserGroupListReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserGroupListReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserGroupListReq, sizeof(cusdk__GetUserGroupListReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserGroupListReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserGroupListReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__GetUserGroupListReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetUserGroupListReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetUserGroupListReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserGroupListReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserGroupListReq, 0, sizeof(cusdk__GetUserGroupListReq), 0, soap_copy_cusdk__GetUserGroupListReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserGroupListReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserGroupListReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserGroupListReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserGroupListReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserGroupListReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserGroupListReq * SOAP_FMAC4 soap_get_cusdk__GetUserGroupListReq(struct soap *soap, cusdk__GetUserGroupListReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserGroupListReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserGroupListReq * SOAP_FMAC2 soap_instantiate_cusdk__GetUserGroupListReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserGroupListReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserGroupListReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupListReq);
		if (size)
			*size = sizeof(cusdk__GetUserGroupListReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupListReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserGroupListReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserGroupListReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserGroupListReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserGroupListReq %p -> %p\n", q, p));
	*(cusdk__GetUserGroupListReq*)p = *(cusdk__GetUserGroupListReq*)q;
}

void cusdk__GetUserListRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__UserInfo(soap, &this->cusdk__GetUserListRsp::userInfoList);
	soap_default_int(soap, &this->cusdk__GetUserListRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetUserListRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__UserInfo(soap, &this->cusdk__GetUserListRsp::userInfoList);
}

int cusdk__GetUserListRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserListRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserListRsp(struct soap *soap, const char *tag, int id, const cusdk__GetUserListRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserListRsp), "cusdk:GetUserListRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:userInfoList");
	if (soap_out_std__vectorTemplateOfcusdk__UserInfo(soap, "cusdk:userInfoList", -1, &(a->cusdk__GetUserListRsp::userInfoList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetUserListRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserListRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserListRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserListRsp * SOAP_FMAC4 soap_in_cusdk__GetUserListRsp(struct soap *soap, const char *tag, cusdk__GetUserListRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserListRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserListRsp, sizeof(cusdk__GetUserListRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserListRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserListRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__UserInfo(soap, "cusdk:userInfoList", &(a->cusdk__GetUserListRsp::userInfoList), "cusdk:UserInfo"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetUserListRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:userInfoList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserListRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserListRsp, 0, sizeof(cusdk__GetUserListRsp), 0, soap_copy_cusdk__GetUserListRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserListRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserListRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserListRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserListRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserListRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserListRsp * SOAP_FMAC4 soap_get_cusdk__GetUserListRsp(struct soap *soap, cusdk__GetUserListRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserListRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserListRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetUserListRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserListRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserListRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserListRsp);
		if (size)
			*size = sizeof(cusdk__GetUserListRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserListRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserListRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserListRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserListRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserListRsp %p -> %p\n", q, p));
	*(cusdk__GetUserListRsp*)p = *(cusdk__GetUserListRsp*)q;
}

void cusdk__GetUserListReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserListReq::userId);
	soap_default_xsd__int(soap, &this->cusdk__GetUserListReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetUserListReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetUserListReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserListReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetUserListReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserListReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserListReq(struct soap *soap, const char *tag, int id, const cusdk__GetUserListReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserListReq), "cusdk:GetUserListReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__GetUserListReq::userId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetUserListReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetUserListReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserListReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserListReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserListReq * SOAP_FMAC4 soap_in_cusdk__GetUserListReq(struct soap *soap, const char *tag, cusdk__GetUserListReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserListReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserListReq, sizeof(cusdk__GetUserListReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserListReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserListReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__GetUserListReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetUserListReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetUserListReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserListReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserListReq, 0, sizeof(cusdk__GetUserListReq), 0, soap_copy_cusdk__GetUserListReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserListReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserListReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserListReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserListReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserListReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserListReq * SOAP_FMAC4 soap_get_cusdk__GetUserListReq(struct soap *soap, cusdk__GetUserListReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserListReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserListReq * SOAP_FMAC2 soap_instantiate_cusdk__GetUserListReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserListReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserListReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserListReq);
		if (size)
			*size = sizeof(cusdk__GetUserListReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserListReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserListReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserListReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserListReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserListReq %p -> %p\n", q, p));
	*(cusdk__GetUserListReq*)p = *(cusdk__GetUserListReq*)q;
}

void cusdk__DeviceGroupDelDeviceRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__DeviceGroupDelDeviceRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__DeviceGroupDelDeviceRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DeviceGroupDelDeviceRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceGroupDelDeviceRsp(struct soap *soap, const char *tag, int id, const cusdk__DeviceGroupDelDeviceRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp), "cusdk:DeviceGroupDelDeviceRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DeviceGroupDelDeviceRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DeviceGroupDelDeviceRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DeviceGroupDelDeviceRsp * SOAP_FMAC4 soap_in_cusdk__DeviceGroupDelDeviceRsp(struct soap *soap, const char *tag, cusdk__DeviceGroupDelDeviceRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DeviceGroupDelDeviceRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp, sizeof(cusdk__DeviceGroupDelDeviceRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DeviceGroupDelDeviceRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DeviceGroupDelDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp, 0, sizeof(cusdk__DeviceGroupDelDeviceRsp), 0, soap_copy_cusdk__DeviceGroupDelDeviceRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DeviceGroupDelDeviceRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:DeviceGroupDelDeviceRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DeviceGroupDelDeviceRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DeviceGroupDelDeviceRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DeviceGroupDelDeviceRsp * SOAP_FMAC4 soap_get_cusdk__DeviceGroupDelDeviceRsp(struct soap *soap, cusdk__DeviceGroupDelDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceGroupDelDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DeviceGroupDelDeviceRsp * SOAP_FMAC2 soap_instantiate_cusdk__DeviceGroupDelDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceGroupDelDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupDelDeviceRsp);
		if (size)
			*size = sizeof(cusdk__DeviceGroupDelDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupDelDeviceRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DeviceGroupDelDeviceRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DeviceGroupDelDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceGroupDelDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DeviceGroupDelDeviceRsp %p -> %p\n", q, p));
	*(cusdk__DeviceGroupDelDeviceRsp*)p = *(cusdk__DeviceGroupDelDeviceRsp*)q;
}

void cusdk__DeviceGroupDelDeviceReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, &this->cusdk__DeviceGroupDelDeviceReq::relationList);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__DeviceGroupDelDeviceReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, &this->cusdk__DeviceGroupDelDeviceReq::relationList);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__DeviceGroupDelDeviceReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DeviceGroupDelDeviceReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceGroupDelDeviceReq(struct soap *soap, const char *tag, int id, const cusdk__DeviceGroupDelDeviceReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq), "cusdk:DeviceGroupDelDeviceReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, "cusdk:relationList", -1, &(a->cusdk__DeviceGroupDelDeviceReq::relationList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DeviceGroupDelDeviceReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DeviceGroupDelDeviceReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DeviceGroupDelDeviceReq * SOAP_FMAC4 soap_in_cusdk__DeviceGroupDelDeviceReq(struct soap *soap, const char *tag, cusdk__DeviceGroupDelDeviceReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DeviceGroupDelDeviceReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq, sizeof(cusdk__DeviceGroupDelDeviceReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DeviceGroupDelDeviceReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, "cusdk:relationList", &(a->cusdk__DeviceGroupDelDeviceReq::relationList), "cusdk:DeviceGroupRelation"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DeviceGroupDelDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq, 0, sizeof(cusdk__DeviceGroupDelDeviceReq), 0, soap_copy_cusdk__DeviceGroupDelDeviceReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DeviceGroupDelDeviceReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq);
	if (this->soap_out(soap, tag?tag:"cusdk:DeviceGroupDelDeviceReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DeviceGroupDelDeviceReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DeviceGroupDelDeviceReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DeviceGroupDelDeviceReq * SOAP_FMAC4 soap_get_cusdk__DeviceGroupDelDeviceReq(struct soap *soap, cusdk__DeviceGroupDelDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceGroupDelDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DeviceGroupDelDeviceReq * SOAP_FMAC2 soap_instantiate_cusdk__DeviceGroupDelDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceGroupDelDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupDelDeviceReq);
		if (size)
			*size = sizeof(cusdk__DeviceGroupDelDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupDelDeviceReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DeviceGroupDelDeviceReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DeviceGroupDelDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceGroupDelDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DeviceGroupDelDeviceReq %p -> %p\n", q, p));
	*(cusdk__DeviceGroupDelDeviceReq*)p = *(cusdk__DeviceGroupDelDeviceReq*)q;
}

void cusdk__DeviceGroupAddDeviceRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__DeviceGroupAddDeviceRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__DeviceGroupAddDeviceRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DeviceGroupAddDeviceRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceGroupAddDeviceRsp(struct soap *soap, const char *tag, int id, const cusdk__DeviceGroupAddDeviceRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp), "cusdk:DeviceGroupAddDeviceRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DeviceGroupAddDeviceRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DeviceGroupAddDeviceRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DeviceGroupAddDeviceRsp * SOAP_FMAC4 soap_in_cusdk__DeviceGroupAddDeviceRsp(struct soap *soap, const char *tag, cusdk__DeviceGroupAddDeviceRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DeviceGroupAddDeviceRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp, sizeof(cusdk__DeviceGroupAddDeviceRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DeviceGroupAddDeviceRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DeviceGroupAddDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp, 0, sizeof(cusdk__DeviceGroupAddDeviceRsp), 0, soap_copy_cusdk__DeviceGroupAddDeviceRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DeviceGroupAddDeviceRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:DeviceGroupAddDeviceRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DeviceGroupAddDeviceRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DeviceGroupAddDeviceRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DeviceGroupAddDeviceRsp * SOAP_FMAC4 soap_get_cusdk__DeviceGroupAddDeviceRsp(struct soap *soap, cusdk__DeviceGroupAddDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceGroupAddDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DeviceGroupAddDeviceRsp * SOAP_FMAC2 soap_instantiate_cusdk__DeviceGroupAddDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceGroupAddDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupAddDeviceRsp);
		if (size)
			*size = sizeof(cusdk__DeviceGroupAddDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupAddDeviceRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DeviceGroupAddDeviceRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DeviceGroupAddDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceGroupAddDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DeviceGroupAddDeviceRsp %p -> %p\n", q, p));
	*(cusdk__DeviceGroupAddDeviceRsp*)p = *(cusdk__DeviceGroupAddDeviceRsp*)q;
}

void cusdk__DeviceGroupAddDeviceReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, &this->cusdk__DeviceGroupAddDeviceReq::relationList);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__DeviceGroupAddDeviceReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, &this->cusdk__DeviceGroupAddDeviceReq::relationList);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__DeviceGroupAddDeviceReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DeviceGroupAddDeviceReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceGroupAddDeviceReq(struct soap *soap, const char *tag, int id, const cusdk__DeviceGroupAddDeviceReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq), "cusdk:DeviceGroupAddDeviceReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, "cusdk:relationList", -1, &(a->cusdk__DeviceGroupAddDeviceReq::relationList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DeviceGroupAddDeviceReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DeviceGroupAddDeviceReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DeviceGroupAddDeviceReq * SOAP_FMAC4 soap_in_cusdk__DeviceGroupAddDeviceReq(struct soap *soap, const char *tag, cusdk__DeviceGroupAddDeviceReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DeviceGroupAddDeviceReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq, sizeof(cusdk__DeviceGroupAddDeviceReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DeviceGroupAddDeviceReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, "cusdk:relationList", &(a->cusdk__DeviceGroupAddDeviceReq::relationList), "cusdk:DeviceGroupRelation"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DeviceGroupAddDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq, 0, sizeof(cusdk__DeviceGroupAddDeviceReq), 0, soap_copy_cusdk__DeviceGroupAddDeviceReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DeviceGroupAddDeviceReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq);
	if (this->soap_out(soap, tag?tag:"cusdk:DeviceGroupAddDeviceReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DeviceGroupAddDeviceReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DeviceGroupAddDeviceReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DeviceGroupAddDeviceReq * SOAP_FMAC4 soap_get_cusdk__DeviceGroupAddDeviceReq(struct soap *soap, cusdk__DeviceGroupAddDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceGroupAddDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DeviceGroupAddDeviceReq * SOAP_FMAC2 soap_instantiate_cusdk__DeviceGroupAddDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceGroupAddDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupAddDeviceReq);
		if (size)
			*size = sizeof(cusdk__DeviceGroupAddDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupAddDeviceReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DeviceGroupAddDeviceReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DeviceGroupAddDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceGroupAddDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DeviceGroupAddDeviceReq %p -> %p\n", q, p));
	*(cusdk__DeviceGroupAddDeviceReq*)p = *(cusdk__DeviceGroupAddDeviceReq*)q;
}

void cusdk__ModifyDeviceGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__ModifyDeviceGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__ModifyDeviceGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ModifyDeviceGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyDeviceGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__ModifyDeviceGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyDeviceGroupRsp), "cusdk:ModifyDeviceGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ModifyDeviceGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ModifyDeviceGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ModifyDeviceGroupRsp * SOAP_FMAC4 soap_in_cusdk__ModifyDeviceGroupRsp(struct soap *soap, const char *tag, cusdk__ModifyDeviceGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ModifyDeviceGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyDeviceGroupRsp, sizeof(cusdk__ModifyDeviceGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ModifyDeviceGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ModifyDeviceGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ModifyDeviceGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyDeviceGroupRsp, 0, sizeof(cusdk__ModifyDeviceGroupRsp), 0, soap_copy_cusdk__ModifyDeviceGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ModifyDeviceGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyDeviceGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:ModifyDeviceGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ModifyDeviceGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ModifyDeviceGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ModifyDeviceGroupRsp * SOAP_FMAC4 soap_get_cusdk__ModifyDeviceGroupRsp(struct soap *soap, cusdk__ModifyDeviceGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyDeviceGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ModifyDeviceGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__ModifyDeviceGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyDeviceGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyDeviceGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyDeviceGroupRsp);
		if (size)
			*size = sizeof(cusdk__ModifyDeviceGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyDeviceGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ModifyDeviceGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ModifyDeviceGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyDeviceGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ModifyDeviceGroupRsp %p -> %p\n", q, p));
	*(cusdk__ModifyDeviceGroupRsp*)p = *(cusdk__ModifyDeviceGroupRsp*)q;
}

void cusdk__ModifyDeviceGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__ModifyDeviceGroupReq::deviceGroupInfo.cusdk__DeviceGroup::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__ModifyDeviceGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__ModifyDeviceGroupReq::deviceGroupInfo.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__ModifyDeviceGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ModifyDeviceGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyDeviceGroupReq(struct soap *soap, const char *tag, int id, const cusdk__ModifyDeviceGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyDeviceGroupReq), "cusdk:ModifyDeviceGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if ((a->cusdk__ModifyDeviceGroupReq::deviceGroupInfo).soap_out(soap, "cusdk:deviceGroupInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ModifyDeviceGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ModifyDeviceGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ModifyDeviceGroupReq * SOAP_FMAC4 soap_in_cusdk__ModifyDeviceGroupReq(struct soap *soap, const char *tag, cusdk__ModifyDeviceGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ModifyDeviceGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyDeviceGroupReq, sizeof(cusdk__ModifyDeviceGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ModifyDeviceGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ModifyDeviceGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_deviceGroupInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_deviceGroupInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__ModifyDeviceGroupReq::deviceGroupInfo).soap_in(soap, "cusdk:deviceGroupInfo", "cusdk:DeviceGroup"))
				{	soap_flag_deviceGroupInfo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ModifyDeviceGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyDeviceGroupReq, 0, sizeof(cusdk__ModifyDeviceGroupReq), 0, soap_copy_cusdk__ModifyDeviceGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_deviceGroupInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ModifyDeviceGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyDeviceGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:ModifyDeviceGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ModifyDeviceGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ModifyDeviceGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ModifyDeviceGroupReq * SOAP_FMAC4 soap_get_cusdk__ModifyDeviceGroupReq(struct soap *soap, cusdk__ModifyDeviceGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyDeviceGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ModifyDeviceGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__ModifyDeviceGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyDeviceGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyDeviceGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyDeviceGroupReq);
		if (size)
			*size = sizeof(cusdk__ModifyDeviceGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyDeviceGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ModifyDeviceGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ModifyDeviceGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyDeviceGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ModifyDeviceGroupReq %p -> %p\n", q, p));
	*(cusdk__ModifyDeviceGroupReq*)p = *(cusdk__ModifyDeviceGroupReq*)q;
}

void cusdk__DelDeviceGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__DelDeviceGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__DelDeviceGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DelDeviceGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelDeviceGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__DelDeviceGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelDeviceGroupRsp), "cusdk:DelDeviceGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DelDeviceGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DelDeviceGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DelDeviceGroupRsp * SOAP_FMAC4 soap_in_cusdk__DelDeviceGroupRsp(struct soap *soap, const char *tag, cusdk__DelDeviceGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DelDeviceGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelDeviceGroupRsp, sizeof(cusdk__DelDeviceGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DelDeviceGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DelDeviceGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DelDeviceGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelDeviceGroupRsp, 0, sizeof(cusdk__DelDeviceGroupRsp), 0, soap_copy_cusdk__DelDeviceGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DelDeviceGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DelDeviceGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:DelDeviceGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DelDeviceGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DelDeviceGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DelDeviceGroupRsp * SOAP_FMAC4 soap_get_cusdk__DelDeviceGroupRsp(struct soap *soap, cusdk__DelDeviceGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelDeviceGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DelDeviceGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__DelDeviceGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelDeviceGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelDeviceGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelDeviceGroupRsp);
		if (size)
			*size = sizeof(cusdk__DelDeviceGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelDeviceGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DelDeviceGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DelDeviceGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelDeviceGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DelDeviceGroupRsp %p -> %p\n", q, p));
	*(cusdk__DelDeviceGroupRsp*)p = *(cusdk__DelDeviceGroupRsp*)q;
}

void cusdk__DelDeviceGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DelDeviceGroupReq::deviceGroupId);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__DelDeviceGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DelDeviceGroupReq::deviceGroupId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__DelDeviceGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DelDeviceGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelDeviceGroupReq(struct soap *soap, const char *tag, int id, const cusdk__DelDeviceGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelDeviceGroupReq), "cusdk:DelDeviceGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:deviceGroupId", -1, &(a->cusdk__DelDeviceGroupReq::deviceGroupId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DelDeviceGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DelDeviceGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DelDeviceGroupReq * SOAP_FMAC4 soap_in_cusdk__DelDeviceGroupReq(struct soap *soap, const char *tag, cusdk__DelDeviceGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DelDeviceGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelDeviceGroupReq, sizeof(cusdk__DelDeviceGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DelDeviceGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DelDeviceGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_deviceGroupId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_deviceGroupId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:deviceGroupId", &(a->cusdk__DelDeviceGroupReq::deviceGroupId), "xsd:string"))
				{	soap_flag_deviceGroupId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DelDeviceGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelDeviceGroupReq, 0, sizeof(cusdk__DelDeviceGroupReq), 0, soap_copy_cusdk__DelDeviceGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_deviceGroupId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DelDeviceGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DelDeviceGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:DelDeviceGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DelDeviceGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DelDeviceGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DelDeviceGroupReq * SOAP_FMAC4 soap_get_cusdk__DelDeviceGroupReq(struct soap *soap, cusdk__DelDeviceGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelDeviceGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DelDeviceGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__DelDeviceGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelDeviceGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelDeviceGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelDeviceGroupReq);
		if (size)
			*size = sizeof(cusdk__DelDeviceGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DelDeviceGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DelDeviceGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DelDeviceGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelDeviceGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DelDeviceGroupReq %p -> %p\n", q, p));
	*(cusdk__DelDeviceGroupReq*)p = *(cusdk__DelDeviceGroupReq*)q;
}

void cusdk__CreateDeviceGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__CreateDeviceGroupRsp::deviceGroupId);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__CreateDeviceGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__CreateDeviceGroupRsp::deviceGroupId);
}

int cusdk__CreateDeviceGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__CreateDeviceGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__CreateDeviceGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__CreateDeviceGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__CreateDeviceGroupRsp), "cusdk:CreateDeviceGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:deviceGroupId");
	if (soap_out_xsd__string(soap, "cusdk:deviceGroupId", -1, &(a->cusdk__CreateDeviceGroupRsp::deviceGroupId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__CreateDeviceGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__CreateDeviceGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__CreateDeviceGroupRsp * SOAP_FMAC4 soap_in_cusdk__CreateDeviceGroupRsp(struct soap *soap, const char *tag, cusdk__CreateDeviceGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__CreateDeviceGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__CreateDeviceGroupRsp, sizeof(cusdk__CreateDeviceGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__CreateDeviceGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__CreateDeviceGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_deviceGroupId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_deviceGroupId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:deviceGroupId", &(a->cusdk__CreateDeviceGroupRsp::deviceGroupId), "xsd:string"))
				{	soap_flag_deviceGroupId1--;
					continue;
				}
			soap_check_result(soap, "cusdk:deviceGroupId");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__CreateDeviceGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__CreateDeviceGroupRsp, 0, sizeof(cusdk__CreateDeviceGroupRsp), 0, soap_copy_cusdk__CreateDeviceGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_deviceGroupId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__CreateDeviceGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__CreateDeviceGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:CreateDeviceGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__CreateDeviceGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__CreateDeviceGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__CreateDeviceGroupRsp * SOAP_FMAC4 soap_get_cusdk__CreateDeviceGroupRsp(struct soap *soap, cusdk__CreateDeviceGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__CreateDeviceGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__CreateDeviceGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__CreateDeviceGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__CreateDeviceGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__CreateDeviceGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateDeviceGroupRsp);
		if (size)
			*size = sizeof(cusdk__CreateDeviceGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateDeviceGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__CreateDeviceGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__CreateDeviceGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__CreateDeviceGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__CreateDeviceGroupRsp %p -> %p\n", q, p));
	*(cusdk__CreateDeviceGroupRsp*)p = *(cusdk__CreateDeviceGroupRsp*)q;
}

void cusdk__CreateDeviceGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__CreateDeviceGroupReq::deviceGroupInfo.cusdk__DeviceGroup::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__CreateDeviceGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__CreateDeviceGroupReq::deviceGroupInfo.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__CreateDeviceGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__CreateDeviceGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__CreateDeviceGroupReq(struct soap *soap, const char *tag, int id, const cusdk__CreateDeviceGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__CreateDeviceGroupReq), "cusdk:CreateDeviceGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if ((a->cusdk__CreateDeviceGroupReq::deviceGroupInfo).soap_out(soap, "cusdk:deviceGroupInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__CreateDeviceGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__CreateDeviceGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__CreateDeviceGroupReq * SOAP_FMAC4 soap_in_cusdk__CreateDeviceGroupReq(struct soap *soap, const char *tag, cusdk__CreateDeviceGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__CreateDeviceGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__CreateDeviceGroupReq, sizeof(cusdk__CreateDeviceGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__CreateDeviceGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__CreateDeviceGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_deviceGroupInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_deviceGroupInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__CreateDeviceGroupReq::deviceGroupInfo).soap_in(soap, "cusdk:deviceGroupInfo", "cusdk:DeviceGroup"))
				{	soap_flag_deviceGroupInfo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__CreateDeviceGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__CreateDeviceGroupReq, 0, sizeof(cusdk__CreateDeviceGroupReq), 0, soap_copy_cusdk__CreateDeviceGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_deviceGroupInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__CreateDeviceGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__CreateDeviceGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:CreateDeviceGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__CreateDeviceGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__CreateDeviceGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__CreateDeviceGroupReq * SOAP_FMAC4 soap_get_cusdk__CreateDeviceGroupReq(struct soap *soap, cusdk__CreateDeviceGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__CreateDeviceGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__CreateDeviceGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__CreateDeviceGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__CreateDeviceGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__CreateDeviceGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateDeviceGroupReq);
		if (size)
			*size = sizeof(cusdk__CreateDeviceGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateDeviceGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__CreateDeviceGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__CreateDeviceGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__CreateDeviceGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__CreateDeviceGroupReq %p -> %p\n", q, p));
	*(cusdk__CreateDeviceGroupReq*)p = *(cusdk__CreateDeviceGroupReq*)q;
}

void cusdk__GetDeviceGroupDeviceRelationsRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, &this->cusdk__GetDeviceGroupDeviceRelationsRsp::devGroupRelationList);
	soap_default_int(soap, &this->cusdk__GetDeviceGroupDeviceRelationsRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetDeviceGroupDeviceRelationsRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, &this->cusdk__GetDeviceGroupDeviceRelationsRsp::devGroupRelationList);
}

int cusdk__GetDeviceGroupDeviceRelationsRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetDeviceGroupDeviceRelationsRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDeviceGroupDeviceRelationsRsp(struct soap *soap, const char *tag, int id, const cusdk__GetDeviceGroupDeviceRelationsRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp), "cusdk:GetDeviceGroupDeviceRelationsRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:devGroupRelationList");
	if (soap_out_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, "cusdk:devGroupRelationList", -1, &(a->cusdk__GetDeviceGroupDeviceRelationsRsp::devGroupRelationList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetDeviceGroupDeviceRelationsRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetDeviceGroupDeviceRelationsRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetDeviceGroupDeviceRelationsRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetDeviceGroupDeviceRelationsRsp * SOAP_FMAC4 soap_in_cusdk__GetDeviceGroupDeviceRelationsRsp(struct soap *soap, const char *tag, cusdk__GetDeviceGroupDeviceRelationsRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetDeviceGroupDeviceRelationsRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp, sizeof(cusdk__GetDeviceGroupDeviceRelationsRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetDeviceGroupDeviceRelationsRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, "cusdk:devGroupRelationList", &(a->cusdk__GetDeviceGroupDeviceRelationsRsp::devGroupRelationList), "cusdk:DeviceGroupRelation"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetDeviceGroupDeviceRelationsRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:devGroupRelationList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetDeviceGroupDeviceRelationsRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp, 0, sizeof(cusdk__GetDeviceGroupDeviceRelationsRsp), 0, soap_copy_cusdk__GetDeviceGroupDeviceRelationsRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetDeviceGroupDeviceRelationsRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetDeviceGroupDeviceRelationsRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetDeviceGroupDeviceRelationsRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetDeviceGroupDeviceRelationsRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetDeviceGroupDeviceRelationsRsp * SOAP_FMAC4 soap_get_cusdk__GetDeviceGroupDeviceRelationsRsp(struct soap *soap, cusdk__GetDeviceGroupDeviceRelationsRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDeviceGroupDeviceRelationsRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetDeviceGroupDeviceRelationsRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetDeviceGroupDeviceRelationsRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDeviceGroupDeviceRelationsRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceGroupDeviceRelationsRsp);
		if (size)
			*size = sizeof(cusdk__GetDeviceGroupDeviceRelationsRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceGroupDeviceRelationsRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetDeviceGroupDeviceRelationsRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetDeviceGroupDeviceRelationsRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDeviceGroupDeviceRelationsRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetDeviceGroupDeviceRelationsRsp %p -> %p\n", q, p));
	*(cusdk__GetDeviceGroupDeviceRelationsRsp*)p = *(cusdk__GetDeviceGroupDeviceRelationsRsp*)q;
}

void cusdk__GetDeviceGroupDeviceRelationsReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetDeviceGroupDeviceRelationsReq::userId);
	soap_default_xsd__int(soap, &this->cusdk__GetDeviceGroupDeviceRelationsReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetDeviceGroupDeviceRelationsReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetDeviceGroupDeviceRelationsReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetDeviceGroupDeviceRelationsReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetDeviceGroupDeviceRelationsReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetDeviceGroupDeviceRelationsReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDeviceGroupDeviceRelationsReq(struct soap *soap, const char *tag, int id, const cusdk__GetDeviceGroupDeviceRelationsReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq), "cusdk:GetDeviceGroupDeviceRelationsReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__GetDeviceGroupDeviceRelationsReq::userId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetDeviceGroupDeviceRelationsReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetDeviceGroupDeviceRelationsReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetDeviceGroupDeviceRelationsReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetDeviceGroupDeviceRelationsReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetDeviceGroupDeviceRelationsReq * SOAP_FMAC4 soap_in_cusdk__GetDeviceGroupDeviceRelationsReq(struct soap *soap, const char *tag, cusdk__GetDeviceGroupDeviceRelationsReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetDeviceGroupDeviceRelationsReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq, sizeof(cusdk__GetDeviceGroupDeviceRelationsReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetDeviceGroupDeviceRelationsReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__GetDeviceGroupDeviceRelationsReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetDeviceGroupDeviceRelationsReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetDeviceGroupDeviceRelationsReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetDeviceGroupDeviceRelationsReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq, 0, sizeof(cusdk__GetDeviceGroupDeviceRelationsReq), 0, soap_copy_cusdk__GetDeviceGroupDeviceRelationsReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetDeviceGroupDeviceRelationsReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetDeviceGroupDeviceRelationsReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetDeviceGroupDeviceRelationsReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetDeviceGroupDeviceRelationsReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetDeviceGroupDeviceRelationsReq * SOAP_FMAC4 soap_get_cusdk__GetDeviceGroupDeviceRelationsReq(struct soap *soap, cusdk__GetDeviceGroupDeviceRelationsReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDeviceGroupDeviceRelationsReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetDeviceGroupDeviceRelationsReq * SOAP_FMAC2 soap_instantiate_cusdk__GetDeviceGroupDeviceRelationsReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDeviceGroupDeviceRelationsReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceGroupDeviceRelationsReq);
		if (size)
			*size = sizeof(cusdk__GetDeviceGroupDeviceRelationsReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceGroupDeviceRelationsReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetDeviceGroupDeviceRelationsReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetDeviceGroupDeviceRelationsReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDeviceGroupDeviceRelationsReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetDeviceGroupDeviceRelationsReq %p -> %p\n", q, p));
	*(cusdk__GetDeviceGroupDeviceRelationsReq*)p = *(cusdk__GetDeviceGroupDeviceRelationsReq*)q;
}

void cusdk__GetDevByDomainRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceInfo(soap, &this->cusdk__GetDevByDomainRsp::devList);
	soap_default_int(soap, &this->cusdk__GetDevByDomainRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetDevByDomainRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceInfo(soap, &this->cusdk__GetDevByDomainRsp::devList);
}

int cusdk__GetDevByDomainRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetDevByDomainRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDevByDomainRsp(struct soap *soap, const char *tag, int id, const cusdk__GetDevByDomainRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDevByDomainRsp), "cusdk:GetDevByDomainRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:devList");
	if (soap_out_std__vectorTemplateOfcusdk__DeviceInfo(soap, "cusdk:devList", -1, &(a->cusdk__GetDevByDomainRsp::devList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetDevByDomainRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetDevByDomainRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetDevByDomainRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetDevByDomainRsp * SOAP_FMAC4 soap_in_cusdk__GetDevByDomainRsp(struct soap *soap, const char *tag, cusdk__GetDevByDomainRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetDevByDomainRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDevByDomainRsp, sizeof(cusdk__GetDevByDomainRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetDevByDomainRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetDevByDomainRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceInfo(soap, "cusdk:devList", &(a->cusdk__GetDevByDomainRsp::devList), "cusdk:DeviceInfo"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetDevByDomainRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:devList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetDevByDomainRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDevByDomainRsp, 0, sizeof(cusdk__GetDevByDomainRsp), 0, soap_copy_cusdk__GetDevByDomainRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetDevByDomainRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetDevByDomainRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetDevByDomainRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetDevByDomainRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetDevByDomainRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetDevByDomainRsp * SOAP_FMAC4 soap_get_cusdk__GetDevByDomainRsp(struct soap *soap, cusdk__GetDevByDomainRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDevByDomainRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetDevByDomainRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetDevByDomainRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDevByDomainRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDevByDomainRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDevByDomainRsp);
		if (size)
			*size = sizeof(cusdk__GetDevByDomainRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDevByDomainRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetDevByDomainRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetDevByDomainRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDevByDomainRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetDevByDomainRsp %p -> %p\n", q, p));
	*(cusdk__GetDevByDomainRsp*)p = *(cusdk__GetDevByDomainRsp*)q;
}

void cusdk__GetDevByDomainReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetDevByDomainReq::domainId);
	soap_default_xsd__string(soap, &this->cusdk__GetDevByDomainReq::userId);
	soap_default_xsd__int(soap, &this->cusdk__GetDevByDomainReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetDevByDomainReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetDevByDomainReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetDevByDomainReq::domainId);
	soap_serialize_xsd__string(soap, &this->cusdk__GetDevByDomainReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetDevByDomainReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetDevByDomainReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDevByDomainReq(struct soap *soap, const char *tag, int id, const cusdk__GetDevByDomainReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDevByDomainReq), "cusdk:GetDevByDomainReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:domainId", -1, &(a->cusdk__GetDevByDomainReq::domainId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__GetDevByDomainReq::userId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetDevByDomainReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetDevByDomainReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetDevByDomainReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetDevByDomainReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetDevByDomainReq * SOAP_FMAC4 soap_in_cusdk__GetDevByDomainReq(struct soap *soap, const char *tag, cusdk__GetDevByDomainReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetDevByDomainReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDevByDomainReq, sizeof(cusdk__GetDevByDomainReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetDevByDomainReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetDevByDomainReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_domainId1 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_domainId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:domainId", &(a->cusdk__GetDevByDomainReq::domainId), "xsd:string"))
				{	soap_flag_domainId1--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__GetDevByDomainReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetDevByDomainReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetDevByDomainReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetDevByDomainReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDevByDomainReq, 0, sizeof(cusdk__GetDevByDomainReq), 0, soap_copy_cusdk__GetDevByDomainReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_domainId1 > 0 || soap_flag_userId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetDevByDomainReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetDevByDomainReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetDevByDomainReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetDevByDomainReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetDevByDomainReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetDevByDomainReq * SOAP_FMAC4 soap_get_cusdk__GetDevByDomainReq(struct soap *soap, cusdk__GetDevByDomainReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDevByDomainReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetDevByDomainReq * SOAP_FMAC2 soap_instantiate_cusdk__GetDevByDomainReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDevByDomainReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDevByDomainReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDevByDomainReq);
		if (size)
			*size = sizeof(cusdk__GetDevByDomainReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDevByDomainReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetDevByDomainReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetDevByDomainReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDevByDomainReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetDevByDomainReq %p -> %p\n", q, p));
	*(cusdk__GetDevByDomainReq*)p = *(cusdk__GetDevByDomainReq*)q;
}

void cusdk__GetUserDevRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceInfo(soap, &this->cusdk__GetUserDevRsp::devList);
	soap_default_int(soap, &this->cusdk__GetUserDevRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetUserDevRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceInfo(soap, &this->cusdk__GetUserDevRsp::devList);
}

int cusdk__GetUserDevRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDevRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevRsp(struct soap *soap, const char *tag, int id, const cusdk__GetUserDevRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevRsp), "cusdk:GetUserDevRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:devList");
	if (soap_out_std__vectorTemplateOfcusdk__DeviceInfo(soap, "cusdk:devList", -1, &(a->cusdk__GetUserDevRsp::devList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetUserDevRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDevRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDevRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDevRsp * SOAP_FMAC4 soap_in_cusdk__GetUserDevRsp(struct soap *soap, const char *tag, cusdk__GetUserDevRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDevRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevRsp, sizeof(cusdk__GetUserDevRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDevRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDevRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceInfo(soap, "cusdk:devList", &(a->cusdk__GetUserDevRsp::devList), "cusdk:DeviceInfo"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetUserDevRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:devList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDevRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevRsp, 0, sizeof(cusdk__GetUserDevRsp), 0, soap_copy_cusdk__GetUserDevRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDevRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDevRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDevRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDevRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDevRsp * SOAP_FMAC4 soap_get_cusdk__GetUserDevRsp(struct soap *soap, cusdk__GetUserDevRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDevRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevRsp);
		if (size)
			*size = sizeof(cusdk__GetUserDevRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDevRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDevRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDevRsp %p -> %p\n", q, p));
	*(cusdk__GetUserDevRsp*)p = *(cusdk__GetUserDevRsp*)q;
}

void cusdk__GetUserDevReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserDevReq::userId);
	soap_default_xsd__int(soap, &this->cusdk__GetUserDevReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetUserDevReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetUserDevReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserDevReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetUserDevReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDevReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevReq(struct soap *soap, const char *tag, int id, const cusdk__GetUserDevReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevReq), "cusdk:GetUserDevReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__GetUserDevReq::userId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetUserDevReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetUserDevReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDevReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDevReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDevReq * SOAP_FMAC4 soap_in_cusdk__GetUserDevReq(struct soap *soap, const char *tag, cusdk__GetUserDevReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDevReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevReq, sizeof(cusdk__GetUserDevReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDevReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDevReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__GetUserDevReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetUserDevReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetUserDevReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDevReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevReq, 0, sizeof(cusdk__GetUserDevReq), 0, soap_copy_cusdk__GetUserDevReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDevReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDevReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDevReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDevReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDevReq * SOAP_FMAC4 soap_get_cusdk__GetUserDevReq(struct soap *soap, cusdk__GetUserDevReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDevReq * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevReq);
		if (size)
			*size = sizeof(cusdk__GetUserDevReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDevReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDevReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDevReq %p -> %p\n", q, p));
	*(cusdk__GetUserDevReq*)p = *(cusdk__GetUserDevReq*)q;
}

void cusdk__GetDomainDevGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetDomainDevGroupRsp::devGroupList);
	soap_default_int(soap, &this->cusdk__GetDomainDevGroupRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetDomainDevGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetDomainDevGroupRsp::devGroupList);
}

int cusdk__GetDomainDevGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetDomainDevGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDomainDevGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__GetDomainDevGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDomainDevGroupRsp), "cusdk:GetDomainDevGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:devGroupList");
	if (soap_out_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:devGroupList", -1, &(a->cusdk__GetDomainDevGroupRsp::devGroupList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetDomainDevGroupRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetDomainDevGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetDomainDevGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetDomainDevGroupRsp * SOAP_FMAC4 soap_in_cusdk__GetDomainDevGroupRsp(struct soap *soap, const char *tag, cusdk__GetDomainDevGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetDomainDevGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDomainDevGroupRsp, sizeof(cusdk__GetDomainDevGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetDomainDevGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetDomainDevGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:devGroupList", &(a->cusdk__GetDomainDevGroupRsp::devGroupList), "cusdk:DeviceGroup"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetDomainDevGroupRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:devGroupList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetDomainDevGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDomainDevGroupRsp, 0, sizeof(cusdk__GetDomainDevGroupRsp), 0, soap_copy_cusdk__GetDomainDevGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetDomainDevGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetDomainDevGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetDomainDevGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetDomainDevGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetDomainDevGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetDomainDevGroupRsp * SOAP_FMAC4 soap_get_cusdk__GetDomainDevGroupRsp(struct soap *soap, cusdk__GetDomainDevGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDomainDevGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetDomainDevGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetDomainDevGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDomainDevGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDomainDevGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDomainDevGroupRsp);
		if (size)
			*size = sizeof(cusdk__GetDomainDevGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDomainDevGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetDomainDevGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetDomainDevGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDomainDevGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetDomainDevGroupRsp %p -> %p\n", q, p));
	*(cusdk__GetDomainDevGroupRsp*)p = *(cusdk__GetDomainDevGroupRsp*)q;
}

void cusdk__GetDomainDevGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetDomainDevGroupReq::userId);
	soap_default_xsd__string(soap, &this->cusdk__GetDomainDevGroupReq::domainId);
	soap_default_xsd__int(soap, &this->cusdk__GetDomainDevGroupReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetDomainDevGroupReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetDomainDevGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetDomainDevGroupReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__GetDomainDevGroupReq::domainId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetDomainDevGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetDomainDevGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDomainDevGroupReq(struct soap *soap, const char *tag, int id, const cusdk__GetDomainDevGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDomainDevGroupReq), "cusdk:GetDomainDevGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__GetDomainDevGroupReq::userId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:domainId", -1, &(a->cusdk__GetDomainDevGroupReq::domainId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetDomainDevGroupReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetDomainDevGroupReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetDomainDevGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetDomainDevGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetDomainDevGroupReq * SOAP_FMAC4 soap_in_cusdk__GetDomainDevGroupReq(struct soap *soap, const char *tag, cusdk__GetDomainDevGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetDomainDevGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDomainDevGroupReq, sizeof(cusdk__GetDomainDevGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetDomainDevGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetDomainDevGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_domainId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__GetDomainDevGroupReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_domainId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:domainId", &(a->cusdk__GetDomainDevGroupReq::domainId), "xsd:string"))
				{	soap_flag_domainId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetDomainDevGroupReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetDomainDevGroupReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetDomainDevGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDomainDevGroupReq, 0, sizeof(cusdk__GetDomainDevGroupReq), 0, soap_copy_cusdk__GetDomainDevGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userId1 > 0 || soap_flag_domainId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetDomainDevGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetDomainDevGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetDomainDevGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetDomainDevGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetDomainDevGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetDomainDevGroupReq * SOAP_FMAC4 soap_get_cusdk__GetDomainDevGroupReq(struct soap *soap, cusdk__GetDomainDevGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDomainDevGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetDomainDevGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__GetDomainDevGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDomainDevGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDomainDevGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDomainDevGroupReq);
		if (size)
			*size = sizeof(cusdk__GetDomainDevGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDomainDevGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetDomainDevGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetDomainDevGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDomainDevGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetDomainDevGroupReq %p -> %p\n", q, p));
	*(cusdk__GetDomainDevGroupReq*)p = *(cusdk__GetDomainDevGroupReq*)q;
}

void cusdk__GetUserDevGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetUserDevGroupRsp::devGroupList);
	soap_default_int(soap, &this->cusdk__GetUserDevGroupRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetUserDevGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetUserDevGroupRsp::devGroupList);
}

int cusdk__GetUserDevGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDevGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__GetUserDevGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevGroupRsp), "cusdk:GetUserDevGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:devGroupList");
	if (soap_out_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:devGroupList", -1, &(a->cusdk__GetUserDevGroupRsp::devGroupList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetUserDevGroupRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDevGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDevGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDevGroupRsp * SOAP_FMAC4 soap_in_cusdk__GetUserDevGroupRsp(struct soap *soap, const char *tag, cusdk__GetUserDevGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDevGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevGroupRsp, sizeof(cusdk__GetUserDevGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDevGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDevGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:devGroupList", &(a->cusdk__GetUserDevGroupRsp::devGroupList), "cusdk:DeviceGroup"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetUserDevGroupRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:devGroupList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDevGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevGroupRsp, 0, sizeof(cusdk__GetUserDevGroupRsp), 0, soap_copy_cusdk__GetUserDevGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDevGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDevGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDevGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDevGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDevGroupRsp * SOAP_FMAC4 soap_get_cusdk__GetUserDevGroupRsp(struct soap *soap, cusdk__GetUserDevGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDevGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupRsp);
		if (size)
			*size = sizeof(cusdk__GetUserDevGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDevGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDevGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDevGroupRsp %p -> %p\n", q, p));
	*(cusdk__GetUserDevGroupRsp*)p = *(cusdk__GetUserDevGroupRsp*)q;
}

void cusdk__GetUserDevGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserDevGroupReq::userId);
	soap_default_xsd__int(soap, &this->cusdk__GetUserDevGroupReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetUserDevGroupReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetUserDevGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserDevGroupReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetUserDevGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDevGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevGroupReq(struct soap *soap, const char *tag, int id, const cusdk__GetUserDevGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevGroupReq), "cusdk:GetUserDevGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__GetUserDevGroupReq::userId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetUserDevGroupReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetUserDevGroupReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDevGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDevGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDevGroupReq * SOAP_FMAC4 soap_in_cusdk__GetUserDevGroupReq(struct soap *soap, const char *tag, cusdk__GetUserDevGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDevGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevGroupReq, sizeof(cusdk__GetUserDevGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDevGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDevGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__GetUserDevGroupReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetUserDevGroupReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetUserDevGroupReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDevGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevGroupReq, 0, sizeof(cusdk__GetUserDevGroupReq), 0, soap_copy_cusdk__GetUserDevGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDevGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDevGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDevGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDevGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDevGroupReq * SOAP_FMAC4 soap_get_cusdk__GetUserDevGroupReq(struct soap *soap, cusdk__GetUserDevGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDevGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupReq);
		if (size)
			*size = sizeof(cusdk__GetUserDevGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDevGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDevGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDevGroupReq %p -> %p\n", q, p));
	*(cusdk__GetUserDevGroupReq*)p = *(cusdk__GetUserDevGroupReq*)q;
}

void cusdk__GetUserDevByGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceInfo(soap, &this->cusdk__GetUserDevByGroupRsp::devList);
	soap_default_int(soap, &this->cusdk__GetUserDevByGroupRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetUserDevByGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceInfo(soap, &this->cusdk__GetUserDevByGroupRsp::devList);
}

int cusdk__GetUserDevByGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDevByGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevByGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__GetUserDevByGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevByGroupRsp), "cusdk:GetUserDevByGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:devList");
	if (soap_out_std__vectorTemplateOfcusdk__DeviceInfo(soap, "cusdk:devList", -1, &(a->cusdk__GetUserDevByGroupRsp::devList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetUserDevByGroupRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDevByGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDevByGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDevByGroupRsp * SOAP_FMAC4 soap_in_cusdk__GetUserDevByGroupRsp(struct soap *soap, const char *tag, cusdk__GetUserDevByGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDevByGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevByGroupRsp, sizeof(cusdk__GetUserDevByGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDevByGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDevByGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceInfo(soap, "cusdk:devList", &(a->cusdk__GetUserDevByGroupRsp::devList), "cusdk:DeviceInfo"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetUserDevByGroupRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:devList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDevByGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevByGroupRsp, 0, sizeof(cusdk__GetUserDevByGroupRsp), 0, soap_copy_cusdk__GetUserDevByGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDevByGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevByGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDevByGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDevByGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDevByGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDevByGroupRsp * SOAP_FMAC4 soap_get_cusdk__GetUserDevByGroupRsp(struct soap *soap, cusdk__GetUserDevByGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevByGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDevByGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevByGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevByGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevByGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevByGroupRsp);
		if (size)
			*size = sizeof(cusdk__GetUserDevByGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevByGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDevByGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDevByGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevByGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDevByGroupRsp %p -> %p\n", q, p));
	*(cusdk__GetUserDevByGroupRsp*)p = *(cusdk__GetUserDevByGroupRsp*)q;
}

void cusdk__GetUserDevByGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserDevByGroupReq::userId);
	soap_default_xsd__string(soap, &this->cusdk__GetUserDevByGroupReq::devGroupId);
	soap_default_xsd__int(soap, &this->cusdk__GetUserDevByGroupReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetUserDevByGroupReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetUserDevByGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserDevByGroupReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserDevByGroupReq::devGroupId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetUserDevByGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDevByGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevByGroupReq(struct soap *soap, const char *tag, int id, const cusdk__GetUserDevByGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevByGroupReq), "cusdk:GetUserDevByGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__GetUserDevByGroupReq::userId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devGroupId", -1, &(a->cusdk__GetUserDevByGroupReq::devGroupId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetUserDevByGroupReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetUserDevByGroupReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDevByGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDevByGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDevByGroupReq * SOAP_FMAC4 soap_in_cusdk__GetUserDevByGroupReq(struct soap *soap, const char *tag, cusdk__GetUserDevByGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDevByGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevByGroupReq, sizeof(cusdk__GetUserDevByGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDevByGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDevByGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_devGroupId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__GetUserDevByGroupReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_devGroupId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devGroupId", &(a->cusdk__GetUserDevByGroupReq::devGroupId), "xsd:string"))
				{	soap_flag_devGroupId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetUserDevByGroupReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetUserDevByGroupReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDevByGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevByGroupReq, 0, sizeof(cusdk__GetUserDevByGroupReq), 0, soap_copy_cusdk__GetUserDevByGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userId1 > 0 || soap_flag_devGroupId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDevByGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevByGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDevByGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDevByGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDevByGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDevByGroupReq * SOAP_FMAC4 soap_get_cusdk__GetUserDevByGroupReq(struct soap *soap, cusdk__GetUserDevByGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevByGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDevByGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevByGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevByGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevByGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevByGroupReq);
		if (size)
			*size = sizeof(cusdk__GetUserDevByGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevByGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDevByGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDevByGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevByGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDevByGroupReq %p -> %p\n", q, p));
	*(cusdk__GetUserDevByGroupReq*)p = *(cusdk__GetUserDevByGroupReq*)q;
}

void cusdk__GetUserDevGroupByGroupRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetUserDevGroupByGroupRsp::devGroupList);
	soap_default_int(soap, &this->cusdk__GetUserDevGroupByGroupRsp::totalNum);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetUserDevGroupByGroupRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetUserDevGroupByGroupRsp::devGroupList);
}

int cusdk__GetUserDevGroupByGroupRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDevGroupByGroupRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevGroupByGroupRsp(struct soap *soap, const char *tag, int id, const cusdk__GetUserDevGroupByGroupRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp), "cusdk:GetUserDevGroupByGroupRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:devGroupList");
	if (soap_out_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:devGroupList", -1, &(a->cusdk__GetUserDevGroupByGroupRsp::devGroupList), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:totalNum", -1, &(a->cusdk__GetUserDevGroupByGroupRsp::totalNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDevGroupByGroupRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDevGroupByGroupRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDevGroupByGroupRsp * SOAP_FMAC4 soap_in_cusdk__GetUserDevGroupByGroupRsp(struct soap *soap, const char *tag, cusdk__GetUserDevGroupByGroupRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDevGroupByGroupRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp, sizeof(cusdk__GetUserDevGroupByGroupRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDevGroupByGroupRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_totalNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:devGroupList", &(a->cusdk__GetUserDevGroupByGroupRsp::devGroupList), "cusdk:DeviceGroup"))
					continue;
			if (soap_flag_totalNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:totalNum", &(a->cusdk__GetUserDevGroupByGroupRsp::totalNum), "xsd:int"))
				{	soap_flag_totalNum1--;
					continue;
				}
			soap_check_result(soap, "cusdk:devGroupList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDevGroupByGroupRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp, 0, sizeof(cusdk__GetUserDevGroupByGroupRsp), 0, soap_copy_cusdk__GetUserDevGroupByGroupRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_totalNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDevGroupByGroupRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDevGroupByGroupRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDevGroupByGroupRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDevGroupByGroupRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDevGroupByGroupRsp * SOAP_FMAC4 soap_get_cusdk__GetUserDevGroupByGroupRsp(struct soap *soap, cusdk__GetUserDevGroupByGroupRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevGroupByGroupRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDevGroupByGroupRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevGroupByGroupRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevGroupByGroupRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupByGroupRsp);
		if (size)
			*size = sizeof(cusdk__GetUserDevGroupByGroupRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupByGroupRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDevGroupByGroupRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDevGroupByGroupRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevGroupByGroupRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDevGroupByGroupRsp %p -> %p\n", q, p));
	*(cusdk__GetUserDevGroupByGroupRsp*)p = *(cusdk__GetUserDevGroupByGroupRsp*)q;
}

void cusdk__GetUserDevGroupByGroupReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserDevGroupByGroupReq::userId);
	soap_default_xsd__string(soap, &this->cusdk__GetUserDevGroupByGroupReq::parentDevGroupId);
	soap_default_xsd__int(soap, &this->cusdk__GetUserDevGroupByGroupReq::beginIndex);
	soap_default_xsd__int(soap, &this->cusdk__GetUserDevGroupByGroupReq::num);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetUserDevGroupByGroupReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserDevGroupByGroupReq::userId);
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserDevGroupByGroupReq::parentDevGroupId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetUserDevGroupByGroupReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDevGroupByGroupReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevGroupByGroupReq(struct soap *soap, const char *tag, int id, const cusdk__GetUserDevGroupByGroupReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq), "cusdk:GetUserDevGroupByGroupReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userId", -1, &(a->cusdk__GetUserDevGroupByGroupReq::userId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:parentDevGroupId", -1, &(a->cusdk__GetUserDevGroupByGroupReq::parentDevGroupId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:beginIndex", -1, &(a->cusdk__GetUserDevGroupByGroupReq::beginIndex), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:num", -1, &(a->cusdk__GetUserDevGroupByGroupReq::num), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDevGroupByGroupReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDevGroupByGroupReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDevGroupByGroupReq * SOAP_FMAC4 soap_in_cusdk__GetUserDevGroupByGroupReq(struct soap *soap, const char *tag, cusdk__GetUserDevGroupByGroupReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDevGroupByGroupReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq, sizeof(cusdk__GetUserDevGroupByGroupReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDevGroupByGroupReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_parentDevGroupId1 = 1;
	size_t soap_flag_beginIndex1 = 1;
	size_t soap_flag_num1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userId", &(a->cusdk__GetUserDevGroupByGroupReq::userId), "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_parentDevGroupId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:parentDevGroupId", &(a->cusdk__GetUserDevGroupByGroupReq::parentDevGroupId), "xsd:string"))
				{	soap_flag_parentDevGroupId1--;
					continue;
				}
			if (soap_flag_beginIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:beginIndex", &(a->cusdk__GetUserDevGroupByGroupReq::beginIndex), "xsd:int"))
				{	soap_flag_beginIndex1--;
					continue;
				}
			if (soap_flag_num1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:num", &(a->cusdk__GetUserDevGroupByGroupReq::num), "xsd:int"))
				{	soap_flag_num1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDevGroupByGroupReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq, 0, sizeof(cusdk__GetUserDevGroupByGroupReq), 0, soap_copy_cusdk__GetUserDevGroupByGroupReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userId1 > 0 || soap_flag_parentDevGroupId1 > 0 || soap_flag_beginIndex1 > 0 || soap_flag_num1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDevGroupByGroupReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDevGroupByGroupReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDevGroupByGroupReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDevGroupByGroupReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDevGroupByGroupReq * SOAP_FMAC4 soap_get_cusdk__GetUserDevGroupByGroupReq(struct soap *soap, cusdk__GetUserDevGroupByGroupReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevGroupByGroupReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDevGroupByGroupReq * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevGroupByGroupReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevGroupByGroupReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupByGroupReq);
		if (size)
			*size = sizeof(cusdk__GetUserDevGroupByGroupReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupByGroupReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDevGroupByGroupReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDevGroupByGroupReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevGroupByGroupReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDevGroupByGroupReq %p -> %p\n", q, p));
	*(cusdk__GetUserDevGroupByGroupReq*)p = *(cusdk__GetUserDevGroupByGroupReq*)q;
}

void cusdk__SetUserDataRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__SetUserDataRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__SetUserDataRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__SetUserDataRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SetUserDataRsp(struct soap *soap, const char *tag, int id, const cusdk__SetUserDataRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SetUserDataRsp), "cusdk:SetUserDataRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__SetUserDataRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__SetUserDataRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__SetUserDataRsp * SOAP_FMAC4 soap_in_cusdk__SetUserDataRsp(struct soap *soap, const char *tag, cusdk__SetUserDataRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__SetUserDataRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SetUserDataRsp, sizeof(cusdk__SetUserDataRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__SetUserDataRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__SetUserDataRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__SetUserDataRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SetUserDataRsp, 0, sizeof(cusdk__SetUserDataRsp), 0, soap_copy_cusdk__SetUserDataRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__SetUserDataRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__SetUserDataRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:SetUserDataRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__SetUserDataRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__SetUserDataRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__SetUserDataRsp * SOAP_FMAC4 soap_get_cusdk__SetUserDataRsp(struct soap *soap, cusdk__SetUserDataRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SetUserDataRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__SetUserDataRsp * SOAP_FMAC2 soap_instantiate_cusdk__SetUserDataRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SetUserDataRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SetUserDataRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SetUserDataRsp);
		if (size)
			*size = sizeof(cusdk__SetUserDataRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SetUserDataRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__SetUserDataRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__SetUserDataRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SetUserDataRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__SetUserDataRsp %p -> %p\n", q, p));
	*(cusdk__SetUserDataRsp*)p = *(cusdk__SetUserDataRsp*)q;
}

void cusdk__SetUserDataReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__SetUserDataReq::key);
	soap_default_xsd__string(soap, &this->cusdk__SetUserDataReq::value);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__SetUserDataReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__SetUserDataReq::key);
	soap_serialize_xsd__string(soap, &this->cusdk__SetUserDataReq::value);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__SetUserDataReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__SetUserDataReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SetUserDataReq(struct soap *soap, const char *tag, int id, const cusdk__SetUserDataReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SetUserDataReq), "cusdk:SetUserDataReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:key", -1, &(a->cusdk__SetUserDataReq::key), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:value", -1, &(a->cusdk__SetUserDataReq::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__SetUserDataReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__SetUserDataReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__SetUserDataReq * SOAP_FMAC4 soap_in_cusdk__SetUserDataReq(struct soap *soap, const char *tag, cusdk__SetUserDataReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__SetUserDataReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SetUserDataReq, sizeof(cusdk__SetUserDataReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__SetUserDataReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__SetUserDataReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_key1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:key", &(a->cusdk__SetUserDataReq::key), "xsd:string"))
				{	soap_flag_key1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:value", &(a->cusdk__SetUserDataReq::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__SetUserDataReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SetUserDataReq, 0, sizeof(cusdk__SetUserDataReq), 0, soap_copy_cusdk__SetUserDataReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_key1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__SetUserDataReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__SetUserDataReq);
	if (this->soap_out(soap, tag?tag:"cusdk:SetUserDataReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__SetUserDataReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__SetUserDataReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__SetUserDataReq * SOAP_FMAC4 soap_get_cusdk__SetUserDataReq(struct soap *soap, cusdk__SetUserDataReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SetUserDataReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__SetUserDataReq * SOAP_FMAC2 soap_instantiate_cusdk__SetUserDataReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SetUserDataReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SetUserDataReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SetUserDataReq);
		if (size)
			*size = sizeof(cusdk__SetUserDataReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SetUserDataReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__SetUserDataReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__SetUserDataReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SetUserDataReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__SetUserDataReq %p -> %p\n", q, p));
	*(cusdk__SetUserDataReq*)p = *(cusdk__SetUserDataReq*)q;
}

void cusdk__GetUserDataRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserDataRsp::value);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetUserDataRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserDataRsp::value);
}

int cusdk__GetUserDataRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDataRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDataRsp(struct soap *soap, const char *tag, int id, const cusdk__GetUserDataRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDataRsp), "cusdk:GetUserDataRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:value");
	if (soap_out_xsd__string(soap, "cusdk:value", -1, &(a->cusdk__GetUserDataRsp::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDataRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDataRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDataRsp * SOAP_FMAC4 soap_in_cusdk__GetUserDataRsp(struct soap *soap, const char *tag, cusdk__GetUserDataRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDataRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDataRsp, sizeof(cusdk__GetUserDataRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDataRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDataRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:value", &(a->cusdk__GetUserDataRsp::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			soap_check_result(soap, "cusdk:value");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDataRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDataRsp, 0, sizeof(cusdk__GetUserDataRsp), 0, soap_copy_cusdk__GetUserDataRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDataRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDataRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDataRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDataRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDataRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDataRsp * SOAP_FMAC4 soap_get_cusdk__GetUserDataRsp(struct soap *soap, cusdk__GetUserDataRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDataRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDataRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDataRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDataRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDataRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDataRsp);
		if (size)
			*size = sizeof(cusdk__GetUserDataRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDataRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDataRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDataRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDataRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDataRsp %p -> %p\n", q, p));
	*(cusdk__GetUserDataRsp*)p = *(cusdk__GetUserDataRsp*)q;
}

void cusdk__GetUserDataReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserDataReq::key);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetUserDataReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserDataReq::key);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetUserDataReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserDataReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDataReq(struct soap *soap, const char *tag, int id, const cusdk__GetUserDataReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDataReq), "cusdk:GetUserDataReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:key", -1, &(a->cusdk__GetUserDataReq::key), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserDataReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserDataReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserDataReq * SOAP_FMAC4 soap_in_cusdk__GetUserDataReq(struct soap *soap, const char *tag, cusdk__GetUserDataReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserDataReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDataReq, sizeof(cusdk__GetUserDataReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserDataReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserDataReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_key1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:key", &(a->cusdk__GetUserDataReq::key), "xsd:string"))
				{	soap_flag_key1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserDataReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDataReq, 0, sizeof(cusdk__GetUserDataReq), 0, soap_copy_cusdk__GetUserDataReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_key1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserDataReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDataReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserDataReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserDataReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserDataReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserDataReq * SOAP_FMAC4 soap_get_cusdk__GetUserDataReq(struct soap *soap, cusdk__GetUserDataReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDataReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserDataReq * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDataReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDataReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDataReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDataReq);
		if (size)
			*size = sizeof(cusdk__GetUserDataReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDataReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserDataReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserDataReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDataReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserDataReq %p -> %p\n", q, p));
	*(cusdk__GetUserDataReq*)p = *(cusdk__GetUserDataReq*)q;
}

void cusdk__GetUserGroupInfoRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__GetUserGroupInfoRsp::userGroupInfo.cusdk__UserGroup::soap_default(soap);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetUserGroupInfoRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__GetUserGroupInfoRsp::userGroupInfo.soap_serialize(soap);
}

int cusdk__GetUserGroupInfoRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserGroupInfoRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserGroupInfoRsp(struct soap *soap, const char *tag, int id, const cusdk__GetUserGroupInfoRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserGroupInfoRsp), "cusdk:GetUserGroupInfoRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:userGroupInfo");
	if ((a->cusdk__GetUserGroupInfoRsp::userGroupInfo).soap_out(soap, "cusdk:userGroupInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserGroupInfoRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserGroupInfoRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserGroupInfoRsp * SOAP_FMAC4 soap_in_cusdk__GetUserGroupInfoRsp(struct soap *soap, const char *tag, cusdk__GetUserGroupInfoRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserGroupInfoRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserGroupInfoRsp, sizeof(cusdk__GetUserGroupInfoRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserGroupInfoRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserGroupInfoRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_userGroupInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_userGroupInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__GetUserGroupInfoRsp::userGroupInfo).soap_in(soap, "cusdk:userGroupInfo", "cusdk:UserGroup"))
				{	soap_flag_userGroupInfo1--;
					continue;
				}
			soap_check_result(soap, "cusdk:userGroupInfo");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserGroupInfoRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserGroupInfoRsp, 0, sizeof(cusdk__GetUserGroupInfoRsp), 0, soap_copy_cusdk__GetUserGroupInfoRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_userGroupInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserGroupInfoRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserGroupInfoRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserGroupInfoRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserGroupInfoRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserGroupInfoRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserGroupInfoRsp * SOAP_FMAC4 soap_get_cusdk__GetUserGroupInfoRsp(struct soap *soap, cusdk__GetUserGroupInfoRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserGroupInfoRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserGroupInfoRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetUserGroupInfoRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserGroupInfoRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserGroupInfoRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupInfoRsp);
		if (size)
			*size = sizeof(cusdk__GetUserGroupInfoRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupInfoRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserGroupInfoRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserGroupInfoRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserGroupInfoRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserGroupInfoRsp %p -> %p\n", q, p));
	*(cusdk__GetUserGroupInfoRsp*)p = *(cusdk__GetUserGroupInfoRsp*)q;
}

void cusdk__GetUserGroupInfoReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserGroupInfoReq::userGroupId);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetUserGroupInfoReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserGroupInfoReq::userGroupId);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetUserGroupInfoReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserGroupInfoReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserGroupInfoReq(struct soap *soap, const char *tag, int id, const cusdk__GetUserGroupInfoReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserGroupInfoReq), "cusdk:GetUserGroupInfoReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userGroupId", -1, &(a->cusdk__GetUserGroupInfoReq::userGroupId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserGroupInfoReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserGroupInfoReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserGroupInfoReq * SOAP_FMAC4 soap_in_cusdk__GetUserGroupInfoReq(struct soap *soap, const char *tag, cusdk__GetUserGroupInfoReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserGroupInfoReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserGroupInfoReq, sizeof(cusdk__GetUserGroupInfoReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserGroupInfoReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserGroupInfoReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userGroupId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userGroupId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userGroupId", &(a->cusdk__GetUserGroupInfoReq::userGroupId), "xsd:string"))
				{	soap_flag_userGroupId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserGroupInfoReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserGroupInfoReq, 0, sizeof(cusdk__GetUserGroupInfoReq), 0, soap_copy_cusdk__GetUserGroupInfoReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userGroupId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserGroupInfoReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserGroupInfoReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserGroupInfoReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserGroupInfoReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserGroupInfoReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserGroupInfoReq * SOAP_FMAC4 soap_get_cusdk__GetUserGroupInfoReq(struct soap *soap, cusdk__GetUserGroupInfoReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserGroupInfoReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserGroupInfoReq * SOAP_FMAC2 soap_instantiate_cusdk__GetUserGroupInfoReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserGroupInfoReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserGroupInfoReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupInfoReq);
		if (size)
			*size = sizeof(cusdk__GetUserGroupInfoReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupInfoReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserGroupInfoReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserGroupInfoReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserGroupInfoReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserGroupInfoReq %p -> %p\n", q, p));
	*(cusdk__GetUserGroupInfoReq*)p = *(cusdk__GetUserGroupInfoReq*)q;
}

void cusdk__GetUserInfoRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__GetUserInfoRsp::userInfo.cusdk__UserInfo::soap_default(soap);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetUserInfoRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__GetUserInfoRsp::userInfo.soap_serialize(soap);
}

int cusdk__GetUserInfoRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserInfoRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserInfoRsp(struct soap *soap, const char *tag, int id, const cusdk__GetUserInfoRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserInfoRsp), "cusdk:GetUserInfoRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:userInfo");
	if ((a->cusdk__GetUserInfoRsp::userInfo).soap_out(soap, "cusdk:userInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserInfoRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserInfoRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserInfoRsp * SOAP_FMAC4 soap_in_cusdk__GetUserInfoRsp(struct soap *soap, const char *tag, cusdk__GetUserInfoRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserInfoRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserInfoRsp, sizeof(cusdk__GetUserInfoRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserInfoRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserInfoRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_userInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_userInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__GetUserInfoRsp::userInfo).soap_in(soap, "cusdk:userInfo", "cusdk:UserInfo"))
				{	soap_flag_userInfo1--;
					continue;
				}
			soap_check_result(soap, "cusdk:userInfo");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserInfoRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserInfoRsp, 0, sizeof(cusdk__GetUserInfoRsp), 0, soap_copy_cusdk__GetUserInfoRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_userInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserInfoRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserInfoRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserInfoRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserInfoRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserInfoRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserInfoRsp * SOAP_FMAC4 soap_get_cusdk__GetUserInfoRsp(struct soap *soap, cusdk__GetUserInfoRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserInfoRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserInfoRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetUserInfoRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserInfoRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserInfoRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserInfoRsp);
		if (size)
			*size = sizeof(cusdk__GetUserInfoRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserInfoRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserInfoRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserInfoRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserInfoRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserInfoRsp %p -> %p\n", q, p));
	*(cusdk__GetUserInfoRsp*)p = *(cusdk__GetUserInfoRsp*)q;
}

void cusdk__GetUserInfoReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__GetUserInfoReq::userName);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetUserInfoReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__GetUserInfoReq::userName);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetUserInfoReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetUserInfoReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserInfoReq(struct soap *soap, const char *tag, int id, const cusdk__GetUserInfoReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserInfoReq), "cusdk:GetUserInfoReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userName", -1, &(a->cusdk__GetUserInfoReq::userName), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetUserInfoReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetUserInfoReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetUserInfoReq * SOAP_FMAC4 soap_in_cusdk__GetUserInfoReq(struct soap *soap, const char *tag, cusdk__GetUserInfoReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetUserInfoReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserInfoReq, sizeof(cusdk__GetUserInfoReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetUserInfoReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetUserInfoReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_userName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userName", &(a->cusdk__GetUserInfoReq::userName), "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetUserInfoReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserInfoReq, 0, sizeof(cusdk__GetUserInfoReq), 0, soap_copy_cusdk__GetUserInfoReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_userName1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetUserInfoReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserInfoReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetUserInfoReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetUserInfoReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetUserInfoReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetUserInfoReq * SOAP_FMAC4 soap_get_cusdk__GetUserInfoReq(struct soap *soap, cusdk__GetUserInfoReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserInfoReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetUserInfoReq * SOAP_FMAC2 soap_instantiate_cusdk__GetUserInfoReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserInfoReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserInfoReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserInfoReq);
		if (size)
			*size = sizeof(cusdk__GetUserInfoReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserInfoReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetUserInfoReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetUserInfoReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserInfoReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetUserInfoReq %p -> %p\n", q, p));
	*(cusdk__GetUserInfoReq*)p = *(cusdk__GetUserInfoReq*)q;
}

void cusdk__SendTransDataRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__SendTransDataRsp::errorDesc);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__SendTransDataRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__SendTransDataRsp::errorDesc);
}

int cusdk__SendTransDataRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__SendTransDataRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SendTransDataRsp(struct soap *soap, const char *tag, int id, const cusdk__SendTransDataRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SendTransDataRsp), "cusdk:SendTransDataRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:errorDesc");
	if (soap_out_xsd__string(soap, "cusdk:errorDesc", -1, &(a->cusdk__SendTransDataRsp::errorDesc), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__SendTransDataRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__SendTransDataRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__SendTransDataRsp * SOAP_FMAC4 soap_in_cusdk__SendTransDataRsp(struct soap *soap, const char *tag, cusdk__SendTransDataRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__SendTransDataRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SendTransDataRsp, sizeof(cusdk__SendTransDataRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__SendTransDataRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__SendTransDataRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_errorDesc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_errorDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:errorDesc", &(a->cusdk__SendTransDataRsp::errorDesc), "xsd:string"))
				{	soap_flag_errorDesc1--;
					continue;
				}
			soap_check_result(soap, "cusdk:errorDesc");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__SendTransDataRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SendTransDataRsp, 0, sizeof(cusdk__SendTransDataRsp), 0, soap_copy_cusdk__SendTransDataRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_errorDesc1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__SendTransDataRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__SendTransDataRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:SendTransDataRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__SendTransDataRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__SendTransDataRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__SendTransDataRsp * SOAP_FMAC4 soap_get_cusdk__SendTransDataRsp(struct soap *soap, cusdk__SendTransDataRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SendTransDataRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__SendTransDataRsp * SOAP_FMAC2 soap_instantiate_cusdk__SendTransDataRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SendTransDataRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SendTransDataRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SendTransDataRsp);
		if (size)
			*size = sizeof(cusdk__SendTransDataRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SendTransDataRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__SendTransDataRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__SendTransDataRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SendTransDataRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__SendTransDataRsp %p -> %p\n", q, p));
	*(cusdk__SendTransDataRsp*)p = *(cusdk__SendTransDataRsp*)q;
}

void cusdk__SendTransDataReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__SendTransDataReq::devId);
	soap_default_xsd__int(soap, &this->cusdk__SendTransDataReq::videoSrcId);
	soap_default_xsd__string(soap, &this->cusdk__SendTransDataReq::hexTransData);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__SendTransDataReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__SendTransDataReq::devId);
	soap_serialize_xsd__string(soap, &this->cusdk__SendTransDataReq::hexTransData);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__SendTransDataReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__SendTransDataReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SendTransDataReq(struct soap *soap, const char *tag, int id, const cusdk__SendTransDataReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SendTransDataReq), "cusdk:SendTransDataReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devId", -1, &(a->cusdk__SendTransDataReq::devId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:videoSrcId", -1, &(a->cusdk__SendTransDataReq::videoSrcId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:hexTransData", -1, &(a->cusdk__SendTransDataReq::hexTransData), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__SendTransDataReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__SendTransDataReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__SendTransDataReq * SOAP_FMAC4 soap_in_cusdk__SendTransDataReq(struct soap *soap, const char *tag, cusdk__SendTransDataReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__SendTransDataReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SendTransDataReq, sizeof(cusdk__SendTransDataReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__SendTransDataReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__SendTransDataReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_devId1 = 1;
	size_t soap_flag_videoSrcId1 = 1;
	size_t soap_flag_hexTransData1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_devId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devId", &(a->cusdk__SendTransDataReq::devId), "xsd:string"))
				{	soap_flag_devId1--;
					continue;
				}
			if (soap_flag_videoSrcId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:videoSrcId", &(a->cusdk__SendTransDataReq::videoSrcId), "xsd:int"))
				{	soap_flag_videoSrcId1--;
					continue;
				}
			if (soap_flag_hexTransData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:hexTransData", &(a->cusdk__SendTransDataReq::hexTransData), "xsd:string"))
				{	soap_flag_hexTransData1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__SendTransDataReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SendTransDataReq, 0, sizeof(cusdk__SendTransDataReq), 0, soap_copy_cusdk__SendTransDataReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_devId1 > 0 || soap_flag_videoSrcId1 > 0 || soap_flag_hexTransData1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__SendTransDataReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__SendTransDataReq);
	if (this->soap_out(soap, tag?tag:"cusdk:SendTransDataReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__SendTransDataReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__SendTransDataReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__SendTransDataReq * SOAP_FMAC4 soap_get_cusdk__SendTransDataReq(struct soap *soap, cusdk__SendTransDataReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SendTransDataReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__SendTransDataReq * SOAP_FMAC2 soap_instantiate_cusdk__SendTransDataReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SendTransDataReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SendTransDataReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SendTransDataReq);
		if (size)
			*size = sizeof(cusdk__SendTransDataReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SendTransDataReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__SendTransDataReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__SendTransDataReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SendTransDataReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__SendTransDataReq %p -> %p\n", q, p));
	*(cusdk__SendTransDataReq*)p = *(cusdk__SendTransDataReq*)q;
}

void cusdk__PtzUnlockRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__PtzUnlockRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__PtzUnlockRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PtzUnlockRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PtzUnlockRsp(struct soap *soap, const char *tag, int id, const cusdk__PtzUnlockRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PtzUnlockRsp), "cusdk:PtzUnlockRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PtzUnlockRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PtzUnlockRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PtzUnlockRsp * SOAP_FMAC4 soap_in_cusdk__PtzUnlockRsp(struct soap *soap, const char *tag, cusdk__PtzUnlockRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PtzUnlockRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PtzUnlockRsp, sizeof(cusdk__PtzUnlockRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PtzUnlockRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PtzUnlockRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PtzUnlockRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PtzUnlockRsp, 0, sizeof(cusdk__PtzUnlockRsp), 0, soap_copy_cusdk__PtzUnlockRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PtzUnlockRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PtzUnlockRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:PtzUnlockRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PtzUnlockRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PtzUnlockRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PtzUnlockRsp * SOAP_FMAC4 soap_get_cusdk__PtzUnlockRsp(struct soap *soap, cusdk__PtzUnlockRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PtzUnlockRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PtzUnlockRsp * SOAP_FMAC2 soap_instantiate_cusdk__PtzUnlockRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PtzUnlockRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PtzUnlockRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzUnlockRsp);
		if (size)
			*size = sizeof(cusdk__PtzUnlockRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzUnlockRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PtzUnlockRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PtzUnlockRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PtzUnlockRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PtzUnlockRsp %p -> %p\n", q, p));
	*(cusdk__PtzUnlockRsp*)p = *(cusdk__PtzUnlockRsp*)q;
}

void cusdk__PtzUnlockReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__PtzUnlockReq::devId);
	soap_default_xsd__int(soap, &this->cusdk__PtzUnlockReq::videoSrcId);
	soap_default_xsd__string(soap, &this->cusdk__PtzUnlockReq::password);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__PtzUnlockReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__PtzUnlockReq::devId);
	soap_serialize_xsd__string(soap, &this->cusdk__PtzUnlockReq::password);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__PtzUnlockReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PtzUnlockReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PtzUnlockReq(struct soap *soap, const char *tag, int id, const cusdk__PtzUnlockReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PtzUnlockReq), "cusdk:PtzUnlockReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devId", -1, &(a->cusdk__PtzUnlockReq::devId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:videoSrcId", -1, &(a->cusdk__PtzUnlockReq::videoSrcId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:password", -1, &(a->cusdk__PtzUnlockReq::password), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PtzUnlockReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PtzUnlockReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PtzUnlockReq * SOAP_FMAC4 soap_in_cusdk__PtzUnlockReq(struct soap *soap, const char *tag, cusdk__PtzUnlockReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PtzUnlockReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PtzUnlockReq, sizeof(cusdk__PtzUnlockReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PtzUnlockReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PtzUnlockReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_devId1 = 1;
	size_t soap_flag_videoSrcId1 = 1;
	size_t soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_devId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devId", &(a->cusdk__PtzUnlockReq::devId), "xsd:string"))
				{	soap_flag_devId1--;
					continue;
				}
			if (soap_flag_videoSrcId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:videoSrcId", &(a->cusdk__PtzUnlockReq::videoSrcId), "xsd:int"))
				{	soap_flag_videoSrcId1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:password", &(a->cusdk__PtzUnlockReq::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PtzUnlockReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PtzUnlockReq, 0, sizeof(cusdk__PtzUnlockReq), 0, soap_copy_cusdk__PtzUnlockReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_devId1 > 0 || soap_flag_videoSrcId1 > 0 || soap_flag_password1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PtzUnlockReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PtzUnlockReq);
	if (this->soap_out(soap, tag?tag:"cusdk:PtzUnlockReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PtzUnlockReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PtzUnlockReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PtzUnlockReq * SOAP_FMAC4 soap_get_cusdk__PtzUnlockReq(struct soap *soap, cusdk__PtzUnlockReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PtzUnlockReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PtzUnlockReq * SOAP_FMAC2 soap_instantiate_cusdk__PtzUnlockReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PtzUnlockReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PtzUnlockReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzUnlockReq);
		if (size)
			*size = sizeof(cusdk__PtzUnlockReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzUnlockReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PtzUnlockReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PtzUnlockReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PtzUnlockReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PtzUnlockReq %p -> %p\n", q, p));
	*(cusdk__PtzUnlockReq*)p = *(cusdk__PtzUnlockReq*)q;
}

void cusdk__PtzLockRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__PtzLockRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__PtzLockRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PtzLockRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PtzLockRsp(struct soap *soap, const char *tag, int id, const cusdk__PtzLockRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PtzLockRsp), "cusdk:PtzLockRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PtzLockRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PtzLockRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PtzLockRsp * SOAP_FMAC4 soap_in_cusdk__PtzLockRsp(struct soap *soap, const char *tag, cusdk__PtzLockRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PtzLockRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PtzLockRsp, sizeof(cusdk__PtzLockRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PtzLockRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PtzLockRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PtzLockRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PtzLockRsp, 0, sizeof(cusdk__PtzLockRsp), 0, soap_copy_cusdk__PtzLockRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PtzLockRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PtzLockRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:PtzLockRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PtzLockRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PtzLockRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PtzLockRsp * SOAP_FMAC4 soap_get_cusdk__PtzLockRsp(struct soap *soap, cusdk__PtzLockRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PtzLockRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PtzLockRsp * SOAP_FMAC2 soap_instantiate_cusdk__PtzLockRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PtzLockRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PtzLockRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzLockRsp);
		if (size)
			*size = sizeof(cusdk__PtzLockRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzLockRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PtzLockRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PtzLockRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PtzLockRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PtzLockRsp %p -> %p\n", q, p));
	*(cusdk__PtzLockRsp*)p = *(cusdk__PtzLockRsp*)q;
}

void cusdk__PtzLockReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__PtzLockReq::devId);
	soap_default_xsd__int(soap, &this->cusdk__PtzLockReq::videoSrcId);
	soap_default_time(soap, &this->cusdk__PtzLockReq::beginTime);
	soap_default_time(soap, &this->cusdk__PtzLockReq::endTime);
	soap_default_xsd__string(soap, &this->cusdk__PtzLockReq::password);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__PtzLockReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__PtzLockReq::devId);
	soap_serialize_xsd__string(soap, &this->cusdk__PtzLockReq::password);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__PtzLockReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PtzLockReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PtzLockReq(struct soap *soap, const char *tag, int id, const cusdk__PtzLockReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PtzLockReq), "cusdk:PtzLockReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devId", -1, &(a->cusdk__PtzLockReq::devId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:videoSrcId", -1, &(a->cusdk__PtzLockReq::videoSrcId), ""))
		return soap->error;
	if (soap_out_time(soap, "cusdk:beginTime", -1, &(a->cusdk__PtzLockReq::beginTime), ""))
		return soap->error;
	if (soap_out_time(soap, "cusdk:endTime", -1, &(a->cusdk__PtzLockReq::endTime), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:password", -1, &(a->cusdk__PtzLockReq::password), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PtzLockReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PtzLockReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PtzLockReq * SOAP_FMAC4 soap_in_cusdk__PtzLockReq(struct soap *soap, const char *tag, cusdk__PtzLockReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PtzLockReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PtzLockReq, sizeof(cusdk__PtzLockReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PtzLockReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PtzLockReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_devId1 = 1;
	size_t soap_flag_videoSrcId1 = 1;
	size_t soap_flag_beginTime1 = 1;
	size_t soap_flag_endTime1 = 1;
	size_t soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_devId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devId", &(a->cusdk__PtzLockReq::devId), "xsd:string"))
				{	soap_flag_devId1--;
					continue;
				}
			if (soap_flag_videoSrcId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:videoSrcId", &(a->cusdk__PtzLockReq::videoSrcId), "xsd:int"))
				{	soap_flag_videoSrcId1--;
					continue;
				}
			if (soap_flag_beginTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "cusdk:beginTime", &(a->cusdk__PtzLockReq::beginTime), "xsd:dateTime"))
				{	soap_flag_beginTime1--;
					continue;
				}
			if (soap_flag_endTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "cusdk:endTime", &(a->cusdk__PtzLockReq::endTime), "xsd:dateTime"))
				{	soap_flag_endTime1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:password", &(a->cusdk__PtzLockReq::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PtzLockReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PtzLockReq, 0, sizeof(cusdk__PtzLockReq), 0, soap_copy_cusdk__PtzLockReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_devId1 > 0 || soap_flag_videoSrcId1 > 0 || soap_flag_beginTime1 > 0 || soap_flag_endTime1 > 0 || soap_flag_password1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PtzLockReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PtzLockReq);
	if (this->soap_out(soap, tag?tag:"cusdk:PtzLockReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PtzLockReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PtzLockReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PtzLockReq * SOAP_FMAC4 soap_get_cusdk__PtzLockReq(struct soap *soap, cusdk__PtzLockReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PtzLockReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PtzLockReq * SOAP_FMAC2 soap_instantiate_cusdk__PtzLockReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PtzLockReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PtzLockReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzLockReq);
		if (size)
			*size = sizeof(cusdk__PtzLockReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzLockReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PtzLockReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PtzLockReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PtzLockReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PtzLockReq %p -> %p\n", q, p));
	*(cusdk__PtzLockReq*)p = *(cusdk__PtzLockReq*)q;
}

void cusdk__PtzCtrlRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__PtzCtrlRsp::errorDesc);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__PtzCtrlRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__PtzCtrlRsp::errorDesc);
}

int cusdk__PtzCtrlRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PtzCtrlRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PtzCtrlRsp(struct soap *soap, const char *tag, int id, const cusdk__PtzCtrlRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PtzCtrlRsp), "cusdk:PtzCtrlRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:errorDesc");
	if (soap_out_xsd__string(soap, "cusdk:errorDesc", -1, &(a->cusdk__PtzCtrlRsp::errorDesc), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PtzCtrlRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PtzCtrlRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PtzCtrlRsp * SOAP_FMAC4 soap_in_cusdk__PtzCtrlRsp(struct soap *soap, const char *tag, cusdk__PtzCtrlRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PtzCtrlRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PtzCtrlRsp, sizeof(cusdk__PtzCtrlRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PtzCtrlRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PtzCtrlRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_errorDesc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_errorDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:errorDesc", &(a->cusdk__PtzCtrlRsp::errorDesc), "xsd:string"))
				{	soap_flag_errorDesc1--;
					continue;
				}
			soap_check_result(soap, "cusdk:errorDesc");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PtzCtrlRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PtzCtrlRsp, 0, sizeof(cusdk__PtzCtrlRsp), 0, soap_copy_cusdk__PtzCtrlRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_errorDesc1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PtzCtrlRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PtzCtrlRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:PtzCtrlRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PtzCtrlRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PtzCtrlRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PtzCtrlRsp * SOAP_FMAC4 soap_get_cusdk__PtzCtrlRsp(struct soap *soap, cusdk__PtzCtrlRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PtzCtrlRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PtzCtrlRsp * SOAP_FMAC2 soap_instantiate_cusdk__PtzCtrlRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PtzCtrlRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PtzCtrlRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzCtrlRsp);
		if (size)
			*size = sizeof(cusdk__PtzCtrlRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzCtrlRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PtzCtrlRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PtzCtrlRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PtzCtrlRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PtzCtrlRsp %p -> %p\n", q, p));
	*(cusdk__PtzCtrlRsp*)p = *(cusdk__PtzCtrlRsp*)q;
}

void cusdk__PtzCtrlReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__PtzCtrlReq::devId);
	soap_default_xsd__int(soap, &this->cusdk__PtzCtrlReq::videoSrcId);
	soap_default_cusdk__EPtzCmd(soap, &this->cusdk__PtzCtrlReq::ptzCmd);
	soap_default_std__vectorTemplateOfint(soap, &this->cusdk__PtzCtrlReq::ptzParam);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__PtzCtrlReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__PtzCtrlReq::devId);
	soap_serialize_std__vectorTemplateOfint(soap, &this->cusdk__PtzCtrlReq::ptzParam);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__PtzCtrlReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PtzCtrlReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PtzCtrlReq(struct soap *soap, const char *tag, int id, const cusdk__PtzCtrlReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PtzCtrlReq), "cusdk:PtzCtrlReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devId", -1, &(a->cusdk__PtzCtrlReq::devId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:videoSrcId", -1, &(a->cusdk__PtzCtrlReq::videoSrcId), ""))
		return soap->error;
	if (soap_out_cusdk__EPtzCmd(soap, "cusdk:ptzCmd", -1, &(a->cusdk__PtzCtrlReq::ptzCmd), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "cusdk:ptzParam", -1, &(a->cusdk__PtzCtrlReq::ptzParam), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PtzCtrlReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PtzCtrlReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PtzCtrlReq * SOAP_FMAC4 soap_in_cusdk__PtzCtrlReq(struct soap *soap, const char *tag, cusdk__PtzCtrlReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PtzCtrlReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PtzCtrlReq, sizeof(cusdk__PtzCtrlReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PtzCtrlReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PtzCtrlReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_devId1 = 1;
	size_t soap_flag_videoSrcId1 = 1;
	size_t soap_flag_ptzCmd1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_devId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devId", &(a->cusdk__PtzCtrlReq::devId), "xsd:string"))
				{	soap_flag_devId1--;
					continue;
				}
			if (soap_flag_videoSrcId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:videoSrcId", &(a->cusdk__PtzCtrlReq::videoSrcId), "xsd:int"))
				{	soap_flag_videoSrcId1--;
					continue;
				}
			if (soap_flag_ptzCmd1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EPtzCmd(soap, "cusdk:ptzCmd", &(a->cusdk__PtzCtrlReq::ptzCmd), "cusdk:EPtzCmd"))
				{	soap_flag_ptzCmd1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "cusdk:ptzParam", &(a->cusdk__PtzCtrlReq::ptzParam), "xsd:int"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PtzCtrlReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PtzCtrlReq, 0, sizeof(cusdk__PtzCtrlReq), 0, soap_copy_cusdk__PtzCtrlReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_devId1 > 0 || soap_flag_videoSrcId1 > 0 || soap_flag_ptzCmd1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PtzCtrlReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PtzCtrlReq);
	if (this->soap_out(soap, tag?tag:"cusdk:PtzCtrlReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PtzCtrlReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PtzCtrlReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PtzCtrlReq * SOAP_FMAC4 soap_get_cusdk__PtzCtrlReq(struct soap *soap, cusdk__PtzCtrlReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PtzCtrlReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PtzCtrlReq * SOAP_FMAC2 soap_instantiate_cusdk__PtzCtrlReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PtzCtrlReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PtzCtrlReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzCtrlReq);
		if (size)
			*size = sizeof(cusdk__PtzCtrlReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzCtrlReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PtzCtrlReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PtzCtrlReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PtzCtrlReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PtzCtrlReq %p -> %p\n", q, p));
	*(cusdk__PtzCtrlReq*)p = *(cusdk__PtzCtrlReq*)q;
}

void cusdk__StopStreamRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__StopStreamRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__StopStreamRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__StopStreamRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__StopStreamRsp(struct soap *soap, const char *tag, int id, const cusdk__StopStreamRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__StopStreamRsp), "cusdk:StopStreamRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__StopStreamRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__StopStreamRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__StopStreamRsp * SOAP_FMAC4 soap_in_cusdk__StopStreamRsp(struct soap *soap, const char *tag, cusdk__StopStreamRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__StopStreamRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__StopStreamRsp, sizeof(cusdk__StopStreamRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__StopStreamRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__StopStreamRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__StopStreamRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__StopStreamRsp, 0, sizeof(cusdk__StopStreamRsp), 0, soap_copy_cusdk__StopStreamRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__StopStreamRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__StopStreamRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:StopStreamRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__StopStreamRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__StopStreamRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__StopStreamRsp * SOAP_FMAC4 soap_get_cusdk__StopStreamRsp(struct soap *soap, cusdk__StopStreamRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__StopStreamRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__StopStreamRsp * SOAP_FMAC2 soap_instantiate_cusdk__StopStreamRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__StopStreamRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__StopStreamRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__StopStreamRsp);
		if (size)
			*size = sizeof(cusdk__StopStreamRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__StopStreamRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__StopStreamRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__StopStreamRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__StopStreamRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__StopStreamRsp %p -> %p\n", q, p));
	*(cusdk__StopStreamRsp*)p = *(cusdk__StopStreamRsp*)q;
}

void cusdk__StopStreamReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__StopStreamReq::playId);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__StopStreamReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__StopStreamReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__StopStreamReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__StopStreamReq(struct soap *soap, const char *tag, int id, const cusdk__StopStreamReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__StopStreamReq), "cusdk:StopStreamReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:playId", -1, &(a->cusdk__StopStreamReq::playId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__StopStreamReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__StopStreamReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__StopStreamReq * SOAP_FMAC4 soap_in_cusdk__StopStreamReq(struct soap *soap, const char *tag, cusdk__StopStreamReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__StopStreamReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__StopStreamReq, sizeof(cusdk__StopStreamReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__StopStreamReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__StopStreamReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_playId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_playId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:playId", &(a->cusdk__StopStreamReq::playId), "xsd:int"))
				{	soap_flag_playId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__StopStreamReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__StopStreamReq, 0, sizeof(cusdk__StopStreamReq), 0, soap_copy_cusdk__StopStreamReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_playId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__StopStreamReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__StopStreamReq);
	if (this->soap_out(soap, tag?tag:"cusdk:StopStreamReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__StopStreamReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__StopStreamReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__StopStreamReq * SOAP_FMAC4 soap_get_cusdk__StopStreamReq(struct soap *soap, cusdk__StopStreamReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__StopStreamReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__StopStreamReq * SOAP_FMAC2 soap_instantiate_cusdk__StopStreamReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__StopStreamReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__StopStreamReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__StopStreamReq);
		if (size)
			*size = sizeof(cusdk__StopStreamReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__StopStreamReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__StopStreamReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__StopStreamReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__StopStreamReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__StopStreamReq %p -> %p\n", q, p));
	*(cusdk__StopStreamReq*)p = *(cusdk__StopStreamReq*)q;
}

void cusdk__PlayStreamRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__PlayStreamRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__PlayStreamRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PlayStreamRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PlayStreamRsp(struct soap *soap, const char *tag, int id, const cusdk__PlayStreamRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PlayStreamRsp), "cusdk:PlayStreamRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PlayStreamRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PlayStreamRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PlayStreamRsp * SOAP_FMAC4 soap_in_cusdk__PlayStreamRsp(struct soap *soap, const char *tag, cusdk__PlayStreamRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PlayStreamRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PlayStreamRsp, sizeof(cusdk__PlayStreamRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PlayStreamRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PlayStreamRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PlayStreamRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PlayStreamRsp, 0, sizeof(cusdk__PlayStreamRsp), 0, soap_copy_cusdk__PlayStreamRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PlayStreamRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PlayStreamRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:PlayStreamRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PlayStreamRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PlayStreamRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PlayStreamRsp * SOAP_FMAC4 soap_get_cusdk__PlayStreamRsp(struct soap *soap, cusdk__PlayStreamRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PlayStreamRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PlayStreamRsp * SOAP_FMAC2 soap_instantiate_cusdk__PlayStreamRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PlayStreamRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PlayStreamRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PlayStreamRsp);
		if (size)
			*size = sizeof(cusdk__PlayStreamRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PlayStreamRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PlayStreamRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PlayStreamRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PlayStreamRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PlayStreamRsp %p -> %p\n", q, p));
	*(cusdk__PlayStreamRsp*)p = *(cusdk__PlayStreamRsp*)q;
}

void cusdk__PlayStreamReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__PlayStreamReq::playId);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__PlayStreamReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__PlayStreamReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PlayStreamReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PlayStreamReq(struct soap *soap, const char *tag, int id, const cusdk__PlayStreamReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PlayStreamReq), "cusdk:PlayStreamReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:playId", -1, &(a->cusdk__PlayStreamReq::playId), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PlayStreamReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PlayStreamReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PlayStreamReq * SOAP_FMAC4 soap_in_cusdk__PlayStreamReq(struct soap *soap, const char *tag, cusdk__PlayStreamReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PlayStreamReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PlayStreamReq, sizeof(cusdk__PlayStreamReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PlayStreamReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PlayStreamReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_playId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_playId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:playId", &(a->cusdk__PlayStreamReq::playId), "xsd:int"))
				{	soap_flag_playId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PlayStreamReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PlayStreamReq, 0, sizeof(cusdk__PlayStreamReq), 0, soap_copy_cusdk__PlayStreamReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_playId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PlayStreamReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PlayStreamReq);
	if (this->soap_out(soap, tag?tag:"cusdk:PlayStreamReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PlayStreamReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PlayStreamReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PlayStreamReq * SOAP_FMAC4 soap_get_cusdk__PlayStreamReq(struct soap *soap, cusdk__PlayStreamReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PlayStreamReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PlayStreamReq * SOAP_FMAC2 soap_instantiate_cusdk__PlayStreamReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PlayStreamReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PlayStreamReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PlayStreamReq);
		if (size)
			*size = sizeof(cusdk__PlayStreamReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PlayStreamReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PlayStreamReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PlayStreamReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PlayStreamReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PlayStreamReq %p -> %p\n", q, p));
	*(cusdk__PlayStreamReq*)p = *(cusdk__PlayStreamReq*)q;
}

void cusdk__SetupStreamRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__MediaNetInfo(soap, &this->cusdk__SetupStreamRsp::remoteNetInfoList);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__SetupStreamRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__MediaNetInfo(soap, &this->cusdk__SetupStreamRsp::remoteNetInfoList);
}

int cusdk__SetupStreamRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__SetupStreamRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SetupStreamRsp(struct soap *soap, const char *tag, int id, const cusdk__SetupStreamRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SetupStreamRsp), "cusdk:SetupStreamRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:remoteNetInfoList");
	if (soap_out_std__vectorTemplateOfcusdk__MediaNetInfo(soap, "cusdk:remoteNetInfoList", -1, &(a->cusdk__SetupStreamRsp::remoteNetInfoList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__SetupStreamRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__SetupStreamRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__SetupStreamRsp * SOAP_FMAC4 soap_in_cusdk__SetupStreamRsp(struct soap *soap, const char *tag, cusdk__SetupStreamRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__SetupStreamRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SetupStreamRsp, sizeof(cusdk__SetupStreamRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__SetupStreamRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__SetupStreamRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__MediaNetInfo(soap, "cusdk:remoteNetInfoList", &(a->cusdk__SetupStreamRsp::remoteNetInfoList), "cusdk:MediaNetInfo"))
					continue;
			soap_check_result(soap, "cusdk:remoteNetInfoList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__SetupStreamRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SetupStreamRsp, 0, sizeof(cusdk__SetupStreamRsp), 0, soap_copy_cusdk__SetupStreamRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__SetupStreamRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__SetupStreamRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:SetupStreamRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__SetupStreamRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__SetupStreamRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__SetupStreamRsp * SOAP_FMAC4 soap_get_cusdk__SetupStreamRsp(struct soap *soap, cusdk__SetupStreamRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SetupStreamRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__SetupStreamRsp * SOAP_FMAC2 soap_instantiate_cusdk__SetupStreamRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SetupStreamRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SetupStreamRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SetupStreamRsp);
		if (size)
			*size = sizeof(cusdk__SetupStreamRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SetupStreamRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__SetupStreamRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__SetupStreamRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SetupStreamRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__SetupStreamRsp %p -> %p\n", q, p));
	*(cusdk__SetupStreamRsp*)p = *(cusdk__SetupStreamRsp*)q;
}

void cusdk__SetupStreamReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__SetupStreamReq::playId);
	soap_default_xsd__string(soap, &this->cusdk__SetupStreamReq::devId);
	soap_default_xsd__int(soap, &this->cusdk__SetupStreamReq::devChnId);
	soap_default_cusdk__EPlayMode(soap, &this->cusdk__SetupStreamReq::playMode);
	soap_default_cusdk__ETransMode(soap, &this->cusdk__SetupStreamReq::transMode);
	soap_default_std__vectorTemplateOfcusdk__MediaNetInfo(soap, &this->cusdk__SetupStreamReq::localNetInfoList);
	this->cusdk__SetupStreamReq::mediaInfo.cusdk__OrderMediaFormat::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__SetupStreamReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__SetupStreamReq::devId);
	soap_serialize_std__vectorTemplateOfcusdk__MediaNetInfo(soap, &this->cusdk__SetupStreamReq::localNetInfoList);
	this->cusdk__SetupStreamReq::mediaInfo.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__SetupStreamReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__SetupStreamReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SetupStreamReq(struct soap *soap, const char *tag, int id, const cusdk__SetupStreamReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SetupStreamReq), "cusdk:SetupStreamReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:playId", -1, &(a->cusdk__SetupStreamReq::playId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devId", -1, &(a->cusdk__SetupStreamReq::devId), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:devChnId", -1, &(a->cusdk__SetupStreamReq::devChnId), ""))
		return soap->error;
	if (soap_out_cusdk__EPlayMode(soap, "cusdk:playMode", -1, &(a->cusdk__SetupStreamReq::playMode), ""))
		return soap->error;
	if (soap_out_cusdk__ETransMode(soap, "cusdk:transMode", -1, &(a->cusdk__SetupStreamReq::transMode), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__MediaNetInfo(soap, "cusdk:localNetInfoList", -1, &(a->cusdk__SetupStreamReq::localNetInfoList), ""))
		return soap->error;
	if ((a->cusdk__SetupStreamReq::mediaInfo).soap_out(soap, "cusdk:mediaInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__SetupStreamReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__SetupStreamReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__SetupStreamReq * SOAP_FMAC4 soap_in_cusdk__SetupStreamReq(struct soap *soap, const char *tag, cusdk__SetupStreamReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__SetupStreamReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SetupStreamReq, sizeof(cusdk__SetupStreamReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__SetupStreamReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__SetupStreamReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	size_t soap_flag_playId1 = 1;
	size_t soap_flag_devId1 = 1;
	size_t soap_flag_devChnId1 = 1;
	size_t soap_flag_playMode1 = 1;
	size_t soap_flag_transMode1 = 1;
	size_t soap_flag_mediaInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap_flag_playId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:playId", &(a->cusdk__SetupStreamReq::playId), "xsd:int"))
				{	soap_flag_playId1--;
					continue;
				}
			if (soap_flag_devId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devId", &(a->cusdk__SetupStreamReq::devId), "xsd:string"))
				{	soap_flag_devId1--;
					continue;
				}
			if (soap_flag_devChnId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:devChnId", &(a->cusdk__SetupStreamReq::devChnId), "xsd:int"))
				{	soap_flag_devChnId1--;
					continue;
				}
			if (soap_flag_playMode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EPlayMode(soap, "cusdk:playMode", &(a->cusdk__SetupStreamReq::playMode), "cusdk:EPlayMode"))
				{	soap_flag_playMode1--;
					continue;
				}
			if (soap_flag_transMode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__ETransMode(soap, "cusdk:transMode", &(a->cusdk__SetupStreamReq::transMode), "cusdk:ETransMode"))
				{	soap_flag_transMode1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__MediaNetInfo(soap, "cusdk:localNetInfoList", &(a->cusdk__SetupStreamReq::localNetInfoList), "cusdk:MediaNetInfo"))
					continue;
			if (soap_flag_mediaInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__SetupStreamReq::mediaInfo).soap_in(soap, "cusdk:mediaInfo", "cusdk:OrderMediaFormat"))
				{	soap_flag_mediaInfo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__SetupStreamReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SetupStreamReq, 0, sizeof(cusdk__SetupStreamReq), 0, soap_copy_cusdk__SetupStreamReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0 || soap_flag_playId1 > 0 || soap_flag_devId1 > 0 || soap_flag_devChnId1 > 0 || soap_flag_playMode1 > 0 || soap_flag_transMode1 > 0 || soap_flag_mediaInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__SetupStreamReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__SetupStreamReq);
	if (this->soap_out(soap, tag?tag:"cusdk:SetupStreamReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__SetupStreamReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__SetupStreamReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__SetupStreamReq * SOAP_FMAC4 soap_get_cusdk__SetupStreamReq(struct soap *soap, cusdk__SetupStreamReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SetupStreamReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__SetupStreamReq * SOAP_FMAC2 soap_instantiate_cusdk__SetupStreamReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SetupStreamReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SetupStreamReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SetupStreamReq);
		if (size)
			*size = sizeof(cusdk__SetupStreamReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SetupStreamReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__SetupStreamReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__SetupStreamReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SetupStreamReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__SetupStreamReq %p -> %p\n", q, p));
	*(cusdk__SetupStreamReq*)p = *(cusdk__SetupStreamReq*)q;
}

void cusdk__GetCUIListRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfxsd__string(soap, &this->cusdk__GetCUIListRsp::cuiList);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetCUIListRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfxsd__string(soap, &this->cusdk__GetCUIListRsp::cuiList);
}

int cusdk__GetCUIListRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetCUIListRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetCUIListRsp(struct soap *soap, const char *tag, int id, const cusdk__GetCUIListRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetCUIListRsp), "cusdk:GetCUIListRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:cuiList");
	if (soap_out_std__vectorTemplateOfxsd__string(soap, "cusdk:cuiList", -1, &(a->cusdk__GetCUIListRsp::cuiList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetCUIListRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetCUIListRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetCUIListRsp * SOAP_FMAC4 soap_in_cusdk__GetCUIListRsp(struct soap *soap, const char *tag, cusdk__GetCUIListRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetCUIListRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetCUIListRsp, sizeof(cusdk__GetCUIListRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetCUIListRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetCUIListRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__string(soap, "cusdk:cuiList", &(a->cusdk__GetCUIListRsp::cuiList), "xsd:string"))
					continue;
			soap_check_result(soap, "cusdk:cuiList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetCUIListRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetCUIListRsp, 0, sizeof(cusdk__GetCUIListRsp), 0, soap_copy_cusdk__GetCUIListRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetCUIListRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetCUIListRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetCUIListRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetCUIListRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetCUIListRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetCUIListRsp * SOAP_FMAC4 soap_get_cusdk__GetCUIListRsp(struct soap *soap, cusdk__GetCUIListRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetCUIListRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetCUIListRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetCUIListRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetCUIListRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetCUIListRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetCUIListRsp);
		if (size)
			*size = sizeof(cusdk__GetCUIListRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetCUIListRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetCUIListRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetCUIListRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetCUIListRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetCUIListRsp %p -> %p\n", q, p));
	*(cusdk__GetCUIListRsp*)p = *(cusdk__GetCUIListRsp*)q;
}

void cusdk__GetCUIListReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetCUIListReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetCUIListReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetCUIListReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetCUIListReq(struct soap *soap, const char *tag, int id, const cusdk__GetCUIListReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetCUIListReq), "cusdk:GetCUIListReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetCUIListReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetCUIListReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetCUIListReq * SOAP_FMAC4 soap_in_cusdk__GetCUIListReq(struct soap *soap, const char *tag, cusdk__GetCUIListReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetCUIListReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetCUIListReq, sizeof(cusdk__GetCUIListReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetCUIListReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetCUIListReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetCUIListReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetCUIListReq, 0, sizeof(cusdk__GetCUIListReq), 0, soap_copy_cusdk__GetCUIListReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetCUIListReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetCUIListReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetCUIListReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetCUIListReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetCUIListReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetCUIListReq * SOAP_FMAC4 soap_get_cusdk__GetCUIListReq(struct soap *soap, cusdk__GetCUIListReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetCUIListReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetCUIListReq * SOAP_FMAC2 soap_instantiate_cusdk__GetCUIListReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetCUIListReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetCUIListReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetCUIListReq);
		if (size)
			*size = sizeof(cusdk__GetCUIListReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetCUIListReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetCUIListReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetCUIListReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetCUIListReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetCUIListReq %p -> %p\n", q, p));
	*(cusdk__GetCUIListReq*)p = *(cusdk__GetCUIListReq*)q;
}

void cusdk__GetNotifyRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, &this->cusdk__GetNotifyRsp::deviceAddNotify);
	soap_default_std__vectorTemplateOfxsd__string(soap, &this->cusdk__GetNotifyRsp::deviceDelNotify);
	soap_default_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, &this->cusdk__GetNotifyRsp::deviceModNotify);
	soap_default_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(soap, &this->cusdk__GetNotifyRsp::videoSrcAliasChangeNotify);
	soap_default_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetNotifyRsp::deviceGroupAddNotify);
	soap_default_std__vectorTemplateOfxsd__string(soap, &this->cusdk__GetNotifyRsp::deviceGroupDelNotify);
	soap_default_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetNotifyRsp::deviceGroupModNotify);
	soap_default_std__vectorTemplateOfcusdk__DevOnlineNotify(soap, &this->cusdk__GetNotifyRsp::devOnlineNotify);
	soap_default_std__vectorTemplateOfcusdk__DevConfigNotify(soap, &this->cusdk__GetNotifyRsp::devConfigNotify);
	soap_default_std__vectorTemplateOfcusdk__DevServiceStatusNotify(soap, &this->cusdk__GetNotifyRsp::devServiceStatusNotify);
	soap_default_std__vectorTemplateOfcusdk__DevAlarmNotify(soap, &this->cusdk__GetNotifyRsp::devAlarmNotify);
	soap_default_std__vectorTemplateOfxsd__int(soap, &this->cusdk__GetNotifyRsp::seqMarks);
	soap_default_xsd__boolean(soap, &this->cusdk__GetNotifyRsp::hasDataLeft);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__GetNotifyRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, &this->cusdk__GetNotifyRsp::deviceAddNotify);
	soap_serialize_std__vectorTemplateOfxsd__string(soap, &this->cusdk__GetNotifyRsp::deviceDelNotify);
	soap_serialize_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, &this->cusdk__GetNotifyRsp::deviceModNotify);
	soap_serialize_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(soap, &this->cusdk__GetNotifyRsp::videoSrcAliasChangeNotify);
	soap_serialize_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetNotifyRsp::deviceGroupAddNotify);
	soap_serialize_std__vectorTemplateOfxsd__string(soap, &this->cusdk__GetNotifyRsp::deviceGroupDelNotify);
	soap_serialize_std__vectorTemplateOfcusdk__DeviceGroup(soap, &this->cusdk__GetNotifyRsp::deviceGroupModNotify);
	soap_serialize_std__vectorTemplateOfcusdk__DevOnlineNotify(soap, &this->cusdk__GetNotifyRsp::devOnlineNotify);
	soap_serialize_std__vectorTemplateOfcusdk__DevConfigNotify(soap, &this->cusdk__GetNotifyRsp::devConfigNotify);
	soap_serialize_std__vectorTemplateOfcusdk__DevServiceStatusNotify(soap, &this->cusdk__GetNotifyRsp::devServiceStatusNotify);
	soap_serialize_std__vectorTemplateOfcusdk__DevAlarmNotify(soap, &this->cusdk__GetNotifyRsp::devAlarmNotify);
	soap_serialize_std__vectorTemplateOfxsd__int(soap, &this->cusdk__GetNotifyRsp::seqMarks);
}

int cusdk__GetNotifyRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetNotifyRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetNotifyRsp(struct soap *soap, const char *tag, int id, const cusdk__GetNotifyRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetNotifyRsp), "cusdk:GetNotifyRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:deviceAddNotify");
	if (soap_out_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, "cusdk:deviceAddNotify", -1, &(a->cusdk__GetNotifyRsp::deviceAddNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__string(soap, "cusdk:deviceDelNotify", -1, &(a->cusdk__GetNotifyRsp::deviceDelNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, "cusdk:deviceModNotify", -1, &(a->cusdk__GetNotifyRsp::deviceModNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(soap, "cusdk:videoSrcAliasChangeNotify", -1, &(a->cusdk__GetNotifyRsp::videoSrcAliasChangeNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:deviceGroupAddNotify", -1, &(a->cusdk__GetNotifyRsp::deviceGroupAddNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__string(soap, "cusdk:deviceGroupDelNotify", -1, &(a->cusdk__GetNotifyRsp::deviceGroupDelNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:deviceGroupModNotify", -1, &(a->cusdk__GetNotifyRsp::deviceGroupModNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DevOnlineNotify(soap, "cusdk:devOnlineNotify", -1, &(a->cusdk__GetNotifyRsp::devOnlineNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DevConfigNotify(soap, "cusdk:devConfigNotify", -1, &(a->cusdk__GetNotifyRsp::devConfigNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DevServiceStatusNotify(soap, "cusdk:devServiceStatusNotify", -1, &(a->cusdk__GetNotifyRsp::devServiceStatusNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DevAlarmNotify(soap, "cusdk:devAlarmNotify", -1, &(a->cusdk__GetNotifyRsp::devAlarmNotify), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfxsd__int(soap, "cusdk:seqMarks", -1, &(a->cusdk__GetNotifyRsp::seqMarks), ""))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:hasDataLeft", -1, &(a->cusdk__GetNotifyRsp::hasDataLeft), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetNotifyRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetNotifyRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetNotifyRsp * SOAP_FMAC4 soap_in_cusdk__GetNotifyRsp(struct soap *soap, const char *tag, cusdk__GetNotifyRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetNotifyRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetNotifyRsp, sizeof(cusdk__GetNotifyRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetNotifyRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetNotifyRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_hasDataLeft1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, "cusdk:deviceAddNotify", &(a->cusdk__GetNotifyRsp::deviceAddNotify), "cusdk:DeviceFullInfo"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__string(soap, "cusdk:deviceDelNotify", &(a->cusdk__GetNotifyRsp::deviceDelNotify), "xsd:string"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, "cusdk:deviceModNotify", &(a->cusdk__GetNotifyRsp::deviceModNotify), "cusdk:DeviceFullInfo"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(soap, "cusdk:videoSrcAliasChangeNotify", &(a->cusdk__GetNotifyRsp::videoSrcAliasChangeNotify), "cusdk:VideoSrcAliasChangeNotify"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:deviceGroupAddNotify", &(a->cusdk__GetNotifyRsp::deviceGroupAddNotify), "cusdk:DeviceGroup"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__string(soap, "cusdk:deviceGroupDelNotify", &(a->cusdk__GetNotifyRsp::deviceGroupDelNotify), "xsd:string"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceGroup(soap, "cusdk:deviceGroupModNotify", &(a->cusdk__GetNotifyRsp::deviceGroupModNotify), "cusdk:DeviceGroup"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DevOnlineNotify(soap, "cusdk:devOnlineNotify", &(a->cusdk__GetNotifyRsp::devOnlineNotify), "cusdk:DevOnlineNotify"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DevConfigNotify(soap, "cusdk:devConfigNotify", &(a->cusdk__GetNotifyRsp::devConfigNotify), "cusdk:DevConfigNotify"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DevServiceStatusNotify(soap, "cusdk:devServiceStatusNotify", &(a->cusdk__GetNotifyRsp::devServiceStatusNotify), "cusdk:DevServiceStatusNotify"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DevAlarmNotify(soap, "cusdk:devAlarmNotify", &(a->cusdk__GetNotifyRsp::devAlarmNotify), "cusdk:DevAlarmNotify"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfxsd__int(soap, "cusdk:seqMarks", &(a->cusdk__GetNotifyRsp::seqMarks), "xsd:int"))
					continue;
			if (soap_flag_hasDataLeft1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:hasDataLeft", &(a->cusdk__GetNotifyRsp::hasDataLeft), "xsd:boolean"))
				{	soap_flag_hasDataLeft1--;
					continue;
				}
			soap_check_result(soap, "cusdk:deviceAddNotify");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetNotifyRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetNotifyRsp, 0, sizeof(cusdk__GetNotifyRsp), 0, soap_copy_cusdk__GetNotifyRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_hasDataLeft1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetNotifyRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetNotifyRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:GetNotifyRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetNotifyRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetNotifyRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetNotifyRsp * SOAP_FMAC4 soap_get_cusdk__GetNotifyRsp(struct soap *soap, cusdk__GetNotifyRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetNotifyRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetNotifyRsp * SOAP_FMAC2 soap_instantiate_cusdk__GetNotifyRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetNotifyRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetNotifyRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetNotifyRsp);
		if (size)
			*size = sizeof(cusdk__GetNotifyRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetNotifyRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetNotifyRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetNotifyRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetNotifyRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetNotifyRsp %p -> %p\n", q, p));
	*(cusdk__GetNotifyRsp*)p = *(cusdk__GetNotifyRsp*)q;
}

void cusdk__GetNotifyReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__GetNotifyReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__GetNotifyReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__GetNotifyReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetNotifyReq(struct soap *soap, const char *tag, int id, const cusdk__GetNotifyReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetNotifyReq), "cusdk:GetNotifyReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__GetNotifyReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__GetNotifyReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__GetNotifyReq * SOAP_FMAC4 soap_in_cusdk__GetNotifyReq(struct soap *soap, const char *tag, cusdk__GetNotifyReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__GetNotifyReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetNotifyReq, sizeof(cusdk__GetNotifyReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__GetNotifyReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__GetNotifyReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__GetNotifyReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetNotifyReq, 0, sizeof(cusdk__GetNotifyReq), 0, soap_copy_cusdk__GetNotifyReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__GetNotifyReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__GetNotifyReq);
	if (this->soap_out(soap, tag?tag:"cusdk:GetNotifyReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__GetNotifyReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__GetNotifyReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__GetNotifyReq * SOAP_FMAC4 soap_get_cusdk__GetNotifyReq(struct soap *soap, cusdk__GetNotifyReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetNotifyReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__GetNotifyReq * SOAP_FMAC2 soap_instantiate_cusdk__GetNotifyReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetNotifyReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetNotifyReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetNotifyReq);
		if (size)
			*size = sizeof(cusdk__GetNotifyReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__GetNotifyReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__GetNotifyReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__GetNotifyReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetNotifyReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__GetNotifyReq %p -> %p\n", q, p));
	*(cusdk__GetNotifyReq*)p = *(cusdk__GetNotifyReq*)q;
}

void cusdk__DeviceFullInfo::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, &this->cusdk__DeviceFullInfo::devGroupToChannel);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::id);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::domainId);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::name);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::alias);
	soap_default_cusdk__EDeviceType(soap, &this->cusdk__DeviceInfo::devType);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::manufacturer);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::description);
	soap_default_std__vectorTemplateOfcusdk__VideoSrc(soap, &this->cusdk__DeviceInfo::videoSrcList);
	soap_default_std__setTemplateOfcusdk__EDevicePri(soap, &this->cusdk__DeviceInfo::priList);
	soap_default_std__vectorTemplateOfcusdk__AlarmInputChn(soap, &this->cusdk__DeviceInfo::alarmInputChnList);
	soap_default_xsd__int(soap, &this->cusdk__DeviceInfo::videoSrcNum);
	soap_default_xsd__int(soap, &this->cusdk__DeviceInfo::encodeChnNum);
	soap_default_xsd__int(soap, &this->cusdk__DeviceInfo::decodeChnNum);
	soap_default_xsd__int(soap, &this->cusdk__DeviceInfo::alarmInputNum);
}

void cusdk__DeviceFullInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, &this->cusdk__DeviceFullInfo::devGroupToChannel);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::id);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::domainId);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::name);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::alias);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::manufacturer);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::description);
	soap_serialize_std__vectorTemplateOfcusdk__VideoSrc(soap, &this->cusdk__DeviceInfo::videoSrcList);
	soap_serialize_std__setTemplateOfcusdk__EDevicePri(soap, &this->cusdk__DeviceInfo::priList);
	soap_serialize_std__vectorTemplateOfcusdk__AlarmInputChn(soap, &this->cusdk__DeviceInfo::alarmInputChnList);
}

int cusdk__DeviceFullInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DeviceFullInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceFullInfo(struct soap *soap, const char *tag, int id, const cusdk__DeviceFullInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceFullInfo), "cusdk:DeviceFullInfo"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:id", -1, &(a->cusdk__DeviceInfo::id), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:domainId", -1, &(a->cusdk__DeviceInfo::domainId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:name", -1, &(a->cusdk__DeviceInfo::name), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:alias", -1, &(a->cusdk__DeviceInfo::alias), ""))
		return soap->error;
	if (soap_out_cusdk__EDeviceType(soap, "cusdk:devType", -1, &(a->cusdk__DeviceInfo::devType), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:manufacturer", -1, &(a->cusdk__DeviceInfo::manufacturer), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:description", -1, &(a->cusdk__DeviceInfo::description), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__VideoSrc(soap, "cusdk:videoSrcList", -1, &(a->cusdk__DeviceInfo::videoSrcList), ""))
		return soap->error;
	if (soap_out_std__setTemplateOfcusdk__EDevicePri(soap, "cusdk:priList", -1, &(a->cusdk__DeviceInfo::priList), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AlarmInputChn(soap, "cusdk:alarmInputChnList", -1, &(a->cusdk__DeviceInfo::alarmInputChnList), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:videoSrcNum", -1, &(a->cusdk__DeviceInfo::videoSrcNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:encodeChnNum", -1, &(a->cusdk__DeviceInfo::encodeChnNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:decodeChnNum", -1, &(a->cusdk__DeviceInfo::decodeChnNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:alarmInputNum", -1, &(a->cusdk__DeviceInfo::alarmInputNum), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, "cusdk:devGroupToChannel", -1, &(a->cusdk__DeviceFullInfo::devGroupToChannel), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DeviceFullInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DeviceFullInfo(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DeviceFullInfo * SOAP_FMAC4 soap_in_cusdk__DeviceFullInfo(struct soap *soap, const char *tag, cusdk__DeviceFullInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DeviceFullInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceFullInfo, sizeof(cusdk__DeviceFullInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DeviceFullInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DeviceFullInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id2 = 1;
	size_t soap_flag_domainId2 = 1;
	size_t soap_flag_name2 = 1;
	size_t soap_flag_alias2 = 1;
	size_t soap_flag_devType2 = 1;
	size_t soap_flag_manufacturer2 = 1;
	size_t soap_flag_description2 = 1;
	size_t soap_flag_videoSrcNum2 = 1;
	size_t soap_flag_encodeChnNum2 = 1;
	size_t soap_flag_decodeChnNum2 = 1;
	size_t soap_flag_alarmInputNum2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:id", &(a->cusdk__DeviceInfo::id), "xsd:string"))
				{	soap_flag_id2--;
					continue;
				}
			if (soap_flag_domainId2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:domainId", &(a->cusdk__DeviceInfo::domainId), "xsd:string"))
				{	soap_flag_domainId2--;
					continue;
				}
			if (soap_flag_name2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:name", &(a->cusdk__DeviceInfo::name), "xsd:string"))
				{	soap_flag_name2--;
					continue;
				}
			if (soap_flag_alias2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:alias", &(a->cusdk__DeviceInfo::alias), "xsd:string"))
				{	soap_flag_alias2--;
					continue;
				}
			if (soap_flag_devType2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EDeviceType(soap, "cusdk:devType", &(a->cusdk__DeviceInfo::devType), "cusdk:EDeviceType"))
				{	soap_flag_devType2--;
					continue;
				}
			if (soap_flag_manufacturer2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:manufacturer", &(a->cusdk__DeviceInfo::manufacturer), "xsd:string"))
				{	soap_flag_manufacturer2--;
					continue;
				}
			if (soap_flag_description2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:description", &(a->cusdk__DeviceInfo::description), "xsd:string"))
				{	soap_flag_description2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__VideoSrc(soap, "cusdk:videoSrcList", &(a->cusdk__DeviceInfo::videoSrcList), "cusdk:VideoSrc"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__setTemplateOfcusdk__EDevicePri(soap, "cusdk:priList", &(a->cusdk__DeviceInfo::priList), "cusdk:EDevicePri"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AlarmInputChn(soap, "cusdk:alarmInputChnList", &(a->cusdk__DeviceInfo::alarmInputChnList), "cusdk:AlarmInputChn"))
					continue;
			if (soap_flag_videoSrcNum2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:videoSrcNum", &(a->cusdk__DeviceInfo::videoSrcNum), "xsd:int"))
				{	soap_flag_videoSrcNum2--;
					continue;
				}
			if (soap_flag_encodeChnNum2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:encodeChnNum", &(a->cusdk__DeviceInfo::encodeChnNum), "xsd:int"))
				{	soap_flag_encodeChnNum2--;
					continue;
				}
			if (soap_flag_decodeChnNum2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:decodeChnNum", &(a->cusdk__DeviceInfo::decodeChnNum), "xsd:int"))
				{	soap_flag_decodeChnNum2--;
					continue;
				}
			if (soap_flag_alarmInputNum2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:alarmInputNum", &(a->cusdk__DeviceInfo::alarmInputNum), "xsd:int"))
				{	soap_flag_alarmInputNum2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, "cusdk:devGroupToChannel", &(a->cusdk__DeviceFullInfo::devGroupToChannel), "cusdk:DeviceGroupRelation"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DeviceFullInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceFullInfo, 0, sizeof(cusdk__DeviceFullInfo), 0, soap_copy_cusdk__DeviceFullInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id2 > 0 || soap_flag_domainId2 > 0 || soap_flag_name2 > 0 || soap_flag_alias2 > 0 || soap_flag_devType2 > 0 || soap_flag_manufacturer2 > 0 || soap_flag_description2 > 0 || soap_flag_videoSrcNum2 > 0 || soap_flag_encodeChnNum2 > 0 || soap_flag_decodeChnNum2 > 0 || soap_flag_alarmInputNum2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DeviceFullInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceFullInfo);
	if (this->soap_out(soap, tag?tag:"cusdk:DeviceFullInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DeviceFullInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DeviceFullInfo(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DeviceFullInfo * SOAP_FMAC4 soap_get_cusdk__DeviceFullInfo(struct soap *soap, cusdk__DeviceFullInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceFullInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DeviceFullInfo * SOAP_FMAC2 soap_instantiate_cusdk__DeviceFullInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceFullInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceFullInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceFullInfo);
		if (size)
			*size = sizeof(cusdk__DeviceFullInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceFullInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DeviceFullInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DeviceFullInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceFullInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DeviceFullInfo %p -> %p\n", q, p));
	*(cusdk__DeviceFullInfo*)p = *(cusdk__DeviceFullInfo*)q;
}

void cusdk__UnsubscribePuStatusRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, &this->cusdk__UnsubscribePuStatusRsp::failedList);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__UnsubscribePuStatusRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, &this->cusdk__UnsubscribePuStatusRsp::failedList);
}

int cusdk__UnsubscribePuStatusRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UnsubscribePuStatusRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UnsubscribePuStatusRsp(struct soap *soap, const char *tag, int id, const cusdk__UnsubscribePuStatusRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UnsubscribePuStatusRsp), "cusdk:UnsubscribePuStatusRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:failedList");
	if (soap_out_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, "cusdk:failedList", -1, &(a->cusdk__UnsubscribePuStatusRsp::failedList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UnsubscribePuStatusRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UnsubscribePuStatusRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UnsubscribePuStatusRsp * SOAP_FMAC4 soap_in_cusdk__UnsubscribePuStatusRsp(struct soap *soap, const char *tag, cusdk__UnsubscribePuStatusRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UnsubscribePuStatusRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UnsubscribePuStatusRsp, sizeof(cusdk__UnsubscribePuStatusRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UnsubscribePuStatusRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UnsubscribePuStatusRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, "cusdk:failedList", &(a->cusdk__UnsubscribePuStatusRsp::failedList), "cusdk:PuStatusSubscription"))
					continue;
			soap_check_result(soap, "cusdk:failedList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UnsubscribePuStatusRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UnsubscribePuStatusRsp, 0, sizeof(cusdk__UnsubscribePuStatusRsp), 0, soap_copy_cusdk__UnsubscribePuStatusRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UnsubscribePuStatusRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UnsubscribePuStatusRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:UnsubscribePuStatusRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UnsubscribePuStatusRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UnsubscribePuStatusRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UnsubscribePuStatusRsp * SOAP_FMAC4 soap_get_cusdk__UnsubscribePuStatusRsp(struct soap *soap, cusdk__UnsubscribePuStatusRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UnsubscribePuStatusRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UnsubscribePuStatusRsp * SOAP_FMAC2 soap_instantiate_cusdk__UnsubscribePuStatusRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UnsubscribePuStatusRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UnsubscribePuStatusRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UnsubscribePuStatusRsp);
		if (size)
			*size = sizeof(cusdk__UnsubscribePuStatusRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UnsubscribePuStatusRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UnsubscribePuStatusRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UnsubscribePuStatusRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UnsubscribePuStatusRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UnsubscribePuStatusRsp %p -> %p\n", q, p));
	*(cusdk__UnsubscribePuStatusRsp*)p = *(cusdk__UnsubscribePuStatusRsp*)q;
}

void cusdk__UnsubscribePuStatusReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, &this->cusdk__UnsubscribePuStatusReq::subscriptionList);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__UnsubscribePuStatusReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, &this->cusdk__UnsubscribePuStatusReq::subscriptionList);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__UnsubscribePuStatusReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UnsubscribePuStatusReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UnsubscribePuStatusReq(struct soap *soap, const char *tag, int id, const cusdk__UnsubscribePuStatusReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UnsubscribePuStatusReq), "cusdk:UnsubscribePuStatusReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, "cusdk:subscriptionList", -1, &(a->cusdk__UnsubscribePuStatusReq::subscriptionList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UnsubscribePuStatusReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UnsubscribePuStatusReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UnsubscribePuStatusReq * SOAP_FMAC4 soap_in_cusdk__UnsubscribePuStatusReq(struct soap *soap, const char *tag, cusdk__UnsubscribePuStatusReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UnsubscribePuStatusReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UnsubscribePuStatusReq, sizeof(cusdk__UnsubscribePuStatusReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UnsubscribePuStatusReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UnsubscribePuStatusReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, "cusdk:subscriptionList", &(a->cusdk__UnsubscribePuStatusReq::subscriptionList), "cusdk:PuStatusSubscription"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UnsubscribePuStatusReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UnsubscribePuStatusReq, 0, sizeof(cusdk__UnsubscribePuStatusReq), 0, soap_copy_cusdk__UnsubscribePuStatusReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UnsubscribePuStatusReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UnsubscribePuStatusReq);
	if (this->soap_out(soap, tag?tag:"cusdk:UnsubscribePuStatusReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UnsubscribePuStatusReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UnsubscribePuStatusReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UnsubscribePuStatusReq * SOAP_FMAC4 soap_get_cusdk__UnsubscribePuStatusReq(struct soap *soap, cusdk__UnsubscribePuStatusReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UnsubscribePuStatusReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UnsubscribePuStatusReq * SOAP_FMAC2 soap_instantiate_cusdk__UnsubscribePuStatusReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UnsubscribePuStatusReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UnsubscribePuStatusReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UnsubscribePuStatusReq);
		if (size)
			*size = sizeof(cusdk__UnsubscribePuStatusReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UnsubscribePuStatusReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UnsubscribePuStatusReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UnsubscribePuStatusReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UnsubscribePuStatusReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UnsubscribePuStatusReq %p -> %p\n", q, p));
	*(cusdk__UnsubscribePuStatusReq*)p = *(cusdk__UnsubscribePuStatusReq*)q;
}

void cusdk__SubscribePuStatusRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, &this->cusdk__SubscribePuStatusRsp::failedList);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__SubscribePuStatusRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, &this->cusdk__SubscribePuStatusRsp::failedList);
}

int cusdk__SubscribePuStatusRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__SubscribePuStatusRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SubscribePuStatusRsp(struct soap *soap, const char *tag, int id, const cusdk__SubscribePuStatusRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SubscribePuStatusRsp), "cusdk:SubscribePuStatusRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:failedList");
	if (soap_out_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, "cusdk:failedList", -1, &(a->cusdk__SubscribePuStatusRsp::failedList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__SubscribePuStatusRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__SubscribePuStatusRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__SubscribePuStatusRsp * SOAP_FMAC4 soap_in_cusdk__SubscribePuStatusRsp(struct soap *soap, const char *tag, cusdk__SubscribePuStatusRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__SubscribePuStatusRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SubscribePuStatusRsp, sizeof(cusdk__SubscribePuStatusRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__SubscribePuStatusRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__SubscribePuStatusRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, "cusdk:failedList", &(a->cusdk__SubscribePuStatusRsp::failedList), "cusdk:PuStatusSubscription"))
					continue;
			soap_check_result(soap, "cusdk:failedList");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__SubscribePuStatusRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SubscribePuStatusRsp, 0, sizeof(cusdk__SubscribePuStatusRsp), 0, soap_copy_cusdk__SubscribePuStatusRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__SubscribePuStatusRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__SubscribePuStatusRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:SubscribePuStatusRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__SubscribePuStatusRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__SubscribePuStatusRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__SubscribePuStatusRsp * SOAP_FMAC4 soap_get_cusdk__SubscribePuStatusRsp(struct soap *soap, cusdk__SubscribePuStatusRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SubscribePuStatusRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__SubscribePuStatusRsp * SOAP_FMAC2 soap_instantiate_cusdk__SubscribePuStatusRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SubscribePuStatusRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SubscribePuStatusRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SubscribePuStatusRsp);
		if (size)
			*size = sizeof(cusdk__SubscribePuStatusRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SubscribePuStatusRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__SubscribePuStatusRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__SubscribePuStatusRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SubscribePuStatusRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__SubscribePuStatusRsp %p -> %p\n", q, p));
	*(cusdk__SubscribePuStatusRsp*)p = *(cusdk__SubscribePuStatusRsp*)q;
}

void cusdk__SubscribePuStatusReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, &this->cusdk__SubscribePuStatusReq::subscriptionList);
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__SubscribePuStatusReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, &this->cusdk__SubscribePuStatusReq::subscriptionList);
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__SubscribePuStatusReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__SubscribePuStatusReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SubscribePuStatusReq(struct soap *soap, const char *tag, int id, const cusdk__SubscribePuStatusReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SubscribePuStatusReq), "cusdk:SubscribePuStatusReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, "cusdk:subscriptionList", -1, &(a->cusdk__SubscribePuStatusReq::subscriptionList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__SubscribePuStatusReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__SubscribePuStatusReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__SubscribePuStatusReq * SOAP_FMAC4 soap_in_cusdk__SubscribePuStatusReq(struct soap *soap, const char *tag, cusdk__SubscribePuStatusReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__SubscribePuStatusReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SubscribePuStatusReq, sizeof(cusdk__SubscribePuStatusReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__SubscribePuStatusReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__SubscribePuStatusReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, "cusdk:subscriptionList", &(a->cusdk__SubscribePuStatusReq::subscriptionList), "cusdk:PuStatusSubscription"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__SubscribePuStatusReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SubscribePuStatusReq, 0, sizeof(cusdk__SubscribePuStatusReq), 0, soap_copy_cusdk__SubscribePuStatusReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__SubscribePuStatusReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__SubscribePuStatusReq);
	if (this->soap_out(soap, tag?tag:"cusdk:SubscribePuStatusReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__SubscribePuStatusReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__SubscribePuStatusReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__SubscribePuStatusReq * SOAP_FMAC4 soap_get_cusdk__SubscribePuStatusReq(struct soap *soap, cusdk__SubscribePuStatusReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SubscribePuStatusReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__SubscribePuStatusReq * SOAP_FMAC2 soap_instantiate_cusdk__SubscribePuStatusReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SubscribePuStatusReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SubscribePuStatusReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SubscribePuStatusReq);
		if (size)
			*size = sizeof(cusdk__SubscribePuStatusReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__SubscribePuStatusReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__SubscribePuStatusReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__SubscribePuStatusReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SubscribePuStatusReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__SubscribePuStatusReq %p -> %p\n", q, p));
	*(cusdk__SubscribePuStatusReq*)p = *(cusdk__SubscribePuStatusReq*)q;
}

void cusdk__PuStatusSubscription::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__PuStatusSubscription::devURI);
	soap_default_std__setTemplateOfcusdk__EPuSubscribeType(soap, &this->cusdk__PuStatusSubscription::subscribeTypes);
}

void cusdk__PuStatusSubscription::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__PuStatusSubscription::devURI);
	soap_serialize_std__setTemplateOfcusdk__EPuSubscribeType(soap, &this->cusdk__PuStatusSubscription::subscribeTypes);
}

int cusdk__PuStatusSubscription::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PuStatusSubscription(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PuStatusSubscription(struct soap *soap, const char *tag, int id, const cusdk__PuStatusSubscription *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PuStatusSubscription), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devURI", -1, &(a->cusdk__PuStatusSubscription::devURI), ""))
		return soap->error;
	if (soap_out_std__setTemplateOfcusdk__EPuSubscribeType(soap, "cusdk:subscribeTypes", -1, &(a->cusdk__PuStatusSubscription::subscribeTypes), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PuStatusSubscription::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PuStatusSubscription(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PuStatusSubscription * SOAP_FMAC4 soap_in_cusdk__PuStatusSubscription(struct soap *soap, const char *tag, cusdk__PuStatusSubscription *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PuStatusSubscription *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PuStatusSubscription, sizeof(cusdk__PuStatusSubscription), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PuStatusSubscription)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PuStatusSubscription *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_devURI1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_devURI1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devURI", &(a->cusdk__PuStatusSubscription::devURI), "xsd:string"))
				{	soap_flag_devURI1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__setTemplateOfcusdk__EPuSubscribeType(soap, "cusdk:subscribeTypes", &(a->cusdk__PuStatusSubscription::subscribeTypes), "cusdk:EPuSubscribeType"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PuStatusSubscription *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PuStatusSubscription, 0, sizeof(cusdk__PuStatusSubscription), 0, soap_copy_cusdk__PuStatusSubscription);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_devURI1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PuStatusSubscription::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PuStatusSubscription);
	if (this->soap_out(soap, tag?tag:"cusdk:PuStatusSubscription", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PuStatusSubscription::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PuStatusSubscription(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PuStatusSubscription * SOAP_FMAC4 soap_get_cusdk__PuStatusSubscription(struct soap *soap, cusdk__PuStatusSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PuStatusSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PuStatusSubscription * SOAP_FMAC2 soap_instantiate_cusdk__PuStatusSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PuStatusSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PuStatusSubscription, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PuStatusSubscription);
		if (size)
			*size = sizeof(cusdk__PuStatusSubscription);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PuStatusSubscription[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PuStatusSubscription);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PuStatusSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PuStatusSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PuStatusSubscription %p -> %p\n", q, p));
	*(cusdk__PuStatusSubscription*)p = *(cusdk__PuStatusSubscription*)q;
}

void cusdk__LogoutRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__LogoutRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__LogoutRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__LogoutRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__LogoutRsp(struct soap *soap, const char *tag, int id, const cusdk__LogoutRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__LogoutRsp), "cusdk:LogoutRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__LogoutRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__LogoutRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__LogoutRsp * SOAP_FMAC4 soap_in_cusdk__LogoutRsp(struct soap *soap, const char *tag, cusdk__LogoutRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__LogoutRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__LogoutRsp, sizeof(cusdk__LogoutRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__LogoutRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__LogoutRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__LogoutRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__LogoutRsp, 0, sizeof(cusdk__LogoutRsp), 0, soap_copy_cusdk__LogoutRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__LogoutRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__LogoutRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:LogoutRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__LogoutRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__LogoutRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__LogoutRsp * SOAP_FMAC4 soap_get_cusdk__LogoutRsp(struct soap *soap, cusdk__LogoutRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__LogoutRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__LogoutRsp * SOAP_FMAC2 soap_instantiate_cusdk__LogoutRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__LogoutRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__LogoutRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__LogoutRsp);
		if (size)
			*size = sizeof(cusdk__LogoutRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__LogoutRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__LogoutRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__LogoutRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__LogoutRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__LogoutRsp %p -> %p\n", q, p));
	*(cusdk__LogoutRsp*)p = *(cusdk__LogoutRsp*)q;
}

void cusdk__LogoutReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__LogoutReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__LogoutReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__LogoutReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__LogoutReq(struct soap *soap, const char *tag, int id, const cusdk__LogoutReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__LogoutReq), "cusdk:LogoutReq"))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__LogoutReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__LogoutReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__LogoutReq * SOAP_FMAC4 soap_in_cusdk__LogoutReq(struct soap *soap, const char *tag, cusdk__LogoutReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__LogoutReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__LogoutReq, sizeof(cusdk__LogoutReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__LogoutReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__LogoutReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__LogoutReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__LogoutReq, 0, sizeof(cusdk__LogoutReq), 0, soap_copy_cusdk__LogoutReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__LogoutReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__LogoutReq);
	if (this->soap_out(soap, tag?tag:"cusdk:LogoutReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__LogoutReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__LogoutReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__LogoutReq * SOAP_FMAC4 soap_get_cusdk__LogoutReq(struct soap *soap, cusdk__LogoutReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__LogoutReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__LogoutReq * SOAP_FMAC2 soap_instantiate_cusdk__LogoutReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__LogoutReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__LogoutReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__LogoutReq);
		if (size)
			*size = sizeof(cusdk__LogoutReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__LogoutReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__LogoutReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__LogoutReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__LogoutReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__LogoutReq %p -> %p\n", q, p));
	*(cusdk__LogoutReq*)p = *(cusdk__LogoutReq*)q;
}

void cusdk__LoginRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__LoginRsp::session);
	soap_default_xsd__string(soap, &this->cusdk__LoginRsp::cmsVersion);
	this->cusdk__LoginRsp::stunInfo.cusdk__STUNServerInfo::soap_default(soap);
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__LoginRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__LoginRsp::session);
	soap_serialize_xsd__string(soap, &this->cusdk__LoginRsp::cmsVersion);
	this->cusdk__LoginRsp::stunInfo.soap_serialize(soap);
}

int cusdk__LoginRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__LoginRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__LoginRsp(struct soap *soap, const char *tag, int id, const cusdk__LoginRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__LoginRsp), "cusdk:LoginRsp"))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	soap_element_result(soap, "cusdk:session");
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__LoginRsp::session), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:cmsVersion", -1, &(a->cusdk__LoginRsp::cmsVersion), ""))
		return soap->error;
	if ((a->cusdk__LoginRsp::stunInfo).soap_out(soap, "cusdk:stunInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__LoginRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__LoginRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__LoginRsp * SOAP_FMAC4 soap_in_cusdk__LoginRsp(struct soap *soap, const char *tag, cusdk__LoginRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__LoginRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__LoginRsp, sizeof(cusdk__LoginRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__LoginRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__LoginRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode2 = 1;
	size_t soap_flag_session1 = 1;
	size_t soap_flag_cmsVersion1 = 1;
	size_t soap_flag_stunInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode2--;
					continue;
				}
			if (soap_flag_session1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__LoginRsp::session), "xsd:string"))
				{	soap_flag_session1--;
					continue;
				}
			if (soap_flag_cmsVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:cmsVersion", &(a->cusdk__LoginRsp::cmsVersion), "xsd:string"))
				{	soap_flag_cmsVersion1--;
					continue;
				}
			if (soap_flag_stunInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__LoginRsp::stunInfo).soap_in(soap, "cusdk:stunInfo", "cusdk:STUNServerInfo"))
				{	soap_flag_stunInfo1--;
					continue;
				}
			soap_check_result(soap, "cusdk:session");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__LoginRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__LoginRsp, 0, sizeof(cusdk__LoginRsp), 0, soap_copy_cusdk__LoginRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode2 > 0 || soap_flag_session1 > 0 || soap_flag_cmsVersion1 > 0 || soap_flag_stunInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__LoginRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__LoginRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:LoginRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__LoginRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__LoginRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__LoginRsp * SOAP_FMAC4 soap_get_cusdk__LoginRsp(struct soap *soap, cusdk__LoginRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__LoginRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__LoginRsp * SOAP_FMAC2 soap_instantiate_cusdk__LoginRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__LoginRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__LoginRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__LoginRsp);
		if (size)
			*size = sizeof(cusdk__LoginRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__LoginRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__LoginRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__LoginRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__LoginRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__LoginRsp %p -> %p\n", q, p));
	*(cusdk__LoginRsp*)p = *(cusdk__LoginRsp*)q;
}

void cusdk__LoginReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__LoginReq::userName);
	soap_default_xsd__string(soap, &this->cusdk__LoginReq::password);
	soap_default_xsd__string(soap, &this->cusdk__LoginReq::cusdkVersion);
}

void cusdk__LoginReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__LoginReq::userName);
	soap_serialize_xsd__string(soap, &this->cusdk__LoginReq::password);
	soap_serialize_xsd__string(soap, &this->cusdk__LoginReq::cusdkVersion);
}

int cusdk__LoginReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__LoginReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__LoginReq(struct soap *soap, const char *tag, int id, const cusdk__LoginReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__LoginReq), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userName", -1, &(a->cusdk__LoginReq::userName), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:password", -1, &(a->cusdk__LoginReq::password), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:cusdkVersion", -1, &(a->cusdk__LoginReq::cusdkVersion), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__LoginReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__LoginReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__LoginReq * SOAP_FMAC4 soap_in_cusdk__LoginReq(struct soap *soap, const char *tag, cusdk__LoginReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__LoginReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__LoginReq, sizeof(cusdk__LoginReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__LoginReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__LoginReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_password1 = 1;
	size_t soap_flag_cusdkVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userName", &(a->cusdk__LoginReq::userName), "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:password", &(a->cusdk__LoginReq::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			if (soap_flag_cusdkVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:cusdkVersion", &(a->cusdk__LoginReq::cusdkVersion), "xsd:string"))
				{	soap_flag_cusdkVersion1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__LoginReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__LoginReq, 0, sizeof(cusdk__LoginReq), 0, soap_copy_cusdk__LoginReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userName1 > 0 || soap_flag_password1 > 0 || soap_flag_cusdkVersion1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__LoginReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__LoginReq);
	if (this->soap_out(soap, tag?tag:"cusdk:LoginReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__LoginReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__LoginReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__LoginReq * SOAP_FMAC4 soap_get_cusdk__LoginReq(struct soap *soap, cusdk__LoginReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__LoginReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__LoginReq * SOAP_FMAC2 soap_instantiate_cusdk__LoginReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__LoginReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__LoginReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__LoginReq);
		if (size)
			*size = sizeof(cusdk__LoginReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__LoginReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__LoginReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__LoginReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__LoginReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__LoginReq %p -> %p\n", q, p));
	*(cusdk__LoginReq*)p = *(cusdk__LoginReq*)q;
}

void cusdk__STUNServerInfo::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__STUNServerInfo::ip);
	soap_default_xsd__int(soap, &this->cusdk__STUNServerInfo::port);
}

void cusdk__STUNServerInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__STUNServerInfo::ip);
}

int cusdk__STUNServerInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__STUNServerInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__STUNServerInfo(struct soap *soap, const char *tag, int id, const cusdk__STUNServerInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__STUNServerInfo), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:ip", -1, &(a->cusdk__STUNServerInfo::ip), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:port", -1, &(a->cusdk__STUNServerInfo::port), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__STUNServerInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__STUNServerInfo(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__STUNServerInfo * SOAP_FMAC4 soap_in_cusdk__STUNServerInfo(struct soap *soap, const char *tag, cusdk__STUNServerInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__STUNServerInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__STUNServerInfo, sizeof(cusdk__STUNServerInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__STUNServerInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__STUNServerInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ip1 = 1;
	size_t soap_flag_port1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:ip", &(a->cusdk__STUNServerInfo::ip), "xsd:string"))
				{	soap_flag_ip1--;
					continue;
				}
			if (soap_flag_port1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:port", &(a->cusdk__STUNServerInfo::port), "xsd:int"))
				{	soap_flag_port1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__STUNServerInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__STUNServerInfo, 0, sizeof(cusdk__STUNServerInfo), 0, soap_copy_cusdk__STUNServerInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ip1 > 0 || soap_flag_port1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__STUNServerInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__STUNServerInfo);
	if (this->soap_out(soap, tag?tag:"cusdk:STUNServerInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__STUNServerInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__STUNServerInfo(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__STUNServerInfo * SOAP_FMAC4 soap_get_cusdk__STUNServerInfo(struct soap *soap, cusdk__STUNServerInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__STUNServerInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__STUNServerInfo * SOAP_FMAC2 soap_instantiate_cusdk__STUNServerInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__STUNServerInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__STUNServerInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__STUNServerInfo);
		if (size)
			*size = sizeof(cusdk__STUNServerInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__STUNServerInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__STUNServerInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__STUNServerInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__STUNServerInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__STUNServerInfo %p -> %p\n", q, p));
	*(cusdk__STUNServerInfo*)p = *(cusdk__STUNServerInfo*)q;
}

void cusdk__BaseRsp::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_long(soap, &this->cusdk__BaseRsp::errorCode);
}

void cusdk__BaseRsp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__BaseRsp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__BaseRsp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__BaseRsp(struct soap *soap, const char *tag, int id, const cusdk__BaseRsp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__BaseRsp), type))
		return soap->error;
	if (soap_out_long(soap, "cusdk:errorCode", -1, &(a->cusdk__BaseRsp::errorCode), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__BaseRsp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__BaseRsp(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__BaseRsp * SOAP_FMAC4 soap_in_cusdk__BaseRsp(struct soap *soap, const char *tag, cusdk__BaseRsp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__BaseRsp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__BaseRsp, sizeof(cusdk__BaseRsp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__BaseRsp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__BaseRsp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errorCode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "cusdk:errorCode", &(a->cusdk__BaseRsp::errorCode), "xsd:long"))
				{	soap_flag_errorCode1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__BaseRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__BaseRsp, 0, sizeof(cusdk__BaseRsp), 0, soap_copy_cusdk__BaseRsp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__BaseRsp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__BaseRsp);
	if (this->soap_out(soap, tag?tag:"cusdk:BaseRsp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__BaseRsp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__BaseRsp(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__BaseRsp * SOAP_FMAC4 soap_get_cusdk__BaseRsp(struct soap *soap, cusdk__BaseRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__BaseRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__BaseRsp * SOAP_FMAC2 soap_instantiate_cusdk__BaseRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__BaseRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__BaseRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "cusdk:LoginRsp"))
	{	cp->type = SOAP_TYPE_cusdk__LoginRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__LoginRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__LoginRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__LoginRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__LoginRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__LoginRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:LogoutRsp"))
	{	cp->type = SOAP_TYPE_cusdk__LogoutRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__LogoutRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__LogoutRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__LogoutRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__LogoutRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__LogoutRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:SubscribePuStatusRsp"))
	{	cp->type = SOAP_TYPE_cusdk__SubscribePuStatusRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SubscribePuStatusRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__SubscribePuStatusRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SubscribePuStatusRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__SubscribePuStatusRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__SubscribePuStatusRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UnsubscribePuStatusRsp"))
	{	cp->type = SOAP_TYPE_cusdk__UnsubscribePuStatusRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UnsubscribePuStatusRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UnsubscribePuStatusRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UnsubscribePuStatusRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__UnsubscribePuStatusRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UnsubscribePuStatusRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetNotifyRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetNotifyRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetNotifyRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetNotifyRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetNotifyRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetNotifyRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetNotifyRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetCUIListRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetCUIListRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetCUIListRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetCUIListRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetCUIListRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetCUIListRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetCUIListRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:SetupStreamRsp"))
	{	cp->type = SOAP_TYPE_cusdk__SetupStreamRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SetupStreamRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__SetupStreamRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SetupStreamRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__SetupStreamRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__SetupStreamRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:PlayStreamRsp"))
	{	cp->type = SOAP_TYPE_cusdk__PlayStreamRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PlayStreamRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__PlayStreamRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PlayStreamRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__PlayStreamRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__PlayStreamRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:StopStreamRsp"))
	{	cp->type = SOAP_TYPE_cusdk__StopStreamRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__StopStreamRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__StopStreamRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__StopStreamRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__StopStreamRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__StopStreamRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:PtzCtrlRsp"))
	{	cp->type = SOAP_TYPE_cusdk__PtzCtrlRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzCtrlRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__PtzCtrlRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzCtrlRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__PtzCtrlRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__PtzCtrlRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:PtzLockRsp"))
	{	cp->type = SOAP_TYPE_cusdk__PtzLockRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzLockRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__PtzLockRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzLockRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__PtzLockRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__PtzLockRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:PtzUnlockRsp"))
	{	cp->type = SOAP_TYPE_cusdk__PtzUnlockRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzUnlockRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__PtzUnlockRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzUnlockRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__PtzUnlockRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__PtzUnlockRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:SendTransDataRsp"))
	{	cp->type = SOAP_TYPE_cusdk__SendTransDataRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SendTransDataRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__SendTransDataRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SendTransDataRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__SendTransDataRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__SendTransDataRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserInfoRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserInfoRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserInfoRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserInfoRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserInfoRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserInfoRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserInfoRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserGroupInfoRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserGroupInfoRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupInfoRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserGroupInfoRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupInfoRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserGroupInfoRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserGroupInfoRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDataRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDataRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDataRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDataRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDataRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDataRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDataRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:SetUserDataRsp"))
	{	cp->type = SOAP_TYPE_cusdk__SetUserDataRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SetUserDataRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__SetUserDataRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SetUserDataRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__SetUserDataRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__SetUserDataRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDevGroupByGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupByGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDevGroupByGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupByGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDevGroupByGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDevGroupByGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDevByGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDevByGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevByGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDevByGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevByGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDevByGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDevByGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDevGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDevGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDevGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDevGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDevGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetDomainDevGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetDomainDevGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDomainDevGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetDomainDevGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDomainDevGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetDomainDevGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetDomainDevGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDevRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDevRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDevRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDevRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDevRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetDevByDomainRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetDevByDomainRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDevByDomainRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetDevByDomainRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDevByDomainRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetDevByDomainRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetDevByDomainRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetDeviceGroupDeviceRelationsRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceGroupDeviceRelationsRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetDeviceGroupDeviceRelationsRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceGroupDeviceRelationsRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetDeviceGroupDeviceRelationsRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetDeviceGroupDeviceRelationsRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:CreateDeviceGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__CreateDeviceGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateDeviceGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__CreateDeviceGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateDeviceGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__CreateDeviceGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__CreateDeviceGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DelDeviceGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__DelDeviceGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelDeviceGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DelDeviceGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelDeviceGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__DelDeviceGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DelDeviceGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:ModifyDeviceGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__ModifyDeviceGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyDeviceGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__ModifyDeviceGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyDeviceGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__ModifyDeviceGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__ModifyDeviceGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DeviceGroupAddDeviceRsp"))
	{	cp->type = SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupAddDeviceRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DeviceGroupAddDeviceRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupAddDeviceRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__DeviceGroupAddDeviceRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DeviceGroupAddDeviceRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DeviceGroupDelDeviceRsp"))
	{	cp->type = SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupDelDeviceRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DeviceGroupDelDeviceRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupDelDeviceRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__DeviceGroupDelDeviceRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DeviceGroupDelDeviceRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserListRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserListRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserListRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserListRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserListRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserListRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserListRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserGroupListRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserGroupListRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupListRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserGroupListRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupListRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserGroupListRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserGroupListRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:CreateUserGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__CreateUserGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__CreateUserGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__CreateUserGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__CreateUserGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DelUserGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__DelUserGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DelUserGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__DelUserGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DelUserGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:ModifyUserGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__ModifyUserGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__ModifyUserGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__ModifyUserGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__ModifyUserGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:CreateUserRsp"))
	{	cp->type = SOAP_TYPE_cusdk__CreateUserRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__CreateUserRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__CreateUserRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__CreateUserRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DelUserRsp"))
	{	cp->type = SOAP_TYPE_cusdk__DelUserRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DelUserRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__DelUserRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DelUserRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:ModifyUserRsp"))
	{	cp->type = SOAP_TYPE_cusdk__ModifyUserRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__ModifyUserRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__ModifyUserRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__ModifyUserRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UserGetDeviceByGroupRsp"))
	{	cp->type = SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGetDeviceByGroupRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UserGetDeviceByGroupRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGetDeviceByGroupRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__UserGetDeviceByGroupRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UserGetDeviceByGroupRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UserAddDeviceRsp"))
	{	cp->type = SOAP_TYPE_cusdk__UserAddDeviceRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserAddDeviceRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UserAddDeviceRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserAddDeviceRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__UserAddDeviceRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UserAddDeviceRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UserDelDeviceRsp"))
	{	cp->type = SOAP_TYPE_cusdk__UserDelDeviceRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserDelDeviceRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UserDelDeviceRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserDelDeviceRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__UserDelDeviceRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UserDelDeviceRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UserModifyDeviceRsp"))
	{	cp->type = SOAP_TYPE_cusdk__UserModifyDeviceRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserModifyDeviceRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UserModifyDeviceRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserModifyDeviceRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__UserModifyDeviceRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UserModifyDeviceRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetAuthorizationDeviceRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetAuthorizationDeviceRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetAuthorizationDeviceRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetAuthorizationDeviceRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetAuthorizationDeviceRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetAuthorizationDeviceRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:AddAuthorizationDeviceRsp"))
	{	cp->type = SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__AddAuthorizationDeviceRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__AddAuthorizationDeviceRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__AddAuthorizationDeviceRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__AddAuthorizationDeviceRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__AddAuthorizationDeviceRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DelAuthorizationDeviceRsp"))
	{	cp->type = SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelAuthorizationDeviceRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DelAuthorizationDeviceRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelAuthorizationDeviceRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__DelAuthorizationDeviceRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DelAuthorizationDeviceRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:ModifyAuthorizationDeviceRsp"))
	{	cp->type = SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyAuthorizationDeviceRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__ModifyAuthorizationDeviceRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyAuthorizationDeviceRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__ModifyAuthorizationDeviceRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__ModifyAuthorizationDeviceRsp*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetDeviceBaseInfoRsp"))
	{	cp->type = SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceBaseInfoRsp);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetDeviceBaseInfoRsp);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceBaseInfoRsp[n]);
			if (size)
				*size = n * sizeof(cusdk__GetDeviceBaseInfoRsp);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetDeviceBaseInfoRsp*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__BaseRsp);
		if (size)
			*size = sizeof(cusdk__BaseRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__BaseRsp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__BaseRsp);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__BaseRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__BaseRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__BaseRsp %p -> %p\n", q, p));
	*(cusdk__BaseRsp*)p = *(cusdk__BaseRsp*)q;
}

void cusdk__BaseReq::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__BaseReq::session);
}

void cusdk__BaseReq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__BaseReq::session);
}

int cusdk__BaseReq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__BaseReq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__BaseReq(struct soap *soap, const char *tag, int id, const cusdk__BaseReq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__BaseReq), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:session", -1, &(a->cusdk__BaseReq::session), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__BaseReq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__BaseReq(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__BaseReq * SOAP_FMAC4 soap_in_cusdk__BaseReq(struct soap *soap, const char *tag, cusdk__BaseReq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__BaseReq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__BaseReq, sizeof(cusdk__BaseReq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__BaseReq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__BaseReq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_session1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_session1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:session", &(a->cusdk__BaseReq::session), "xsd:string"))
				{	soap_flag_session1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__BaseReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__BaseReq, 0, sizeof(cusdk__BaseReq), 0, soap_copy_cusdk__BaseReq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_session1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__BaseReq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__BaseReq);
	if (this->soap_out(soap, tag?tag:"cusdk:BaseReq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__BaseReq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__BaseReq(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__BaseReq * SOAP_FMAC4 soap_get_cusdk__BaseReq(struct soap *soap, cusdk__BaseReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__BaseReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__BaseReq * SOAP_FMAC2 soap_instantiate_cusdk__BaseReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__BaseReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__BaseReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "cusdk:LogoutReq"))
	{	cp->type = SOAP_TYPE_cusdk__LogoutReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__LogoutReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__LogoutReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__LogoutReq[n]);
			if (size)
				*size = n * sizeof(cusdk__LogoutReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__LogoutReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:SubscribePuStatusReq"))
	{	cp->type = SOAP_TYPE_cusdk__SubscribePuStatusReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SubscribePuStatusReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__SubscribePuStatusReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SubscribePuStatusReq[n]);
			if (size)
				*size = n * sizeof(cusdk__SubscribePuStatusReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__SubscribePuStatusReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UnsubscribePuStatusReq"))
	{	cp->type = SOAP_TYPE_cusdk__UnsubscribePuStatusReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UnsubscribePuStatusReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UnsubscribePuStatusReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UnsubscribePuStatusReq[n]);
			if (size)
				*size = n * sizeof(cusdk__UnsubscribePuStatusReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UnsubscribePuStatusReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetNotifyReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetNotifyReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetNotifyReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetNotifyReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetNotifyReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetNotifyReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetNotifyReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetCUIListReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetCUIListReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetCUIListReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetCUIListReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetCUIListReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetCUIListReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetCUIListReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:SetupStreamReq"))
	{	cp->type = SOAP_TYPE_cusdk__SetupStreamReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SetupStreamReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__SetupStreamReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SetupStreamReq[n]);
			if (size)
				*size = n * sizeof(cusdk__SetupStreamReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__SetupStreamReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:PlayStreamReq"))
	{	cp->type = SOAP_TYPE_cusdk__PlayStreamReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PlayStreamReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__PlayStreamReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PlayStreamReq[n]);
			if (size)
				*size = n * sizeof(cusdk__PlayStreamReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__PlayStreamReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:StopStreamReq"))
	{	cp->type = SOAP_TYPE_cusdk__StopStreamReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__StopStreamReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__StopStreamReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__StopStreamReq[n]);
			if (size)
				*size = n * sizeof(cusdk__StopStreamReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__StopStreamReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:PtzCtrlReq"))
	{	cp->type = SOAP_TYPE_cusdk__PtzCtrlReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzCtrlReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__PtzCtrlReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzCtrlReq[n]);
			if (size)
				*size = n * sizeof(cusdk__PtzCtrlReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__PtzCtrlReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:PtzLockReq"))
	{	cp->type = SOAP_TYPE_cusdk__PtzLockReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzLockReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__PtzLockReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzLockReq[n]);
			if (size)
				*size = n * sizeof(cusdk__PtzLockReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__PtzLockReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:PtzUnlockReq"))
	{	cp->type = SOAP_TYPE_cusdk__PtzUnlockReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzUnlockReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__PtzUnlockReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__PtzUnlockReq[n]);
			if (size)
				*size = n * sizeof(cusdk__PtzUnlockReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__PtzUnlockReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:SendTransDataReq"))
	{	cp->type = SOAP_TYPE_cusdk__SendTransDataReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SendTransDataReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__SendTransDataReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SendTransDataReq[n]);
			if (size)
				*size = n * sizeof(cusdk__SendTransDataReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__SendTransDataReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserInfoReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserInfoReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserInfoReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserInfoReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserInfoReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserInfoReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserInfoReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserGroupInfoReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserGroupInfoReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupInfoReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserGroupInfoReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupInfoReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserGroupInfoReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserGroupInfoReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDataReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDataReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDataReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDataReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDataReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDataReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDataReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:SetUserDataReq"))
	{	cp->type = SOAP_TYPE_cusdk__SetUserDataReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SetUserDataReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__SetUserDataReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__SetUserDataReq[n]);
			if (size)
				*size = n * sizeof(cusdk__SetUserDataReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__SetUserDataReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDevGroupByGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupByGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDevGroupByGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupByGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDevGroupByGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDevGroupByGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDevByGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDevByGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevByGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDevByGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevByGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDevByGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDevByGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDevGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDevGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDevGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDevGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDevGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetDomainDevGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetDomainDevGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDomainDevGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetDomainDevGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDomainDevGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetDomainDevGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetDomainDevGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserDevReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserDevReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserDevReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserDevReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserDevReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserDevReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetDevByDomainReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetDevByDomainReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDevByDomainReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetDevByDomainReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDevByDomainReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetDevByDomainReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetDevByDomainReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetDeviceGroupDeviceRelationsReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceGroupDeviceRelationsReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetDeviceGroupDeviceRelationsReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceGroupDeviceRelationsReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetDeviceGroupDeviceRelationsReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetDeviceGroupDeviceRelationsReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:CreateDeviceGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__CreateDeviceGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateDeviceGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__CreateDeviceGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateDeviceGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__CreateDeviceGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__CreateDeviceGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DelDeviceGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__DelDeviceGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelDeviceGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DelDeviceGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelDeviceGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__DelDeviceGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DelDeviceGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:ModifyDeviceGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__ModifyDeviceGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyDeviceGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__ModifyDeviceGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyDeviceGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__ModifyDeviceGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__ModifyDeviceGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DeviceGroupAddDeviceReq"))
	{	cp->type = SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupAddDeviceReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DeviceGroupAddDeviceReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupAddDeviceReq[n]);
			if (size)
				*size = n * sizeof(cusdk__DeviceGroupAddDeviceReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DeviceGroupAddDeviceReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DeviceGroupDelDeviceReq"))
	{	cp->type = SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupDelDeviceReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DeviceGroupDelDeviceReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupDelDeviceReq[n]);
			if (size)
				*size = n * sizeof(cusdk__DeviceGroupDelDeviceReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DeviceGroupDelDeviceReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserListReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserListReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserListReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserListReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserListReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserListReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserListReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetUserGroupListReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetUserGroupListReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupListReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetUserGroupListReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetUserGroupListReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetUserGroupListReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetUserGroupListReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:CreateUserGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__CreateUserGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__CreateUserGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__CreateUserGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__CreateUserGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DelUserGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__DelUserGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DelUserGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__DelUserGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DelUserGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:ModifyUserGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__ModifyUserGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__ModifyUserGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__ModifyUserGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__ModifyUserGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:CreateUserReq"))
	{	cp->type = SOAP_TYPE_cusdk__CreateUserReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__CreateUserReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__CreateUserReq[n]);
			if (size)
				*size = n * sizeof(cusdk__CreateUserReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__CreateUserReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DelUserReq"))
	{	cp->type = SOAP_TYPE_cusdk__DelUserReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DelUserReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelUserReq[n]);
			if (size)
				*size = n * sizeof(cusdk__DelUserReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DelUserReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:ModifyUserReq"))
	{	cp->type = SOAP_TYPE_cusdk__ModifyUserReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__ModifyUserReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyUserReq[n]);
			if (size)
				*size = n * sizeof(cusdk__ModifyUserReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__ModifyUserReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UserGetDeviceByGroupReq"))
	{	cp->type = SOAP_TYPE_cusdk__UserGetDeviceByGroupReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGetDeviceByGroupReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UserGetDeviceByGroupReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGetDeviceByGroupReq[n]);
			if (size)
				*size = n * sizeof(cusdk__UserGetDeviceByGroupReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UserGetDeviceByGroupReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UserAddDeviceReq"))
	{	cp->type = SOAP_TYPE_cusdk__UserAddDeviceReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserAddDeviceReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UserAddDeviceReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserAddDeviceReq[n]);
			if (size)
				*size = n * sizeof(cusdk__UserAddDeviceReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UserAddDeviceReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UserDelDeviceReq"))
	{	cp->type = SOAP_TYPE_cusdk__UserDelDeviceReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserDelDeviceReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UserDelDeviceReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserDelDeviceReq[n]);
			if (size)
				*size = n * sizeof(cusdk__UserDelDeviceReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UserDelDeviceReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:UserModifyDeviceReq"))
	{	cp->type = SOAP_TYPE_cusdk__UserModifyDeviceReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserModifyDeviceReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__UserModifyDeviceReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__UserModifyDeviceReq[n]);
			if (size)
				*size = n * sizeof(cusdk__UserModifyDeviceReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__UserModifyDeviceReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetAuthorizationDeviceReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetAuthorizationDeviceReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetAuthorizationDeviceReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetAuthorizationDeviceReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetAuthorizationDeviceReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetAuthorizationDeviceReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetAuthorizationDeviceReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:AddAuthorizationDeviceReq"))
	{	cp->type = SOAP_TYPE_cusdk__AddAuthorizationDeviceReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__AddAuthorizationDeviceReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__AddAuthorizationDeviceReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__AddAuthorizationDeviceReq[n]);
			if (size)
				*size = n * sizeof(cusdk__AddAuthorizationDeviceReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__AddAuthorizationDeviceReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:DelAuthorizationDeviceReq"))
	{	cp->type = SOAP_TYPE_cusdk__DelAuthorizationDeviceReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelAuthorizationDeviceReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DelAuthorizationDeviceReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DelAuthorizationDeviceReq[n]);
			if (size)
				*size = n * sizeof(cusdk__DelAuthorizationDeviceReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DelAuthorizationDeviceReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:ModifyAuthorizationDeviceReq"))
	{	cp->type = SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyAuthorizationDeviceReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__ModifyAuthorizationDeviceReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__ModifyAuthorizationDeviceReq[n]);
			if (size)
				*size = n * sizeof(cusdk__ModifyAuthorizationDeviceReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__ModifyAuthorizationDeviceReq*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "cusdk:GetDeviceBaseInfoReq"))
	{	cp->type = SOAP_TYPE_cusdk__GetDeviceBaseInfoReq;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceBaseInfoReq);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__GetDeviceBaseInfoReq);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__GetDeviceBaseInfoReq[n]);
			if (size)
				*size = n * sizeof(cusdk__GetDeviceBaseInfoReq);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__GetDeviceBaseInfoReq*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__BaseReq);
		if (size)
			*size = sizeof(cusdk__BaseReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__BaseReq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__BaseReq);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__BaseReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__BaseReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__BaseReq %p -> %p\n", q, p));
	*(cusdk__BaseReq*)p = *(cusdk__BaseReq*)q;
}

void cusdk__OrderMediaFormat::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_bool(soap, &this->cusdk__OrderMediaFormat::needTransMediaFormat);
	soap_default_cusdk__EVideoFormat(soap, &this->cusdk__OrderMediaFormat::dstVideoFormat);
	soap_default_cusdk__EVideoSolution(soap, &this->cusdk__OrderMediaFormat::dstSolution);
	soap_default_xsd__int(soap, &this->cusdk__OrderMediaFormat::dstFrameRate);
	soap_default_xsd__int(soap, &this->cusdk__OrderMediaFormat::dstBitRate);
	soap_default_cusdk__EAudioFormat(soap, &this->cusdk__OrderMediaFormat::dstAudioFormat);
}

void cusdk__OrderMediaFormat::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__OrderMediaFormat::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__OrderMediaFormat(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__OrderMediaFormat(struct soap *soap, const char *tag, int id, const cusdk__OrderMediaFormat *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__OrderMediaFormat), type))
		return soap->error;
	if (soap_out_bool(soap, "cusdk:needTransMediaFormat", -1, &(a->cusdk__OrderMediaFormat::needTransMediaFormat), ""))
		return soap->error;
	if (soap_out_cusdk__EVideoFormat(soap, "cusdk:dstVideoFormat", -1, &(a->cusdk__OrderMediaFormat::dstVideoFormat), ""))
		return soap->error;
	if (soap_out_cusdk__EVideoSolution(soap, "cusdk:dstSolution", -1, &(a->cusdk__OrderMediaFormat::dstSolution), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:dstFrameRate", -1, &(a->cusdk__OrderMediaFormat::dstFrameRate), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:dstBitRate", -1, &(a->cusdk__OrderMediaFormat::dstBitRate), ""))
		return soap->error;
	if (soap_out_cusdk__EAudioFormat(soap, "cusdk:dstAudioFormat", -1, &(a->cusdk__OrderMediaFormat::dstAudioFormat), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__OrderMediaFormat::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__OrderMediaFormat(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__OrderMediaFormat * SOAP_FMAC4 soap_in_cusdk__OrderMediaFormat(struct soap *soap, const char *tag, cusdk__OrderMediaFormat *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__OrderMediaFormat *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__OrderMediaFormat, sizeof(cusdk__OrderMediaFormat), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__OrderMediaFormat)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__OrderMediaFormat *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_needTransMediaFormat1 = 1;
	size_t soap_flag_dstVideoFormat1 = 1;
	size_t soap_flag_dstSolution1 = 1;
	size_t soap_flag_dstFrameRate1 = 1;
	size_t soap_flag_dstBitRate1 = 1;
	size_t soap_flag_dstAudioFormat1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_needTransMediaFormat1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "cusdk:needTransMediaFormat", &(a->cusdk__OrderMediaFormat::needTransMediaFormat), "xsd:boolean"))
				{	soap_flag_needTransMediaFormat1--;
					continue;
				}
			if (soap_flag_dstVideoFormat1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EVideoFormat(soap, "cusdk:dstVideoFormat", &(a->cusdk__OrderMediaFormat::dstVideoFormat), "cusdk:EVideoFormat"))
				{	soap_flag_dstVideoFormat1--;
					continue;
				}
			if (soap_flag_dstSolution1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EVideoSolution(soap, "cusdk:dstSolution", &(a->cusdk__OrderMediaFormat::dstSolution), "cusdk:EVideoSolution"))
				{	soap_flag_dstSolution1--;
					continue;
				}
			if (soap_flag_dstFrameRate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:dstFrameRate", &(a->cusdk__OrderMediaFormat::dstFrameRate), "xsd:int"))
				{	soap_flag_dstFrameRate1--;
					continue;
				}
			if (soap_flag_dstBitRate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:dstBitRate", &(a->cusdk__OrderMediaFormat::dstBitRate), "xsd:int"))
				{	soap_flag_dstBitRate1--;
					continue;
				}
			if (soap_flag_dstAudioFormat1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EAudioFormat(soap, "cusdk:dstAudioFormat", &(a->cusdk__OrderMediaFormat::dstAudioFormat), "cusdk:EAudioFormat"))
				{	soap_flag_dstAudioFormat1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__OrderMediaFormat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__OrderMediaFormat, 0, sizeof(cusdk__OrderMediaFormat), 0, soap_copy_cusdk__OrderMediaFormat);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_needTransMediaFormat1 > 0 || soap_flag_dstVideoFormat1 > 0 || soap_flag_dstSolution1 > 0 || soap_flag_dstFrameRate1 > 0 || soap_flag_dstBitRate1 > 0 || soap_flag_dstAudioFormat1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__OrderMediaFormat::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__OrderMediaFormat);
	if (this->soap_out(soap, tag?tag:"cusdk:OrderMediaFormat", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__OrderMediaFormat::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__OrderMediaFormat(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__OrderMediaFormat * SOAP_FMAC4 soap_get_cusdk__OrderMediaFormat(struct soap *soap, cusdk__OrderMediaFormat *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__OrderMediaFormat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__OrderMediaFormat * SOAP_FMAC2 soap_instantiate_cusdk__OrderMediaFormat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__OrderMediaFormat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__OrderMediaFormat, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__OrderMediaFormat);
		if (size)
			*size = sizeof(cusdk__OrderMediaFormat);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__OrderMediaFormat[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__OrderMediaFormat);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__OrderMediaFormat*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__OrderMediaFormat(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__OrderMediaFormat %p -> %p\n", q, p));
	*(cusdk__OrderMediaFormat*)p = *(cusdk__OrderMediaFormat*)q;
}

void cusdk__MediaNetInfo::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__MediaNetInfo::videoRtpNatInfo.cusdk__NatInfo::soap_default(soap);
	this->cusdk__MediaNetInfo::videoRtcpNatInfo.cusdk__NatInfo::soap_default(soap);
	this->cusdk__MediaNetInfo::audioRtpNatInfo.cusdk__NatInfo::soap_default(soap);
	this->cusdk__MediaNetInfo::audioRtcpNatInfo.cusdk__NatInfo::soap_default(soap);
}

void cusdk__MediaNetInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__MediaNetInfo::videoRtpNatInfo.soap_serialize(soap);
	this->cusdk__MediaNetInfo::videoRtcpNatInfo.soap_serialize(soap);
	this->cusdk__MediaNetInfo::audioRtpNatInfo.soap_serialize(soap);
	this->cusdk__MediaNetInfo::audioRtcpNatInfo.soap_serialize(soap);
}

int cusdk__MediaNetInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__MediaNetInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__MediaNetInfo(struct soap *soap, const char *tag, int id, const cusdk__MediaNetInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__MediaNetInfo), type))
		return soap->error;
	if ((a->cusdk__MediaNetInfo::videoRtpNatInfo).soap_out(soap, "cusdk:videoRtpNatInfo", -1, ""))
		return soap->error;
	if ((a->cusdk__MediaNetInfo::videoRtcpNatInfo).soap_out(soap, "cusdk:videoRtcpNatInfo", -1, ""))
		return soap->error;
	if ((a->cusdk__MediaNetInfo::audioRtpNatInfo).soap_out(soap, "cusdk:audioRtpNatInfo", -1, ""))
		return soap->error;
	if ((a->cusdk__MediaNetInfo::audioRtcpNatInfo).soap_out(soap, "cusdk:audioRtcpNatInfo", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__MediaNetInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__MediaNetInfo(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__MediaNetInfo * SOAP_FMAC4 soap_in_cusdk__MediaNetInfo(struct soap *soap, const char *tag, cusdk__MediaNetInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__MediaNetInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__MediaNetInfo, sizeof(cusdk__MediaNetInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__MediaNetInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__MediaNetInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_videoRtpNatInfo1 = 1;
	size_t soap_flag_videoRtcpNatInfo1 = 1;
	size_t soap_flag_audioRtpNatInfo1 = 1;
	size_t soap_flag_audioRtcpNatInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_videoRtpNatInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__MediaNetInfo::videoRtpNatInfo).soap_in(soap, "cusdk:videoRtpNatInfo", "cusdk:NatInfo"))
				{	soap_flag_videoRtpNatInfo1--;
					continue;
				}
			if (soap_flag_videoRtcpNatInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__MediaNetInfo::videoRtcpNatInfo).soap_in(soap, "cusdk:videoRtcpNatInfo", "cusdk:NatInfo"))
				{	soap_flag_videoRtcpNatInfo1--;
					continue;
				}
			if (soap_flag_audioRtpNatInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__MediaNetInfo::audioRtpNatInfo).soap_in(soap, "cusdk:audioRtpNatInfo", "cusdk:NatInfo"))
				{	soap_flag_audioRtpNatInfo1--;
					continue;
				}
			if (soap_flag_audioRtcpNatInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__MediaNetInfo::audioRtcpNatInfo).soap_in(soap, "cusdk:audioRtcpNatInfo", "cusdk:NatInfo"))
				{	soap_flag_audioRtcpNatInfo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__MediaNetInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__MediaNetInfo, 0, sizeof(cusdk__MediaNetInfo), 0, soap_copy_cusdk__MediaNetInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_videoRtpNatInfo1 > 0 || soap_flag_videoRtcpNatInfo1 > 0 || soap_flag_audioRtpNatInfo1 > 0 || soap_flag_audioRtcpNatInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__MediaNetInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__MediaNetInfo);
	if (this->soap_out(soap, tag?tag:"cusdk:MediaNetInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__MediaNetInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__MediaNetInfo(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__MediaNetInfo * SOAP_FMAC4 soap_get_cusdk__MediaNetInfo(struct soap *soap, cusdk__MediaNetInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__MediaNetInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__MediaNetInfo * SOAP_FMAC2 soap_instantiate_cusdk__MediaNetInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__MediaNetInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__MediaNetInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__MediaNetInfo);
		if (size)
			*size = sizeof(cusdk__MediaNetInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__MediaNetInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__MediaNetInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__MediaNetInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__MediaNetInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__MediaNetInfo %p -> %p\n", q, p));
	*(cusdk__MediaNetInfo*)p = *(cusdk__MediaNetInfo*)q;
}

void cusdk__NatInfo::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__NatInfo::natData);
	this->cusdk__NatInfo::localAddr.cusdk__NetworkAddr::soap_default(soap);
	this->cusdk__NatInfo::natAddr.cusdk__NetworkAddr::soap_default(soap);
}

void cusdk__NatInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__NatInfo::natData);
	this->cusdk__NatInfo::localAddr.soap_serialize(soap);
	this->cusdk__NatInfo::natAddr.soap_serialize(soap);
}

int cusdk__NatInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__NatInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__NatInfo(struct soap *soap, const char *tag, int id, const cusdk__NatInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__NatInfo), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:natData", -1, &(a->cusdk__NatInfo::natData), ""))
		return soap->error;
	if ((a->cusdk__NatInfo::localAddr).soap_out(soap, "cusdk:localAddr", -1, ""))
		return soap->error;
	if ((a->cusdk__NatInfo::natAddr).soap_out(soap, "cusdk:natAddr", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__NatInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__NatInfo(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__NatInfo * SOAP_FMAC4 soap_in_cusdk__NatInfo(struct soap *soap, const char *tag, cusdk__NatInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__NatInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__NatInfo, sizeof(cusdk__NatInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__NatInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__NatInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_natData1 = 1;
	size_t soap_flag_localAddr1 = 1;
	size_t soap_flag_natAddr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_natData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:natData", &(a->cusdk__NatInfo::natData), "xsd:string"))
				{	soap_flag_natData1--;
					continue;
				}
			if (soap_flag_localAddr1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__NatInfo::localAddr).soap_in(soap, "cusdk:localAddr", "cusdk:NetworkAddr"))
				{	soap_flag_localAddr1--;
					continue;
				}
			if (soap_flag_natAddr1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__NatInfo::natAddr).soap_in(soap, "cusdk:natAddr", "cusdk:NetworkAddr"))
				{	soap_flag_natAddr1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__NatInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__NatInfo, 0, sizeof(cusdk__NatInfo), 0, soap_copy_cusdk__NatInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_natData1 > 0 || soap_flag_localAddr1 > 0 || soap_flag_natAddr1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__NatInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__NatInfo);
	if (this->soap_out(soap, tag?tag:"cusdk:NatInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__NatInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__NatInfo(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__NatInfo * SOAP_FMAC4 soap_get_cusdk__NatInfo(struct soap *soap, cusdk__NatInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__NatInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__NatInfo * SOAP_FMAC2 soap_instantiate_cusdk__NatInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__NatInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__NatInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__NatInfo);
		if (size)
			*size = sizeof(cusdk__NatInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__NatInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__NatInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__NatInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__NatInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__NatInfo %p -> %p\n", q, p));
	*(cusdk__NatInfo*)p = *(cusdk__NatInfo*)q;
}

void cusdk__NetworkAddr::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__NetworkAddr::ip);
	soap_default_xsd__int(soap, &this->cusdk__NetworkAddr::port);
}

void cusdk__NetworkAddr::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__NetworkAddr::ip);
}

int cusdk__NetworkAddr::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__NetworkAddr(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__NetworkAddr(struct soap *soap, const char *tag, int id, const cusdk__NetworkAddr *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__NetworkAddr), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:ip", -1, &(a->cusdk__NetworkAddr::ip), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:port", -1, &(a->cusdk__NetworkAddr::port), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__NetworkAddr::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__NetworkAddr(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__NetworkAddr * SOAP_FMAC4 soap_in_cusdk__NetworkAddr(struct soap *soap, const char *tag, cusdk__NetworkAddr *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__NetworkAddr *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__NetworkAddr, sizeof(cusdk__NetworkAddr), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__NetworkAddr)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__NetworkAddr *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ip1 = 1;
	size_t soap_flag_port1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:ip", &(a->cusdk__NetworkAddr::ip), "xsd:string"))
				{	soap_flag_ip1--;
					continue;
				}
			if (soap_flag_port1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:port", &(a->cusdk__NetworkAddr::port), "xsd:int"))
				{	soap_flag_port1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__NetworkAddr *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__NetworkAddr, 0, sizeof(cusdk__NetworkAddr), 0, soap_copy_cusdk__NetworkAddr);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ip1 > 0 || soap_flag_port1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__NetworkAddr::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__NetworkAddr);
	if (this->soap_out(soap, tag?tag:"cusdk:NetworkAddr", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__NetworkAddr::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__NetworkAddr(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__NetworkAddr * SOAP_FMAC4 soap_get_cusdk__NetworkAddr(struct soap *soap, cusdk__NetworkAddr *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__NetworkAddr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__NetworkAddr * SOAP_FMAC2 soap_instantiate_cusdk__NetworkAddr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__NetworkAddr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__NetworkAddr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__NetworkAddr);
		if (size)
			*size = sizeof(cusdk__NetworkAddr);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__NetworkAddr[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__NetworkAddr);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__NetworkAddr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__NetworkAddr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__NetworkAddr %p -> %p\n", q, p));
	*(cusdk__NetworkAddr*)p = *(cusdk__NetworkAddr*)q;
}

void cusdk__DevAlarmNotify::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DevAlarmNotify::devURI);
	soap_default_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmVidMove);
	soap_default_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmOutPin);
	soap_default_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmInPin);
	soap_default_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmVidLost);
	soap_default_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmInte);
	soap_default_xsd__boolean(soap, &this->cusdk__DevAlarmNotify::alarmDiskFull);
}

void cusdk__DevAlarmNotify::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DevAlarmNotify::devURI);
	soap_serialize_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmVidMove);
	soap_serialize_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmOutPin);
	soap_serialize_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmInPin);
	soap_serialize_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmVidLost);
	soap_serialize_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, &this->cusdk__DevAlarmNotify::alarmInte);
}

int cusdk__DevAlarmNotify::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DevAlarmNotify(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DevAlarmNotify(struct soap *soap, const char *tag, int id, const cusdk__DevAlarmNotify *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DevAlarmNotify), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devURI", -1, &(a->cusdk__DevAlarmNotify::devURI), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmVidMove", -1, &(a->cusdk__DevAlarmNotify::alarmVidMove), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmOutPin", -1, &(a->cusdk__DevAlarmNotify::alarmOutPin), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmInPin", -1, &(a->cusdk__DevAlarmNotify::alarmInPin), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmVidLost", -1, &(a->cusdk__DevAlarmNotify::alarmVidLost), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmInte", -1, &(a->cusdk__DevAlarmNotify::alarmInte), ""))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:alarmDiskFull", -1, &(a->cusdk__DevAlarmNotify::alarmDiskFull), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DevAlarmNotify::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DevAlarmNotify(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DevAlarmNotify * SOAP_FMAC4 soap_in_cusdk__DevAlarmNotify(struct soap *soap, const char *tag, cusdk__DevAlarmNotify *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DevAlarmNotify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DevAlarmNotify, sizeof(cusdk__DevAlarmNotify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DevAlarmNotify)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DevAlarmNotify *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_devURI1 = 1;
	size_t soap_flag_alarmDiskFull1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_devURI1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devURI", &(a->cusdk__DevAlarmNotify::devURI), "xsd:string"))
				{	soap_flag_devURI1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmVidMove", &(a->cusdk__DevAlarmNotify::alarmVidMove), "cusdk:AlarmChannelToAlarmData"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmOutPin", &(a->cusdk__DevAlarmNotify::alarmOutPin), "cusdk:AlarmChannelToAlarmData"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmInPin", &(a->cusdk__DevAlarmNotify::alarmInPin), "cusdk:AlarmChannelToAlarmData"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmVidLost", &(a->cusdk__DevAlarmNotify::alarmVidLost), "cusdk:AlarmChannelToAlarmData"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, "cusdk:alarmInte", &(a->cusdk__DevAlarmNotify::alarmInte), "cusdk:AlarmChannelToAlarmData"))
					continue;
			if (soap_flag_alarmDiskFull1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:alarmDiskFull", &(a->cusdk__DevAlarmNotify::alarmDiskFull), "xsd:boolean"))
				{	soap_flag_alarmDiskFull1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DevAlarmNotify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DevAlarmNotify, 0, sizeof(cusdk__DevAlarmNotify), 0, soap_copy_cusdk__DevAlarmNotify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_devURI1 > 0 || soap_flag_alarmDiskFull1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DevAlarmNotify::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DevAlarmNotify);
	if (this->soap_out(soap, tag?tag:"cusdk:DevAlarmNotify", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DevAlarmNotify::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DevAlarmNotify(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DevAlarmNotify * SOAP_FMAC4 soap_get_cusdk__DevAlarmNotify(struct soap *soap, cusdk__DevAlarmNotify *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DevAlarmNotify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DevAlarmNotify * SOAP_FMAC2 soap_instantiate_cusdk__DevAlarmNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DevAlarmNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DevAlarmNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevAlarmNotify);
		if (size)
			*size = sizeof(cusdk__DevAlarmNotify);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevAlarmNotify[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DevAlarmNotify);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DevAlarmNotify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DevAlarmNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DevAlarmNotify %p -> %p\n", q, p));
	*(cusdk__DevAlarmNotify*)p = *(cusdk__DevAlarmNotify*)q;
}

void cusdk__AlarmChannelToAlarmData::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__AlarmChannelToAlarmData::id);
	this->cusdk__AlarmChannelToAlarmData::data.cusdk__DevAlarmData::soap_default(soap);
}

void cusdk__AlarmChannelToAlarmData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__AlarmChannelToAlarmData::data.soap_serialize(soap);
}

int cusdk__AlarmChannelToAlarmData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__AlarmChannelToAlarmData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AlarmChannelToAlarmData(struct soap *soap, const char *tag, int id, const cusdk__AlarmChannelToAlarmData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__AlarmChannelToAlarmData), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__AlarmChannelToAlarmData::id), ""))
		return soap->error;
	if ((a->cusdk__AlarmChannelToAlarmData::data).soap_out(soap, "cusdk:data", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__AlarmChannelToAlarmData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__AlarmChannelToAlarmData(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__AlarmChannelToAlarmData * SOAP_FMAC4 soap_in_cusdk__AlarmChannelToAlarmData(struct soap *soap, const char *tag, cusdk__AlarmChannelToAlarmData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__AlarmChannelToAlarmData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__AlarmChannelToAlarmData, sizeof(cusdk__AlarmChannelToAlarmData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__AlarmChannelToAlarmData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__AlarmChannelToAlarmData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_data1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__AlarmChannelToAlarmData::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_data1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__AlarmChannelToAlarmData::data).soap_in(soap, "cusdk:data", "cusdk:DevAlarmData"))
				{	soap_flag_data1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__AlarmChannelToAlarmData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__AlarmChannelToAlarmData, 0, sizeof(cusdk__AlarmChannelToAlarmData), 0, soap_copy_cusdk__AlarmChannelToAlarmData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_data1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__AlarmChannelToAlarmData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__AlarmChannelToAlarmData);
	if (this->soap_out(soap, tag?tag:"cusdk:AlarmChannelToAlarmData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__AlarmChannelToAlarmData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__AlarmChannelToAlarmData(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__AlarmChannelToAlarmData * SOAP_FMAC4 soap_get_cusdk__AlarmChannelToAlarmData(struct soap *soap, cusdk__AlarmChannelToAlarmData *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AlarmChannelToAlarmData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__AlarmChannelToAlarmData * SOAP_FMAC2 soap_instantiate_cusdk__AlarmChannelToAlarmData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__AlarmChannelToAlarmData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__AlarmChannelToAlarmData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AlarmChannelToAlarmData);
		if (size)
			*size = sizeof(cusdk__AlarmChannelToAlarmData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AlarmChannelToAlarmData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__AlarmChannelToAlarmData);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__AlarmChannelToAlarmData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__AlarmChannelToAlarmData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__AlarmChannelToAlarmData %p -> %p\n", q, p));
	*(cusdk__AlarmChannelToAlarmData*)p = *(cusdk__AlarmChannelToAlarmData*)q;
}

void cusdk__DevAlarmData::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__boolean(soap, &this->cusdk__DevAlarmData::isAlarm);
	soap_default_xsd__string(soap, &this->cusdk__DevAlarmData::time);
	soap_default_xsd__string(soap, &this->cusdk__DevAlarmData::desc);
}

void cusdk__DevAlarmData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DevAlarmData::time);
	soap_serialize_xsd__string(soap, &this->cusdk__DevAlarmData::desc);
}

int cusdk__DevAlarmData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DevAlarmData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DevAlarmData(struct soap *soap, const char *tag, int id, const cusdk__DevAlarmData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DevAlarmData), type))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:isAlarm", -1, &(a->cusdk__DevAlarmData::isAlarm), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:time", -1, &(a->cusdk__DevAlarmData::time), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:desc", -1, &(a->cusdk__DevAlarmData::desc), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DevAlarmData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DevAlarmData(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DevAlarmData * SOAP_FMAC4 soap_in_cusdk__DevAlarmData(struct soap *soap, const char *tag, cusdk__DevAlarmData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DevAlarmData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DevAlarmData, sizeof(cusdk__DevAlarmData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DevAlarmData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DevAlarmData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_isAlarm1 = 1;
	size_t soap_flag_time1 = 1;
	size_t soap_flag_desc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isAlarm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:isAlarm", &(a->cusdk__DevAlarmData::isAlarm), "xsd:boolean"))
				{	soap_flag_isAlarm1--;
					continue;
				}
			if (soap_flag_time1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:time", &(a->cusdk__DevAlarmData::time), "xsd:string"))
				{	soap_flag_time1--;
					continue;
				}
			if (soap_flag_desc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:desc", &(a->cusdk__DevAlarmData::desc), "xsd:string"))
				{	soap_flag_desc1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DevAlarmData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DevAlarmData, 0, sizeof(cusdk__DevAlarmData), 0, soap_copy_cusdk__DevAlarmData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isAlarm1 > 0 || soap_flag_time1 > 0 || soap_flag_desc1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DevAlarmData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DevAlarmData);
	if (this->soap_out(soap, tag?tag:"cusdk:DevAlarmData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DevAlarmData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DevAlarmData(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DevAlarmData * SOAP_FMAC4 soap_get_cusdk__DevAlarmData(struct soap *soap, cusdk__DevAlarmData *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DevAlarmData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DevAlarmData * SOAP_FMAC2 soap_instantiate_cusdk__DevAlarmData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DevAlarmData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DevAlarmData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevAlarmData);
		if (size)
			*size = sizeof(cusdk__DevAlarmData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevAlarmData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DevAlarmData);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DevAlarmData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DevAlarmData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DevAlarmData %p -> %p\n", q, p));
	*(cusdk__DevAlarmData*)p = *(cusdk__DevAlarmData*)q;
}

void cusdk__DevServiceStatusNotify::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DevServiceStatusNotify::devURI);
	soap_default_std__vectorTemplateOfcusdk__VidDecoderToPuChn(soap, &this->cusdk__DevServiceStatusNotify::decChnVidSrc);
	soap_default_std__vectorTemplateOfcusdk__AudDecoderToCuChn(soap, &this->cusdk__DevServiceStatusNotify::audioCallSrc);
	soap_default_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, &this->cusdk__DevServiceStatusNotify::isPlatPreRec);
	soap_default_std__vectorTemplateOfcusdk__EncoderStatusStr(soap, &this->cusdk__DevServiceStatusNotify::platRec);
	soap_default_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, &this->cusdk__DevServiceStatusNotify::isPuPreRec);
	soap_default_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, &this->cusdk__DevServiceStatusNotify::isPuRec);
	soap_default_std__vectorTemplateOfcusdk__DecoderStatusStr(soap, &this->cusdk__DevServiceStatusNotify::decPoll);
}

void cusdk__DevServiceStatusNotify::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DevServiceStatusNotify::devURI);
	soap_serialize_std__vectorTemplateOfcusdk__VidDecoderToPuChn(soap, &this->cusdk__DevServiceStatusNotify::decChnVidSrc);
	soap_serialize_std__vectorTemplateOfcusdk__AudDecoderToCuChn(soap, &this->cusdk__DevServiceStatusNotify::audioCallSrc);
	soap_serialize_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, &this->cusdk__DevServiceStatusNotify::isPlatPreRec);
	soap_serialize_std__vectorTemplateOfcusdk__EncoderStatusStr(soap, &this->cusdk__DevServiceStatusNotify::platRec);
	soap_serialize_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, &this->cusdk__DevServiceStatusNotify::isPuPreRec);
	soap_serialize_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, &this->cusdk__DevServiceStatusNotify::isPuRec);
	soap_serialize_std__vectorTemplateOfcusdk__DecoderStatusStr(soap, &this->cusdk__DevServiceStatusNotify::decPoll);
}

int cusdk__DevServiceStatusNotify::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DevServiceStatusNotify(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DevServiceStatusNotify(struct soap *soap, const char *tag, int id, const cusdk__DevServiceStatusNotify *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DevServiceStatusNotify), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devURI", -1, &(a->cusdk__DevServiceStatusNotify::devURI), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__VidDecoderToPuChn(soap, "cusdk:decChnVidSrc", -1, &(a->cusdk__DevServiceStatusNotify::decChnVidSrc), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AudDecoderToCuChn(soap, "cusdk:audioCallSrc", -1, &(a->cusdk__DevServiceStatusNotify::audioCallSrc), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, "cusdk:isPlatPreRec", -1, &(a->cusdk__DevServiceStatusNotify::isPlatPreRec), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__EncoderStatusStr(soap, "cusdk:platRec", -1, &(a->cusdk__DevServiceStatusNotify::platRec), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, "cusdk:isPuPreRec", -1, &(a->cusdk__DevServiceStatusNotify::isPuPreRec), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, "cusdk:isPuRec", -1, &(a->cusdk__DevServiceStatusNotify::isPuRec), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__DecoderStatusStr(soap, "cusdk:decPoll", -1, &(a->cusdk__DevServiceStatusNotify::decPoll), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DevServiceStatusNotify::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DevServiceStatusNotify(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DevServiceStatusNotify * SOAP_FMAC4 soap_in_cusdk__DevServiceStatusNotify(struct soap *soap, const char *tag, cusdk__DevServiceStatusNotify *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DevServiceStatusNotify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DevServiceStatusNotify, sizeof(cusdk__DevServiceStatusNotify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DevServiceStatusNotify)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DevServiceStatusNotify *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_devURI1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_devURI1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devURI", &(a->cusdk__DevServiceStatusNotify::devURI), "xsd:string"))
				{	soap_flag_devURI1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__VidDecoderToPuChn(soap, "cusdk:decChnVidSrc", &(a->cusdk__DevServiceStatusNotify::decChnVidSrc), "cusdk:VidDecoderToPuChn"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AudDecoderToCuChn(soap, "cusdk:audioCallSrc", &(a->cusdk__DevServiceStatusNotify::audioCallSrc), "cusdk:AudDecoderToCuChn"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, "cusdk:isPlatPreRec", &(a->cusdk__DevServiceStatusNotify::isPlatPreRec), "cusdk:EncoderStatusInt"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__EncoderStatusStr(soap, "cusdk:platRec", &(a->cusdk__DevServiceStatusNotify::platRec), "cusdk:EncoderStatusStr"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, "cusdk:isPuPreRec", &(a->cusdk__DevServiceStatusNotify::isPuPreRec), "cusdk:EncoderStatusInt"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, "cusdk:isPuRec", &(a->cusdk__DevServiceStatusNotify::isPuRec), "cusdk:EncoderStatusInt"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__DecoderStatusStr(soap, "cusdk:decPoll", &(a->cusdk__DevServiceStatusNotify::decPoll), "cusdk:DecoderStatusStr"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DevServiceStatusNotify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DevServiceStatusNotify, 0, sizeof(cusdk__DevServiceStatusNotify), 0, soap_copy_cusdk__DevServiceStatusNotify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_devURI1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DevServiceStatusNotify::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DevServiceStatusNotify);
	if (this->soap_out(soap, tag?tag:"cusdk:DevServiceStatusNotify", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DevServiceStatusNotify::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DevServiceStatusNotify(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DevServiceStatusNotify * SOAP_FMAC4 soap_get_cusdk__DevServiceStatusNotify(struct soap *soap, cusdk__DevServiceStatusNotify *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DevServiceStatusNotify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DevServiceStatusNotify * SOAP_FMAC2 soap_instantiate_cusdk__DevServiceStatusNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DevServiceStatusNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DevServiceStatusNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevServiceStatusNotify);
		if (size)
			*size = sizeof(cusdk__DevServiceStatusNotify);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevServiceStatusNotify[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DevServiceStatusNotify);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DevServiceStatusNotify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DevServiceStatusNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DevServiceStatusNotify %p -> %p\n", q, p));
	*(cusdk__DevServiceStatusNotify*)p = *(cusdk__DevServiceStatusNotify*)q;
}

void cusdk__DecoderStatusStr::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__DecoderStatusStr::id);
	soap_default_xsd__string(soap, &this->cusdk__DecoderStatusStr::value);
}

void cusdk__DecoderStatusStr::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DecoderStatusStr::value);
}

int cusdk__DecoderStatusStr::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DecoderStatusStr(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DecoderStatusStr(struct soap *soap, const char *tag, int id, const cusdk__DecoderStatusStr *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DecoderStatusStr), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__DecoderStatusStr::id), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:value", -1, &(a->cusdk__DecoderStatusStr::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DecoderStatusStr::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DecoderStatusStr(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DecoderStatusStr * SOAP_FMAC4 soap_in_cusdk__DecoderStatusStr(struct soap *soap, const char *tag, cusdk__DecoderStatusStr *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DecoderStatusStr *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DecoderStatusStr, sizeof(cusdk__DecoderStatusStr), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DecoderStatusStr)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DecoderStatusStr *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__DecoderStatusStr::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:value", &(a->cusdk__DecoderStatusStr::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DecoderStatusStr *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DecoderStatusStr, 0, sizeof(cusdk__DecoderStatusStr), 0, soap_copy_cusdk__DecoderStatusStr);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DecoderStatusStr::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DecoderStatusStr);
	if (this->soap_out(soap, tag?tag:"cusdk:DecoderStatusStr", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DecoderStatusStr::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DecoderStatusStr(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DecoderStatusStr * SOAP_FMAC4 soap_get_cusdk__DecoderStatusStr(struct soap *soap, cusdk__DecoderStatusStr *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DecoderStatusStr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DecoderStatusStr * SOAP_FMAC2 soap_instantiate_cusdk__DecoderStatusStr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DecoderStatusStr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DecoderStatusStr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DecoderStatusStr);
		if (size)
			*size = sizeof(cusdk__DecoderStatusStr);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DecoderStatusStr[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DecoderStatusStr);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DecoderStatusStr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DecoderStatusStr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DecoderStatusStr %p -> %p\n", q, p));
	*(cusdk__DecoderStatusStr*)p = *(cusdk__DecoderStatusStr*)q;
}

void cusdk__EncoderStatusStr::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__EncoderStatusStr::id);
	soap_default_xsd__string(soap, &this->cusdk__EncoderStatusStr::value);
}

void cusdk__EncoderStatusStr::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__EncoderStatusStr::value);
}

int cusdk__EncoderStatusStr::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__EncoderStatusStr(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EncoderStatusStr(struct soap *soap, const char *tag, int id, const cusdk__EncoderStatusStr *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EncoderStatusStr), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__EncoderStatusStr::id), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:value", -1, &(a->cusdk__EncoderStatusStr::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__EncoderStatusStr::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__EncoderStatusStr(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__EncoderStatusStr * SOAP_FMAC4 soap_in_cusdk__EncoderStatusStr(struct soap *soap, const char *tag, cusdk__EncoderStatusStr *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__EncoderStatusStr *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EncoderStatusStr, sizeof(cusdk__EncoderStatusStr), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__EncoderStatusStr)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__EncoderStatusStr *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__EncoderStatusStr::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:value", &(a->cusdk__EncoderStatusStr::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__EncoderStatusStr *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EncoderStatusStr, 0, sizeof(cusdk__EncoderStatusStr), 0, soap_copy_cusdk__EncoderStatusStr);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__EncoderStatusStr::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__EncoderStatusStr);
	if (this->soap_out(soap, tag?tag:"cusdk:EncoderStatusStr", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__EncoderStatusStr::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__EncoderStatusStr(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__EncoderStatusStr * SOAP_FMAC4 soap_get_cusdk__EncoderStatusStr(struct soap *soap, cusdk__EncoderStatusStr *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EncoderStatusStr(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__EncoderStatusStr * SOAP_FMAC2 soap_instantiate_cusdk__EncoderStatusStr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__EncoderStatusStr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__EncoderStatusStr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderStatusStr);
		if (size)
			*size = sizeof(cusdk__EncoderStatusStr);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderStatusStr[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__EncoderStatusStr);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__EncoderStatusStr*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__EncoderStatusStr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__EncoderStatusStr %p -> %p\n", q, p));
	*(cusdk__EncoderStatusStr*)p = *(cusdk__EncoderStatusStr*)q;
}

void cusdk__EncoderStatusInt::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__EncoderStatusInt::id);
	soap_default_xsd__boolean(soap, &this->cusdk__EncoderStatusInt::value);
}

void cusdk__EncoderStatusInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__EncoderStatusInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__EncoderStatusInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EncoderStatusInt(struct soap *soap, const char *tag, int id, const cusdk__EncoderStatusInt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EncoderStatusInt), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__EncoderStatusInt::id), ""))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:value", -1, &(a->cusdk__EncoderStatusInt::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__EncoderStatusInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__EncoderStatusInt(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__EncoderStatusInt * SOAP_FMAC4 soap_in_cusdk__EncoderStatusInt(struct soap *soap, const char *tag, cusdk__EncoderStatusInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__EncoderStatusInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EncoderStatusInt, sizeof(cusdk__EncoderStatusInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__EncoderStatusInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__EncoderStatusInt *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__EncoderStatusInt::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:value", &(a->cusdk__EncoderStatusInt::value), "xsd:boolean"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__EncoderStatusInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EncoderStatusInt, 0, sizeof(cusdk__EncoderStatusInt), 0, soap_copy_cusdk__EncoderStatusInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__EncoderStatusInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__EncoderStatusInt);
	if (this->soap_out(soap, tag?tag:"cusdk:EncoderStatusInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__EncoderStatusInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__EncoderStatusInt(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__EncoderStatusInt * SOAP_FMAC4 soap_get_cusdk__EncoderStatusInt(struct soap *soap, cusdk__EncoderStatusInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EncoderStatusInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__EncoderStatusInt * SOAP_FMAC2 soap_instantiate_cusdk__EncoderStatusInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__EncoderStatusInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__EncoderStatusInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderStatusInt);
		if (size)
			*size = sizeof(cusdk__EncoderStatusInt);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderStatusInt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__EncoderStatusInt);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__EncoderStatusInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__EncoderStatusInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__EncoderStatusInt %p -> %p\n", q, p));
	*(cusdk__EncoderStatusInt*)p = *(cusdk__EncoderStatusInt*)q;
}

void cusdk__AudDecoderToCuChn::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__AudDecoderToCuChn::id);
	this->cusdk__AudDecoderToCuChn::cuChn.cusdk__DevChannel::soap_default(soap);
}

void cusdk__AudDecoderToCuChn::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__AudDecoderToCuChn::cuChn.soap_serialize(soap);
}

int cusdk__AudDecoderToCuChn::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__AudDecoderToCuChn(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AudDecoderToCuChn(struct soap *soap, const char *tag, int id, const cusdk__AudDecoderToCuChn *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__AudDecoderToCuChn), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__AudDecoderToCuChn::id), ""))
		return soap->error;
	if ((a->cusdk__AudDecoderToCuChn::cuChn).soap_out(soap, "cusdk:cuChn", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__AudDecoderToCuChn::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__AudDecoderToCuChn(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__AudDecoderToCuChn * SOAP_FMAC4 soap_in_cusdk__AudDecoderToCuChn(struct soap *soap, const char *tag, cusdk__AudDecoderToCuChn *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__AudDecoderToCuChn *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__AudDecoderToCuChn, sizeof(cusdk__AudDecoderToCuChn), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__AudDecoderToCuChn)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__AudDecoderToCuChn *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_cuChn1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__AudDecoderToCuChn::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_cuChn1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__AudDecoderToCuChn::cuChn).soap_in(soap, "cusdk:cuChn", "cusdk:DevChannel"))
				{	soap_flag_cuChn1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__AudDecoderToCuChn *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__AudDecoderToCuChn, 0, sizeof(cusdk__AudDecoderToCuChn), 0, soap_copy_cusdk__AudDecoderToCuChn);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_cuChn1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__AudDecoderToCuChn::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__AudDecoderToCuChn);
	if (this->soap_out(soap, tag?tag:"cusdk:AudDecoderToCuChn", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__AudDecoderToCuChn::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__AudDecoderToCuChn(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__AudDecoderToCuChn * SOAP_FMAC4 soap_get_cusdk__AudDecoderToCuChn(struct soap *soap, cusdk__AudDecoderToCuChn *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AudDecoderToCuChn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__AudDecoderToCuChn * SOAP_FMAC2 soap_instantiate_cusdk__AudDecoderToCuChn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__AudDecoderToCuChn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__AudDecoderToCuChn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AudDecoderToCuChn);
		if (size)
			*size = sizeof(cusdk__AudDecoderToCuChn);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AudDecoderToCuChn[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__AudDecoderToCuChn);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__AudDecoderToCuChn*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__AudDecoderToCuChn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__AudDecoderToCuChn %p -> %p\n", q, p));
	*(cusdk__AudDecoderToCuChn*)p = *(cusdk__AudDecoderToCuChn*)q;
}

void cusdk__VidDecoderToPuChn::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__VidDecoderToPuChn::id);
	this->cusdk__VidDecoderToPuChn::puChn.cusdk__DevChannel::soap_default(soap);
}

void cusdk__VidDecoderToPuChn::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->cusdk__VidDecoderToPuChn::puChn.soap_serialize(soap);
}

int cusdk__VidDecoderToPuChn::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__VidDecoderToPuChn(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__VidDecoderToPuChn(struct soap *soap, const char *tag, int id, const cusdk__VidDecoderToPuChn *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__VidDecoderToPuChn), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__VidDecoderToPuChn::id), ""))
		return soap->error;
	if ((a->cusdk__VidDecoderToPuChn::puChn).soap_out(soap, "cusdk:puChn", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__VidDecoderToPuChn::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__VidDecoderToPuChn(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__VidDecoderToPuChn * SOAP_FMAC4 soap_in_cusdk__VidDecoderToPuChn(struct soap *soap, const char *tag, cusdk__VidDecoderToPuChn *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__VidDecoderToPuChn *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__VidDecoderToPuChn, sizeof(cusdk__VidDecoderToPuChn), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__VidDecoderToPuChn)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__VidDecoderToPuChn *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_puChn1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__VidDecoderToPuChn::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_puChn1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__VidDecoderToPuChn::puChn).soap_in(soap, "cusdk:puChn", "cusdk:DevChannel"))
				{	soap_flag_puChn1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__VidDecoderToPuChn *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__VidDecoderToPuChn, 0, sizeof(cusdk__VidDecoderToPuChn), 0, soap_copy_cusdk__VidDecoderToPuChn);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_puChn1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__VidDecoderToPuChn::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__VidDecoderToPuChn);
	if (this->soap_out(soap, tag?tag:"cusdk:VidDecoderToPuChn", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__VidDecoderToPuChn::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__VidDecoderToPuChn(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__VidDecoderToPuChn * SOAP_FMAC4 soap_get_cusdk__VidDecoderToPuChn(struct soap *soap, cusdk__VidDecoderToPuChn *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__VidDecoderToPuChn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__VidDecoderToPuChn * SOAP_FMAC2 soap_instantiate_cusdk__VidDecoderToPuChn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__VidDecoderToPuChn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__VidDecoderToPuChn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VidDecoderToPuChn);
		if (size)
			*size = sizeof(cusdk__VidDecoderToPuChn);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VidDecoderToPuChn[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__VidDecoderToPuChn);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__VidDecoderToPuChn*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__VidDecoderToPuChn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__VidDecoderToPuChn %p -> %p\n", q, p));
	*(cusdk__VidDecoderToPuChn*)p = *(cusdk__VidDecoderToPuChn*)q;
}

void cusdk__DevConfigNotify::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DevConfigNotify::devURI);
	soap_default_xsd__string(soap, &this->cusdk__DevConfigNotify::devIp);
	soap_default_xsd__string(soap, &this->cusdk__DevConfigNotify::devType);
	soap_default_xsd__string(soap, &this->cusdk__DevConfigNotify::devMode);
	this->cusdk__DevConfigNotify::baseCapSet.cusdk__PuBaseCapSet::soap_default(soap);
	soap_default_std__vectorTemplateOfcusdk__PuExtCap(soap, &this->cusdk__DevConfigNotify::extCapSet);
	soap_default_std__vectorTemplateOfcusdk__InputPinEnable(soap, &this->cusdk__DevConfigNotify::inputPinEnable);
	soap_default_std__vectorTemplateOfcusdk__ChannelVideoFormat(soap, &this->cusdk__DevConfigNotify::chnVidFormat);
	soap_default_std__vectorTemplateOfcusdk__ChannelVidDynValue(soap, &this->cusdk__DevConfigNotify::chnVidDynValue);
	soap_default_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(soap, &this->cusdk__DevConfigNotify::vidSrcChnSet);
	soap_default_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(soap, &this->cusdk__DevConfigNotify::chnVidSrcSet);
	soap_default_std__vectorTemplateOfcusdk__VideoSrcCamType(soap, &this->cusdk__DevConfigNotify::camType);
	soap_default_std__vectorTemplateOfcusdk__VideoSrcCamID(soap, &this->cusdk__DevConfigNotify::camId);
	soap_default_std__vectorTemplateOfcusdk__EncoderBitrate(soap, &this->cusdk__DevConfigNotify::bitRate);
	soap_default_xsd__int(soap, &this->cusdk__DevConfigNotify::freeLicenceNum);
	soap_default_xsd__int(soap, &this->cusdk__DevConfigNotify::directTransNum);
	soap_default_xsd__boolean(soap, &this->cusdk__DevConfigNotify::isDecCombined);
}

void cusdk__DevConfigNotify::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DevConfigNotify::devURI);
	soap_serialize_xsd__string(soap, &this->cusdk__DevConfigNotify::devIp);
	soap_serialize_xsd__string(soap, &this->cusdk__DevConfigNotify::devType);
	soap_serialize_xsd__string(soap, &this->cusdk__DevConfigNotify::devMode);
	this->cusdk__DevConfigNotify::baseCapSet.soap_serialize(soap);
	soap_serialize_std__vectorTemplateOfcusdk__PuExtCap(soap, &this->cusdk__DevConfigNotify::extCapSet);
	soap_serialize_std__vectorTemplateOfcusdk__InputPinEnable(soap, &this->cusdk__DevConfigNotify::inputPinEnable);
	soap_serialize_std__vectorTemplateOfcusdk__ChannelVideoFormat(soap, &this->cusdk__DevConfigNotify::chnVidFormat);
	soap_serialize_std__vectorTemplateOfcusdk__ChannelVidDynValue(soap, &this->cusdk__DevConfigNotify::chnVidDynValue);
	soap_serialize_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(soap, &this->cusdk__DevConfigNotify::vidSrcChnSet);
	soap_serialize_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(soap, &this->cusdk__DevConfigNotify::chnVidSrcSet);
	soap_serialize_std__vectorTemplateOfcusdk__VideoSrcCamType(soap, &this->cusdk__DevConfigNotify::camType);
	soap_serialize_std__vectorTemplateOfcusdk__VideoSrcCamID(soap, &this->cusdk__DevConfigNotify::camId);
	soap_serialize_std__vectorTemplateOfcusdk__EncoderBitrate(soap, &this->cusdk__DevConfigNotify::bitRate);
}

int cusdk__DevConfigNotify::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DevConfigNotify(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DevConfigNotify(struct soap *soap, const char *tag, int id, const cusdk__DevConfigNotify *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DevConfigNotify), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devURI", -1, &(a->cusdk__DevConfigNotify::devURI), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devIp", -1, &(a->cusdk__DevConfigNotify::devIp), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devType", -1, &(a->cusdk__DevConfigNotify::devType), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devMode", -1, &(a->cusdk__DevConfigNotify::devMode), ""))
		return soap->error;
	if ((a->cusdk__DevConfigNotify::baseCapSet).soap_out(soap, "cusdk:baseCapSet", -1, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__PuExtCap(soap, "cusdk:extCapSet", -1, &(a->cusdk__DevConfigNotify::extCapSet), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__InputPinEnable(soap, "cusdk:inputPinEnable", -1, &(a->cusdk__DevConfigNotify::inputPinEnable), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__ChannelVideoFormat(soap, "cusdk:chnVidFormat", -1, &(a->cusdk__DevConfigNotify::chnVidFormat), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__ChannelVidDynValue(soap, "cusdk:chnVidDynValue", -1, &(a->cusdk__DevConfigNotify::chnVidDynValue), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(soap, "cusdk:vidSrcChnSet", -1, &(a->cusdk__DevConfigNotify::vidSrcChnSet), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(soap, "cusdk:chnVidSrcSet", -1, &(a->cusdk__DevConfigNotify::chnVidSrcSet), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__VideoSrcCamType(soap, "cusdk:camType", -1, &(a->cusdk__DevConfigNotify::camType), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__VideoSrcCamID(soap, "cusdk:camId", -1, &(a->cusdk__DevConfigNotify::camId), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__EncoderBitrate(soap, "cusdk:bitRate", -1, &(a->cusdk__DevConfigNotify::bitRate), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:freeLicenceNum", -1, &(a->cusdk__DevConfigNotify::freeLicenceNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:directTransNum", -1, &(a->cusdk__DevConfigNotify::directTransNum), ""))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:isDecCombined", -1, &(a->cusdk__DevConfigNotify::isDecCombined), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DevConfigNotify::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DevConfigNotify(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DevConfigNotify * SOAP_FMAC4 soap_in_cusdk__DevConfigNotify(struct soap *soap, const char *tag, cusdk__DevConfigNotify *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DevConfigNotify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DevConfigNotify, sizeof(cusdk__DevConfigNotify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DevConfigNotify)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DevConfigNotify *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_devURI1 = 1;
	size_t soap_flag_devIp1 = 1;
	size_t soap_flag_devType1 = 1;
	size_t soap_flag_devMode1 = 1;
	size_t soap_flag_baseCapSet1 = 1;
	size_t soap_flag_freeLicenceNum1 = 1;
	size_t soap_flag_directTransNum1 = 1;
	size_t soap_flag_isDecCombined1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_devURI1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devURI", &(a->cusdk__DevConfigNotify::devURI), "xsd:string"))
				{	soap_flag_devURI1--;
					continue;
				}
			if (soap_flag_devIp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devIp", &(a->cusdk__DevConfigNotify::devIp), "xsd:string"))
				{	soap_flag_devIp1--;
					continue;
				}
			if (soap_flag_devType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devType", &(a->cusdk__DevConfigNotify::devType), "xsd:string"))
				{	soap_flag_devType1--;
					continue;
				}
			if (soap_flag_devMode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devMode", &(a->cusdk__DevConfigNotify::devMode), "xsd:string"))
				{	soap_flag_devMode1--;
					continue;
				}
			if (soap_flag_baseCapSet1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__DevConfigNotify::baseCapSet).soap_in(soap, "cusdk:baseCapSet", "cusdk:PuBaseCapSet"))
				{	soap_flag_baseCapSet1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__PuExtCap(soap, "cusdk:extCapSet", &(a->cusdk__DevConfigNotify::extCapSet), "cusdk:PuExtCap"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__InputPinEnable(soap, "cusdk:inputPinEnable", &(a->cusdk__DevConfigNotify::inputPinEnable), "cusdk:InputPinEnable"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__ChannelVideoFormat(soap, "cusdk:chnVidFormat", &(a->cusdk__DevConfigNotify::chnVidFormat), "cusdk:ChannelVideoFormat"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__ChannelVidDynValue(soap, "cusdk:chnVidDynValue", &(a->cusdk__DevConfigNotify::chnVidDynValue), "cusdk:ChannelVidDynValue"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(soap, "cusdk:vidSrcChnSet", &(a->cusdk__DevConfigNotify::vidSrcChnSet), "cusdk:VideoSrcEncoderSet"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(soap, "cusdk:chnVidSrcSet", &(a->cusdk__DevConfigNotify::chnVidSrcSet), "cusdk:EncoderAvailableVidSrcSet"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__VideoSrcCamType(soap, "cusdk:camType", &(a->cusdk__DevConfigNotify::camType), "cusdk:VideoSrcCamType"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__VideoSrcCamID(soap, "cusdk:camId", &(a->cusdk__DevConfigNotify::camId), "cusdk:VideoSrcCamID"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__EncoderBitrate(soap, "cusdk:bitRate", &(a->cusdk__DevConfigNotify::bitRate), "cusdk:EncoderBitrate"))
					continue;
			if (soap_flag_freeLicenceNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:freeLicenceNum", &(a->cusdk__DevConfigNotify::freeLicenceNum), "xsd:int"))
				{	soap_flag_freeLicenceNum1--;
					continue;
				}
			if (soap_flag_directTransNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:directTransNum", &(a->cusdk__DevConfigNotify::directTransNum), "xsd:int"))
				{	soap_flag_directTransNum1--;
					continue;
				}
			if (soap_flag_isDecCombined1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:isDecCombined", &(a->cusdk__DevConfigNotify::isDecCombined), "xsd:boolean"))
				{	soap_flag_isDecCombined1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DevConfigNotify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DevConfigNotify, 0, sizeof(cusdk__DevConfigNotify), 0, soap_copy_cusdk__DevConfigNotify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_devURI1 > 0 || soap_flag_devIp1 > 0 || soap_flag_devType1 > 0 || soap_flag_devMode1 > 0 || soap_flag_baseCapSet1 > 0 || soap_flag_freeLicenceNum1 > 0 || soap_flag_directTransNum1 > 0 || soap_flag_isDecCombined1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DevConfigNotify::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DevConfigNotify);
	if (this->soap_out(soap, tag?tag:"cusdk:DevConfigNotify", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DevConfigNotify::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DevConfigNotify(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DevConfigNotify * SOAP_FMAC4 soap_get_cusdk__DevConfigNotify(struct soap *soap, cusdk__DevConfigNotify *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DevConfigNotify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DevConfigNotify * SOAP_FMAC2 soap_instantiate_cusdk__DevConfigNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DevConfigNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DevConfigNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevConfigNotify);
		if (size)
			*size = sizeof(cusdk__DevConfigNotify);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevConfigNotify[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DevConfigNotify);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DevConfigNotify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DevConfigNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DevConfigNotify %p -> %p\n", q, p));
	*(cusdk__DevConfigNotify*)p = *(cusdk__DevConfigNotify*)q;
}

void cusdk__EncoderBitrate::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__EncoderBitrate::id);
	soap_default_xsd__int(soap, &this->cusdk__EncoderBitrate::value);
}

void cusdk__EncoderBitrate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__EncoderBitrate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__EncoderBitrate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EncoderBitrate(struct soap *soap, const char *tag, int id, const cusdk__EncoderBitrate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EncoderBitrate), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__EncoderBitrate::id), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:value", -1, &(a->cusdk__EncoderBitrate::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__EncoderBitrate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__EncoderBitrate(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__EncoderBitrate * SOAP_FMAC4 soap_in_cusdk__EncoderBitrate(struct soap *soap, const char *tag, cusdk__EncoderBitrate *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__EncoderBitrate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EncoderBitrate, sizeof(cusdk__EncoderBitrate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__EncoderBitrate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__EncoderBitrate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__EncoderBitrate::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:value", &(a->cusdk__EncoderBitrate::value), "xsd:int"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__EncoderBitrate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EncoderBitrate, 0, sizeof(cusdk__EncoderBitrate), 0, soap_copy_cusdk__EncoderBitrate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__EncoderBitrate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__EncoderBitrate);
	if (this->soap_out(soap, tag?tag:"cusdk:EncoderBitrate", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__EncoderBitrate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__EncoderBitrate(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__EncoderBitrate * SOAP_FMAC4 soap_get_cusdk__EncoderBitrate(struct soap *soap, cusdk__EncoderBitrate *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EncoderBitrate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__EncoderBitrate * SOAP_FMAC2 soap_instantiate_cusdk__EncoderBitrate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__EncoderBitrate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__EncoderBitrate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderBitrate);
		if (size)
			*size = sizeof(cusdk__EncoderBitrate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderBitrate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__EncoderBitrate);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__EncoderBitrate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__EncoderBitrate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__EncoderBitrate %p -> %p\n", q, p));
	*(cusdk__EncoderBitrate*)p = *(cusdk__EncoderBitrate*)q;
}

void cusdk__VideoSrcCamID::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__VideoSrcCamID::id);
	soap_default_xsd__int(soap, &this->cusdk__VideoSrcCamID::value);
}

void cusdk__VideoSrcCamID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__VideoSrcCamID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__VideoSrcCamID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__VideoSrcCamID(struct soap *soap, const char *tag, int id, const cusdk__VideoSrcCamID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__VideoSrcCamID), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__VideoSrcCamID::id), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:value", -1, &(a->cusdk__VideoSrcCamID::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__VideoSrcCamID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__VideoSrcCamID(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__VideoSrcCamID * SOAP_FMAC4 soap_in_cusdk__VideoSrcCamID(struct soap *soap, const char *tag, cusdk__VideoSrcCamID *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__VideoSrcCamID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__VideoSrcCamID, sizeof(cusdk__VideoSrcCamID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__VideoSrcCamID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__VideoSrcCamID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__VideoSrcCamID::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:value", &(a->cusdk__VideoSrcCamID::value), "xsd:int"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__VideoSrcCamID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__VideoSrcCamID, 0, sizeof(cusdk__VideoSrcCamID), 0, soap_copy_cusdk__VideoSrcCamID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__VideoSrcCamID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__VideoSrcCamID);
	if (this->soap_out(soap, tag?tag:"cusdk:VideoSrcCamID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__VideoSrcCamID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__VideoSrcCamID(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__VideoSrcCamID * SOAP_FMAC4 soap_get_cusdk__VideoSrcCamID(struct soap *soap, cusdk__VideoSrcCamID *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__VideoSrcCamID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__VideoSrcCamID * SOAP_FMAC2 soap_instantiate_cusdk__VideoSrcCamID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__VideoSrcCamID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__VideoSrcCamID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrcCamID);
		if (size)
			*size = sizeof(cusdk__VideoSrcCamID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrcCamID[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__VideoSrcCamID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__VideoSrcCamID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__VideoSrcCamID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__VideoSrcCamID %p -> %p\n", q, p));
	*(cusdk__VideoSrcCamID*)p = *(cusdk__VideoSrcCamID*)q;
}

void cusdk__VideoSrcCamType::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__VideoSrcCamType::id);
	soap_default_xsd__int(soap, &this->cusdk__VideoSrcCamType::value);
}

void cusdk__VideoSrcCamType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__VideoSrcCamType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__VideoSrcCamType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__VideoSrcCamType(struct soap *soap, const char *tag, int id, const cusdk__VideoSrcCamType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__VideoSrcCamType), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__VideoSrcCamType::id), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:value", -1, &(a->cusdk__VideoSrcCamType::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__VideoSrcCamType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__VideoSrcCamType(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__VideoSrcCamType * SOAP_FMAC4 soap_in_cusdk__VideoSrcCamType(struct soap *soap, const char *tag, cusdk__VideoSrcCamType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__VideoSrcCamType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__VideoSrcCamType, sizeof(cusdk__VideoSrcCamType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__VideoSrcCamType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__VideoSrcCamType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__VideoSrcCamType::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:value", &(a->cusdk__VideoSrcCamType::value), "xsd:int"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__VideoSrcCamType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__VideoSrcCamType, 0, sizeof(cusdk__VideoSrcCamType), 0, soap_copy_cusdk__VideoSrcCamType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__VideoSrcCamType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__VideoSrcCamType);
	if (this->soap_out(soap, tag?tag:"cusdk:VideoSrcCamType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__VideoSrcCamType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__VideoSrcCamType(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__VideoSrcCamType * SOAP_FMAC4 soap_get_cusdk__VideoSrcCamType(struct soap *soap, cusdk__VideoSrcCamType *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__VideoSrcCamType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__VideoSrcCamType * SOAP_FMAC2 soap_instantiate_cusdk__VideoSrcCamType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__VideoSrcCamType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__VideoSrcCamType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrcCamType);
		if (size)
			*size = sizeof(cusdk__VideoSrcCamType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrcCamType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__VideoSrcCamType);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__VideoSrcCamType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__VideoSrcCamType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__VideoSrcCamType %p -> %p\n", q, p));
	*(cusdk__VideoSrcCamType*)p = *(cusdk__VideoSrcCamType*)q;
}

void cusdk__EncoderAvailableVidSrcSet::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__EncoderAvailableVidSrcSet::id);
	soap_default_std__setTemplateOfxsd__int(soap, &this->cusdk__EncoderAvailableVidSrcSet::value);
}

void cusdk__EncoderAvailableVidSrcSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__setTemplateOfxsd__int(soap, &this->cusdk__EncoderAvailableVidSrcSet::value);
}

int cusdk__EncoderAvailableVidSrcSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__EncoderAvailableVidSrcSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EncoderAvailableVidSrcSet(struct soap *soap, const char *tag, int id, const cusdk__EncoderAvailableVidSrcSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__EncoderAvailableVidSrcSet::id), ""))
		return soap->error;
	if (soap_out_std__setTemplateOfxsd__int(soap, "cusdk:value", -1, &(a->cusdk__EncoderAvailableVidSrcSet::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__EncoderAvailableVidSrcSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__EncoderAvailableVidSrcSet(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__EncoderAvailableVidSrcSet * SOAP_FMAC4 soap_in_cusdk__EncoderAvailableVidSrcSet(struct soap *soap, const char *tag, cusdk__EncoderAvailableVidSrcSet *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__EncoderAvailableVidSrcSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet, sizeof(cusdk__EncoderAvailableVidSrcSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__EncoderAvailableVidSrcSet *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__EncoderAvailableVidSrcSet::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__setTemplateOfxsd__int(soap, "cusdk:value", &(a->cusdk__EncoderAvailableVidSrcSet::value), "xsd:int"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__EncoderAvailableVidSrcSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet, 0, sizeof(cusdk__EncoderAvailableVidSrcSet), 0, soap_copy_cusdk__EncoderAvailableVidSrcSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__EncoderAvailableVidSrcSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet);
	if (this->soap_out(soap, tag?tag:"cusdk:EncoderAvailableVidSrcSet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__EncoderAvailableVidSrcSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__EncoderAvailableVidSrcSet(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__EncoderAvailableVidSrcSet * SOAP_FMAC4 soap_get_cusdk__EncoderAvailableVidSrcSet(struct soap *soap, cusdk__EncoderAvailableVidSrcSet *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EncoderAvailableVidSrcSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__EncoderAvailableVidSrcSet * SOAP_FMAC2 soap_instantiate_cusdk__EncoderAvailableVidSrcSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__EncoderAvailableVidSrcSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderAvailableVidSrcSet);
		if (size)
			*size = sizeof(cusdk__EncoderAvailableVidSrcSet);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderAvailableVidSrcSet[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__EncoderAvailableVidSrcSet);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__EncoderAvailableVidSrcSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__EncoderAvailableVidSrcSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__EncoderAvailableVidSrcSet %p -> %p\n", q, p));
	*(cusdk__EncoderAvailableVidSrcSet*)p = *(cusdk__EncoderAvailableVidSrcSet*)q;
}

void cusdk__VideoSrcEncoderSet::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__VideoSrcEncoderSet::id);
	soap_default_std__setTemplateOfxsd__int(soap, &this->cusdk__VideoSrcEncoderSet::value);
}

void cusdk__VideoSrcEncoderSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__setTemplateOfxsd__int(soap, &this->cusdk__VideoSrcEncoderSet::value);
}

int cusdk__VideoSrcEncoderSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__VideoSrcEncoderSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__VideoSrcEncoderSet(struct soap *soap, const char *tag, int id, const cusdk__VideoSrcEncoderSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__VideoSrcEncoderSet), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__VideoSrcEncoderSet::id), ""))
		return soap->error;
	if (soap_out_std__setTemplateOfxsd__int(soap, "cusdk:value", -1, &(a->cusdk__VideoSrcEncoderSet::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__VideoSrcEncoderSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__VideoSrcEncoderSet(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__VideoSrcEncoderSet * SOAP_FMAC4 soap_in_cusdk__VideoSrcEncoderSet(struct soap *soap, const char *tag, cusdk__VideoSrcEncoderSet *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__VideoSrcEncoderSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__VideoSrcEncoderSet, sizeof(cusdk__VideoSrcEncoderSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__VideoSrcEncoderSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__VideoSrcEncoderSet *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__VideoSrcEncoderSet::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__setTemplateOfxsd__int(soap, "cusdk:value", &(a->cusdk__VideoSrcEncoderSet::value), "xsd:int"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__VideoSrcEncoderSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__VideoSrcEncoderSet, 0, sizeof(cusdk__VideoSrcEncoderSet), 0, soap_copy_cusdk__VideoSrcEncoderSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__VideoSrcEncoderSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__VideoSrcEncoderSet);
	if (this->soap_out(soap, tag?tag:"cusdk:VideoSrcEncoderSet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__VideoSrcEncoderSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__VideoSrcEncoderSet(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__VideoSrcEncoderSet * SOAP_FMAC4 soap_get_cusdk__VideoSrcEncoderSet(struct soap *soap, cusdk__VideoSrcEncoderSet *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__VideoSrcEncoderSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__VideoSrcEncoderSet * SOAP_FMAC2 soap_instantiate_cusdk__VideoSrcEncoderSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__VideoSrcEncoderSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__VideoSrcEncoderSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrcEncoderSet);
		if (size)
			*size = sizeof(cusdk__VideoSrcEncoderSet);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrcEncoderSet[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__VideoSrcEncoderSet);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__VideoSrcEncoderSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__VideoSrcEncoderSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__VideoSrcEncoderSet %p -> %p\n", q, p));
	*(cusdk__VideoSrcEncoderSet*)p = *(cusdk__VideoSrcEncoderSet*)q;
}

void cusdk__ChannelVidDynValue::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__ChannelVidDynValue::id);
	soap_default_xsd__int(soap, &this->cusdk__ChannelVidDynValue::value);
}

void cusdk__ChannelVidDynValue::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__ChannelVidDynValue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ChannelVidDynValue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ChannelVidDynValue(struct soap *soap, const char *tag, int id, const cusdk__ChannelVidDynValue *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ChannelVidDynValue), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__ChannelVidDynValue::id), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:value", -1, &(a->cusdk__ChannelVidDynValue::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ChannelVidDynValue::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ChannelVidDynValue(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ChannelVidDynValue * SOAP_FMAC4 soap_in_cusdk__ChannelVidDynValue(struct soap *soap, const char *tag, cusdk__ChannelVidDynValue *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ChannelVidDynValue *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ChannelVidDynValue, sizeof(cusdk__ChannelVidDynValue), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ChannelVidDynValue)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ChannelVidDynValue *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__ChannelVidDynValue::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:value", &(a->cusdk__ChannelVidDynValue::value), "xsd:int"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ChannelVidDynValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ChannelVidDynValue, 0, sizeof(cusdk__ChannelVidDynValue), 0, soap_copy_cusdk__ChannelVidDynValue);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ChannelVidDynValue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ChannelVidDynValue);
	if (this->soap_out(soap, tag?tag:"cusdk:ChannelVidDynValue", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ChannelVidDynValue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ChannelVidDynValue(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ChannelVidDynValue * SOAP_FMAC4 soap_get_cusdk__ChannelVidDynValue(struct soap *soap, cusdk__ChannelVidDynValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ChannelVidDynValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ChannelVidDynValue * SOAP_FMAC2 soap_instantiate_cusdk__ChannelVidDynValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ChannelVidDynValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ChannelVidDynValue, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ChannelVidDynValue);
		if (size)
			*size = sizeof(cusdk__ChannelVidDynValue);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ChannelVidDynValue[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ChannelVidDynValue);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ChannelVidDynValue*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ChannelVidDynValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ChannelVidDynValue %p -> %p\n", q, p));
	*(cusdk__ChannelVidDynValue*)p = *(cusdk__ChannelVidDynValue*)q;
}

void cusdk__ChannelVideoFormat::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__ChannelVideoFormat::id);
	soap_default_xsd__string(soap, &this->cusdk__ChannelVideoFormat::value);
}

void cusdk__ChannelVideoFormat::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__ChannelVideoFormat::value);
}

int cusdk__ChannelVideoFormat::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__ChannelVideoFormat(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ChannelVideoFormat(struct soap *soap, const char *tag, int id, const cusdk__ChannelVideoFormat *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ChannelVideoFormat), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__ChannelVideoFormat::id), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:value", -1, &(a->cusdk__ChannelVideoFormat::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__ChannelVideoFormat::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__ChannelVideoFormat(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__ChannelVideoFormat * SOAP_FMAC4 soap_in_cusdk__ChannelVideoFormat(struct soap *soap, const char *tag, cusdk__ChannelVideoFormat *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__ChannelVideoFormat *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ChannelVideoFormat, sizeof(cusdk__ChannelVideoFormat), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__ChannelVideoFormat)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__ChannelVideoFormat *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__ChannelVideoFormat::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:value", &(a->cusdk__ChannelVideoFormat::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__ChannelVideoFormat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ChannelVideoFormat, 0, sizeof(cusdk__ChannelVideoFormat), 0, soap_copy_cusdk__ChannelVideoFormat);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__ChannelVideoFormat::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__ChannelVideoFormat);
	if (this->soap_out(soap, tag?tag:"cusdk:ChannelVideoFormat", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__ChannelVideoFormat::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__ChannelVideoFormat(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__ChannelVideoFormat * SOAP_FMAC4 soap_get_cusdk__ChannelVideoFormat(struct soap *soap, cusdk__ChannelVideoFormat *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ChannelVideoFormat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__ChannelVideoFormat * SOAP_FMAC2 soap_instantiate_cusdk__ChannelVideoFormat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ChannelVideoFormat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ChannelVideoFormat, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ChannelVideoFormat);
		if (size)
			*size = sizeof(cusdk__ChannelVideoFormat);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__ChannelVideoFormat[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__ChannelVideoFormat);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__ChannelVideoFormat*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ChannelVideoFormat(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__ChannelVideoFormat %p -> %p\n", q, p));
	*(cusdk__ChannelVideoFormat*)p = *(cusdk__ChannelVideoFormat*)q;
}

void cusdk__InputPinEnable::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__InputPinEnable::id);
	soap_default_xsd__boolean(soap, &this->cusdk__InputPinEnable::value);
}

void cusdk__InputPinEnable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__InputPinEnable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__InputPinEnable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__InputPinEnable(struct soap *soap, const char *tag, int id, const cusdk__InputPinEnable *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__InputPinEnable), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__InputPinEnable::id), ""))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:value", -1, &(a->cusdk__InputPinEnable::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__InputPinEnable::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__InputPinEnable(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__InputPinEnable * SOAP_FMAC4 soap_in_cusdk__InputPinEnable(struct soap *soap, const char *tag, cusdk__InputPinEnable *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__InputPinEnable *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__InputPinEnable, sizeof(cusdk__InputPinEnable), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__InputPinEnable)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__InputPinEnable *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__InputPinEnable::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:value", &(a->cusdk__InputPinEnable::value), "xsd:boolean"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__InputPinEnable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__InputPinEnable, 0, sizeof(cusdk__InputPinEnable), 0, soap_copy_cusdk__InputPinEnable);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__InputPinEnable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__InputPinEnable);
	if (this->soap_out(soap, tag?tag:"cusdk:InputPinEnable", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__InputPinEnable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__InputPinEnable(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__InputPinEnable * SOAP_FMAC4 soap_get_cusdk__InputPinEnable(struct soap *soap, cusdk__InputPinEnable *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__InputPinEnable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__InputPinEnable * SOAP_FMAC2 soap_instantiate_cusdk__InputPinEnable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__InputPinEnable(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__InputPinEnable, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__InputPinEnable);
		if (size)
			*size = sizeof(cusdk__InputPinEnable);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__InputPinEnable[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__InputPinEnable);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__InputPinEnable*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__InputPinEnable(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__InputPinEnable %p -> %p\n", q, p));
	*(cusdk__InputPinEnable*)p = *(cusdk__InputPinEnable*)q;
}

void cusdk__PuExtCap::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__PuExtCap::id);
	soap_default_xsd__int(soap, &this->cusdk__PuExtCap::value);
}

void cusdk__PuExtCap::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__PuExtCap::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PuExtCap(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PuExtCap(struct soap *soap, const char *tag, int id, const cusdk__PuExtCap *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PuExtCap), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__PuExtCap::id), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:value", -1, &(a->cusdk__PuExtCap::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PuExtCap::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PuExtCap(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PuExtCap * SOAP_FMAC4 soap_in_cusdk__PuExtCap(struct soap *soap, const char *tag, cusdk__PuExtCap *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PuExtCap *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PuExtCap, sizeof(cusdk__PuExtCap), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PuExtCap)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PuExtCap *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__PuExtCap::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:value", &(a->cusdk__PuExtCap::value), "xsd:int"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PuExtCap *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PuExtCap, 0, sizeof(cusdk__PuExtCap), 0, soap_copy_cusdk__PuExtCap);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PuExtCap::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PuExtCap);
	if (this->soap_out(soap, tag?tag:"cusdk:PuExtCap", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PuExtCap::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PuExtCap(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PuExtCap * SOAP_FMAC4 soap_get_cusdk__PuExtCap(struct soap *soap, cusdk__PuExtCap *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PuExtCap(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PuExtCap * SOAP_FMAC2 soap_instantiate_cusdk__PuExtCap(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PuExtCap(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PuExtCap, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PuExtCap);
		if (size)
			*size = sizeof(cusdk__PuExtCap);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PuExtCap[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PuExtCap);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PuExtCap*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PuExtCap(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PuExtCap %p -> %p\n", q, p));
	*(cusdk__PuExtCap*)p = *(cusdk__PuExtCap*)q;
}

void cusdk__PuBaseCapSet::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__PuBaseCapSet::videoEncNum);
	soap_default_xsd__int(soap, &this->cusdk__PuBaseCapSet::videoDecNum);
	soap_default_xsd__int(soap, &this->cusdk__PuBaseCapSet::audioEncNum);
	soap_default_xsd__int(soap, &this->cusdk__PuBaseCapSet::audioDecNum);
	soap_default_xsd__int(soap, &this->cusdk__PuBaseCapSet::serialPortNum);
	soap_default_xsd__int(soap, &this->cusdk__PuBaseCapSet::inputPinNum);
	soap_default_xsd__int(soap, &this->cusdk__PuBaseCapSet::outputPinNum);
	soap_default_xsd__int(soap, &this->cusdk__PuBaseCapSet::videoInPortNum);
}

void cusdk__PuBaseCapSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__PuBaseCapSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__PuBaseCapSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PuBaseCapSet(struct soap *soap, const char *tag, int id, const cusdk__PuBaseCapSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PuBaseCapSet), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:videoEncNum", -1, &(a->cusdk__PuBaseCapSet::videoEncNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:videoDecNum", -1, &(a->cusdk__PuBaseCapSet::videoDecNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:audioEncNum", -1, &(a->cusdk__PuBaseCapSet::audioEncNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:audioDecNum", -1, &(a->cusdk__PuBaseCapSet::audioDecNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:serialPortNum", -1, &(a->cusdk__PuBaseCapSet::serialPortNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:inputPinNum", -1, &(a->cusdk__PuBaseCapSet::inputPinNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:outputPinNum", -1, &(a->cusdk__PuBaseCapSet::outputPinNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:videoInPortNum", -1, &(a->cusdk__PuBaseCapSet::videoInPortNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__PuBaseCapSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__PuBaseCapSet(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__PuBaseCapSet * SOAP_FMAC4 soap_in_cusdk__PuBaseCapSet(struct soap *soap, const char *tag, cusdk__PuBaseCapSet *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__PuBaseCapSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PuBaseCapSet, sizeof(cusdk__PuBaseCapSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__PuBaseCapSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__PuBaseCapSet *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_videoEncNum1 = 1;
	size_t soap_flag_videoDecNum1 = 1;
	size_t soap_flag_audioEncNum1 = 1;
	size_t soap_flag_audioDecNum1 = 1;
	size_t soap_flag_serialPortNum1 = 1;
	size_t soap_flag_inputPinNum1 = 1;
	size_t soap_flag_outputPinNum1 = 1;
	size_t soap_flag_videoInPortNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_videoEncNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:videoEncNum", &(a->cusdk__PuBaseCapSet::videoEncNum), "xsd:int"))
				{	soap_flag_videoEncNum1--;
					continue;
				}
			if (soap_flag_videoDecNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:videoDecNum", &(a->cusdk__PuBaseCapSet::videoDecNum), "xsd:int"))
				{	soap_flag_videoDecNum1--;
					continue;
				}
			if (soap_flag_audioEncNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:audioEncNum", &(a->cusdk__PuBaseCapSet::audioEncNum), "xsd:int"))
				{	soap_flag_audioEncNum1--;
					continue;
				}
			if (soap_flag_audioDecNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:audioDecNum", &(a->cusdk__PuBaseCapSet::audioDecNum), "xsd:int"))
				{	soap_flag_audioDecNum1--;
					continue;
				}
			if (soap_flag_serialPortNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:serialPortNum", &(a->cusdk__PuBaseCapSet::serialPortNum), "xsd:int"))
				{	soap_flag_serialPortNum1--;
					continue;
				}
			if (soap_flag_inputPinNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:inputPinNum", &(a->cusdk__PuBaseCapSet::inputPinNum), "xsd:int"))
				{	soap_flag_inputPinNum1--;
					continue;
				}
			if (soap_flag_outputPinNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:outputPinNum", &(a->cusdk__PuBaseCapSet::outputPinNum), "xsd:int"))
				{	soap_flag_outputPinNum1--;
					continue;
				}
			if (soap_flag_videoInPortNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:videoInPortNum", &(a->cusdk__PuBaseCapSet::videoInPortNum), "xsd:int"))
				{	soap_flag_videoInPortNum1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__PuBaseCapSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PuBaseCapSet, 0, sizeof(cusdk__PuBaseCapSet), 0, soap_copy_cusdk__PuBaseCapSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_videoEncNum1 > 0 || soap_flag_videoDecNum1 > 0 || soap_flag_audioEncNum1 > 0 || soap_flag_audioDecNum1 > 0 || soap_flag_serialPortNum1 > 0 || soap_flag_inputPinNum1 > 0 || soap_flag_outputPinNum1 > 0 || soap_flag_videoInPortNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__PuBaseCapSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__PuBaseCapSet);
	if (this->soap_out(soap, tag?tag:"cusdk:PuBaseCapSet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__PuBaseCapSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__PuBaseCapSet(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__PuBaseCapSet * SOAP_FMAC4 soap_get_cusdk__PuBaseCapSet(struct soap *soap, cusdk__PuBaseCapSet *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PuBaseCapSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__PuBaseCapSet * SOAP_FMAC2 soap_instantiate_cusdk__PuBaseCapSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PuBaseCapSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PuBaseCapSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PuBaseCapSet);
		if (size)
			*size = sizeof(cusdk__PuBaseCapSet);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__PuBaseCapSet[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__PuBaseCapSet);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__PuBaseCapSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PuBaseCapSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__PuBaseCapSet %p -> %p\n", q, p));
	*(cusdk__PuBaseCapSet*)p = *(cusdk__PuBaseCapSet*)q;
}

void cusdk__DevOnlineNotify::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DevOnlineNotify::id);
	soap_default_xsd__boolean(soap, &this->cusdk__DevOnlineNotify::online);
}

void cusdk__DevOnlineNotify::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DevOnlineNotify::id);
}

int cusdk__DevOnlineNotify::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DevOnlineNotify(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DevOnlineNotify(struct soap *soap, const char *tag, int id, const cusdk__DevOnlineNotify *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DevOnlineNotify), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:id", -1, &(a->cusdk__DevOnlineNotify::id), ""))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:online", -1, &(a->cusdk__DevOnlineNotify::online), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DevOnlineNotify::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DevOnlineNotify(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DevOnlineNotify * SOAP_FMAC4 soap_in_cusdk__DevOnlineNotify(struct soap *soap, const char *tag, cusdk__DevOnlineNotify *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DevOnlineNotify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DevOnlineNotify, sizeof(cusdk__DevOnlineNotify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DevOnlineNotify)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DevOnlineNotify *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_online1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:id", &(a->cusdk__DevOnlineNotify::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_online1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:online", &(a->cusdk__DevOnlineNotify::online), "xsd:boolean"))
				{	soap_flag_online1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DevOnlineNotify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DevOnlineNotify, 0, sizeof(cusdk__DevOnlineNotify), 0, soap_copy_cusdk__DevOnlineNotify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_online1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DevOnlineNotify::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DevOnlineNotify);
	if (this->soap_out(soap, tag?tag:"cusdk:DevOnlineNotify", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DevOnlineNotify::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DevOnlineNotify(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DevOnlineNotify * SOAP_FMAC4 soap_get_cusdk__DevOnlineNotify(struct soap *soap, cusdk__DevOnlineNotify *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DevOnlineNotify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DevOnlineNotify * SOAP_FMAC2 soap_instantiate_cusdk__DevOnlineNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DevOnlineNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DevOnlineNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevOnlineNotify);
		if (size)
			*size = sizeof(cusdk__DevOnlineNotify);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevOnlineNotify[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DevOnlineNotify);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DevOnlineNotify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DevOnlineNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DevOnlineNotify %p -> %p\n", q, p));
	*(cusdk__DevOnlineNotify*)p = *(cusdk__DevOnlineNotify*)q;
}

void cusdk__VideoSrcAliasChangeNotify::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__VideoSrcAliasChangeNotify::devUUID);
	soap_default_std__vectorTemplateOfcusdk__VideoSrc(soap, &this->cusdk__VideoSrcAliasChangeNotify::devVideoSrcAlias);
}

void cusdk__VideoSrcAliasChangeNotify::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__VideoSrcAliasChangeNotify::devUUID);
	soap_serialize_std__vectorTemplateOfcusdk__VideoSrc(soap, &this->cusdk__VideoSrcAliasChangeNotify::devVideoSrcAlias);
}

int cusdk__VideoSrcAliasChangeNotify::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__VideoSrcAliasChangeNotify(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__VideoSrcAliasChangeNotify(struct soap *soap, const char *tag, int id, const cusdk__VideoSrcAliasChangeNotify *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devUUID", -1, &(a->cusdk__VideoSrcAliasChangeNotify::devUUID), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__VideoSrc(soap, "cusdk:devVideoSrcAlias", -1, &(a->cusdk__VideoSrcAliasChangeNotify::devVideoSrcAlias), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__VideoSrcAliasChangeNotify::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__VideoSrcAliasChangeNotify(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__VideoSrcAliasChangeNotify * SOAP_FMAC4 soap_in_cusdk__VideoSrcAliasChangeNotify(struct soap *soap, const char *tag, cusdk__VideoSrcAliasChangeNotify *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__VideoSrcAliasChangeNotify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify, sizeof(cusdk__VideoSrcAliasChangeNotify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__VideoSrcAliasChangeNotify *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_devUUID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_devUUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devUUID", &(a->cusdk__VideoSrcAliasChangeNotify::devUUID), "xsd:string"))
				{	soap_flag_devUUID1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__VideoSrc(soap, "cusdk:devVideoSrcAlias", &(a->cusdk__VideoSrcAliasChangeNotify::devVideoSrcAlias), "cusdk:VideoSrc"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__VideoSrcAliasChangeNotify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify, 0, sizeof(cusdk__VideoSrcAliasChangeNotify), 0, soap_copy_cusdk__VideoSrcAliasChangeNotify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_devUUID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__VideoSrcAliasChangeNotify::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify);
	if (this->soap_out(soap, tag?tag:"cusdk:VideoSrcAliasChangeNotify", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__VideoSrcAliasChangeNotify::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__VideoSrcAliasChangeNotify(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__VideoSrcAliasChangeNotify * SOAP_FMAC4 soap_get_cusdk__VideoSrcAliasChangeNotify(struct soap *soap, cusdk__VideoSrcAliasChangeNotify *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__VideoSrcAliasChangeNotify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__VideoSrcAliasChangeNotify * SOAP_FMAC2 soap_instantiate_cusdk__VideoSrcAliasChangeNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__VideoSrcAliasChangeNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrcAliasChangeNotify);
		if (size)
			*size = sizeof(cusdk__VideoSrcAliasChangeNotify);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrcAliasChangeNotify[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__VideoSrcAliasChangeNotify);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__VideoSrcAliasChangeNotify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__VideoSrcAliasChangeNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__VideoSrcAliasChangeNotify %p -> %p\n", q, p));
	*(cusdk__VideoSrcAliasChangeNotify*)p = *(cusdk__VideoSrcAliasChangeNotify*)q;
}

void cusdk__AuthorizationDeviceInfo::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__AuthorizationDeviceInfo::userName);
	this->cusdk__AuthorizationDeviceInfo::devInfo.cusdk__AssignDeviceInfo::soap_default(soap);
	soap_default_xsd__string(soap, &this->cusdk__AuthorizationDeviceInfo::description);
	soap_default_time(soap, &this->cusdk__AuthorizationDeviceInfo::createTime);
}

void cusdk__AuthorizationDeviceInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__AuthorizationDeviceInfo::userName);
	this->cusdk__AuthorizationDeviceInfo::devInfo.soap_serialize(soap);
	soap_serialize_xsd__string(soap, &this->cusdk__AuthorizationDeviceInfo::description);
}

int cusdk__AuthorizationDeviceInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__AuthorizationDeviceInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AuthorizationDeviceInfo(struct soap *soap, const char *tag, int id, const cusdk__AuthorizationDeviceInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__AuthorizationDeviceInfo), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userName", -1, &(a->cusdk__AuthorizationDeviceInfo::userName), ""))
		return soap->error;
	if ((a->cusdk__AuthorizationDeviceInfo::devInfo).soap_out(soap, "cusdk:devInfo", -1, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:description", -1, &(a->cusdk__AuthorizationDeviceInfo::description), ""))
		return soap->error;
	if (soap_out_time(soap, "cusdk:createTime", -1, &(a->cusdk__AuthorizationDeviceInfo::createTime), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__AuthorizationDeviceInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__AuthorizationDeviceInfo(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__AuthorizationDeviceInfo * SOAP_FMAC4 soap_in_cusdk__AuthorizationDeviceInfo(struct soap *soap, const char *tag, cusdk__AuthorizationDeviceInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__AuthorizationDeviceInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__AuthorizationDeviceInfo, sizeof(cusdk__AuthorizationDeviceInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__AuthorizationDeviceInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__AuthorizationDeviceInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_devInfo1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_createTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userName", &(a->cusdk__AuthorizationDeviceInfo::userName), "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			if (soap_flag_devInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->cusdk__AuthorizationDeviceInfo::devInfo).soap_in(soap, "cusdk:devInfo", "cusdk:AssignDeviceInfo"))
				{	soap_flag_devInfo1--;
					continue;
				}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:description", &(a->cusdk__AuthorizationDeviceInfo::description), "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			if (soap_flag_createTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "cusdk:createTime", &(a->cusdk__AuthorizationDeviceInfo::createTime), "xsd:dateTime"))
				{	soap_flag_createTime1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__AuthorizationDeviceInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__AuthorizationDeviceInfo, 0, sizeof(cusdk__AuthorizationDeviceInfo), 0, soap_copy_cusdk__AuthorizationDeviceInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userName1 > 0 || soap_flag_devInfo1 > 0 || soap_flag_description1 > 0 || soap_flag_createTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__AuthorizationDeviceInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__AuthorizationDeviceInfo);
	if (this->soap_out(soap, tag?tag:"cusdk:AuthorizationDeviceInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__AuthorizationDeviceInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__AuthorizationDeviceInfo(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__AuthorizationDeviceInfo * SOAP_FMAC4 soap_get_cusdk__AuthorizationDeviceInfo(struct soap *soap, cusdk__AuthorizationDeviceInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AuthorizationDeviceInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__AuthorizationDeviceInfo * SOAP_FMAC2 soap_instantiate_cusdk__AuthorizationDeviceInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__AuthorizationDeviceInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__AuthorizationDeviceInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AuthorizationDeviceInfo);
		if (size)
			*size = sizeof(cusdk__AuthorizationDeviceInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AuthorizationDeviceInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__AuthorizationDeviceInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__AuthorizationDeviceInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__AuthorizationDeviceInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__AuthorizationDeviceInfo %p -> %p\n", q, p));
	*(cusdk__AuthorizationDeviceInfo*)p = *(cusdk__AuthorizationDeviceInfo*)q;
}

void cusdk__AssignDeviceInfo::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__AssignDeviceInfo::devId);
	soap_default_std__setTemplateOfcusdk__EDevicePri(soap, &this->cusdk__AssignDeviceInfo::devPriSet);
	soap_default_std__vectorTemplateOfcusdk__AssignVideoSrc(soap, &this->cusdk__AssignDeviceInfo::videoSrcIdList);
	soap_default_std__vectorTemplateOfcusdk__AssignAlarminputChn(soap, &this->cusdk__AssignDeviceInfo::alarmInputChnList);
}

void cusdk__AssignDeviceInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__AssignDeviceInfo::devId);
	soap_serialize_std__setTemplateOfcusdk__EDevicePri(soap, &this->cusdk__AssignDeviceInfo::devPriSet);
	soap_serialize_std__vectorTemplateOfcusdk__AssignVideoSrc(soap, &this->cusdk__AssignDeviceInfo::videoSrcIdList);
	soap_serialize_std__vectorTemplateOfcusdk__AssignAlarminputChn(soap, &this->cusdk__AssignDeviceInfo::alarmInputChnList);
}

int cusdk__AssignDeviceInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__AssignDeviceInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AssignDeviceInfo(struct soap *soap, const char *tag, int id, const cusdk__AssignDeviceInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__AssignDeviceInfo), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devId", -1, &(a->cusdk__AssignDeviceInfo::devId), ""))
		return soap->error;
	if (soap_out_std__setTemplateOfcusdk__EDevicePri(soap, "cusdk:devPriSet", -1, &(a->cusdk__AssignDeviceInfo::devPriSet), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AssignVideoSrc(soap, "cusdk:videoSrcIdList", -1, &(a->cusdk__AssignDeviceInfo::videoSrcIdList), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AssignAlarminputChn(soap, "cusdk:alarmInputChnList", -1, &(a->cusdk__AssignDeviceInfo::alarmInputChnList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__AssignDeviceInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__AssignDeviceInfo(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__AssignDeviceInfo * SOAP_FMAC4 soap_in_cusdk__AssignDeviceInfo(struct soap *soap, const char *tag, cusdk__AssignDeviceInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__AssignDeviceInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__AssignDeviceInfo, sizeof(cusdk__AssignDeviceInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__AssignDeviceInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__AssignDeviceInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_devId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_devId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devId", &(a->cusdk__AssignDeviceInfo::devId), "xsd:string"))
				{	soap_flag_devId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__setTemplateOfcusdk__EDevicePri(soap, "cusdk:devPriSet", &(a->cusdk__AssignDeviceInfo::devPriSet), "cusdk:EDevicePri"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AssignVideoSrc(soap, "cusdk:videoSrcIdList", &(a->cusdk__AssignDeviceInfo::videoSrcIdList), "cusdk:AssignVideoSrc"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AssignAlarminputChn(soap, "cusdk:alarmInputChnList", &(a->cusdk__AssignDeviceInfo::alarmInputChnList), "cusdk:AssignAlarminputChn"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__AssignDeviceInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__AssignDeviceInfo, 0, sizeof(cusdk__AssignDeviceInfo), 0, soap_copy_cusdk__AssignDeviceInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_devId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__AssignDeviceInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__AssignDeviceInfo);
	if (this->soap_out(soap, tag?tag:"cusdk:AssignDeviceInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__AssignDeviceInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__AssignDeviceInfo(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__AssignDeviceInfo * SOAP_FMAC4 soap_get_cusdk__AssignDeviceInfo(struct soap *soap, cusdk__AssignDeviceInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AssignDeviceInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__AssignDeviceInfo * SOAP_FMAC2 soap_instantiate_cusdk__AssignDeviceInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__AssignDeviceInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__AssignDeviceInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AssignDeviceInfo);
		if (size)
			*size = sizeof(cusdk__AssignDeviceInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AssignDeviceInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__AssignDeviceInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__AssignDeviceInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__AssignDeviceInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__AssignDeviceInfo %p -> %p\n", q, p));
	*(cusdk__AssignDeviceInfo*)p = *(cusdk__AssignDeviceInfo*)q;
}

void cusdk__AssignVideoSrc::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__AssignVideoSrc::vieoSrcId);
	soap_default_int(soap, &this->cusdk__AssignVideoSrc::ptzLevel);
}

void cusdk__AssignVideoSrc::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__AssignVideoSrc::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__AssignVideoSrc(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AssignVideoSrc(struct soap *soap, const char *tag, int id, const cusdk__AssignVideoSrc *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__AssignVideoSrc), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:vieoSrcId", -1, &(a->cusdk__AssignVideoSrc::vieoSrcId), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:ptzLevel", -1, &(a->cusdk__AssignVideoSrc::ptzLevel), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__AssignVideoSrc::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__AssignVideoSrc(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__AssignVideoSrc * SOAP_FMAC4 soap_in_cusdk__AssignVideoSrc(struct soap *soap, const char *tag, cusdk__AssignVideoSrc *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__AssignVideoSrc *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__AssignVideoSrc, sizeof(cusdk__AssignVideoSrc), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__AssignVideoSrc)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__AssignVideoSrc *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_vieoSrcId1 = 1;
	size_t soap_flag_ptzLevel1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_vieoSrcId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:vieoSrcId", &(a->cusdk__AssignVideoSrc::vieoSrcId), "xsd:int"))
				{	soap_flag_vieoSrcId1--;
					continue;
				}
			if (soap_flag_ptzLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:ptzLevel", &(a->cusdk__AssignVideoSrc::ptzLevel), "xsd:int"))
				{	soap_flag_ptzLevel1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__AssignVideoSrc *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__AssignVideoSrc, 0, sizeof(cusdk__AssignVideoSrc), 0, soap_copy_cusdk__AssignVideoSrc);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_vieoSrcId1 > 0 || soap_flag_ptzLevel1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__AssignVideoSrc::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__AssignVideoSrc);
	if (this->soap_out(soap, tag?tag:"cusdk:AssignVideoSrc", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__AssignVideoSrc::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__AssignVideoSrc(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__AssignVideoSrc * SOAP_FMAC4 soap_get_cusdk__AssignVideoSrc(struct soap *soap, cusdk__AssignVideoSrc *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AssignVideoSrc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__AssignVideoSrc * SOAP_FMAC2 soap_instantiate_cusdk__AssignVideoSrc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__AssignVideoSrc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__AssignVideoSrc, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AssignVideoSrc);
		if (size)
			*size = sizeof(cusdk__AssignVideoSrc);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AssignVideoSrc[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__AssignVideoSrc);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__AssignVideoSrc*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__AssignVideoSrc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__AssignVideoSrc %p -> %p\n", q, p));
	*(cusdk__AssignVideoSrc*)p = *(cusdk__AssignVideoSrc*)q;
}

void cusdk__DeviceGroupRelation::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DeviceGroupRelation::devGroupId);
	soap_default_xsd__string(soap, &this->cusdk__DeviceGroupRelation::devId);
	soap_default_std__vectorTemplateOfint(soap, &this->cusdk__DeviceGroupRelation::videoSrcIdList);
	soap_default_std__vectorTemplateOfint(soap, &this->cusdk__DeviceGroupRelation::alarmInputChnList);
}

void cusdk__DeviceGroupRelation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceGroupRelation::devGroupId);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceGroupRelation::devId);
	soap_serialize_std__vectorTemplateOfint(soap, &this->cusdk__DeviceGroupRelation::videoSrcIdList);
	soap_serialize_std__vectorTemplateOfint(soap, &this->cusdk__DeviceGroupRelation::alarmInputChnList);
}

int cusdk__DeviceGroupRelation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DeviceGroupRelation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceGroupRelation(struct soap *soap, const char *tag, int id, const cusdk__DeviceGroupRelation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceGroupRelation), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devGroupId", -1, &(a->cusdk__DeviceGroupRelation::devGroupId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devId", -1, &(a->cusdk__DeviceGroupRelation::devId), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "cusdk:videoSrcIdList", -1, &(a->cusdk__DeviceGroupRelation::videoSrcIdList), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "cusdk:alarmInputChnList", -1, &(a->cusdk__DeviceGroupRelation::alarmInputChnList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DeviceGroupRelation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DeviceGroupRelation(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DeviceGroupRelation * SOAP_FMAC4 soap_in_cusdk__DeviceGroupRelation(struct soap *soap, const char *tag, cusdk__DeviceGroupRelation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DeviceGroupRelation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceGroupRelation, sizeof(cusdk__DeviceGroupRelation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DeviceGroupRelation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DeviceGroupRelation *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_devGroupId1 = 1;
	size_t soap_flag_devId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_devGroupId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devGroupId", &(a->cusdk__DeviceGroupRelation::devGroupId), "xsd:string"))
				{	soap_flag_devGroupId1--;
					continue;
				}
			if (soap_flag_devId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devId", &(a->cusdk__DeviceGroupRelation::devId), "xsd:string"))
				{	soap_flag_devId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "cusdk:videoSrcIdList", &(a->cusdk__DeviceGroupRelation::videoSrcIdList), "xsd:int"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "cusdk:alarmInputChnList", &(a->cusdk__DeviceGroupRelation::alarmInputChnList), "xsd:int"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DeviceGroupRelation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceGroupRelation, 0, sizeof(cusdk__DeviceGroupRelation), 0, soap_copy_cusdk__DeviceGroupRelation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_devGroupId1 > 0 || soap_flag_devId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DeviceGroupRelation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceGroupRelation);
	if (this->soap_out(soap, tag?tag:"cusdk:DeviceGroupRelation", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DeviceGroupRelation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DeviceGroupRelation(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DeviceGroupRelation * SOAP_FMAC4 soap_get_cusdk__DeviceGroupRelation(struct soap *soap, cusdk__DeviceGroupRelation *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceGroupRelation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DeviceGroupRelation * SOAP_FMAC2 soap_instantiate_cusdk__DeviceGroupRelation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceGroupRelation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceGroupRelation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupRelation);
		if (size)
			*size = sizeof(cusdk__DeviceGroupRelation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroupRelation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DeviceGroupRelation);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DeviceGroupRelation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceGroupRelation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DeviceGroupRelation %p -> %p\n", q, p));
	*(cusdk__DeviceGroupRelation*)p = *(cusdk__DeviceGroupRelation*)q;
}

void cusdk__DeviceInfo::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::id);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::domainId);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::name);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::alias);
	soap_default_cusdk__EDeviceType(soap, &this->cusdk__DeviceInfo::devType);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::manufacturer);
	soap_default_xsd__string(soap, &this->cusdk__DeviceInfo::description);
	soap_default_std__vectorTemplateOfcusdk__VideoSrc(soap, &this->cusdk__DeviceInfo::videoSrcList);
	soap_default_std__setTemplateOfcusdk__EDevicePri(soap, &this->cusdk__DeviceInfo::priList);
	soap_default_std__vectorTemplateOfcusdk__AlarmInputChn(soap, &this->cusdk__DeviceInfo::alarmInputChnList);
	soap_default_xsd__int(soap, &this->cusdk__DeviceInfo::videoSrcNum);
	soap_default_xsd__int(soap, &this->cusdk__DeviceInfo::encodeChnNum);
	soap_default_xsd__int(soap, &this->cusdk__DeviceInfo::decodeChnNum);
	soap_default_xsd__int(soap, &this->cusdk__DeviceInfo::alarmInputNum);
}

void cusdk__DeviceInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::id);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::domainId);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::name);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::alias);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::manufacturer);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceInfo::description);
	soap_serialize_std__vectorTemplateOfcusdk__VideoSrc(soap, &this->cusdk__DeviceInfo::videoSrcList);
	soap_serialize_std__setTemplateOfcusdk__EDevicePri(soap, &this->cusdk__DeviceInfo::priList);
	soap_serialize_std__vectorTemplateOfcusdk__AlarmInputChn(soap, &this->cusdk__DeviceInfo::alarmInputChnList);
}

int cusdk__DeviceInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DeviceInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceInfo(struct soap *soap, const char *tag, int id, const cusdk__DeviceInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceInfo), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:id", -1, &(a->cusdk__DeviceInfo::id), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:domainId", -1, &(a->cusdk__DeviceInfo::domainId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:name", -1, &(a->cusdk__DeviceInfo::name), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:alias", -1, &(a->cusdk__DeviceInfo::alias), ""))
		return soap->error;
	if (soap_out_cusdk__EDeviceType(soap, "cusdk:devType", -1, &(a->cusdk__DeviceInfo::devType), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:manufacturer", -1, &(a->cusdk__DeviceInfo::manufacturer), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:description", -1, &(a->cusdk__DeviceInfo::description), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__VideoSrc(soap, "cusdk:videoSrcList", -1, &(a->cusdk__DeviceInfo::videoSrcList), ""))
		return soap->error;
	if (soap_out_std__setTemplateOfcusdk__EDevicePri(soap, "cusdk:priList", -1, &(a->cusdk__DeviceInfo::priList), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfcusdk__AlarmInputChn(soap, "cusdk:alarmInputChnList", -1, &(a->cusdk__DeviceInfo::alarmInputChnList), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:videoSrcNum", -1, &(a->cusdk__DeviceInfo::videoSrcNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:encodeChnNum", -1, &(a->cusdk__DeviceInfo::encodeChnNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:decodeChnNum", -1, &(a->cusdk__DeviceInfo::decodeChnNum), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:alarmInputNum", -1, &(a->cusdk__DeviceInfo::alarmInputNum), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DeviceInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DeviceInfo(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DeviceInfo * SOAP_FMAC4 soap_in_cusdk__DeviceInfo(struct soap *soap, const char *tag, cusdk__DeviceInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DeviceInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceInfo, sizeof(cusdk__DeviceInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DeviceInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DeviceInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_domainId1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_alias1 = 1;
	size_t soap_flag_devType1 = 1;
	size_t soap_flag_manufacturer1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_videoSrcNum1 = 1;
	size_t soap_flag_encodeChnNum1 = 1;
	size_t soap_flag_decodeChnNum1 = 1;
	size_t soap_flag_alarmInputNum1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:id", &(a->cusdk__DeviceInfo::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_domainId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:domainId", &(a->cusdk__DeviceInfo::domainId), "xsd:string"))
				{	soap_flag_domainId1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:name", &(a->cusdk__DeviceInfo::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_alias1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:alias", &(a->cusdk__DeviceInfo::alias), "xsd:string"))
				{	soap_flag_alias1--;
					continue;
				}
			if (soap_flag_devType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EDeviceType(soap, "cusdk:devType", &(a->cusdk__DeviceInfo::devType), "cusdk:EDeviceType"))
				{	soap_flag_devType1--;
					continue;
				}
			if (soap_flag_manufacturer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:manufacturer", &(a->cusdk__DeviceInfo::manufacturer), "xsd:string"))
				{	soap_flag_manufacturer1--;
					continue;
				}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:description", &(a->cusdk__DeviceInfo::description), "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__VideoSrc(soap, "cusdk:videoSrcList", &(a->cusdk__DeviceInfo::videoSrcList), "cusdk:VideoSrc"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__setTemplateOfcusdk__EDevicePri(soap, "cusdk:priList", &(a->cusdk__DeviceInfo::priList), "cusdk:EDevicePri"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfcusdk__AlarmInputChn(soap, "cusdk:alarmInputChnList", &(a->cusdk__DeviceInfo::alarmInputChnList), "cusdk:AlarmInputChn"))
					continue;
			if (soap_flag_videoSrcNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:videoSrcNum", &(a->cusdk__DeviceInfo::videoSrcNum), "xsd:int"))
				{	soap_flag_videoSrcNum1--;
					continue;
				}
			if (soap_flag_encodeChnNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:encodeChnNum", &(a->cusdk__DeviceInfo::encodeChnNum), "xsd:int"))
				{	soap_flag_encodeChnNum1--;
					continue;
				}
			if (soap_flag_decodeChnNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:decodeChnNum", &(a->cusdk__DeviceInfo::decodeChnNum), "xsd:int"))
				{	soap_flag_decodeChnNum1--;
					continue;
				}
			if (soap_flag_alarmInputNum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:alarmInputNum", &(a->cusdk__DeviceInfo::alarmInputNum), "xsd:int"))
				{	soap_flag_alarmInputNum1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DeviceInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceInfo, 0, sizeof(cusdk__DeviceInfo), 0, soap_copy_cusdk__DeviceInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_domainId1 > 0 || soap_flag_name1 > 0 || soap_flag_alias1 > 0 || soap_flag_devType1 > 0 || soap_flag_manufacturer1 > 0 || soap_flag_description1 > 0 || soap_flag_videoSrcNum1 > 0 || soap_flag_encodeChnNum1 > 0 || soap_flag_decodeChnNum1 > 0 || soap_flag_alarmInputNum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DeviceInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceInfo);
	if (this->soap_out(soap, tag?tag:"cusdk:DeviceInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DeviceInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DeviceInfo(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DeviceInfo * SOAP_FMAC4 soap_get_cusdk__DeviceInfo(struct soap *soap, cusdk__DeviceInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DeviceInfo * SOAP_FMAC2 soap_instantiate_cusdk__DeviceInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "cusdk:DeviceFullInfo"))
	{	cp->type = SOAP_TYPE_cusdk__DeviceFullInfo;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceFullInfo);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(cusdk__DeviceFullInfo);
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceFullInfo[n]);
			if (size)
				*size = n * sizeof(cusdk__DeviceFullInfo);
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (cusdk__DeviceFullInfo*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceInfo);
		if (size)
			*size = sizeof(cusdk__DeviceInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DeviceInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DeviceInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DeviceInfo %p -> %p\n", q, p));
	*(cusdk__DeviceInfo*)p = *(cusdk__DeviceInfo*)q;
}

void cusdk__AlarmInputChn::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__AlarmInputChn::id);
}

void cusdk__AlarmInputChn::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__AlarmInputChn::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__AlarmInputChn(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AlarmInputChn(struct soap *soap, const char *tag, int id, const cusdk__AlarmInputChn *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__AlarmInputChn), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__AlarmInputChn::id), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__AlarmInputChn::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__AlarmInputChn(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__AlarmInputChn * SOAP_FMAC4 soap_in_cusdk__AlarmInputChn(struct soap *soap, const char *tag, cusdk__AlarmInputChn *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__AlarmInputChn *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__AlarmInputChn, sizeof(cusdk__AlarmInputChn), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__AlarmInputChn)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__AlarmInputChn *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__AlarmInputChn::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__AlarmInputChn *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__AlarmInputChn, 0, sizeof(cusdk__AlarmInputChn), 0, soap_copy_cusdk__AlarmInputChn);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__AlarmInputChn::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__AlarmInputChn);
	if (this->soap_out(soap, tag?tag:"cusdk:AlarmInputChn", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__AlarmInputChn::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__AlarmInputChn(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__AlarmInputChn * SOAP_FMAC4 soap_get_cusdk__AlarmInputChn(struct soap *soap, cusdk__AlarmInputChn *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AlarmInputChn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__AlarmInputChn * SOAP_FMAC2 soap_instantiate_cusdk__AlarmInputChn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__AlarmInputChn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__AlarmInputChn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AlarmInputChn);
		if (size)
			*size = sizeof(cusdk__AlarmInputChn);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__AlarmInputChn[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__AlarmInputChn);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__AlarmInputChn*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__AlarmInputChn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__AlarmInputChn %p -> %p\n", q, p));
	*(cusdk__AlarmInputChn*)p = *(cusdk__AlarmInputChn*)q;
}

void cusdk__VideoSrc::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__VideoSrc::id);
	soap_default_xsd__string(soap, &this->cusdk__VideoSrc::alias);
	soap_default_int(soap, &this->cusdk__VideoSrc::ptzLevel);
}

void cusdk__VideoSrc::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__VideoSrc::alias);
}

int cusdk__VideoSrc::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__VideoSrc(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__VideoSrc(struct soap *soap, const char *tag, int id, const cusdk__VideoSrc *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__VideoSrc), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__VideoSrc::id), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:alias", -1, &(a->cusdk__VideoSrc::alias), ""))
		return soap->error;
	if (soap_out_int(soap, "cusdk:ptzLevel", -1, &(a->cusdk__VideoSrc::ptzLevel), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__VideoSrc::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__VideoSrc(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__VideoSrc * SOAP_FMAC4 soap_in_cusdk__VideoSrc(struct soap *soap, const char *tag, cusdk__VideoSrc *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__VideoSrc *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__VideoSrc, sizeof(cusdk__VideoSrc), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__VideoSrc)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__VideoSrc *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_alias1 = 1;
	size_t soap_flag_ptzLevel1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__VideoSrc::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_alias1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:alias", &(a->cusdk__VideoSrc::alias), "xsd:string"))
				{	soap_flag_alias1--;
					continue;
				}
			if (soap_flag_ptzLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cusdk:ptzLevel", &(a->cusdk__VideoSrc::ptzLevel), "xsd:int"))
				{	soap_flag_ptzLevel1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__VideoSrc *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__VideoSrc, 0, sizeof(cusdk__VideoSrc), 0, soap_copy_cusdk__VideoSrc);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_alias1 > 0 || soap_flag_ptzLevel1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__VideoSrc::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__VideoSrc);
	if (this->soap_out(soap, tag?tag:"cusdk:VideoSrc", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__VideoSrc::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__VideoSrc(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__VideoSrc * SOAP_FMAC4 soap_get_cusdk__VideoSrc(struct soap *soap, cusdk__VideoSrc *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__VideoSrc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__VideoSrc * SOAP_FMAC2 soap_instantiate_cusdk__VideoSrc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__VideoSrc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__VideoSrc, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrc);
		if (size)
			*size = sizeof(cusdk__VideoSrc);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__VideoSrc[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__VideoSrc);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__VideoSrc*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__VideoSrc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__VideoSrc %p -> %p\n", q, p));
	*(cusdk__VideoSrc*)p = *(cusdk__VideoSrc*)q;
}

void cusdk__DevChannel::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DevChannel::devURI);
	soap_default_xsd__int(soap, &this->cusdk__DevChannel::chnNO);
}

void cusdk__DevChannel::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DevChannel::devURI);
}

int cusdk__DevChannel::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DevChannel(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DevChannel(struct soap *soap, const char *tag, int id, const cusdk__DevChannel *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DevChannel), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:devURI", -1, &(a->cusdk__DevChannel::devURI), ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:chnNO", -1, &(a->cusdk__DevChannel::chnNO), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DevChannel::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DevChannel(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DevChannel * SOAP_FMAC4 soap_in_cusdk__DevChannel(struct soap *soap, const char *tag, cusdk__DevChannel *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DevChannel *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DevChannel, sizeof(cusdk__DevChannel), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DevChannel)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DevChannel *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_devURI1 = 1;
	size_t soap_flag_chnNO1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_devURI1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:devURI", &(a->cusdk__DevChannel::devURI), "xsd:string"))
				{	soap_flag_devURI1--;
					continue;
				}
			if (soap_flag_chnNO1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:chnNO", &(a->cusdk__DevChannel::chnNO), "xsd:int"))
				{	soap_flag_chnNO1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DevChannel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DevChannel, 0, sizeof(cusdk__DevChannel), 0, soap_copy_cusdk__DevChannel);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_devURI1 > 0 || soap_flag_chnNO1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DevChannel::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DevChannel);
	if (this->soap_out(soap, tag?tag:"cusdk:DevChannel", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DevChannel::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DevChannel(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DevChannel * SOAP_FMAC4 soap_get_cusdk__DevChannel(struct soap *soap, cusdk__DevChannel *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DevChannel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DevChannel * SOAP_FMAC2 soap_instantiate_cusdk__DevChannel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DevChannel(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DevChannel, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevChannel);
		if (size)
			*size = sizeof(cusdk__DevChannel);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DevChannel[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DevChannel);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DevChannel*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DevChannel(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DevChannel %p -> %p\n", q, p));
	*(cusdk__DevChannel*)p = *(cusdk__DevChannel*)q;
}

void cusdk__EncoderChn::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &this->cusdk__EncoderChn::id);
}

void cusdk__EncoderChn::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
}

int cusdk__EncoderChn::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__EncoderChn(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__EncoderChn(struct soap *soap, const char *tag, int id, const cusdk__EncoderChn *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__EncoderChn), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "cusdk:id", -1, &(a->cusdk__EncoderChn::id), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__EncoderChn::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__EncoderChn(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__EncoderChn * SOAP_FMAC4 soap_in_cusdk__EncoderChn(struct soap *soap, const char *tag, cusdk__EncoderChn *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__EncoderChn *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__EncoderChn, sizeof(cusdk__EncoderChn), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__EncoderChn)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__EncoderChn *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "cusdk:id", &(a->cusdk__EncoderChn::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__EncoderChn *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__EncoderChn, 0, sizeof(cusdk__EncoderChn), 0, soap_copy_cusdk__EncoderChn);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__EncoderChn::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__EncoderChn);
	if (this->soap_out(soap, tag?tag:"cusdk:EncoderChn", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__EncoderChn::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__EncoderChn(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__EncoderChn * SOAP_FMAC4 soap_get_cusdk__EncoderChn(struct soap *soap, cusdk__EncoderChn *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__EncoderChn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__EncoderChn * SOAP_FMAC2 soap_instantiate_cusdk__EncoderChn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__EncoderChn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__EncoderChn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderChn);
		if (size)
			*size = sizeof(cusdk__EncoderChn);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__EncoderChn[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__EncoderChn);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__EncoderChn*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__EncoderChn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__EncoderChn %p -> %p\n", q, p));
	*(cusdk__EncoderChn*)p = *(cusdk__EncoderChn*)q;
}

void cusdk__DeviceGroup::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__DeviceGroup::id);
	soap_default_xsd__string(soap, &this->cusdk__DeviceGroup::parentId);
	soap_default_xsd__string(soap, &this->cusdk__DeviceGroup::domainId);
	soap_default_xsd__string(soap, &this->cusdk__DeviceGroup::name);
	soap_default_xsd__string(soap, &this->cusdk__DeviceGroup::description);
	soap_default_xsd__boolean(soap, &this->cusdk__DeviceGroup::hasDevice);
}

void cusdk__DeviceGroup::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceGroup::id);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceGroup::parentId);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceGroup::domainId);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceGroup::name);
	soap_serialize_xsd__string(soap, &this->cusdk__DeviceGroup::description);
}

int cusdk__DeviceGroup::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__DeviceGroup(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceGroup(struct soap *soap, const char *tag, int id, const cusdk__DeviceGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceGroup), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:id", -1, &(a->cusdk__DeviceGroup::id), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:parentId", -1, &(a->cusdk__DeviceGroup::parentId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:domainId", -1, &(a->cusdk__DeviceGroup::domainId), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:name", -1, &(a->cusdk__DeviceGroup::name), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:description", -1, &(a->cusdk__DeviceGroup::description), ""))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:hasDevice", -1, &(a->cusdk__DeviceGroup::hasDevice), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__DeviceGroup::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__DeviceGroup(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__DeviceGroup * SOAP_FMAC4 soap_in_cusdk__DeviceGroup(struct soap *soap, const char *tag, cusdk__DeviceGroup *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__DeviceGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceGroup, sizeof(cusdk__DeviceGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__DeviceGroup)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__DeviceGroup *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_parentId1 = 1;
	size_t soap_flag_domainId1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_hasDevice1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:id", &(a->cusdk__DeviceGroup::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_parentId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:parentId", &(a->cusdk__DeviceGroup::parentId), "xsd:string"))
				{	soap_flag_parentId1--;
					continue;
				}
			if (soap_flag_domainId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:domainId", &(a->cusdk__DeviceGroup::domainId), "xsd:string"))
				{	soap_flag_domainId1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:name", &(a->cusdk__DeviceGroup::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:description", &(a->cusdk__DeviceGroup::description), "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			if (soap_flag_hasDevice1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:hasDevice", &(a->cusdk__DeviceGroup::hasDevice), "xsd:boolean"))
				{	soap_flag_hasDevice1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__DeviceGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceGroup, 0, sizeof(cusdk__DeviceGroup), 0, soap_copy_cusdk__DeviceGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_parentId1 > 0 || soap_flag_domainId1 > 0 || soap_flag_name1 > 0 || soap_flag_description1 > 0 || soap_flag_hasDevice1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__DeviceGroup::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceGroup);
	if (this->soap_out(soap, tag?tag:"cusdk:DeviceGroup", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__DeviceGroup::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__DeviceGroup(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__DeviceGroup * SOAP_FMAC4 soap_get_cusdk__DeviceGroup(struct soap *soap, cusdk__DeviceGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__DeviceGroup * SOAP_FMAC2 soap_instantiate_cusdk__DeviceGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroup);
		if (size)
			*size = sizeof(cusdk__DeviceGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__DeviceGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__DeviceGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__DeviceGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__DeviceGroup %p -> %p\n", q, p));
	*(cusdk__DeviceGroup*)p = *(cusdk__DeviceGroup*)q;
}

void cusdk__UserInfo::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__UserInfo::uuid);
	soap_default_xsd__string(soap, &this->cusdk__UserInfo::userName);
	soap_default_xsd__string(soap, &this->cusdk__UserInfo::userPassword);
	soap_default_xsd__string(soap, &this->cusdk__UserInfo::domainID);
	soap_default_cusdk__EUserType(soap, &this->cusdk__UserInfo::userType);
	soap_default_std__setTemplateOfcusdk__EUserPri(soap, &this->cusdk__UserInfo::userPri);
	soap_default_xsd__string(soap, &this->cusdk__UserInfo::creator);
	soap_default_xsd__string(soap, &this->cusdk__UserInfo::userGroup);
	soap_default_xsd__string(soap, &this->cusdk__UserInfo::description);
	soap_default_time(soap, &this->cusdk__UserInfo::accountOverdueTime);
	soap_default_time(soap, &this->cusdk__UserInfo::passwordOverdueTime);
	soap_default_xsd__boolean(soap, &this->cusdk__UserInfo::enable);
	soap_default_xsd__boolean(soap, &this->cusdk__UserInfo::allowMultilogin);
}

void cusdk__UserInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__UserInfo::uuid);
	soap_serialize_xsd__string(soap, &this->cusdk__UserInfo::userName);
	soap_serialize_xsd__string(soap, &this->cusdk__UserInfo::userPassword);
	soap_serialize_xsd__string(soap, &this->cusdk__UserInfo::domainID);
	soap_serialize_std__setTemplateOfcusdk__EUserPri(soap, &this->cusdk__UserInfo::userPri);
	soap_serialize_xsd__string(soap, &this->cusdk__UserInfo::creator);
	soap_serialize_xsd__string(soap, &this->cusdk__UserInfo::userGroup);
	soap_serialize_xsd__string(soap, &this->cusdk__UserInfo::description);
}

int cusdk__UserInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserInfo(struct soap *soap, const char *tag, int id, const cusdk__UserInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserInfo), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:uuid", -1, &(a->cusdk__UserInfo::uuid), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userName", -1, &(a->cusdk__UserInfo::userName), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userPassword", -1, &(a->cusdk__UserInfo::userPassword), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:domainID", -1, &(a->cusdk__UserInfo::domainID), ""))
		return soap->error;
	if (soap_out_cusdk__EUserType(soap, "cusdk:userType", -1, &(a->cusdk__UserInfo::userType), ""))
		return soap->error;
	if (soap_out_std__setTemplateOfcusdk__EUserPri(soap, "cusdk:userPri", -1, &(a->cusdk__UserInfo::userPri), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:creator", -1, &(a->cusdk__UserInfo::creator), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:userGroup", -1, &(a->cusdk__UserInfo::userGroup), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:description", -1, &(a->cusdk__UserInfo::description), ""))
		return soap->error;
	if (soap_out_time(soap, "cusdk:accountOverdueTime", -1, &(a->cusdk__UserInfo::accountOverdueTime), ""))
		return soap->error;
	if (soap_out_time(soap, "cusdk:passwordOverdueTime", -1, &(a->cusdk__UserInfo::passwordOverdueTime), ""))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:enable", -1, &(a->cusdk__UserInfo::enable), ""))
		return soap->error;
	if (soap_out_xsd__boolean(soap, "cusdk:allowMultilogin", -1, &(a->cusdk__UserInfo::allowMultilogin), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserInfo(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserInfo * SOAP_FMAC4 soap_in_cusdk__UserInfo(struct soap *soap, const char *tag, cusdk__UserInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserInfo, sizeof(cusdk__UserInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_uuid1 = 1;
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_userPassword1 = 1;
	size_t soap_flag_domainID1 = 1;
	size_t soap_flag_userType1 = 1;
	size_t soap_flag_creator1 = 1;
	size_t soap_flag_userGroup1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_accountOverdueTime1 = 1;
	size_t soap_flag_passwordOverdueTime1 = 1;
	size_t soap_flag_enable1 = 1;
	size_t soap_flag_allowMultilogin1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uuid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:uuid", &(a->cusdk__UserInfo::uuid), "xsd:string"))
				{	soap_flag_uuid1--;
					continue;
				}
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userName", &(a->cusdk__UserInfo::userName), "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			if (soap_flag_userPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userPassword", &(a->cusdk__UserInfo::userPassword), "xsd:string"))
				{	soap_flag_userPassword1--;
					continue;
				}
			if (soap_flag_domainID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:domainID", &(a->cusdk__UserInfo::domainID), "xsd:string"))
				{	soap_flag_domainID1--;
					continue;
				}
			if (soap_flag_userType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EUserType(soap, "cusdk:userType", &(a->cusdk__UserInfo::userType), "cusdk:EUserType"))
				{	soap_flag_userType1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__setTemplateOfcusdk__EUserPri(soap, "cusdk:userPri", &(a->cusdk__UserInfo::userPri), "cusdk:EUserPri"))
					continue;
			if (soap_flag_creator1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:creator", &(a->cusdk__UserInfo::creator), "xsd:string"))
				{	soap_flag_creator1--;
					continue;
				}
			if (soap_flag_userGroup1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:userGroup", &(a->cusdk__UserInfo::userGroup), "xsd:string"))
				{	soap_flag_userGroup1--;
					continue;
				}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:description", &(a->cusdk__UserInfo::description), "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			if (soap_flag_accountOverdueTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "cusdk:accountOverdueTime", &(a->cusdk__UserInfo::accountOverdueTime), "xsd:dateTime"))
				{	soap_flag_accountOverdueTime1--;
					continue;
				}
			if (soap_flag_passwordOverdueTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "cusdk:passwordOverdueTime", &(a->cusdk__UserInfo::passwordOverdueTime), "xsd:dateTime"))
				{	soap_flag_passwordOverdueTime1--;
					continue;
				}
			if (soap_flag_enable1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:enable", &(a->cusdk__UserInfo::enable), "xsd:boolean"))
				{	soap_flag_enable1--;
					continue;
				}
			if (soap_flag_allowMultilogin1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "cusdk:allowMultilogin", &(a->cusdk__UserInfo::allowMultilogin), "xsd:boolean"))
				{	soap_flag_allowMultilogin1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserInfo, 0, sizeof(cusdk__UserInfo), 0, soap_copy_cusdk__UserInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_uuid1 > 0 || soap_flag_userName1 > 0 || soap_flag_userPassword1 > 0 || soap_flag_domainID1 > 0 || soap_flag_userType1 > 0 || soap_flag_creator1 > 0 || soap_flag_userGroup1 > 0 || soap_flag_description1 > 0 || soap_flag_accountOverdueTime1 > 0 || soap_flag_passwordOverdueTime1 > 0 || soap_flag_enable1 > 0 || soap_flag_allowMultilogin1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserInfo);
	if (this->soap_out(soap, tag?tag:"cusdk:UserInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserInfo(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserInfo * SOAP_FMAC4 soap_get_cusdk__UserInfo(struct soap *soap, cusdk__UserInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserInfo * SOAP_FMAC2 soap_instantiate_cusdk__UserInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserInfo);
		if (size)
			*size = sizeof(cusdk__UserInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserInfo %p -> %p\n", q, p));
	*(cusdk__UserInfo*)p = *(cusdk__UserInfo*)q;
}

void cusdk__UserGroup::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->cusdk__UserGroup::id);
	soap_default_xsd__string(soap, &this->cusdk__UserGroup::name);
	soap_default_xsd__string(soap, &this->cusdk__UserGroup::description);
	soap_default_xsd__string(soap, &this->cusdk__UserGroup::creator);
	soap_default_cusdk__EUserType(soap, &this->cusdk__UserGroup::userType);
	soap_default_std__setTemplateOfcusdk__EUserPri(soap, &this->cusdk__UserGroup::userPri);
}

void cusdk__UserGroup::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->cusdk__UserGroup::id);
	soap_serialize_xsd__string(soap, &this->cusdk__UserGroup::name);
	soap_serialize_xsd__string(soap, &this->cusdk__UserGroup::description);
	soap_serialize_xsd__string(soap, &this->cusdk__UserGroup::creator);
	soap_serialize_std__setTemplateOfcusdk__EUserPri(soap, &this->cusdk__UserGroup::userPri);
}

int cusdk__UserGroup::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_cusdk__UserGroup(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserGroup(struct soap *soap, const char *tag, int id, const cusdk__UserGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserGroup), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:id", -1, &(a->cusdk__UserGroup::id), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:name", -1, &(a->cusdk__UserGroup::name), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:description", -1, &(a->cusdk__UserGroup::description), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "cusdk:creator", -1, &(a->cusdk__UserGroup::creator), ""))
		return soap->error;
	if (soap_out_cusdk__EUserType(soap, "cusdk:userType", -1, &(a->cusdk__UserGroup::userType), ""))
		return soap->error;
	if (soap_out_std__setTemplateOfcusdk__EUserPri(soap, "cusdk:userPri", -1, &(a->cusdk__UserGroup::userPri), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *cusdk__UserGroup::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_cusdk__UserGroup(soap, tag, this, type);
}

SOAP_FMAC3 cusdk__UserGroup * SOAP_FMAC4 soap_in_cusdk__UserGroup(struct soap *soap, const char *tag, cusdk__UserGroup *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (cusdk__UserGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserGroup, sizeof(cusdk__UserGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cusdk__UserGroup)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (cusdk__UserGroup *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_creator1 = 1;
	size_t soap_flag_userType1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:id", &(a->cusdk__UserGroup::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:name", &(a->cusdk__UserGroup::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:description", &(a->cusdk__UserGroup::description), "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			if (soap_flag_creator1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "cusdk:creator", &(a->cusdk__UserGroup::creator), "xsd:string"))
				{	soap_flag_creator1--;
					continue;
				}
			if (soap_flag_userType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_cusdk__EUserType(soap, "cusdk:userType", &(a->cusdk__UserGroup::userType), "cusdk:EUserType"))
				{	soap_flag_userType1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__setTemplateOfcusdk__EUserPri(soap, "cusdk:userPri", &(a->cusdk__UserGroup::userPri), "cusdk:EUserPri"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (cusdk__UserGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserGroup, 0, sizeof(cusdk__UserGroup), 0, soap_copy_cusdk__UserGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_name1 > 0 || soap_flag_description1 > 0 || soap_flag_creator1 > 0 || soap_flag_userType1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int cusdk__UserGroup::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cusdk__UserGroup);
	if (this->soap_out(soap, tag?tag:"cusdk:UserGroup", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *cusdk__UserGroup::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_cusdk__UserGroup(soap, this, tag, type);
}

SOAP_FMAC3 cusdk__UserGroup * SOAP_FMAC4 soap_get_cusdk__UserGroup(struct soap *soap, cusdk__UserGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 cusdk__UserGroup * SOAP_FMAC2 soap_instantiate_cusdk__UserGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGroup);
		if (size)
			*size = sizeof(cusdk__UserGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(cusdk__UserGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(cusdk__UserGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (cusdk__UserGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying cusdk__UserGroup %p -> %p\n", q, p));
	*(cusdk__UserGroup*)p = *(cusdk__UserGroup*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__dateTime), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__dateTime, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__dateTime, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__dateTime, 0, sizeof(std::string), 0, soap_copy_xsd__dateTime);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__dateTime(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__dateTime);
	if (soap_out_xsd__dateTime(soap, tag?tag:"xsd:dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__anyURI, 0, sizeof(std::string), 0, soap_copy_xsd__anyURI);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag?tag:"xsd:anyURI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__string, 0, sizeof(std::string), 0, soap_copy_xsd__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (soap_out_xsd__string(soap, tag?tag:"xsd:string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetDeviceBaseInfo(struct soap *soap, struct cusdk__GetDeviceBaseInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetDeviceBaseInfoReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetDeviceBaseInfo(struct soap *soap, const struct cusdk__GetDeviceBaseInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDeviceBaseInfo(struct soap *soap, const char *tag, int id, const struct cusdk__GetDeviceBaseInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDeviceBaseInfo), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetDeviceBaseInfo * SOAP_FMAC4 soap_in_cusdk__GetDeviceBaseInfo(struct soap *soap, const char *tag, struct cusdk__GetDeviceBaseInfo *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetDeviceBaseInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDeviceBaseInfo, sizeof(struct cusdk__GetDeviceBaseInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetDeviceBaseInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetDeviceBaseInfoReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetDeviceBaseInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDeviceBaseInfo, 0, sizeof(struct cusdk__GetDeviceBaseInfo), 0, soap_copy_cusdk__GetDeviceBaseInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetDeviceBaseInfo(struct soap *soap, const struct cusdk__GetDeviceBaseInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetDeviceBaseInfo);
	if (soap_out_cusdk__GetDeviceBaseInfo(soap, tag?tag:"cusdk:GetDeviceBaseInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetDeviceBaseInfo * SOAP_FMAC4 soap_get_cusdk__GetDeviceBaseInfo(struct soap *soap, struct cusdk__GetDeviceBaseInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDeviceBaseInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetDeviceBaseInfo * SOAP_FMAC2 soap_instantiate_cusdk__GetDeviceBaseInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDeviceBaseInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDeviceBaseInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetDeviceBaseInfo);
		if (size)
			*size = sizeof(struct cusdk__GetDeviceBaseInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetDeviceBaseInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetDeviceBaseInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetDeviceBaseInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDeviceBaseInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetDeviceBaseInfo %p -> %p\n", q, p));
	*(struct cusdk__GetDeviceBaseInfo*)p = *(struct cusdk__GetDeviceBaseInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__ModifyAuthorizationDevice(struct soap *soap, struct cusdk__ModifyAuthorizationDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__ModifyAuthorizationDeviceReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__ModifyAuthorizationDevice(struct soap *soap, const struct cusdk__ModifyAuthorizationDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyAuthorizationDevice(struct soap *soap, const char *tag, int id, const struct cusdk__ModifyAuthorizationDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyAuthorizationDevice), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__ModifyAuthorizationDevice * SOAP_FMAC4 soap_in_cusdk__ModifyAuthorizationDevice(struct soap *soap, const char *tag, struct cusdk__ModifyAuthorizationDevice *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__ModifyAuthorizationDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyAuthorizationDevice, sizeof(struct cusdk__ModifyAuthorizationDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__ModifyAuthorizationDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:ModifyAuthorizationDeviceReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__ModifyAuthorizationDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyAuthorizationDevice, 0, sizeof(struct cusdk__ModifyAuthorizationDevice), 0, soap_copy_cusdk__ModifyAuthorizationDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__ModifyAuthorizationDevice(struct soap *soap, const struct cusdk__ModifyAuthorizationDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyAuthorizationDevice);
	if (soap_out_cusdk__ModifyAuthorizationDevice(soap, tag?tag:"cusdk:ModifyAuthorizationDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__ModifyAuthorizationDevice * SOAP_FMAC4 soap_get_cusdk__ModifyAuthorizationDevice(struct soap *soap, struct cusdk__ModifyAuthorizationDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyAuthorizationDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__ModifyAuthorizationDevice * SOAP_FMAC2 soap_instantiate_cusdk__ModifyAuthorizationDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyAuthorizationDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyAuthorizationDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__ModifyAuthorizationDevice);
		if (size)
			*size = sizeof(struct cusdk__ModifyAuthorizationDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__ModifyAuthorizationDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__ModifyAuthorizationDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__ModifyAuthorizationDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyAuthorizationDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__ModifyAuthorizationDevice %p -> %p\n", q, p));
	*(struct cusdk__ModifyAuthorizationDevice*)p = *(struct cusdk__ModifyAuthorizationDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__DelAuthorizationDevice(struct soap *soap, struct cusdk__DelAuthorizationDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__DelAuthorizationDeviceReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__DelAuthorizationDevice(struct soap *soap, const struct cusdk__DelAuthorizationDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelAuthorizationDevice(struct soap *soap, const char *tag, int id, const struct cusdk__DelAuthorizationDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelAuthorizationDevice), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__DelAuthorizationDevice * SOAP_FMAC4 soap_in_cusdk__DelAuthorizationDevice(struct soap *soap, const char *tag, struct cusdk__DelAuthorizationDevice *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__DelAuthorizationDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelAuthorizationDevice, sizeof(struct cusdk__DelAuthorizationDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__DelAuthorizationDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:DelAuthorizationDeviceReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__DelAuthorizationDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelAuthorizationDevice, 0, sizeof(struct cusdk__DelAuthorizationDevice), 0, soap_copy_cusdk__DelAuthorizationDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__DelAuthorizationDevice(struct soap *soap, const struct cusdk__DelAuthorizationDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__DelAuthorizationDevice);
	if (soap_out_cusdk__DelAuthorizationDevice(soap, tag?tag:"cusdk:DelAuthorizationDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__DelAuthorizationDevice * SOAP_FMAC4 soap_get_cusdk__DelAuthorizationDevice(struct soap *soap, struct cusdk__DelAuthorizationDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelAuthorizationDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__DelAuthorizationDevice * SOAP_FMAC2 soap_instantiate_cusdk__DelAuthorizationDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelAuthorizationDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelAuthorizationDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DelAuthorizationDevice);
		if (size)
			*size = sizeof(struct cusdk__DelAuthorizationDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DelAuthorizationDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__DelAuthorizationDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__DelAuthorizationDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelAuthorizationDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__DelAuthorizationDevice %p -> %p\n", q, p));
	*(struct cusdk__DelAuthorizationDevice*)p = *(struct cusdk__DelAuthorizationDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__AddAuthorizationDevice(struct soap *soap, struct cusdk__AddAuthorizationDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__AddAuthorizationDeviceReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__AddAuthorizationDevice(struct soap *soap, const struct cusdk__AddAuthorizationDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__AddAuthorizationDevice(struct soap *soap, const char *tag, int id, const struct cusdk__AddAuthorizationDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__AddAuthorizationDevice), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__AddAuthorizationDevice * SOAP_FMAC4 soap_in_cusdk__AddAuthorizationDevice(struct soap *soap, const char *tag, struct cusdk__AddAuthorizationDevice *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__AddAuthorizationDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__AddAuthorizationDevice, sizeof(struct cusdk__AddAuthorizationDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__AddAuthorizationDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:AddAuthorizationDeviceReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__AddAuthorizationDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__AddAuthorizationDevice, 0, sizeof(struct cusdk__AddAuthorizationDevice), 0, soap_copy_cusdk__AddAuthorizationDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__AddAuthorizationDevice(struct soap *soap, const struct cusdk__AddAuthorizationDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__AddAuthorizationDevice);
	if (soap_out_cusdk__AddAuthorizationDevice(soap, tag?tag:"cusdk:AddAuthorizationDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__AddAuthorizationDevice * SOAP_FMAC4 soap_get_cusdk__AddAuthorizationDevice(struct soap *soap, struct cusdk__AddAuthorizationDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__AddAuthorizationDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__AddAuthorizationDevice * SOAP_FMAC2 soap_instantiate_cusdk__AddAuthorizationDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__AddAuthorizationDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__AddAuthorizationDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__AddAuthorizationDevice);
		if (size)
			*size = sizeof(struct cusdk__AddAuthorizationDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__AddAuthorizationDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__AddAuthorizationDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__AddAuthorizationDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__AddAuthorizationDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__AddAuthorizationDevice %p -> %p\n", q, p));
	*(struct cusdk__AddAuthorizationDevice*)p = *(struct cusdk__AddAuthorizationDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetAuthorizationDevice(struct soap *soap, struct cusdk__GetAuthorizationDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetAuthorizationDeviceReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetAuthorizationDevice(struct soap *soap, const struct cusdk__GetAuthorizationDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetAuthorizationDevice(struct soap *soap, const char *tag, int id, const struct cusdk__GetAuthorizationDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetAuthorizationDevice), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetAuthorizationDevice * SOAP_FMAC4 soap_in_cusdk__GetAuthorizationDevice(struct soap *soap, const char *tag, struct cusdk__GetAuthorizationDevice *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetAuthorizationDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetAuthorizationDevice, sizeof(struct cusdk__GetAuthorizationDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetAuthorizationDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetAuthorizationDeviceReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetAuthorizationDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetAuthorizationDevice, 0, sizeof(struct cusdk__GetAuthorizationDevice), 0, soap_copy_cusdk__GetAuthorizationDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetAuthorizationDevice(struct soap *soap, const struct cusdk__GetAuthorizationDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetAuthorizationDevice);
	if (soap_out_cusdk__GetAuthorizationDevice(soap, tag?tag:"cusdk:GetAuthorizationDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetAuthorizationDevice * SOAP_FMAC4 soap_get_cusdk__GetAuthorizationDevice(struct soap *soap, struct cusdk__GetAuthorizationDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetAuthorizationDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetAuthorizationDevice * SOAP_FMAC2 soap_instantiate_cusdk__GetAuthorizationDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetAuthorizationDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetAuthorizationDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetAuthorizationDevice);
		if (size)
			*size = sizeof(struct cusdk__GetAuthorizationDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetAuthorizationDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetAuthorizationDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetAuthorizationDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetAuthorizationDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetAuthorizationDevice %p -> %p\n", q, p));
	*(struct cusdk__GetAuthorizationDevice*)p = *(struct cusdk__GetAuthorizationDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__UserModifyDevice(struct soap *soap, struct cusdk__UserModifyDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__UserModifyDeviceReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__UserModifyDevice(struct soap *soap, const struct cusdk__UserModifyDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserModifyDevice(struct soap *soap, const char *tag, int id, const struct cusdk__UserModifyDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserModifyDevice), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__UserModifyDevice * SOAP_FMAC4 soap_in_cusdk__UserModifyDevice(struct soap *soap, const char *tag, struct cusdk__UserModifyDevice *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__UserModifyDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserModifyDevice, sizeof(struct cusdk__UserModifyDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__UserModifyDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:UserModifyDeviceReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__UserModifyDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserModifyDevice, 0, sizeof(struct cusdk__UserModifyDevice), 0, soap_copy_cusdk__UserModifyDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__UserModifyDevice(struct soap *soap, const struct cusdk__UserModifyDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__UserModifyDevice);
	if (soap_out_cusdk__UserModifyDevice(soap, tag?tag:"cusdk:UserModifyDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__UserModifyDevice * SOAP_FMAC4 soap_get_cusdk__UserModifyDevice(struct soap *soap, struct cusdk__UserModifyDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserModifyDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__UserModifyDevice * SOAP_FMAC2 soap_instantiate_cusdk__UserModifyDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserModifyDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserModifyDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UserModifyDevice);
		if (size)
			*size = sizeof(struct cusdk__UserModifyDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UserModifyDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__UserModifyDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__UserModifyDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserModifyDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__UserModifyDevice %p -> %p\n", q, p));
	*(struct cusdk__UserModifyDevice*)p = *(struct cusdk__UserModifyDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__UserDelDevice(struct soap *soap, struct cusdk__UserDelDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__UserDelDeviceReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__UserDelDevice(struct soap *soap, const struct cusdk__UserDelDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserDelDevice(struct soap *soap, const char *tag, int id, const struct cusdk__UserDelDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserDelDevice), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__UserDelDevice * SOAP_FMAC4 soap_in_cusdk__UserDelDevice(struct soap *soap, const char *tag, struct cusdk__UserDelDevice *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__UserDelDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserDelDevice, sizeof(struct cusdk__UserDelDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__UserDelDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:UserDelDeviceReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__UserDelDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserDelDevice, 0, sizeof(struct cusdk__UserDelDevice), 0, soap_copy_cusdk__UserDelDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__UserDelDevice(struct soap *soap, const struct cusdk__UserDelDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__UserDelDevice);
	if (soap_out_cusdk__UserDelDevice(soap, tag?tag:"cusdk:UserDelDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__UserDelDevice * SOAP_FMAC4 soap_get_cusdk__UserDelDevice(struct soap *soap, struct cusdk__UserDelDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserDelDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__UserDelDevice * SOAP_FMAC2 soap_instantiate_cusdk__UserDelDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserDelDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserDelDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UserDelDevice);
		if (size)
			*size = sizeof(struct cusdk__UserDelDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UserDelDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__UserDelDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__UserDelDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserDelDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__UserDelDevice %p -> %p\n", q, p));
	*(struct cusdk__UserDelDevice*)p = *(struct cusdk__UserDelDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__UserAddDevice(struct soap *soap, struct cusdk__UserAddDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__UserAddDeviceReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__UserAddDevice(struct soap *soap, const struct cusdk__UserAddDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserAddDevice(struct soap *soap, const char *tag, int id, const struct cusdk__UserAddDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserAddDevice), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__UserAddDevice * SOAP_FMAC4 soap_in_cusdk__UserAddDevice(struct soap *soap, const char *tag, struct cusdk__UserAddDevice *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__UserAddDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserAddDevice, sizeof(struct cusdk__UserAddDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__UserAddDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:UserAddDeviceReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__UserAddDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserAddDevice, 0, sizeof(struct cusdk__UserAddDevice), 0, soap_copy_cusdk__UserAddDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__UserAddDevice(struct soap *soap, const struct cusdk__UserAddDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__UserAddDevice);
	if (soap_out_cusdk__UserAddDevice(soap, tag?tag:"cusdk:UserAddDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__UserAddDevice * SOAP_FMAC4 soap_get_cusdk__UserAddDevice(struct soap *soap, struct cusdk__UserAddDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserAddDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__UserAddDevice * SOAP_FMAC2 soap_instantiate_cusdk__UserAddDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserAddDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserAddDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UserAddDevice);
		if (size)
			*size = sizeof(struct cusdk__UserAddDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UserAddDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__UserAddDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__UserAddDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserAddDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__UserAddDevice %p -> %p\n", q, p));
	*(struct cusdk__UserAddDevice*)p = *(struct cusdk__UserAddDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__UserGetDeviceByGroup(struct soap *soap, struct cusdk__UserGetDeviceByGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__UserGetDeviceByGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__UserGetDeviceByGroup(struct soap *soap, const struct cusdk__UserGetDeviceByGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UserGetDeviceByGroup(struct soap *soap, const char *tag, int id, const struct cusdk__UserGetDeviceByGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UserGetDeviceByGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__UserGetDeviceByGroup * SOAP_FMAC4 soap_in_cusdk__UserGetDeviceByGroup(struct soap *soap, const char *tag, struct cusdk__UserGetDeviceByGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__UserGetDeviceByGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UserGetDeviceByGroup, sizeof(struct cusdk__UserGetDeviceByGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__UserGetDeviceByGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:UserGetDeviceByGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__UserGetDeviceByGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UserGetDeviceByGroup, 0, sizeof(struct cusdk__UserGetDeviceByGroup), 0, soap_copy_cusdk__UserGetDeviceByGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__UserGetDeviceByGroup(struct soap *soap, const struct cusdk__UserGetDeviceByGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__UserGetDeviceByGroup);
	if (soap_out_cusdk__UserGetDeviceByGroup(soap, tag?tag:"cusdk:UserGetDeviceByGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__UserGetDeviceByGroup * SOAP_FMAC4 soap_get_cusdk__UserGetDeviceByGroup(struct soap *soap, struct cusdk__UserGetDeviceByGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UserGetDeviceByGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__UserGetDeviceByGroup * SOAP_FMAC2 soap_instantiate_cusdk__UserGetDeviceByGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UserGetDeviceByGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UserGetDeviceByGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UserGetDeviceByGroup);
		if (size)
			*size = sizeof(struct cusdk__UserGetDeviceByGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UserGetDeviceByGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__UserGetDeviceByGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__UserGetDeviceByGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UserGetDeviceByGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__UserGetDeviceByGroup %p -> %p\n", q, p));
	*(struct cusdk__UserGetDeviceByGroup*)p = *(struct cusdk__UserGetDeviceByGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__ModifyUser(struct soap *soap, struct cusdk__ModifyUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__ModifyUserReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__ModifyUser(struct soap *soap, const struct cusdk__ModifyUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyUser(struct soap *soap, const char *tag, int id, const struct cusdk__ModifyUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyUser), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__ModifyUser * SOAP_FMAC4 soap_in_cusdk__ModifyUser(struct soap *soap, const char *tag, struct cusdk__ModifyUser *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__ModifyUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyUser, sizeof(struct cusdk__ModifyUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__ModifyUser(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:ModifyUserReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__ModifyUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyUser, 0, sizeof(struct cusdk__ModifyUser), 0, soap_copy_cusdk__ModifyUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__ModifyUser(struct soap *soap, const struct cusdk__ModifyUser *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyUser);
	if (soap_out_cusdk__ModifyUser(soap, tag?tag:"cusdk:ModifyUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__ModifyUser * SOAP_FMAC4 soap_get_cusdk__ModifyUser(struct soap *soap, struct cusdk__ModifyUser *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__ModifyUser * SOAP_FMAC2 soap_instantiate_cusdk__ModifyUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__ModifyUser);
		if (size)
			*size = sizeof(struct cusdk__ModifyUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__ModifyUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__ModifyUser);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__ModifyUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__ModifyUser %p -> %p\n", q, p));
	*(struct cusdk__ModifyUser*)p = *(struct cusdk__ModifyUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__DelUser(struct soap *soap, struct cusdk__DelUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__DelUserReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__DelUser(struct soap *soap, const struct cusdk__DelUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelUser(struct soap *soap, const char *tag, int id, const struct cusdk__DelUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelUser), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__DelUser * SOAP_FMAC4 soap_in_cusdk__DelUser(struct soap *soap, const char *tag, struct cusdk__DelUser *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__DelUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelUser, sizeof(struct cusdk__DelUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__DelUser(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:DelUserReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__DelUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelUser, 0, sizeof(struct cusdk__DelUser), 0, soap_copy_cusdk__DelUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__DelUser(struct soap *soap, const struct cusdk__DelUser *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__DelUser);
	if (soap_out_cusdk__DelUser(soap, tag?tag:"cusdk:DelUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__DelUser * SOAP_FMAC4 soap_get_cusdk__DelUser(struct soap *soap, struct cusdk__DelUser *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__DelUser * SOAP_FMAC2 soap_instantiate_cusdk__DelUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DelUser);
		if (size)
			*size = sizeof(struct cusdk__DelUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DelUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__DelUser);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__DelUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__DelUser %p -> %p\n", q, p));
	*(struct cusdk__DelUser*)p = *(struct cusdk__DelUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__CreateUser(struct soap *soap, struct cusdk__CreateUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__CreateUserReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__CreateUser(struct soap *soap, const struct cusdk__CreateUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__CreateUser(struct soap *soap, const char *tag, int id, const struct cusdk__CreateUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__CreateUser), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__CreateUser * SOAP_FMAC4 soap_in_cusdk__CreateUser(struct soap *soap, const char *tag, struct cusdk__CreateUser *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__CreateUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__CreateUser, sizeof(struct cusdk__CreateUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__CreateUser(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:CreateUserReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__CreateUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__CreateUser, 0, sizeof(struct cusdk__CreateUser), 0, soap_copy_cusdk__CreateUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__CreateUser(struct soap *soap, const struct cusdk__CreateUser *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__CreateUser);
	if (soap_out_cusdk__CreateUser(soap, tag?tag:"cusdk:CreateUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__CreateUser * SOAP_FMAC4 soap_get_cusdk__CreateUser(struct soap *soap, struct cusdk__CreateUser *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__CreateUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__CreateUser * SOAP_FMAC2 soap_instantiate_cusdk__CreateUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__CreateUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__CreateUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__CreateUser);
		if (size)
			*size = sizeof(struct cusdk__CreateUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__CreateUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__CreateUser);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__CreateUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__CreateUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__CreateUser %p -> %p\n", q, p));
	*(struct cusdk__CreateUser*)p = *(struct cusdk__CreateUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__ModifyUserGroup(struct soap *soap, struct cusdk__ModifyUserGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__ModifyUserGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__ModifyUserGroup(struct soap *soap, const struct cusdk__ModifyUserGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyUserGroup(struct soap *soap, const char *tag, int id, const struct cusdk__ModifyUserGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyUserGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__ModifyUserGroup * SOAP_FMAC4 soap_in_cusdk__ModifyUserGroup(struct soap *soap, const char *tag, struct cusdk__ModifyUserGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__ModifyUserGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyUserGroup, sizeof(struct cusdk__ModifyUserGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__ModifyUserGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:ModifyUserGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__ModifyUserGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyUserGroup, 0, sizeof(struct cusdk__ModifyUserGroup), 0, soap_copy_cusdk__ModifyUserGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__ModifyUserGroup(struct soap *soap, const struct cusdk__ModifyUserGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyUserGroup);
	if (soap_out_cusdk__ModifyUserGroup(soap, tag?tag:"cusdk:ModifyUserGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__ModifyUserGroup * SOAP_FMAC4 soap_get_cusdk__ModifyUserGroup(struct soap *soap, struct cusdk__ModifyUserGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyUserGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__ModifyUserGroup * SOAP_FMAC2 soap_instantiate_cusdk__ModifyUserGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyUserGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyUserGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__ModifyUserGroup);
		if (size)
			*size = sizeof(struct cusdk__ModifyUserGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__ModifyUserGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__ModifyUserGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__ModifyUserGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyUserGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__ModifyUserGroup %p -> %p\n", q, p));
	*(struct cusdk__ModifyUserGroup*)p = *(struct cusdk__ModifyUserGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__DelUserGroup(struct soap *soap, struct cusdk__DelUserGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__DelUserGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__DelUserGroup(struct soap *soap, const struct cusdk__DelUserGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelUserGroup(struct soap *soap, const char *tag, int id, const struct cusdk__DelUserGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelUserGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__DelUserGroup * SOAP_FMAC4 soap_in_cusdk__DelUserGroup(struct soap *soap, const char *tag, struct cusdk__DelUserGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__DelUserGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelUserGroup, sizeof(struct cusdk__DelUserGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__DelUserGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:DelUserGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__DelUserGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelUserGroup, 0, sizeof(struct cusdk__DelUserGroup), 0, soap_copy_cusdk__DelUserGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__DelUserGroup(struct soap *soap, const struct cusdk__DelUserGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__DelUserGroup);
	if (soap_out_cusdk__DelUserGroup(soap, tag?tag:"cusdk:DelUserGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__DelUserGroup * SOAP_FMAC4 soap_get_cusdk__DelUserGroup(struct soap *soap, struct cusdk__DelUserGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelUserGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__DelUserGroup * SOAP_FMAC2 soap_instantiate_cusdk__DelUserGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelUserGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelUserGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DelUserGroup);
		if (size)
			*size = sizeof(struct cusdk__DelUserGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DelUserGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__DelUserGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__DelUserGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelUserGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__DelUserGroup %p -> %p\n", q, p));
	*(struct cusdk__DelUserGroup*)p = *(struct cusdk__DelUserGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__CreateUserGroup(struct soap *soap, struct cusdk__CreateUserGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__CreateUserGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__CreateUserGroup(struct soap *soap, const struct cusdk__CreateUserGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__CreateUserGroup(struct soap *soap, const char *tag, int id, const struct cusdk__CreateUserGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__CreateUserGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__CreateUserGroup * SOAP_FMAC4 soap_in_cusdk__CreateUserGroup(struct soap *soap, const char *tag, struct cusdk__CreateUserGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__CreateUserGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__CreateUserGroup, sizeof(struct cusdk__CreateUserGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__CreateUserGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:CreateUserGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__CreateUserGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__CreateUserGroup, 0, sizeof(struct cusdk__CreateUserGroup), 0, soap_copy_cusdk__CreateUserGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__CreateUserGroup(struct soap *soap, const struct cusdk__CreateUserGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__CreateUserGroup);
	if (soap_out_cusdk__CreateUserGroup(soap, tag?tag:"cusdk:CreateUserGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__CreateUserGroup * SOAP_FMAC4 soap_get_cusdk__CreateUserGroup(struct soap *soap, struct cusdk__CreateUserGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__CreateUserGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__CreateUserGroup * SOAP_FMAC2 soap_instantiate_cusdk__CreateUserGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__CreateUserGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__CreateUserGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__CreateUserGroup);
		if (size)
			*size = sizeof(struct cusdk__CreateUserGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__CreateUserGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__CreateUserGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__CreateUserGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__CreateUserGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__CreateUserGroup %p -> %p\n", q, p));
	*(struct cusdk__CreateUserGroup*)p = *(struct cusdk__CreateUserGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserGroupList(struct soap *soap, struct cusdk__GetUserGroupList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetUserGroupListReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserGroupList(struct soap *soap, const struct cusdk__GetUserGroupList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserGroupList(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserGroupList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserGroupList), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserGroupList * SOAP_FMAC4 soap_in_cusdk__GetUserGroupList(struct soap *soap, const char *tag, struct cusdk__GetUserGroupList *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserGroupList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserGroupList, sizeof(struct cusdk__GetUserGroupList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserGroupList(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetUserGroupListReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserGroupList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserGroupList, 0, sizeof(struct cusdk__GetUserGroupList), 0, soap_copy_cusdk__GetUserGroupList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserGroupList(struct soap *soap, const struct cusdk__GetUserGroupList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserGroupList);
	if (soap_out_cusdk__GetUserGroupList(soap, tag?tag:"cusdk:GetUserGroupList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserGroupList * SOAP_FMAC4 soap_get_cusdk__GetUserGroupList(struct soap *soap, struct cusdk__GetUserGroupList *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserGroupList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserGroupList * SOAP_FMAC2 soap_instantiate_cusdk__GetUserGroupList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserGroupList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserGroupList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserGroupList);
		if (size)
			*size = sizeof(struct cusdk__GetUserGroupList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserGroupList[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserGroupList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserGroupList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserGroupList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserGroupList %p -> %p\n", q, p));
	*(struct cusdk__GetUserGroupList*)p = *(struct cusdk__GetUserGroupList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserList(struct soap *soap, struct cusdk__GetUserList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetUserListReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserList(struct soap *soap, const struct cusdk__GetUserList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserList(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserList), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserList * SOAP_FMAC4 soap_in_cusdk__GetUserList(struct soap *soap, const char *tag, struct cusdk__GetUserList *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserList, sizeof(struct cusdk__GetUserList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserList(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetUserListReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserList, 0, sizeof(struct cusdk__GetUserList), 0, soap_copy_cusdk__GetUserList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserList(struct soap *soap, const struct cusdk__GetUserList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserList);
	if (soap_out_cusdk__GetUserList(soap, tag?tag:"cusdk:GetUserList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserList * SOAP_FMAC4 soap_get_cusdk__GetUserList(struct soap *soap, struct cusdk__GetUserList *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserList * SOAP_FMAC2 soap_instantiate_cusdk__GetUserList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserList);
		if (size)
			*size = sizeof(struct cusdk__GetUserList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserList[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserList %p -> %p\n", q, p));
	*(struct cusdk__GetUserList*)p = *(struct cusdk__GetUserList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__DeviceGroupDelDevice(struct soap *soap, struct cusdk__DeviceGroupDelDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__DeviceGroupDelDeviceReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__DeviceGroupDelDevice(struct soap *soap, const struct cusdk__DeviceGroupDelDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceGroupDelDevice(struct soap *soap, const char *tag, int id, const struct cusdk__DeviceGroupDelDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceGroupDelDevice), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__DeviceGroupDelDevice * SOAP_FMAC4 soap_in_cusdk__DeviceGroupDelDevice(struct soap *soap, const char *tag, struct cusdk__DeviceGroupDelDevice *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__DeviceGroupDelDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceGroupDelDevice, sizeof(struct cusdk__DeviceGroupDelDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__DeviceGroupDelDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:DeviceGroupDelDeviceReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__DeviceGroupDelDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceGroupDelDevice, 0, sizeof(struct cusdk__DeviceGroupDelDevice), 0, soap_copy_cusdk__DeviceGroupDelDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__DeviceGroupDelDevice(struct soap *soap, const struct cusdk__DeviceGroupDelDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceGroupDelDevice);
	if (soap_out_cusdk__DeviceGroupDelDevice(soap, tag?tag:"cusdk:DeviceGroupDelDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__DeviceGroupDelDevice * SOAP_FMAC4 soap_get_cusdk__DeviceGroupDelDevice(struct soap *soap, struct cusdk__DeviceGroupDelDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceGroupDelDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__DeviceGroupDelDevice * SOAP_FMAC2 soap_instantiate_cusdk__DeviceGroupDelDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceGroupDelDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceGroupDelDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DeviceGroupDelDevice);
		if (size)
			*size = sizeof(struct cusdk__DeviceGroupDelDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DeviceGroupDelDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__DeviceGroupDelDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__DeviceGroupDelDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceGroupDelDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__DeviceGroupDelDevice %p -> %p\n", q, p));
	*(struct cusdk__DeviceGroupDelDevice*)p = *(struct cusdk__DeviceGroupDelDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__DeviceGroupAddDevice(struct soap *soap, struct cusdk__DeviceGroupAddDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__DeviceGroupAddDeviceReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__DeviceGroupAddDevice(struct soap *soap, const struct cusdk__DeviceGroupAddDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DeviceGroupAddDevice(struct soap *soap, const char *tag, int id, const struct cusdk__DeviceGroupAddDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DeviceGroupAddDevice), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__DeviceGroupAddDevice * SOAP_FMAC4 soap_in_cusdk__DeviceGroupAddDevice(struct soap *soap, const char *tag, struct cusdk__DeviceGroupAddDevice *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__DeviceGroupAddDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DeviceGroupAddDevice, sizeof(struct cusdk__DeviceGroupAddDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__DeviceGroupAddDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:DeviceGroupAddDeviceReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__DeviceGroupAddDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DeviceGroupAddDevice, 0, sizeof(struct cusdk__DeviceGroupAddDevice), 0, soap_copy_cusdk__DeviceGroupAddDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__DeviceGroupAddDevice(struct soap *soap, const struct cusdk__DeviceGroupAddDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__DeviceGroupAddDevice);
	if (soap_out_cusdk__DeviceGroupAddDevice(soap, tag?tag:"cusdk:DeviceGroupAddDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__DeviceGroupAddDevice * SOAP_FMAC4 soap_get_cusdk__DeviceGroupAddDevice(struct soap *soap, struct cusdk__DeviceGroupAddDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DeviceGroupAddDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__DeviceGroupAddDevice * SOAP_FMAC2 soap_instantiate_cusdk__DeviceGroupAddDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DeviceGroupAddDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DeviceGroupAddDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DeviceGroupAddDevice);
		if (size)
			*size = sizeof(struct cusdk__DeviceGroupAddDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DeviceGroupAddDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__DeviceGroupAddDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__DeviceGroupAddDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DeviceGroupAddDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__DeviceGroupAddDevice %p -> %p\n", q, p));
	*(struct cusdk__DeviceGroupAddDevice*)p = *(struct cusdk__DeviceGroupAddDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__ModifyDeviceGroup(struct soap *soap, struct cusdk__ModifyDeviceGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__ModifyDeviceGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__ModifyDeviceGroup(struct soap *soap, const struct cusdk__ModifyDeviceGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__ModifyDeviceGroup(struct soap *soap, const char *tag, int id, const struct cusdk__ModifyDeviceGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__ModifyDeviceGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__ModifyDeviceGroup * SOAP_FMAC4 soap_in_cusdk__ModifyDeviceGroup(struct soap *soap, const char *tag, struct cusdk__ModifyDeviceGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__ModifyDeviceGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__ModifyDeviceGroup, sizeof(struct cusdk__ModifyDeviceGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__ModifyDeviceGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:ModifyDeviceGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__ModifyDeviceGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__ModifyDeviceGroup, 0, sizeof(struct cusdk__ModifyDeviceGroup), 0, soap_copy_cusdk__ModifyDeviceGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__ModifyDeviceGroup(struct soap *soap, const struct cusdk__ModifyDeviceGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__ModifyDeviceGroup);
	if (soap_out_cusdk__ModifyDeviceGroup(soap, tag?tag:"cusdk:ModifyDeviceGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__ModifyDeviceGroup * SOAP_FMAC4 soap_get_cusdk__ModifyDeviceGroup(struct soap *soap, struct cusdk__ModifyDeviceGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__ModifyDeviceGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__ModifyDeviceGroup * SOAP_FMAC2 soap_instantiate_cusdk__ModifyDeviceGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__ModifyDeviceGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__ModifyDeviceGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__ModifyDeviceGroup);
		if (size)
			*size = sizeof(struct cusdk__ModifyDeviceGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__ModifyDeviceGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__ModifyDeviceGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__ModifyDeviceGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__ModifyDeviceGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__ModifyDeviceGroup %p -> %p\n", q, p));
	*(struct cusdk__ModifyDeviceGroup*)p = *(struct cusdk__ModifyDeviceGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__DelDeviceGroup(struct soap *soap, struct cusdk__DelDeviceGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__DelDeviceGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__DelDeviceGroup(struct soap *soap, const struct cusdk__DelDeviceGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__DelDeviceGroup(struct soap *soap, const char *tag, int id, const struct cusdk__DelDeviceGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__DelDeviceGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__DelDeviceGroup * SOAP_FMAC4 soap_in_cusdk__DelDeviceGroup(struct soap *soap, const char *tag, struct cusdk__DelDeviceGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__DelDeviceGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__DelDeviceGroup, sizeof(struct cusdk__DelDeviceGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__DelDeviceGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:DelDeviceGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__DelDeviceGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__DelDeviceGroup, 0, sizeof(struct cusdk__DelDeviceGroup), 0, soap_copy_cusdk__DelDeviceGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__DelDeviceGroup(struct soap *soap, const struct cusdk__DelDeviceGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__DelDeviceGroup);
	if (soap_out_cusdk__DelDeviceGroup(soap, tag?tag:"cusdk:DelDeviceGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__DelDeviceGroup * SOAP_FMAC4 soap_get_cusdk__DelDeviceGroup(struct soap *soap, struct cusdk__DelDeviceGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__DelDeviceGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__DelDeviceGroup * SOAP_FMAC2 soap_instantiate_cusdk__DelDeviceGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__DelDeviceGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__DelDeviceGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DelDeviceGroup);
		if (size)
			*size = sizeof(struct cusdk__DelDeviceGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__DelDeviceGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__DelDeviceGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__DelDeviceGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__DelDeviceGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__DelDeviceGroup %p -> %p\n", q, p));
	*(struct cusdk__DelDeviceGroup*)p = *(struct cusdk__DelDeviceGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__CreateDeviceGroup(struct soap *soap, struct cusdk__CreateDeviceGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__CreateDeviceGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__CreateDeviceGroup(struct soap *soap, const struct cusdk__CreateDeviceGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__CreateDeviceGroup(struct soap *soap, const char *tag, int id, const struct cusdk__CreateDeviceGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__CreateDeviceGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__CreateDeviceGroup * SOAP_FMAC4 soap_in_cusdk__CreateDeviceGroup(struct soap *soap, const char *tag, struct cusdk__CreateDeviceGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__CreateDeviceGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__CreateDeviceGroup, sizeof(struct cusdk__CreateDeviceGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__CreateDeviceGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:CreateDeviceGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__CreateDeviceGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__CreateDeviceGroup, 0, sizeof(struct cusdk__CreateDeviceGroup), 0, soap_copy_cusdk__CreateDeviceGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__CreateDeviceGroup(struct soap *soap, const struct cusdk__CreateDeviceGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__CreateDeviceGroup);
	if (soap_out_cusdk__CreateDeviceGroup(soap, tag?tag:"cusdk:CreateDeviceGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__CreateDeviceGroup * SOAP_FMAC4 soap_get_cusdk__CreateDeviceGroup(struct soap *soap, struct cusdk__CreateDeviceGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__CreateDeviceGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__CreateDeviceGroup * SOAP_FMAC2 soap_instantiate_cusdk__CreateDeviceGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__CreateDeviceGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__CreateDeviceGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__CreateDeviceGroup);
		if (size)
			*size = sizeof(struct cusdk__CreateDeviceGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__CreateDeviceGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__CreateDeviceGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__CreateDeviceGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__CreateDeviceGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__CreateDeviceGroup %p -> %p\n", q, p));
	*(struct cusdk__CreateDeviceGroup*)p = *(struct cusdk__CreateDeviceGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetDeviceGroupDeviceRelations(struct soap *soap, struct cusdk__GetDeviceGroupDeviceRelations *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetDeviceGroupDeviceRelationsReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetDeviceGroupDeviceRelations(struct soap *soap, const struct cusdk__GetDeviceGroupDeviceRelations *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDeviceGroupDeviceRelations(struct soap *soap, const char *tag, int id, const struct cusdk__GetDeviceGroupDeviceRelations *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetDeviceGroupDeviceRelations * SOAP_FMAC4 soap_in_cusdk__GetDeviceGroupDeviceRelations(struct soap *soap, const char *tag, struct cusdk__GetDeviceGroupDeviceRelations *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetDeviceGroupDeviceRelations *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations, sizeof(struct cusdk__GetDeviceGroupDeviceRelations), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetDeviceGroupDeviceRelations(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetDeviceGroupDeviceRelationsReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetDeviceGroupDeviceRelations *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations, 0, sizeof(struct cusdk__GetDeviceGroupDeviceRelations), 0, soap_copy_cusdk__GetDeviceGroupDeviceRelations);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetDeviceGroupDeviceRelations(struct soap *soap, const struct cusdk__GetDeviceGroupDeviceRelations *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations);
	if (soap_out_cusdk__GetDeviceGroupDeviceRelations(soap, tag?tag:"cusdk:GetDeviceGroupDeviceRelations", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetDeviceGroupDeviceRelations * SOAP_FMAC4 soap_get_cusdk__GetDeviceGroupDeviceRelations(struct soap *soap, struct cusdk__GetDeviceGroupDeviceRelations *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDeviceGroupDeviceRelations(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetDeviceGroupDeviceRelations * SOAP_FMAC2 soap_instantiate_cusdk__GetDeviceGroupDeviceRelations(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDeviceGroupDeviceRelations(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetDeviceGroupDeviceRelations);
		if (size)
			*size = sizeof(struct cusdk__GetDeviceGroupDeviceRelations);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetDeviceGroupDeviceRelations[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetDeviceGroupDeviceRelations);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetDeviceGroupDeviceRelations*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDeviceGroupDeviceRelations(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetDeviceGroupDeviceRelations %p -> %p\n", q, p));
	*(struct cusdk__GetDeviceGroupDeviceRelations*)p = *(struct cusdk__GetDeviceGroupDeviceRelations*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserDevByDomain(struct soap *soap, struct cusdk__GetUserDevByDomain *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetDevByDomainReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserDevByDomain(struct soap *soap, const struct cusdk__GetUserDevByDomain *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevByDomain(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserDevByDomain *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevByDomain), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserDevByDomain * SOAP_FMAC4 soap_in_cusdk__GetUserDevByDomain(struct soap *soap, const char *tag, struct cusdk__GetUserDevByDomain *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserDevByDomain *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevByDomain, sizeof(struct cusdk__GetUserDevByDomain), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserDevByDomain(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetDevByDomainReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserDevByDomain *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevByDomain, 0, sizeof(struct cusdk__GetUserDevByDomain), 0, soap_copy_cusdk__GetUserDevByDomain);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserDevByDomain(struct soap *soap, const struct cusdk__GetUserDevByDomain *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevByDomain);
	if (soap_out_cusdk__GetUserDevByDomain(soap, tag?tag:"cusdk:GetUserDevByDomain", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserDevByDomain * SOAP_FMAC4 soap_get_cusdk__GetUserDevByDomain(struct soap *soap, struct cusdk__GetUserDevByDomain *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevByDomain(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserDevByDomain * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevByDomain(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevByDomain(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevByDomain, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDevByDomain);
		if (size)
			*size = sizeof(struct cusdk__GetUserDevByDomain);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDevByDomain[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserDevByDomain);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserDevByDomain*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevByDomain(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserDevByDomain %p -> %p\n", q, p));
	*(struct cusdk__GetUserDevByDomain*)p = *(struct cusdk__GetUserDevByDomain*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserDev(struct soap *soap, struct cusdk__GetUserDev *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetUserDevReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserDev(struct soap *soap, const struct cusdk__GetUserDev *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDev(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserDev *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDev), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserDev * SOAP_FMAC4 soap_in_cusdk__GetUserDev(struct soap *soap, const char *tag, struct cusdk__GetUserDev *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserDev *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDev, sizeof(struct cusdk__GetUserDev), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserDev(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetUserDevReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserDev *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDev, 0, sizeof(struct cusdk__GetUserDev), 0, soap_copy_cusdk__GetUserDev);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserDev(struct soap *soap, const struct cusdk__GetUserDev *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDev);
	if (soap_out_cusdk__GetUserDev(soap, tag?tag:"cusdk:GetUserDev", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserDev * SOAP_FMAC4 soap_get_cusdk__GetUserDev(struct soap *soap, struct cusdk__GetUserDev *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDev(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserDev * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDev(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDev(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDev, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDev);
		if (size)
			*size = sizeof(struct cusdk__GetUserDev);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDev[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserDev);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserDev*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDev(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserDev %p -> %p\n", q, p));
	*(struct cusdk__GetUserDev*)p = *(struct cusdk__GetUserDev*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetDomainDevGroup(struct soap *soap, struct cusdk__GetDomainDevGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetDomainDevGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetDomainDevGroup(struct soap *soap, const struct cusdk__GetDomainDevGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetDomainDevGroup(struct soap *soap, const char *tag, int id, const struct cusdk__GetDomainDevGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetDomainDevGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetDomainDevGroup * SOAP_FMAC4 soap_in_cusdk__GetDomainDevGroup(struct soap *soap, const char *tag, struct cusdk__GetDomainDevGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetDomainDevGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetDomainDevGroup, sizeof(struct cusdk__GetDomainDevGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetDomainDevGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetDomainDevGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetDomainDevGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetDomainDevGroup, 0, sizeof(struct cusdk__GetDomainDevGroup), 0, soap_copy_cusdk__GetDomainDevGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetDomainDevGroup(struct soap *soap, const struct cusdk__GetDomainDevGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetDomainDevGroup);
	if (soap_out_cusdk__GetDomainDevGroup(soap, tag?tag:"cusdk:GetDomainDevGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetDomainDevGroup * SOAP_FMAC4 soap_get_cusdk__GetDomainDevGroup(struct soap *soap, struct cusdk__GetDomainDevGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetDomainDevGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetDomainDevGroup * SOAP_FMAC2 soap_instantiate_cusdk__GetDomainDevGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetDomainDevGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetDomainDevGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetDomainDevGroup);
		if (size)
			*size = sizeof(struct cusdk__GetDomainDevGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetDomainDevGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetDomainDevGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetDomainDevGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetDomainDevGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetDomainDevGroup %p -> %p\n", q, p));
	*(struct cusdk__GetDomainDevGroup*)p = *(struct cusdk__GetDomainDevGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserDevGroup(struct soap *soap, struct cusdk__GetUserDevGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetUserDevGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserDevGroup(struct soap *soap, const struct cusdk__GetUserDevGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevGroup(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserDevGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserDevGroup * SOAP_FMAC4 soap_in_cusdk__GetUserDevGroup(struct soap *soap, const char *tag, struct cusdk__GetUserDevGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserDevGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevGroup, sizeof(struct cusdk__GetUserDevGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserDevGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetUserDevGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserDevGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevGroup, 0, sizeof(struct cusdk__GetUserDevGroup), 0, soap_copy_cusdk__GetUserDevGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserDevGroup(struct soap *soap, const struct cusdk__GetUserDevGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevGroup);
	if (soap_out_cusdk__GetUserDevGroup(soap, tag?tag:"cusdk:GetUserDevGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserDevGroup * SOAP_FMAC4 soap_get_cusdk__GetUserDevGroup(struct soap *soap, struct cusdk__GetUserDevGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserDevGroup * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDevGroup);
		if (size)
			*size = sizeof(struct cusdk__GetUserDevGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDevGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserDevGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserDevGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserDevGroup %p -> %p\n", q, p));
	*(struct cusdk__GetUserDevGroup*)p = *(struct cusdk__GetUserDevGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserDevByGroup(struct soap *soap, struct cusdk__GetUserDevByGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetUserDevByGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserDevByGroup(struct soap *soap, const struct cusdk__GetUserDevByGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevByGroup(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserDevByGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevByGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserDevByGroup * SOAP_FMAC4 soap_in_cusdk__GetUserDevByGroup(struct soap *soap, const char *tag, struct cusdk__GetUserDevByGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserDevByGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevByGroup, sizeof(struct cusdk__GetUserDevByGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserDevByGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetUserDevByGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserDevByGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevByGroup, 0, sizeof(struct cusdk__GetUserDevByGroup), 0, soap_copy_cusdk__GetUserDevByGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserDevByGroup(struct soap *soap, const struct cusdk__GetUserDevByGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevByGroup);
	if (soap_out_cusdk__GetUserDevByGroup(soap, tag?tag:"cusdk:GetUserDevByGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserDevByGroup * SOAP_FMAC4 soap_get_cusdk__GetUserDevByGroup(struct soap *soap, struct cusdk__GetUserDevByGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevByGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserDevByGroup * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevByGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevByGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevByGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDevByGroup);
		if (size)
			*size = sizeof(struct cusdk__GetUserDevByGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDevByGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserDevByGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserDevByGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevByGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserDevByGroup %p -> %p\n", q, p));
	*(struct cusdk__GetUserDevByGroup*)p = *(struct cusdk__GetUserDevByGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserDevGroupByGroup(struct soap *soap, struct cusdk__GetUserDevGroupByGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetUserDevGroupByGroupReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserDevGroupByGroup(struct soap *soap, const struct cusdk__GetUserDevGroupByGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserDevGroupByGroup(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserDevGroupByGroup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserDevGroupByGroup), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserDevGroupByGroup * SOAP_FMAC4 soap_in_cusdk__GetUserDevGroupByGroup(struct soap *soap, const char *tag, struct cusdk__GetUserDevGroupByGroup *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserDevGroupByGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserDevGroupByGroup, sizeof(struct cusdk__GetUserDevGroupByGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserDevGroupByGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetUserDevGroupByGroupReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserDevGroupByGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserDevGroupByGroup, 0, sizeof(struct cusdk__GetUserDevGroupByGroup), 0, soap_copy_cusdk__GetUserDevGroupByGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserDevGroupByGroup(struct soap *soap, const struct cusdk__GetUserDevGroupByGroup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserDevGroupByGroup);
	if (soap_out_cusdk__GetUserDevGroupByGroup(soap, tag?tag:"cusdk:GetUserDevGroupByGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserDevGroupByGroup * SOAP_FMAC4 soap_get_cusdk__GetUserDevGroupByGroup(struct soap *soap, struct cusdk__GetUserDevGroupByGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserDevGroupByGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserDevGroupByGroup * SOAP_FMAC2 soap_instantiate_cusdk__GetUserDevGroupByGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserDevGroupByGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserDevGroupByGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDevGroupByGroup);
		if (size)
			*size = sizeof(struct cusdk__GetUserDevGroupByGroup);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserDevGroupByGroup[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserDevGroupByGroup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserDevGroupByGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserDevGroupByGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserDevGroupByGroup %p -> %p\n", q, p));
	*(struct cusdk__GetUserDevGroupByGroup*)p = *(struct cusdk__GetUserDevGroupByGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__SetUserData(struct soap *soap, struct cusdk__SetUserData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__SetUserDataReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__SetUserData(struct soap *soap, const struct cusdk__SetUserData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SetUserData(struct soap *soap, const char *tag, int id, const struct cusdk__SetUserData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SetUserData), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__SetUserData * SOAP_FMAC4 soap_in_cusdk__SetUserData(struct soap *soap, const char *tag, struct cusdk__SetUserData *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__SetUserData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SetUserData, sizeof(struct cusdk__SetUserData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__SetUserData(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:SetUserDataReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__SetUserData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SetUserData, 0, sizeof(struct cusdk__SetUserData), 0, soap_copy_cusdk__SetUserData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__SetUserData(struct soap *soap, const struct cusdk__SetUserData *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__SetUserData);
	if (soap_out_cusdk__SetUserData(soap, tag?tag:"cusdk:SetUserData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__SetUserData * SOAP_FMAC4 soap_get_cusdk__SetUserData(struct soap *soap, struct cusdk__SetUserData *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SetUserData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__SetUserData * SOAP_FMAC2 soap_instantiate_cusdk__SetUserData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SetUserData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SetUserData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__SetUserData);
		if (size)
			*size = sizeof(struct cusdk__SetUserData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__SetUserData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__SetUserData);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__SetUserData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SetUserData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__SetUserData %p -> %p\n", q, p));
	*(struct cusdk__SetUserData*)p = *(struct cusdk__SetUserData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserData(struct soap *soap, struct cusdk__GetUserData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetUserDataReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserData(struct soap *soap, const struct cusdk__GetUserData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserData(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserData), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserData * SOAP_FMAC4 soap_in_cusdk__GetUserData(struct soap *soap, const char *tag, struct cusdk__GetUserData *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserData, sizeof(struct cusdk__GetUserData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserData(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetUserDataReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserData, 0, sizeof(struct cusdk__GetUserData), 0, soap_copy_cusdk__GetUserData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserData(struct soap *soap, const struct cusdk__GetUserData *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserData);
	if (soap_out_cusdk__GetUserData(soap, tag?tag:"cusdk:GetUserData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserData * SOAP_FMAC4 soap_get_cusdk__GetUserData(struct soap *soap, struct cusdk__GetUserData *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserData * SOAP_FMAC2 soap_instantiate_cusdk__GetUserData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserData);
		if (size)
			*size = sizeof(struct cusdk__GetUserData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserData);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserData %p -> %p\n", q, p));
	*(struct cusdk__GetUserData*)p = *(struct cusdk__GetUserData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserGroupInfo(struct soap *soap, struct cusdk__GetUserGroupInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetUserGroupInfoReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserGroupInfo(struct soap *soap, const struct cusdk__GetUserGroupInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserGroupInfo(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserGroupInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserGroupInfo), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserGroupInfo * SOAP_FMAC4 soap_in_cusdk__GetUserGroupInfo(struct soap *soap, const char *tag, struct cusdk__GetUserGroupInfo *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserGroupInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserGroupInfo, sizeof(struct cusdk__GetUserGroupInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserGroupInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetUserGroupInfoReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserGroupInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserGroupInfo, 0, sizeof(struct cusdk__GetUserGroupInfo), 0, soap_copy_cusdk__GetUserGroupInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserGroupInfo(struct soap *soap, const struct cusdk__GetUserGroupInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserGroupInfo);
	if (soap_out_cusdk__GetUserGroupInfo(soap, tag?tag:"cusdk:GetUserGroupInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserGroupInfo * SOAP_FMAC4 soap_get_cusdk__GetUserGroupInfo(struct soap *soap, struct cusdk__GetUserGroupInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserGroupInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserGroupInfo * SOAP_FMAC2 soap_instantiate_cusdk__GetUserGroupInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserGroupInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserGroupInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserGroupInfo);
		if (size)
			*size = sizeof(struct cusdk__GetUserGroupInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserGroupInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserGroupInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserGroupInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserGroupInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserGroupInfo %p -> %p\n", q, p));
	*(struct cusdk__GetUserGroupInfo*)p = *(struct cusdk__GetUserGroupInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetUserInfo(struct soap *soap, struct cusdk__GetUserInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetUserInfoReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetUserInfo(struct soap *soap, const struct cusdk__GetUserInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetUserInfo(struct soap *soap, const char *tag, int id, const struct cusdk__GetUserInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetUserInfo), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetUserInfo * SOAP_FMAC4 soap_in_cusdk__GetUserInfo(struct soap *soap, const char *tag, struct cusdk__GetUserInfo *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetUserInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetUserInfo, sizeof(struct cusdk__GetUserInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetUserInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetUserInfoReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetUserInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetUserInfo, 0, sizeof(struct cusdk__GetUserInfo), 0, soap_copy_cusdk__GetUserInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetUserInfo(struct soap *soap, const struct cusdk__GetUserInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetUserInfo);
	if (soap_out_cusdk__GetUserInfo(soap, tag?tag:"cusdk:GetUserInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetUserInfo * SOAP_FMAC4 soap_get_cusdk__GetUserInfo(struct soap *soap, struct cusdk__GetUserInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetUserInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetUserInfo * SOAP_FMAC2 soap_instantiate_cusdk__GetUserInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetUserInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetUserInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserInfo);
		if (size)
			*size = sizeof(struct cusdk__GetUserInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetUserInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetUserInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetUserInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetUserInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetUserInfo %p -> %p\n", q, p));
	*(struct cusdk__GetUserInfo*)p = *(struct cusdk__GetUserInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__SendTransData(struct soap *soap, struct cusdk__SendTransData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__SendTransDataReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__SendTransData(struct soap *soap, const struct cusdk__SendTransData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SendTransData(struct soap *soap, const char *tag, int id, const struct cusdk__SendTransData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SendTransData), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__SendTransData * SOAP_FMAC4 soap_in_cusdk__SendTransData(struct soap *soap, const char *tag, struct cusdk__SendTransData *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__SendTransData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SendTransData, sizeof(struct cusdk__SendTransData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__SendTransData(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:SendTransDataReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__SendTransData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SendTransData, 0, sizeof(struct cusdk__SendTransData), 0, soap_copy_cusdk__SendTransData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__SendTransData(struct soap *soap, const struct cusdk__SendTransData *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__SendTransData);
	if (soap_out_cusdk__SendTransData(soap, tag?tag:"cusdk:SendTransData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__SendTransData * SOAP_FMAC4 soap_get_cusdk__SendTransData(struct soap *soap, struct cusdk__SendTransData *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SendTransData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__SendTransData * SOAP_FMAC2 soap_instantiate_cusdk__SendTransData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SendTransData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SendTransData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__SendTransData);
		if (size)
			*size = sizeof(struct cusdk__SendTransData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__SendTransData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__SendTransData);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__SendTransData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SendTransData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__SendTransData %p -> %p\n", q, p));
	*(struct cusdk__SendTransData*)p = *(struct cusdk__SendTransData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__PtzUnlock(struct soap *soap, struct cusdk__PtzUnlock *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__PtzUnlockReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__PtzUnlock(struct soap *soap, const struct cusdk__PtzUnlock *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PtzUnlock(struct soap *soap, const char *tag, int id, const struct cusdk__PtzUnlock *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PtzUnlock), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__PtzUnlock * SOAP_FMAC4 soap_in_cusdk__PtzUnlock(struct soap *soap, const char *tag, struct cusdk__PtzUnlock *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__PtzUnlock *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PtzUnlock, sizeof(struct cusdk__PtzUnlock), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__PtzUnlock(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:PtzUnlockReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__PtzUnlock *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PtzUnlock, 0, sizeof(struct cusdk__PtzUnlock), 0, soap_copy_cusdk__PtzUnlock);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__PtzUnlock(struct soap *soap, const struct cusdk__PtzUnlock *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__PtzUnlock);
	if (soap_out_cusdk__PtzUnlock(soap, tag?tag:"cusdk:PtzUnlock", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__PtzUnlock * SOAP_FMAC4 soap_get_cusdk__PtzUnlock(struct soap *soap, struct cusdk__PtzUnlock *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PtzUnlock(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__PtzUnlock * SOAP_FMAC2 soap_instantiate_cusdk__PtzUnlock(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PtzUnlock(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PtzUnlock, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__PtzUnlock);
		if (size)
			*size = sizeof(struct cusdk__PtzUnlock);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__PtzUnlock[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__PtzUnlock);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__PtzUnlock*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PtzUnlock(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__PtzUnlock %p -> %p\n", q, p));
	*(struct cusdk__PtzUnlock*)p = *(struct cusdk__PtzUnlock*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__PtzLock(struct soap *soap, struct cusdk__PtzLock *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__PtzLockReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__PtzLock(struct soap *soap, const struct cusdk__PtzLock *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PtzLock(struct soap *soap, const char *tag, int id, const struct cusdk__PtzLock *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PtzLock), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__PtzLock * SOAP_FMAC4 soap_in_cusdk__PtzLock(struct soap *soap, const char *tag, struct cusdk__PtzLock *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__PtzLock *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PtzLock, sizeof(struct cusdk__PtzLock), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__PtzLock(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:PtzLockReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__PtzLock *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PtzLock, 0, sizeof(struct cusdk__PtzLock), 0, soap_copy_cusdk__PtzLock);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__PtzLock(struct soap *soap, const struct cusdk__PtzLock *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__PtzLock);
	if (soap_out_cusdk__PtzLock(soap, tag?tag:"cusdk:PtzLock", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__PtzLock * SOAP_FMAC4 soap_get_cusdk__PtzLock(struct soap *soap, struct cusdk__PtzLock *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PtzLock(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__PtzLock * SOAP_FMAC2 soap_instantiate_cusdk__PtzLock(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PtzLock(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PtzLock, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__PtzLock);
		if (size)
			*size = sizeof(struct cusdk__PtzLock);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__PtzLock[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__PtzLock);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__PtzLock*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PtzLock(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__PtzLock %p -> %p\n", q, p));
	*(struct cusdk__PtzLock*)p = *(struct cusdk__PtzLock*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__PtzCtrl(struct soap *soap, struct cusdk__PtzCtrl *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__PtzCtrlReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__PtzCtrl(struct soap *soap, const struct cusdk__PtzCtrl *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PtzCtrl(struct soap *soap, const char *tag, int id, const struct cusdk__PtzCtrl *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PtzCtrl), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__PtzCtrl * SOAP_FMAC4 soap_in_cusdk__PtzCtrl(struct soap *soap, const char *tag, struct cusdk__PtzCtrl *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__PtzCtrl *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PtzCtrl, sizeof(struct cusdk__PtzCtrl), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__PtzCtrl(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:PtzCtrlReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__PtzCtrl *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PtzCtrl, 0, sizeof(struct cusdk__PtzCtrl), 0, soap_copy_cusdk__PtzCtrl);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__PtzCtrl(struct soap *soap, const struct cusdk__PtzCtrl *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__PtzCtrl);
	if (soap_out_cusdk__PtzCtrl(soap, tag?tag:"cusdk:PtzCtrl", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__PtzCtrl * SOAP_FMAC4 soap_get_cusdk__PtzCtrl(struct soap *soap, struct cusdk__PtzCtrl *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PtzCtrl(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__PtzCtrl * SOAP_FMAC2 soap_instantiate_cusdk__PtzCtrl(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PtzCtrl(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PtzCtrl, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__PtzCtrl);
		if (size)
			*size = sizeof(struct cusdk__PtzCtrl);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__PtzCtrl[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__PtzCtrl);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__PtzCtrl*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PtzCtrl(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__PtzCtrl %p -> %p\n", q, p));
	*(struct cusdk__PtzCtrl*)p = *(struct cusdk__PtzCtrl*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__StopStream(struct soap *soap, struct cusdk__StopStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__StopStreamReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__StopStream(struct soap *soap, const struct cusdk__StopStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__StopStream(struct soap *soap, const char *tag, int id, const struct cusdk__StopStream *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__StopStream), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__StopStream * SOAP_FMAC4 soap_in_cusdk__StopStream(struct soap *soap, const char *tag, struct cusdk__StopStream *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__StopStream *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__StopStream, sizeof(struct cusdk__StopStream), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__StopStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:StopStreamReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__StopStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__StopStream, 0, sizeof(struct cusdk__StopStream), 0, soap_copy_cusdk__StopStream);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__StopStream(struct soap *soap, const struct cusdk__StopStream *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__StopStream);
	if (soap_out_cusdk__StopStream(soap, tag?tag:"cusdk:StopStream", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__StopStream * SOAP_FMAC4 soap_get_cusdk__StopStream(struct soap *soap, struct cusdk__StopStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__StopStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__StopStream * SOAP_FMAC2 soap_instantiate_cusdk__StopStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__StopStream(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__StopStream, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__StopStream);
		if (size)
			*size = sizeof(struct cusdk__StopStream);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__StopStream[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__StopStream);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__StopStream*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__StopStream(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__StopStream %p -> %p\n", q, p));
	*(struct cusdk__StopStream*)p = *(struct cusdk__StopStream*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__PlayStream(struct soap *soap, struct cusdk__PlayStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__PlayStreamReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__PlayStream(struct soap *soap, const struct cusdk__PlayStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__PlayStream(struct soap *soap, const char *tag, int id, const struct cusdk__PlayStream *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__PlayStream), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__PlayStream * SOAP_FMAC4 soap_in_cusdk__PlayStream(struct soap *soap, const char *tag, struct cusdk__PlayStream *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__PlayStream *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__PlayStream, sizeof(struct cusdk__PlayStream), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__PlayStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:PlayStreamReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__PlayStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__PlayStream, 0, sizeof(struct cusdk__PlayStream), 0, soap_copy_cusdk__PlayStream);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__PlayStream(struct soap *soap, const struct cusdk__PlayStream *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__PlayStream);
	if (soap_out_cusdk__PlayStream(soap, tag?tag:"cusdk:PlayStream", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__PlayStream * SOAP_FMAC4 soap_get_cusdk__PlayStream(struct soap *soap, struct cusdk__PlayStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__PlayStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__PlayStream * SOAP_FMAC2 soap_instantiate_cusdk__PlayStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__PlayStream(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__PlayStream, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__PlayStream);
		if (size)
			*size = sizeof(struct cusdk__PlayStream);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__PlayStream[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__PlayStream);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__PlayStream*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__PlayStream(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__PlayStream %p -> %p\n", q, p));
	*(struct cusdk__PlayStream*)p = *(struct cusdk__PlayStream*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__SetupStream(struct soap *soap, struct cusdk__SetupStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__SetupStreamReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__SetupStream(struct soap *soap, const struct cusdk__SetupStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SetupStream(struct soap *soap, const char *tag, int id, const struct cusdk__SetupStream *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SetupStream), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__SetupStream * SOAP_FMAC4 soap_in_cusdk__SetupStream(struct soap *soap, const char *tag, struct cusdk__SetupStream *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__SetupStream *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SetupStream, sizeof(struct cusdk__SetupStream), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__SetupStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:SetupStreamReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__SetupStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SetupStream, 0, sizeof(struct cusdk__SetupStream), 0, soap_copy_cusdk__SetupStream);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__SetupStream(struct soap *soap, const struct cusdk__SetupStream *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__SetupStream);
	if (soap_out_cusdk__SetupStream(soap, tag?tag:"cusdk:SetupStream", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__SetupStream * SOAP_FMAC4 soap_get_cusdk__SetupStream(struct soap *soap, struct cusdk__SetupStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SetupStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__SetupStream * SOAP_FMAC2 soap_instantiate_cusdk__SetupStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SetupStream(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SetupStream, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__SetupStream);
		if (size)
			*size = sizeof(struct cusdk__SetupStream);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__SetupStream[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__SetupStream);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__SetupStream*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SetupStream(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__SetupStream %p -> %p\n", q, p));
	*(struct cusdk__SetupStream*)p = *(struct cusdk__SetupStream*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetCUIList(struct soap *soap, struct cusdk__GetCUIList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetCUIListReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetCUIList(struct soap *soap, const struct cusdk__GetCUIList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetCUIList(struct soap *soap, const char *tag, int id, const struct cusdk__GetCUIList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetCUIList), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetCUIList * SOAP_FMAC4 soap_in_cusdk__GetCUIList(struct soap *soap, const char *tag, struct cusdk__GetCUIList *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetCUIList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetCUIList, sizeof(struct cusdk__GetCUIList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetCUIList(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetCUIListReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetCUIList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetCUIList, 0, sizeof(struct cusdk__GetCUIList), 0, soap_copy_cusdk__GetCUIList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetCUIList(struct soap *soap, const struct cusdk__GetCUIList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetCUIList);
	if (soap_out_cusdk__GetCUIList(soap, tag?tag:"cusdk:GetCUIList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetCUIList * SOAP_FMAC4 soap_get_cusdk__GetCUIList(struct soap *soap, struct cusdk__GetCUIList *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetCUIList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetCUIList * SOAP_FMAC2 soap_instantiate_cusdk__GetCUIList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetCUIList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetCUIList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetCUIList);
		if (size)
			*size = sizeof(struct cusdk__GetCUIList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetCUIList[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetCUIList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetCUIList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetCUIList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetCUIList %p -> %p\n", q, p));
	*(struct cusdk__GetCUIList*)p = *(struct cusdk__GetCUIList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__GetNotify(struct soap *soap, struct cusdk__GetNotify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.cusdk__GetNotifyReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__GetNotify(struct soap *soap, const struct cusdk__GetNotify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->req.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__GetNotify(struct soap *soap, const char *tag, int id, const struct cusdk__GetNotify *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__GetNotify), type))
		return soap->error;
	if (a->req.soap_out(soap, "cusdk:req", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__GetNotify * SOAP_FMAC4 soap_in_cusdk__GetNotify(struct soap *soap, const char *tag, struct cusdk__GetNotify *a, const char *type)
{
	size_t soap_flag_req = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__GetNotify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__GetNotify, sizeof(struct cusdk__GetNotify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__GetNotify(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_req && soap->error == SOAP_TAG_MISMATCH)
				if (a->req.soap_in(soap, "cusdk:req", "cusdk:GetNotifyReq"))
				{	soap_flag_req--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__GetNotify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__GetNotify, 0, sizeof(struct cusdk__GetNotify), 0, soap_copy_cusdk__GetNotify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_req > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__GetNotify(struct soap *soap, const struct cusdk__GetNotify *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__GetNotify);
	if (soap_out_cusdk__GetNotify(soap, tag?tag:"cusdk:GetNotify", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__GetNotify * SOAP_FMAC4 soap_get_cusdk__GetNotify(struct soap *soap, struct cusdk__GetNotify *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__GetNotify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__GetNotify * SOAP_FMAC2 soap_instantiate_cusdk__GetNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__GetNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__GetNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetNotify);
		if (size)
			*size = sizeof(struct cusdk__GetNotify);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__GetNotify[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__GetNotify);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__GetNotify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__GetNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__GetNotify %p -> %p\n", q, p));
	*(struct cusdk__GetNotify*)p = *(struct cusdk__GetNotify*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__UnsubscribePuStatus(struct soap *soap, struct cusdk__UnsubscribePuStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->unsubscribePuStatusReq.cusdk__UnsubscribePuStatusReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__UnsubscribePuStatus(struct soap *soap, const struct cusdk__UnsubscribePuStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->unsubscribePuStatusReq.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__UnsubscribePuStatus(struct soap *soap, const char *tag, int id, const struct cusdk__UnsubscribePuStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__UnsubscribePuStatus), type))
		return soap->error;
	if (a->unsubscribePuStatusReq.soap_out(soap, "cusdk:unsubscribePuStatusReq", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__UnsubscribePuStatus * SOAP_FMAC4 soap_in_cusdk__UnsubscribePuStatus(struct soap *soap, const char *tag, struct cusdk__UnsubscribePuStatus *a, const char *type)
{
	size_t soap_flag_unsubscribePuStatusReq = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__UnsubscribePuStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__UnsubscribePuStatus, sizeof(struct cusdk__UnsubscribePuStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__UnsubscribePuStatus(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_unsubscribePuStatusReq && soap->error == SOAP_TAG_MISMATCH)
				if (a->unsubscribePuStatusReq.soap_in(soap, "cusdk:unsubscribePuStatusReq", "cusdk:UnsubscribePuStatusReq"))
				{	soap_flag_unsubscribePuStatusReq--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__UnsubscribePuStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__UnsubscribePuStatus, 0, sizeof(struct cusdk__UnsubscribePuStatus), 0, soap_copy_cusdk__UnsubscribePuStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_unsubscribePuStatusReq > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__UnsubscribePuStatus(struct soap *soap, const struct cusdk__UnsubscribePuStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__UnsubscribePuStatus);
	if (soap_out_cusdk__UnsubscribePuStatus(soap, tag?tag:"cusdk:UnsubscribePuStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__UnsubscribePuStatus * SOAP_FMAC4 soap_get_cusdk__UnsubscribePuStatus(struct soap *soap, struct cusdk__UnsubscribePuStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__UnsubscribePuStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__UnsubscribePuStatus * SOAP_FMAC2 soap_instantiate_cusdk__UnsubscribePuStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__UnsubscribePuStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__UnsubscribePuStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UnsubscribePuStatus);
		if (size)
			*size = sizeof(struct cusdk__UnsubscribePuStatus);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__UnsubscribePuStatus[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__UnsubscribePuStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__UnsubscribePuStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__UnsubscribePuStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__UnsubscribePuStatus %p -> %p\n", q, p));
	*(struct cusdk__UnsubscribePuStatus*)p = *(struct cusdk__UnsubscribePuStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__SubscribePuStatus(struct soap *soap, struct cusdk__SubscribePuStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->subscribePuStatusReq.cusdk__SubscribePuStatusReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__SubscribePuStatus(struct soap *soap, const struct cusdk__SubscribePuStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->subscribePuStatusReq.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__SubscribePuStatus(struct soap *soap, const char *tag, int id, const struct cusdk__SubscribePuStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__SubscribePuStatus), type))
		return soap->error;
	if (a->subscribePuStatusReq.soap_out(soap, "cusdk:subscribePuStatusReq", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__SubscribePuStatus * SOAP_FMAC4 soap_in_cusdk__SubscribePuStatus(struct soap *soap, const char *tag, struct cusdk__SubscribePuStatus *a, const char *type)
{
	size_t soap_flag_subscribePuStatusReq = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__SubscribePuStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__SubscribePuStatus, sizeof(struct cusdk__SubscribePuStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__SubscribePuStatus(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_subscribePuStatusReq && soap->error == SOAP_TAG_MISMATCH)
				if (a->subscribePuStatusReq.soap_in(soap, "cusdk:subscribePuStatusReq", "cusdk:SubscribePuStatusReq"))
				{	soap_flag_subscribePuStatusReq--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__SubscribePuStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__SubscribePuStatus, 0, sizeof(struct cusdk__SubscribePuStatus), 0, soap_copy_cusdk__SubscribePuStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_subscribePuStatusReq > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__SubscribePuStatus(struct soap *soap, const struct cusdk__SubscribePuStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__SubscribePuStatus);
	if (soap_out_cusdk__SubscribePuStatus(soap, tag?tag:"cusdk:SubscribePuStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__SubscribePuStatus * SOAP_FMAC4 soap_get_cusdk__SubscribePuStatus(struct soap *soap, struct cusdk__SubscribePuStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__SubscribePuStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__SubscribePuStatus * SOAP_FMAC2 soap_instantiate_cusdk__SubscribePuStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__SubscribePuStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__SubscribePuStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__SubscribePuStatus);
		if (size)
			*size = sizeof(struct cusdk__SubscribePuStatus);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__SubscribePuStatus[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__SubscribePuStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__SubscribePuStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__SubscribePuStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__SubscribePuStatus %p -> %p\n", q, p));
	*(struct cusdk__SubscribePuStatus*)p = *(struct cusdk__SubscribePuStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__logout(struct soap *soap, struct cusdk__logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->logoutReq.cusdk__LogoutReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__logout(struct soap *soap, const struct cusdk__logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->logoutReq.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__logout(struct soap *soap, const char *tag, int id, const struct cusdk__logout *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__logout), type))
		return soap->error;
	if (a->logoutReq.soap_out(soap, "cusdk:logoutReq", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__logout * SOAP_FMAC4 soap_in_cusdk__logout(struct soap *soap, const char *tag, struct cusdk__logout *a, const char *type)
{
	size_t soap_flag_logoutReq = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__logout *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__logout, sizeof(struct cusdk__logout), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__logout(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_logoutReq && soap->error == SOAP_TAG_MISMATCH)
				if (a->logoutReq.soap_in(soap, "cusdk:logoutReq", "cusdk:LogoutReq"))
				{	soap_flag_logoutReq--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__logout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__logout, 0, sizeof(struct cusdk__logout), 0, soap_copy_cusdk__logout);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_logoutReq > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__logout(struct soap *soap, const struct cusdk__logout *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__logout);
	if (soap_out_cusdk__logout(soap, tag?tag:"cusdk:logout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__logout * SOAP_FMAC4 soap_get_cusdk__logout(struct soap *soap, struct cusdk__logout *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__logout * SOAP_FMAC2 soap_instantiate_cusdk__logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__logout, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__logout);
		if (size)
			*size = sizeof(struct cusdk__logout);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__logout[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__logout);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__logout %p -> %p\n", q, p));
	*(struct cusdk__logout*)p = *(struct cusdk__logout*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_cusdk__login(struct soap *soap, struct cusdk__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->loginReq.cusdk__LoginReq::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_cusdk__login(struct soap *soap, const struct cusdk__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->loginReq.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cusdk__login(struct soap *soap, const char *tag, int id, const struct cusdk__login *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cusdk__login), type))
		return soap->error;
	if (a->loginReq.soap_out(soap, "cusdk:loginReq", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct cusdk__login * SOAP_FMAC4 soap_in_cusdk__login(struct soap *soap, const char *tag, struct cusdk__login *a, const char *type)
{
	size_t soap_flag_loginReq = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct cusdk__login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cusdk__login, sizeof(struct cusdk__login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_cusdk__login(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_loginReq && soap->error == SOAP_TAG_MISMATCH)
				if (a->loginReq.soap_in(soap, "cusdk:loginReq", "cusdk:LoginReq"))
				{	soap_flag_loginReq--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct cusdk__login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cusdk__login, 0, sizeof(struct cusdk__login), 0, soap_copy_cusdk__login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginReq > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_cusdk__login(struct soap *soap, const struct cusdk__login *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cusdk__login);
	if (soap_out_cusdk__login(soap, tag?tag:"cusdk:login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct cusdk__login * SOAP_FMAC4 soap_get_cusdk__login(struct soap *soap, struct cusdk__login *p, const char *tag, const char *type)
{
	if ((p = soap_in_cusdk__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct cusdk__login * SOAP_FMAC2 soap_instantiate_cusdk__login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_cusdk__login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cusdk__login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__login);
		if (size)
			*size = sizeof(struct cusdk__login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct cusdk__login[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct cusdk__login);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct cusdk__login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cusdk__login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct cusdk__login %p -> %p\n", q, p));
	*(struct cusdk__login*)p = *(struct cusdk__login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(struct soap *soap, std::vector<cusdk__AuthorizationDeviceInfo >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(struct soap *soap, const std::vector<cusdk__AuthorizationDeviceInfo >*a)
{
	for (std::vector<cusdk__AuthorizationDeviceInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(struct soap *soap, const char *tag, int id, const std::vector<cusdk__AuthorizationDeviceInfo >*a, const char *type)
{
	for (std::vector<cusdk__AuthorizationDeviceInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__AuthorizationDeviceInfo >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(struct soap *soap, const char *tag, std::vector<cusdk__AuthorizationDeviceInfo >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(soap, -1)))
		return NULL;
	cusdk__AuthorizationDeviceInfo n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__AuthorizationDeviceInfo, SOAP_TYPE_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo, sizeof(cusdk__AuthorizationDeviceInfo), 0))
				break;
			if (!soap_in_cusdk__AuthorizationDeviceInfo(soap, tag, NULL, "cusdk:AuthorizationDeviceInfo"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__AuthorizationDeviceInfo(soap, tag, &n, "cusdk:AuthorizationDeviceInfo"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__AuthorizationDeviceInfo > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AuthorizationDeviceInfo >);
		if (size)
			*size = sizeof(std::vector<cusdk__AuthorizationDeviceInfo >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AuthorizationDeviceInfo >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__AuthorizationDeviceInfo >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__AuthorizationDeviceInfo >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__AuthorizationDeviceInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__AuthorizationDeviceInfo > %p -> %p\n", q, p));
	*(std::vector<cusdk__AuthorizationDeviceInfo >*)p = *(std::vector<cusdk__AuthorizationDeviceInfo >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__AssignDeviceInfo(struct soap *soap, std::vector<cusdk__AssignDeviceInfo >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__AssignDeviceInfo(struct soap *soap, const std::vector<cusdk__AssignDeviceInfo >*a)
{
	for (std::vector<cusdk__AssignDeviceInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__AssignDeviceInfo(struct soap *soap, const char *tag, int id, const std::vector<cusdk__AssignDeviceInfo >*a, const char *type)
{
	for (std::vector<cusdk__AssignDeviceInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__AssignDeviceInfo >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__AssignDeviceInfo(struct soap *soap, const char *tag, std::vector<cusdk__AssignDeviceInfo >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__AssignDeviceInfo(soap, -1)))
		return NULL;
	cusdk__AssignDeviceInfo n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__AssignDeviceInfo, SOAP_TYPE_std__vectorTemplateOfcusdk__AssignDeviceInfo, sizeof(cusdk__AssignDeviceInfo), 0))
				break;
			if (!soap_in_cusdk__AssignDeviceInfo(soap, tag, NULL, "cusdk:AssignDeviceInfo"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__AssignDeviceInfo(soap, tag, &n, "cusdk:AssignDeviceInfo"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__AssignDeviceInfo > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__AssignDeviceInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__AssignDeviceInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__AssignDeviceInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AssignDeviceInfo >);
		if (size)
			*size = sizeof(std::vector<cusdk__AssignDeviceInfo >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AssignDeviceInfo >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__AssignDeviceInfo >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__AssignDeviceInfo >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__AssignDeviceInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__AssignDeviceInfo > %p -> %p\n", q, p));
	*(std::vector<cusdk__AssignDeviceInfo >*)p = *(std::vector<cusdk__AssignDeviceInfo >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__UserGroup(struct soap *soap, std::vector<cusdk__UserGroup >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__UserGroup(struct soap *soap, const std::vector<cusdk__UserGroup >*a)
{
	for (std::vector<cusdk__UserGroup >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__UserGroup(struct soap *soap, const char *tag, int id, const std::vector<cusdk__UserGroup >*a, const char *type)
{
	for (std::vector<cusdk__UserGroup >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__UserGroup >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__UserGroup(struct soap *soap, const char *tag, std::vector<cusdk__UserGroup >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__UserGroup(soap, -1)))
		return NULL;
	cusdk__UserGroup n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__UserGroup, SOAP_TYPE_std__vectorTemplateOfcusdk__UserGroup, sizeof(cusdk__UserGroup), 0))
				break;
			if (!soap_in_cusdk__UserGroup(soap, tag, NULL, "cusdk:UserGroup"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__UserGroup(soap, tag, &n, "cusdk:UserGroup"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__UserGroup > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__UserGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__UserGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__UserGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__UserGroup >);
		if (size)
			*size = sizeof(std::vector<cusdk__UserGroup >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__UserGroup >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__UserGroup >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__UserGroup >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__UserGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__UserGroup > %p -> %p\n", q, p));
	*(std::vector<cusdk__UserGroup >*)p = *(std::vector<cusdk__UserGroup >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__UserInfo(struct soap *soap, std::vector<cusdk__UserInfo >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__UserInfo(struct soap *soap, const std::vector<cusdk__UserInfo >*a)
{
	for (std::vector<cusdk__UserInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__UserInfo(struct soap *soap, const char *tag, int id, const std::vector<cusdk__UserInfo >*a, const char *type)
{
	for (std::vector<cusdk__UserInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__UserInfo >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__UserInfo(struct soap *soap, const char *tag, std::vector<cusdk__UserInfo >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__UserInfo(soap, -1)))
		return NULL;
	cusdk__UserInfo n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__UserInfo, SOAP_TYPE_std__vectorTemplateOfcusdk__UserInfo, sizeof(cusdk__UserInfo), 0))
				break;
			if (!soap_in_cusdk__UserInfo(soap, tag, NULL, "cusdk:UserInfo"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__UserInfo(soap, tag, &n, "cusdk:UserInfo"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__UserInfo > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__UserInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__UserInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__UserInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__UserInfo >);
		if (size)
			*size = sizeof(std::vector<cusdk__UserInfo >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__UserInfo >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__UserInfo >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__UserInfo >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__UserInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__UserInfo > %p -> %p\n", q, p));
	*(std::vector<cusdk__UserInfo >*)p = *(std::vector<cusdk__UserInfo >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__DeviceInfo(struct soap *soap, std::vector<cusdk__DeviceInfo >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__DeviceInfo(struct soap *soap, const std::vector<cusdk__DeviceInfo >*a)
{
	for (std::vector<cusdk__DeviceInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__DeviceInfo(struct soap *soap, const char *tag, int id, const std::vector<cusdk__DeviceInfo >*a, const char *type)
{
	for (std::vector<cusdk__DeviceInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__DeviceInfo >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__DeviceInfo(struct soap *soap, const char *tag, std::vector<cusdk__DeviceInfo >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__DeviceInfo(soap, -1)))
		return NULL;
	cusdk__DeviceInfo n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__DeviceInfo, SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceInfo, sizeof(cusdk__DeviceInfo), 0))
				break;
			if (!soap_in_cusdk__DeviceInfo(soap, tag, NULL, "cusdk:DeviceInfo"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__DeviceInfo(soap, tag, &n, "cusdk:DeviceInfo"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__DeviceInfo > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__DeviceInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__DeviceInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DeviceInfo >);
		if (size)
			*size = sizeof(std::vector<cusdk__DeviceInfo >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DeviceInfo >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__DeviceInfo >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__DeviceInfo >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__DeviceInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__DeviceInfo > %p -> %p\n", q, p));
	*(std::vector<cusdk__DeviceInfo >*)p = *(std::vector<cusdk__DeviceInfo >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__MediaNetInfo(struct soap *soap, std::vector<cusdk__MediaNetInfo >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__MediaNetInfo(struct soap *soap, const std::vector<cusdk__MediaNetInfo >*a)
{
	for (std::vector<cusdk__MediaNetInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__MediaNetInfo(struct soap *soap, const char *tag, int id, const std::vector<cusdk__MediaNetInfo >*a, const char *type)
{
	for (std::vector<cusdk__MediaNetInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__MediaNetInfo >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__MediaNetInfo(struct soap *soap, const char *tag, std::vector<cusdk__MediaNetInfo >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__MediaNetInfo(soap, -1)))
		return NULL;
	cusdk__MediaNetInfo n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__MediaNetInfo, SOAP_TYPE_std__vectorTemplateOfcusdk__MediaNetInfo, sizeof(cusdk__MediaNetInfo), 0))
				break;
			if (!soap_in_cusdk__MediaNetInfo(soap, tag, NULL, "cusdk:MediaNetInfo"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__MediaNetInfo(soap, tag, &n, "cusdk:MediaNetInfo"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__MediaNetInfo > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__MediaNetInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__MediaNetInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__MediaNetInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__MediaNetInfo >);
		if (size)
			*size = sizeof(std::vector<cusdk__MediaNetInfo >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__MediaNetInfo >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__MediaNetInfo >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__MediaNetInfo >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__MediaNetInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__MediaNetInfo > %p -> %p\n", q, p));
	*(std::vector<cusdk__MediaNetInfo >*)p = *(std::vector<cusdk__MediaNetInfo >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__int(struct soap *soap, std::vector<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__int(struct soap *soap, const std::vector<int >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__int(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_xsd__int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__int(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfxsd__int(soap, -1)))
		return NULL;
	int n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_xsd__int(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_xsd__int, SOAP_TYPE_std__vectorTemplateOfxsd__int, sizeof(int), 0))
				break;
			if (!soap_in_xsd__int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else
		{
			if (!soap_in_xsd__int(soap, tag, &n, "xsd:int"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfxsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfxsd__int, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__int(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__DevAlarmNotify(struct soap *soap, std::vector<cusdk__DevAlarmNotify >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__DevAlarmNotify(struct soap *soap, const std::vector<cusdk__DevAlarmNotify >*a)
{
	for (std::vector<cusdk__DevAlarmNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__DevAlarmNotify(struct soap *soap, const char *tag, int id, const std::vector<cusdk__DevAlarmNotify >*a, const char *type)
{
	for (std::vector<cusdk__DevAlarmNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__DevAlarmNotify >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__DevAlarmNotify(struct soap *soap, const char *tag, std::vector<cusdk__DevAlarmNotify >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__DevAlarmNotify(soap, -1)))
		return NULL;
	cusdk__DevAlarmNotify n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__DevAlarmNotify, SOAP_TYPE_std__vectorTemplateOfcusdk__DevAlarmNotify, sizeof(cusdk__DevAlarmNotify), 0))
				break;
			if (!soap_in_cusdk__DevAlarmNotify(soap, tag, NULL, "cusdk:DevAlarmNotify"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__DevAlarmNotify(soap, tag, &n, "cusdk:DevAlarmNotify"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__DevAlarmNotify > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__DevAlarmNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__DevAlarmNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__DevAlarmNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DevAlarmNotify >);
		if (size)
			*size = sizeof(std::vector<cusdk__DevAlarmNotify >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DevAlarmNotify >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__DevAlarmNotify >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__DevAlarmNotify >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__DevAlarmNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__DevAlarmNotify > %p -> %p\n", q, p));
	*(std::vector<cusdk__DevAlarmNotify >*)p = *(std::vector<cusdk__DevAlarmNotify >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__DevServiceStatusNotify(struct soap *soap, std::vector<cusdk__DevServiceStatusNotify >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__DevServiceStatusNotify(struct soap *soap, const std::vector<cusdk__DevServiceStatusNotify >*a)
{
	for (std::vector<cusdk__DevServiceStatusNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__DevServiceStatusNotify(struct soap *soap, const char *tag, int id, const std::vector<cusdk__DevServiceStatusNotify >*a, const char *type)
{
	for (std::vector<cusdk__DevServiceStatusNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__DevServiceStatusNotify >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__DevServiceStatusNotify(struct soap *soap, const char *tag, std::vector<cusdk__DevServiceStatusNotify >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__DevServiceStatusNotify(soap, -1)))
		return NULL;
	cusdk__DevServiceStatusNotify n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__DevServiceStatusNotify, SOAP_TYPE_std__vectorTemplateOfcusdk__DevServiceStatusNotify, sizeof(cusdk__DevServiceStatusNotify), 0))
				break;
			if (!soap_in_cusdk__DevServiceStatusNotify(soap, tag, NULL, "cusdk:DevServiceStatusNotify"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__DevServiceStatusNotify(soap, tag, &n, "cusdk:DevServiceStatusNotify"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__DevServiceStatusNotify > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__DevServiceStatusNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__DevServiceStatusNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__DevServiceStatusNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DevServiceStatusNotify >);
		if (size)
			*size = sizeof(std::vector<cusdk__DevServiceStatusNotify >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DevServiceStatusNotify >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__DevServiceStatusNotify >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__DevServiceStatusNotify >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__DevServiceStatusNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__DevServiceStatusNotify > %p -> %p\n", q, p));
	*(std::vector<cusdk__DevServiceStatusNotify >*)p = *(std::vector<cusdk__DevServiceStatusNotify >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__DevConfigNotify(struct soap *soap, std::vector<cusdk__DevConfigNotify >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__DevConfigNotify(struct soap *soap, const std::vector<cusdk__DevConfigNotify >*a)
{
	for (std::vector<cusdk__DevConfigNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__DevConfigNotify(struct soap *soap, const char *tag, int id, const std::vector<cusdk__DevConfigNotify >*a, const char *type)
{
	for (std::vector<cusdk__DevConfigNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__DevConfigNotify >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__DevConfigNotify(struct soap *soap, const char *tag, std::vector<cusdk__DevConfigNotify >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__DevConfigNotify(soap, -1)))
		return NULL;
	cusdk__DevConfigNotify n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__DevConfigNotify, SOAP_TYPE_std__vectorTemplateOfcusdk__DevConfigNotify, sizeof(cusdk__DevConfigNotify), 0))
				break;
			if (!soap_in_cusdk__DevConfigNotify(soap, tag, NULL, "cusdk:DevConfigNotify"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__DevConfigNotify(soap, tag, &n, "cusdk:DevConfigNotify"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__DevConfigNotify > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__DevConfigNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__DevConfigNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__DevConfigNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DevConfigNotify >);
		if (size)
			*size = sizeof(std::vector<cusdk__DevConfigNotify >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DevConfigNotify >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__DevConfigNotify >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__DevConfigNotify >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__DevConfigNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__DevConfigNotify > %p -> %p\n", q, p));
	*(std::vector<cusdk__DevConfigNotify >*)p = *(std::vector<cusdk__DevConfigNotify >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__DevOnlineNotify(struct soap *soap, std::vector<cusdk__DevOnlineNotify >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__DevOnlineNotify(struct soap *soap, const std::vector<cusdk__DevOnlineNotify >*a)
{
	for (std::vector<cusdk__DevOnlineNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__DevOnlineNotify(struct soap *soap, const char *tag, int id, const std::vector<cusdk__DevOnlineNotify >*a, const char *type)
{
	for (std::vector<cusdk__DevOnlineNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__DevOnlineNotify >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__DevOnlineNotify(struct soap *soap, const char *tag, std::vector<cusdk__DevOnlineNotify >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__DevOnlineNotify(soap, -1)))
		return NULL;
	cusdk__DevOnlineNotify n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__DevOnlineNotify, SOAP_TYPE_std__vectorTemplateOfcusdk__DevOnlineNotify, sizeof(cusdk__DevOnlineNotify), 0))
				break;
			if (!soap_in_cusdk__DevOnlineNotify(soap, tag, NULL, "cusdk:DevOnlineNotify"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__DevOnlineNotify(soap, tag, &n, "cusdk:DevOnlineNotify"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__DevOnlineNotify > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__DevOnlineNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__DevOnlineNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__DevOnlineNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DevOnlineNotify >);
		if (size)
			*size = sizeof(std::vector<cusdk__DevOnlineNotify >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DevOnlineNotify >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__DevOnlineNotify >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__DevOnlineNotify >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__DevOnlineNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__DevOnlineNotify > %p -> %p\n", q, p));
	*(std::vector<cusdk__DevOnlineNotify >*)p = *(std::vector<cusdk__DevOnlineNotify >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__DeviceGroup(struct soap *soap, std::vector<cusdk__DeviceGroup >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__DeviceGroup(struct soap *soap, const std::vector<cusdk__DeviceGroup >*a)
{
	for (std::vector<cusdk__DeviceGroup >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__DeviceGroup(struct soap *soap, const char *tag, int id, const std::vector<cusdk__DeviceGroup >*a, const char *type)
{
	for (std::vector<cusdk__DeviceGroup >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__DeviceGroup >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__DeviceGroup(struct soap *soap, const char *tag, std::vector<cusdk__DeviceGroup >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__DeviceGroup(soap, -1)))
		return NULL;
	cusdk__DeviceGroup n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__DeviceGroup, SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroup, sizeof(cusdk__DeviceGroup), 0))
				break;
			if (!soap_in_cusdk__DeviceGroup(soap, tag, NULL, "cusdk:DeviceGroup"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__DeviceGroup(soap, tag, &n, "cusdk:DeviceGroup"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__DeviceGroup > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__DeviceGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__DeviceGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DeviceGroup >);
		if (size)
			*size = sizeof(std::vector<cusdk__DeviceGroup >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DeviceGroup >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__DeviceGroup >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__DeviceGroup >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__DeviceGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__DeviceGroup > %p -> %p\n", q, p));
	*(std::vector<cusdk__DeviceGroup >*)p = *(std::vector<cusdk__DeviceGroup >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(struct soap *soap, std::vector<cusdk__VideoSrcAliasChangeNotify >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(struct soap *soap, const std::vector<cusdk__VideoSrcAliasChangeNotify >*a)
{
	for (std::vector<cusdk__VideoSrcAliasChangeNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(struct soap *soap, const char *tag, int id, const std::vector<cusdk__VideoSrcAliasChangeNotify >*a, const char *type)
{
	for (std::vector<cusdk__VideoSrcAliasChangeNotify >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__VideoSrcAliasChangeNotify >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(struct soap *soap, const char *tag, std::vector<cusdk__VideoSrcAliasChangeNotify >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(soap, -1)))
		return NULL;
	cusdk__VideoSrcAliasChangeNotify n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify, sizeof(cusdk__VideoSrcAliasChangeNotify), 0))
				break;
			if (!soap_in_cusdk__VideoSrcAliasChangeNotify(soap, tag, NULL, "cusdk:VideoSrcAliasChangeNotify"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__VideoSrcAliasChangeNotify(soap, tag, &n, "cusdk:VideoSrcAliasChangeNotify"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__VideoSrcAliasChangeNotify > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrcAliasChangeNotify >);
		if (size)
			*size = sizeof(std::vector<cusdk__VideoSrcAliasChangeNotify >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrcAliasChangeNotify >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__VideoSrcAliasChangeNotify >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__VideoSrcAliasChangeNotify >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__VideoSrcAliasChangeNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__VideoSrcAliasChangeNotify > %p -> %p\n", q, p));
	*(std::vector<cusdk__VideoSrcAliasChangeNotify >*)p = *(std::vector<cusdk__VideoSrcAliasChangeNotify >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__string(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_xsd__string(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_xsd__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfxsd__string(soap, -1)))
		return NULL;
	std::string n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_xsd__string(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_xsd__string, SOAP_TYPE_std__vectorTemplateOfxsd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_xsd__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_xsd__string(soap, tag, &n, "xsd:string"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfxsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfxsd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__DeviceFullInfo(struct soap *soap, std::vector<cusdk__DeviceFullInfo >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__DeviceFullInfo(struct soap *soap, const std::vector<cusdk__DeviceFullInfo >*a)
{
	for (std::vector<cusdk__DeviceFullInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__DeviceFullInfo(struct soap *soap, const char *tag, int id, const std::vector<cusdk__DeviceFullInfo >*a, const char *type)
{
	for (std::vector<cusdk__DeviceFullInfo >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__DeviceFullInfo >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__DeviceFullInfo(struct soap *soap, const char *tag, std::vector<cusdk__DeviceFullInfo >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__DeviceFullInfo(soap, -1)))
		return NULL;
	cusdk__DeviceFullInfo n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__DeviceFullInfo, SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceFullInfo, sizeof(cusdk__DeviceFullInfo), 0))
				break;
			if (!soap_in_cusdk__DeviceFullInfo(soap, tag, NULL, "cusdk:DeviceFullInfo"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__DeviceFullInfo(soap, tag, &n, "cusdk:DeviceFullInfo"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__DeviceFullInfo > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__DeviceFullInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__DeviceFullInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceFullInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DeviceFullInfo >);
		if (size)
			*size = sizeof(std::vector<cusdk__DeviceFullInfo >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DeviceFullInfo >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__DeviceFullInfo >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__DeviceFullInfo >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__DeviceFullInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__DeviceFullInfo > %p -> %p\n", q, p));
	*(std::vector<cusdk__DeviceFullInfo >*)p = *(std::vector<cusdk__DeviceFullInfo >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__DeviceGroupRelation(struct soap *soap, std::vector<cusdk__DeviceGroupRelation >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__DeviceGroupRelation(struct soap *soap, const std::vector<cusdk__DeviceGroupRelation >*a)
{
	for (std::vector<cusdk__DeviceGroupRelation >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__DeviceGroupRelation(struct soap *soap, const char *tag, int id, const std::vector<cusdk__DeviceGroupRelation >*a, const char *type)
{
	for (std::vector<cusdk__DeviceGroupRelation >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__DeviceGroupRelation >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__DeviceGroupRelation(struct soap *soap, const char *tag, std::vector<cusdk__DeviceGroupRelation >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__DeviceGroupRelation(soap, -1)))
		return NULL;
	cusdk__DeviceGroupRelation n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__DeviceGroupRelation, SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroupRelation, sizeof(cusdk__DeviceGroupRelation), 0))
				break;
			if (!soap_in_cusdk__DeviceGroupRelation(soap, tag, NULL, "cusdk:DeviceGroupRelation"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__DeviceGroupRelation(soap, tag, &n, "cusdk:DeviceGroupRelation"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__DeviceGroupRelation > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__DeviceGroupRelation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__DeviceGroupRelation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__DeviceGroupRelation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DeviceGroupRelation >);
		if (size)
			*size = sizeof(std::vector<cusdk__DeviceGroupRelation >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DeviceGroupRelation >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__DeviceGroupRelation >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__DeviceGroupRelation >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__DeviceGroupRelation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__DeviceGroupRelation > %p -> %p\n", q, p));
	*(std::vector<cusdk__DeviceGroupRelation >*)p = *(std::vector<cusdk__DeviceGroupRelation >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__PuStatusSubscription(struct soap *soap, std::vector<cusdk__PuStatusSubscription >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__PuStatusSubscription(struct soap *soap, const std::vector<cusdk__PuStatusSubscription >*a)
{
	for (std::vector<cusdk__PuStatusSubscription >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__PuStatusSubscription(struct soap *soap, const char *tag, int id, const std::vector<cusdk__PuStatusSubscription >*a, const char *type)
{
	for (std::vector<cusdk__PuStatusSubscription >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__PuStatusSubscription >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__PuStatusSubscription(struct soap *soap, const char *tag, std::vector<cusdk__PuStatusSubscription >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__PuStatusSubscription(soap, -1)))
		return NULL;
	cusdk__PuStatusSubscription n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__PuStatusSubscription, SOAP_TYPE_std__vectorTemplateOfcusdk__PuStatusSubscription, sizeof(cusdk__PuStatusSubscription), 0))
				break;
			if (!soap_in_cusdk__PuStatusSubscription(soap, tag, NULL, "cusdk:PuStatusSubscription"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__PuStatusSubscription(soap, tag, &n, "cusdk:PuStatusSubscription"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__PuStatusSubscription > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__PuStatusSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__PuStatusSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__PuStatusSubscription, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__PuStatusSubscription >);
		if (size)
			*size = sizeof(std::vector<cusdk__PuStatusSubscription >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__PuStatusSubscription >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__PuStatusSubscription >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__PuStatusSubscription >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__PuStatusSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__PuStatusSubscription > %p -> %p\n", q, p));
	*(std::vector<cusdk__PuStatusSubscription >*)p = *(std::vector<cusdk__PuStatusSubscription >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__setTemplateOfcusdk__EPuSubscribeType(struct soap *soap, std::set<enum cusdk__EPuSubscribeType >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__setTemplateOfcusdk__EPuSubscribeType(struct soap *soap, const std::set<enum cusdk__EPuSubscribeType >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__setTemplateOfcusdk__EPuSubscribeType(struct soap *soap, const char *tag, int id, const std::set<enum cusdk__EPuSubscribeType >*a, const char *type)
{
	for (std::set<enum cusdk__EPuSubscribeType >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_cusdk__EPuSubscribeType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::set<enum cusdk__EPuSubscribeType >* SOAP_FMAC4 soap_in_std__setTemplateOfcusdk__EPuSubscribeType(struct soap *soap, const char *tag, std::set<enum cusdk__EPuSubscribeType >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__setTemplateOfcusdk__EPuSubscribeType(soap, -1)))
		return NULL;
	enum cusdk__EPuSubscribeType n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_cusdk__EPuSubscribeType(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__EPuSubscribeType, SOAP_TYPE_std__setTemplateOfcusdk__EPuSubscribeType, sizeof(enum cusdk__EPuSubscribeType), 0))
				break;
			if (!soap_in_cusdk__EPuSubscribeType(soap, tag, NULL, "cusdk:EPuSubscribeType"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__EPuSubscribeType(soap, tag, &n, "cusdk:EPuSubscribeType"))
				break;
			a->insert(a->end(), n);
			soap_flag = 1;
		}
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::set<enum cusdk__EPuSubscribeType > * SOAP_FMAC2 soap_instantiate_std__setTemplateOfcusdk__EPuSubscribeType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__setTemplateOfcusdk__EPuSubscribeType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__setTemplateOfcusdk__EPuSubscribeType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::set<enum cusdk__EPuSubscribeType >);
		if (size)
			*size = sizeof(std::set<enum cusdk__EPuSubscribeType >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::set<enum cusdk__EPuSubscribeType >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::set<enum cusdk__EPuSubscribeType >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::set<enum cusdk__EPuSubscribeType >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__setTemplateOfcusdk__EPuSubscribeType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::set<enum cusdk__EPuSubscribeType > %p -> %p\n", q, p));
	*(std::set<enum cusdk__EPuSubscribeType >*)p = *(std::set<enum cusdk__EPuSubscribeType >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(struct soap *soap, std::vector<cusdk__AlarmChannelToAlarmData >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(struct soap *soap, const std::vector<cusdk__AlarmChannelToAlarmData >*a)
{
	for (std::vector<cusdk__AlarmChannelToAlarmData >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(struct soap *soap, const char *tag, int id, const std::vector<cusdk__AlarmChannelToAlarmData >*a, const char *type)
{
	for (std::vector<cusdk__AlarmChannelToAlarmData >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__AlarmChannelToAlarmData >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(struct soap *soap, const char *tag, std::vector<cusdk__AlarmChannelToAlarmData >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(soap, -1)))
		return NULL;
	cusdk__AlarmChannelToAlarmData n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__AlarmChannelToAlarmData, SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData, sizeof(cusdk__AlarmChannelToAlarmData), 0))
				break;
			if (!soap_in_cusdk__AlarmChannelToAlarmData(soap, tag, NULL, "cusdk:AlarmChannelToAlarmData"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__AlarmChannelToAlarmData(soap, tag, &n, "cusdk:AlarmChannelToAlarmData"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__AlarmChannelToAlarmData > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AlarmChannelToAlarmData >);
		if (size)
			*size = sizeof(std::vector<cusdk__AlarmChannelToAlarmData >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AlarmChannelToAlarmData >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__AlarmChannelToAlarmData >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__AlarmChannelToAlarmData >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__AlarmChannelToAlarmData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__AlarmChannelToAlarmData > %p -> %p\n", q, p));
	*(std::vector<cusdk__AlarmChannelToAlarmData >*)p = *(std::vector<cusdk__AlarmChannelToAlarmData >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__DecoderStatusStr(struct soap *soap, std::vector<cusdk__DecoderStatusStr >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__DecoderStatusStr(struct soap *soap, const std::vector<cusdk__DecoderStatusStr >*a)
{
	for (std::vector<cusdk__DecoderStatusStr >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__DecoderStatusStr(struct soap *soap, const char *tag, int id, const std::vector<cusdk__DecoderStatusStr >*a, const char *type)
{
	for (std::vector<cusdk__DecoderStatusStr >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__DecoderStatusStr >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__DecoderStatusStr(struct soap *soap, const char *tag, std::vector<cusdk__DecoderStatusStr >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__DecoderStatusStr(soap, -1)))
		return NULL;
	cusdk__DecoderStatusStr n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__DecoderStatusStr, SOAP_TYPE_std__vectorTemplateOfcusdk__DecoderStatusStr, sizeof(cusdk__DecoderStatusStr), 0))
				break;
			if (!soap_in_cusdk__DecoderStatusStr(soap, tag, NULL, "cusdk:DecoderStatusStr"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__DecoderStatusStr(soap, tag, &n, "cusdk:DecoderStatusStr"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__DecoderStatusStr > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__DecoderStatusStr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__DecoderStatusStr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__DecoderStatusStr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DecoderStatusStr >);
		if (size)
			*size = sizeof(std::vector<cusdk__DecoderStatusStr >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__DecoderStatusStr >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__DecoderStatusStr >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__DecoderStatusStr >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__DecoderStatusStr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__DecoderStatusStr > %p -> %p\n", q, p));
	*(std::vector<cusdk__DecoderStatusStr >*)p = *(std::vector<cusdk__DecoderStatusStr >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__EncoderStatusStr(struct soap *soap, std::vector<cusdk__EncoderStatusStr >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__EncoderStatusStr(struct soap *soap, const std::vector<cusdk__EncoderStatusStr >*a)
{
	for (std::vector<cusdk__EncoderStatusStr >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__EncoderStatusStr(struct soap *soap, const char *tag, int id, const std::vector<cusdk__EncoderStatusStr >*a, const char *type)
{
	for (std::vector<cusdk__EncoderStatusStr >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__EncoderStatusStr >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__EncoderStatusStr(struct soap *soap, const char *tag, std::vector<cusdk__EncoderStatusStr >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__EncoderStatusStr(soap, -1)))
		return NULL;
	cusdk__EncoderStatusStr n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__EncoderStatusStr, SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusStr, sizeof(cusdk__EncoderStatusStr), 0))
				break;
			if (!soap_in_cusdk__EncoderStatusStr(soap, tag, NULL, "cusdk:EncoderStatusStr"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__EncoderStatusStr(soap, tag, &n, "cusdk:EncoderStatusStr"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__EncoderStatusStr > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__EncoderStatusStr(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__EncoderStatusStr(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusStr, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__EncoderStatusStr >);
		if (size)
			*size = sizeof(std::vector<cusdk__EncoderStatusStr >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__EncoderStatusStr >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__EncoderStatusStr >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__EncoderStatusStr >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__EncoderStatusStr(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__EncoderStatusStr > %p -> %p\n", q, p));
	*(std::vector<cusdk__EncoderStatusStr >*)p = *(std::vector<cusdk__EncoderStatusStr >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__EncoderStatusInt(struct soap *soap, std::vector<cusdk__EncoderStatusInt >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__EncoderStatusInt(struct soap *soap, const std::vector<cusdk__EncoderStatusInt >*a)
{
	for (std::vector<cusdk__EncoderStatusInt >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__EncoderStatusInt(struct soap *soap, const char *tag, int id, const std::vector<cusdk__EncoderStatusInt >*a, const char *type)
{
	for (std::vector<cusdk__EncoderStatusInt >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__EncoderStatusInt >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__EncoderStatusInt(struct soap *soap, const char *tag, std::vector<cusdk__EncoderStatusInt >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__EncoderStatusInt(soap, -1)))
		return NULL;
	cusdk__EncoderStatusInt n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__EncoderStatusInt, SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusInt, sizeof(cusdk__EncoderStatusInt), 0))
				break;
			if (!soap_in_cusdk__EncoderStatusInt(soap, tag, NULL, "cusdk:EncoderStatusInt"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__EncoderStatusInt(soap, tag, &n, "cusdk:EncoderStatusInt"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__EncoderStatusInt > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__EncoderStatusInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__EncoderStatusInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderStatusInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__EncoderStatusInt >);
		if (size)
			*size = sizeof(std::vector<cusdk__EncoderStatusInt >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__EncoderStatusInt >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__EncoderStatusInt >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__EncoderStatusInt >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__EncoderStatusInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__EncoderStatusInt > %p -> %p\n", q, p));
	*(std::vector<cusdk__EncoderStatusInt >*)p = *(std::vector<cusdk__EncoderStatusInt >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__AudDecoderToCuChn(struct soap *soap, std::vector<cusdk__AudDecoderToCuChn >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__AudDecoderToCuChn(struct soap *soap, const std::vector<cusdk__AudDecoderToCuChn >*a)
{
	for (std::vector<cusdk__AudDecoderToCuChn >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__AudDecoderToCuChn(struct soap *soap, const char *tag, int id, const std::vector<cusdk__AudDecoderToCuChn >*a, const char *type)
{
	for (std::vector<cusdk__AudDecoderToCuChn >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__AudDecoderToCuChn >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__AudDecoderToCuChn(struct soap *soap, const char *tag, std::vector<cusdk__AudDecoderToCuChn >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__AudDecoderToCuChn(soap, -1)))
		return NULL;
	cusdk__AudDecoderToCuChn n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__AudDecoderToCuChn, SOAP_TYPE_std__vectorTemplateOfcusdk__AudDecoderToCuChn, sizeof(cusdk__AudDecoderToCuChn), 0))
				break;
			if (!soap_in_cusdk__AudDecoderToCuChn(soap, tag, NULL, "cusdk:AudDecoderToCuChn"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__AudDecoderToCuChn(soap, tag, &n, "cusdk:AudDecoderToCuChn"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__AudDecoderToCuChn > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__AudDecoderToCuChn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__AudDecoderToCuChn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__AudDecoderToCuChn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AudDecoderToCuChn >);
		if (size)
			*size = sizeof(std::vector<cusdk__AudDecoderToCuChn >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AudDecoderToCuChn >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__AudDecoderToCuChn >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__AudDecoderToCuChn >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__AudDecoderToCuChn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__AudDecoderToCuChn > %p -> %p\n", q, p));
	*(std::vector<cusdk__AudDecoderToCuChn >*)p = *(std::vector<cusdk__AudDecoderToCuChn >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__VidDecoderToPuChn(struct soap *soap, std::vector<cusdk__VidDecoderToPuChn >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__VidDecoderToPuChn(struct soap *soap, const std::vector<cusdk__VidDecoderToPuChn >*a)
{
	for (std::vector<cusdk__VidDecoderToPuChn >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__VidDecoderToPuChn(struct soap *soap, const char *tag, int id, const std::vector<cusdk__VidDecoderToPuChn >*a, const char *type)
{
	for (std::vector<cusdk__VidDecoderToPuChn >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__VidDecoderToPuChn >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__VidDecoderToPuChn(struct soap *soap, const char *tag, std::vector<cusdk__VidDecoderToPuChn >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__VidDecoderToPuChn(soap, -1)))
		return NULL;
	cusdk__VidDecoderToPuChn n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__VidDecoderToPuChn, SOAP_TYPE_std__vectorTemplateOfcusdk__VidDecoderToPuChn, sizeof(cusdk__VidDecoderToPuChn), 0))
				break;
			if (!soap_in_cusdk__VidDecoderToPuChn(soap, tag, NULL, "cusdk:VidDecoderToPuChn"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__VidDecoderToPuChn(soap, tag, &n, "cusdk:VidDecoderToPuChn"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__VidDecoderToPuChn > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__VidDecoderToPuChn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__VidDecoderToPuChn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__VidDecoderToPuChn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VidDecoderToPuChn >);
		if (size)
			*size = sizeof(std::vector<cusdk__VidDecoderToPuChn >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VidDecoderToPuChn >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__VidDecoderToPuChn >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__VidDecoderToPuChn >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__VidDecoderToPuChn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__VidDecoderToPuChn > %p -> %p\n", q, p));
	*(std::vector<cusdk__VidDecoderToPuChn >*)p = *(std::vector<cusdk__VidDecoderToPuChn >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__EncoderBitrate(struct soap *soap, std::vector<cusdk__EncoderBitrate >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__EncoderBitrate(struct soap *soap, const std::vector<cusdk__EncoderBitrate >*a)
{
	for (std::vector<cusdk__EncoderBitrate >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__EncoderBitrate(struct soap *soap, const char *tag, int id, const std::vector<cusdk__EncoderBitrate >*a, const char *type)
{
	for (std::vector<cusdk__EncoderBitrate >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__EncoderBitrate >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__EncoderBitrate(struct soap *soap, const char *tag, std::vector<cusdk__EncoderBitrate >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__EncoderBitrate(soap, -1)))
		return NULL;
	cusdk__EncoderBitrate n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__EncoderBitrate, SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderBitrate, sizeof(cusdk__EncoderBitrate), 0))
				break;
			if (!soap_in_cusdk__EncoderBitrate(soap, tag, NULL, "cusdk:EncoderBitrate"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__EncoderBitrate(soap, tag, &n, "cusdk:EncoderBitrate"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__EncoderBitrate > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__EncoderBitrate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__EncoderBitrate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderBitrate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__EncoderBitrate >);
		if (size)
			*size = sizeof(std::vector<cusdk__EncoderBitrate >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__EncoderBitrate >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__EncoderBitrate >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__EncoderBitrate >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__EncoderBitrate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__EncoderBitrate > %p -> %p\n", q, p));
	*(std::vector<cusdk__EncoderBitrate >*)p = *(std::vector<cusdk__EncoderBitrate >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__VideoSrcCamID(struct soap *soap, std::vector<cusdk__VideoSrcCamID >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__VideoSrcCamID(struct soap *soap, const std::vector<cusdk__VideoSrcCamID >*a)
{
	for (std::vector<cusdk__VideoSrcCamID >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__VideoSrcCamID(struct soap *soap, const char *tag, int id, const std::vector<cusdk__VideoSrcCamID >*a, const char *type)
{
	for (std::vector<cusdk__VideoSrcCamID >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__VideoSrcCamID >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__VideoSrcCamID(struct soap *soap, const char *tag, std::vector<cusdk__VideoSrcCamID >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__VideoSrcCamID(soap, -1)))
		return NULL;
	cusdk__VideoSrcCamID n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__VideoSrcCamID, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamID, sizeof(cusdk__VideoSrcCamID), 0))
				break;
			if (!soap_in_cusdk__VideoSrcCamID(soap, tag, NULL, "cusdk:VideoSrcCamID"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__VideoSrcCamID(soap, tag, &n, "cusdk:VideoSrcCamID"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__VideoSrcCamID > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcCamID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcCamID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrcCamID >);
		if (size)
			*size = sizeof(std::vector<cusdk__VideoSrcCamID >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrcCamID >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__VideoSrcCamID >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__VideoSrcCamID >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__VideoSrcCamID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__VideoSrcCamID > %p -> %p\n", q, p));
	*(std::vector<cusdk__VideoSrcCamID >*)p = *(std::vector<cusdk__VideoSrcCamID >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__VideoSrcCamType(struct soap *soap, std::vector<cusdk__VideoSrcCamType >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__VideoSrcCamType(struct soap *soap, const std::vector<cusdk__VideoSrcCamType >*a)
{
	for (std::vector<cusdk__VideoSrcCamType >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__VideoSrcCamType(struct soap *soap, const char *tag, int id, const std::vector<cusdk__VideoSrcCamType >*a, const char *type)
{
	for (std::vector<cusdk__VideoSrcCamType >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__VideoSrcCamType >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__VideoSrcCamType(struct soap *soap, const char *tag, std::vector<cusdk__VideoSrcCamType >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__VideoSrcCamType(soap, -1)))
		return NULL;
	cusdk__VideoSrcCamType n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__VideoSrcCamType, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamType, sizeof(cusdk__VideoSrcCamType), 0))
				break;
			if (!soap_in_cusdk__VideoSrcCamType(soap, tag, NULL, "cusdk:VideoSrcCamType"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__VideoSrcCamType(soap, tag, &n, "cusdk:VideoSrcCamType"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__VideoSrcCamType > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcCamType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcCamType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcCamType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrcCamType >);
		if (size)
			*size = sizeof(std::vector<cusdk__VideoSrcCamType >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrcCamType >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__VideoSrcCamType >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__VideoSrcCamType >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__VideoSrcCamType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__VideoSrcCamType > %p -> %p\n", q, p));
	*(std::vector<cusdk__VideoSrcCamType >*)p = *(std::vector<cusdk__VideoSrcCamType >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(struct soap *soap, std::vector<cusdk__EncoderAvailableVidSrcSet >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(struct soap *soap, const std::vector<cusdk__EncoderAvailableVidSrcSet >*a)
{
	for (std::vector<cusdk__EncoderAvailableVidSrcSet >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(struct soap *soap, const char *tag, int id, const std::vector<cusdk__EncoderAvailableVidSrcSet >*a, const char *type)
{
	for (std::vector<cusdk__EncoderAvailableVidSrcSet >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__EncoderAvailableVidSrcSet >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(struct soap *soap, const char *tag, std::vector<cusdk__EncoderAvailableVidSrcSet >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(soap, -1)))
		return NULL;
	cusdk__EncoderAvailableVidSrcSet n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet, SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet, sizeof(cusdk__EncoderAvailableVidSrcSet), 0))
				break;
			if (!soap_in_cusdk__EncoderAvailableVidSrcSet(soap, tag, NULL, "cusdk:EncoderAvailableVidSrcSet"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__EncoderAvailableVidSrcSet(soap, tag, &n, "cusdk:EncoderAvailableVidSrcSet"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__EncoderAvailableVidSrcSet > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__EncoderAvailableVidSrcSet >);
		if (size)
			*size = sizeof(std::vector<cusdk__EncoderAvailableVidSrcSet >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__EncoderAvailableVidSrcSet >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__EncoderAvailableVidSrcSet >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__EncoderAvailableVidSrcSet >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__EncoderAvailableVidSrcSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__EncoderAvailableVidSrcSet > %p -> %p\n", q, p));
	*(std::vector<cusdk__EncoderAvailableVidSrcSet >*)p = *(std::vector<cusdk__EncoderAvailableVidSrcSet >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(struct soap *soap, std::vector<cusdk__VideoSrcEncoderSet >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(struct soap *soap, const std::vector<cusdk__VideoSrcEncoderSet >*a)
{
	for (std::vector<cusdk__VideoSrcEncoderSet >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(struct soap *soap, const char *tag, int id, const std::vector<cusdk__VideoSrcEncoderSet >*a, const char *type)
{
	for (std::vector<cusdk__VideoSrcEncoderSet >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__VideoSrcEncoderSet >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(struct soap *soap, const char *tag, std::vector<cusdk__VideoSrcEncoderSet >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(soap, -1)))
		return NULL;
	cusdk__VideoSrcEncoderSet n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__VideoSrcEncoderSet, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcEncoderSet, sizeof(cusdk__VideoSrcEncoderSet), 0))
				break;
			if (!soap_in_cusdk__VideoSrcEncoderSet(soap, tag, NULL, "cusdk:VideoSrcEncoderSet"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__VideoSrcEncoderSet(soap, tag, &n, "cusdk:VideoSrcEncoderSet"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__VideoSrcEncoderSet > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrcEncoderSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrcEncoderSet >);
		if (size)
			*size = sizeof(std::vector<cusdk__VideoSrcEncoderSet >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrcEncoderSet >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__VideoSrcEncoderSet >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__VideoSrcEncoderSet >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__VideoSrcEncoderSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__VideoSrcEncoderSet > %p -> %p\n", q, p));
	*(std::vector<cusdk__VideoSrcEncoderSet >*)p = *(std::vector<cusdk__VideoSrcEncoderSet >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__ChannelVidDynValue(struct soap *soap, std::vector<cusdk__ChannelVidDynValue >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__ChannelVidDynValue(struct soap *soap, const std::vector<cusdk__ChannelVidDynValue >*a)
{
	for (std::vector<cusdk__ChannelVidDynValue >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__ChannelVidDynValue(struct soap *soap, const char *tag, int id, const std::vector<cusdk__ChannelVidDynValue >*a, const char *type)
{
	for (std::vector<cusdk__ChannelVidDynValue >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__ChannelVidDynValue >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__ChannelVidDynValue(struct soap *soap, const char *tag, std::vector<cusdk__ChannelVidDynValue >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__ChannelVidDynValue(soap, -1)))
		return NULL;
	cusdk__ChannelVidDynValue n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__ChannelVidDynValue, SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVidDynValue, sizeof(cusdk__ChannelVidDynValue), 0))
				break;
			if (!soap_in_cusdk__ChannelVidDynValue(soap, tag, NULL, "cusdk:ChannelVidDynValue"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__ChannelVidDynValue(soap, tag, &n, "cusdk:ChannelVidDynValue"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__ChannelVidDynValue > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__ChannelVidDynValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__ChannelVidDynValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVidDynValue, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__ChannelVidDynValue >);
		if (size)
			*size = sizeof(std::vector<cusdk__ChannelVidDynValue >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__ChannelVidDynValue >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__ChannelVidDynValue >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__ChannelVidDynValue >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__ChannelVidDynValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__ChannelVidDynValue > %p -> %p\n", q, p));
	*(std::vector<cusdk__ChannelVidDynValue >*)p = *(std::vector<cusdk__ChannelVidDynValue >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__ChannelVideoFormat(struct soap *soap, std::vector<cusdk__ChannelVideoFormat >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__ChannelVideoFormat(struct soap *soap, const std::vector<cusdk__ChannelVideoFormat >*a)
{
	for (std::vector<cusdk__ChannelVideoFormat >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__ChannelVideoFormat(struct soap *soap, const char *tag, int id, const std::vector<cusdk__ChannelVideoFormat >*a, const char *type)
{
	for (std::vector<cusdk__ChannelVideoFormat >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__ChannelVideoFormat >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__ChannelVideoFormat(struct soap *soap, const char *tag, std::vector<cusdk__ChannelVideoFormat >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__ChannelVideoFormat(soap, -1)))
		return NULL;
	cusdk__ChannelVideoFormat n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__ChannelVideoFormat, SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVideoFormat, sizeof(cusdk__ChannelVideoFormat), 0))
				break;
			if (!soap_in_cusdk__ChannelVideoFormat(soap, tag, NULL, "cusdk:ChannelVideoFormat"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__ChannelVideoFormat(soap, tag, &n, "cusdk:ChannelVideoFormat"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__ChannelVideoFormat > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__ChannelVideoFormat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__ChannelVideoFormat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__ChannelVideoFormat, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__ChannelVideoFormat >);
		if (size)
			*size = sizeof(std::vector<cusdk__ChannelVideoFormat >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__ChannelVideoFormat >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__ChannelVideoFormat >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__ChannelVideoFormat >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__ChannelVideoFormat(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__ChannelVideoFormat > %p -> %p\n", q, p));
	*(std::vector<cusdk__ChannelVideoFormat >*)p = *(std::vector<cusdk__ChannelVideoFormat >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__InputPinEnable(struct soap *soap, std::vector<cusdk__InputPinEnable >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__InputPinEnable(struct soap *soap, const std::vector<cusdk__InputPinEnable >*a)
{
	for (std::vector<cusdk__InputPinEnable >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__InputPinEnable(struct soap *soap, const char *tag, int id, const std::vector<cusdk__InputPinEnable >*a, const char *type)
{
	for (std::vector<cusdk__InputPinEnable >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__InputPinEnable >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__InputPinEnable(struct soap *soap, const char *tag, std::vector<cusdk__InputPinEnable >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__InputPinEnable(soap, -1)))
		return NULL;
	cusdk__InputPinEnable n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__InputPinEnable, SOAP_TYPE_std__vectorTemplateOfcusdk__InputPinEnable, sizeof(cusdk__InputPinEnable), 0))
				break;
			if (!soap_in_cusdk__InputPinEnable(soap, tag, NULL, "cusdk:InputPinEnable"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__InputPinEnable(soap, tag, &n, "cusdk:InputPinEnable"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__InputPinEnable > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__InputPinEnable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__InputPinEnable(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__InputPinEnable, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__InputPinEnable >);
		if (size)
			*size = sizeof(std::vector<cusdk__InputPinEnable >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__InputPinEnable >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__InputPinEnable >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__InputPinEnable >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__InputPinEnable(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__InputPinEnable > %p -> %p\n", q, p));
	*(std::vector<cusdk__InputPinEnable >*)p = *(std::vector<cusdk__InputPinEnable >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__PuExtCap(struct soap *soap, std::vector<cusdk__PuExtCap >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__PuExtCap(struct soap *soap, const std::vector<cusdk__PuExtCap >*a)
{
	for (std::vector<cusdk__PuExtCap >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__PuExtCap(struct soap *soap, const char *tag, int id, const std::vector<cusdk__PuExtCap >*a, const char *type)
{
	for (std::vector<cusdk__PuExtCap >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__PuExtCap >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__PuExtCap(struct soap *soap, const char *tag, std::vector<cusdk__PuExtCap >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__PuExtCap(soap, -1)))
		return NULL;
	cusdk__PuExtCap n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__PuExtCap, SOAP_TYPE_std__vectorTemplateOfcusdk__PuExtCap, sizeof(cusdk__PuExtCap), 0))
				break;
			if (!soap_in_cusdk__PuExtCap(soap, tag, NULL, "cusdk:PuExtCap"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__PuExtCap(soap, tag, &n, "cusdk:PuExtCap"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__PuExtCap > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__PuExtCap(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__PuExtCap(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__PuExtCap, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__PuExtCap >);
		if (size)
			*size = sizeof(std::vector<cusdk__PuExtCap >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__PuExtCap >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__PuExtCap >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__PuExtCap >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__PuExtCap(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__PuExtCap > %p -> %p\n", q, p));
	*(std::vector<cusdk__PuExtCap >*)p = *(std::vector<cusdk__PuExtCap >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__setTemplateOfxsd__int(struct soap *soap, std::set<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__setTemplateOfxsd__int(struct soap *soap, const std::set<int >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__setTemplateOfxsd__int(struct soap *soap, const char *tag, int id, const std::set<int >*a, const char *type)
{
	for (std::set<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_xsd__int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::set<int >* SOAP_FMAC4 soap_in_std__setTemplateOfxsd__int(struct soap *soap, const char *tag, std::set<int >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__setTemplateOfxsd__int(soap, -1)))
		return NULL;
	int n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_xsd__int(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_xsd__int, SOAP_TYPE_std__setTemplateOfxsd__int, sizeof(int), 0))
				break;
			if (!soap_in_xsd__int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else
		{
			if (!soap_in_xsd__int(soap, tag, &n, "xsd:int"))
				break;
			a->insert(a->end(), n);
			soap_flag = 1;
		}
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::set<int > * SOAP_FMAC2 soap_instantiate_std__setTemplateOfxsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__setTemplateOfxsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__setTemplateOfxsd__int, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::set<int >);
		if (size)
			*size = sizeof(std::set<int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::set<int >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::set<int >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::set<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__setTemplateOfxsd__int(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::set<int > %p -> %p\n", q, p));
	*(std::set<int >*)p = *(std::set<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__AssignAlarminputChn(struct soap *soap, std::vector<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__AssignAlarminputChn(struct soap *soap, const std::vector<int >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__AssignAlarminputChn(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_cusdk__AssignAlarminputChn(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__AssignAlarminputChn(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__AssignAlarminputChn(soap, -1)))
		return NULL;
	int n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_cusdk__AssignAlarminputChn(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__AssignAlarminputChn, SOAP_TYPE_std__vectorTemplateOfcusdk__AssignAlarminputChn, sizeof(int), 0))
				break;
			if (!soap_in_cusdk__AssignAlarminputChn(soap, tag, NULL, "cusdk:AssignAlarminputChn"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__AssignAlarminputChn(soap, tag, &n, "cusdk:AssignAlarminputChn"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__AssignAlarminputChn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__AssignAlarminputChn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__AssignAlarminputChn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__AssignAlarminputChn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__AssignVideoSrc(struct soap *soap, std::vector<cusdk__AssignVideoSrc >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__AssignVideoSrc(struct soap *soap, const std::vector<cusdk__AssignVideoSrc >*a)
{
	for (std::vector<cusdk__AssignVideoSrc >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__AssignVideoSrc(struct soap *soap, const char *tag, int id, const std::vector<cusdk__AssignVideoSrc >*a, const char *type)
{
	for (std::vector<cusdk__AssignVideoSrc >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__AssignVideoSrc >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__AssignVideoSrc(struct soap *soap, const char *tag, std::vector<cusdk__AssignVideoSrc >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__AssignVideoSrc(soap, -1)))
		return NULL;
	cusdk__AssignVideoSrc n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__AssignVideoSrc, SOAP_TYPE_std__vectorTemplateOfcusdk__AssignVideoSrc, sizeof(cusdk__AssignVideoSrc), 0))
				break;
			if (!soap_in_cusdk__AssignVideoSrc(soap, tag, NULL, "cusdk:AssignVideoSrc"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__AssignVideoSrc(soap, tag, &n, "cusdk:AssignVideoSrc"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__AssignVideoSrc > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__AssignVideoSrc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__AssignVideoSrc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__AssignVideoSrc, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AssignVideoSrc >);
		if (size)
			*size = sizeof(std::vector<cusdk__AssignVideoSrc >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AssignVideoSrc >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__AssignVideoSrc >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__AssignVideoSrc >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__AssignVideoSrc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__AssignVideoSrc > %p -> %p\n", q, p));
	*(std::vector<cusdk__AssignVideoSrc >*)p = *(std::vector<cusdk__AssignVideoSrc >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))
		return NULL;
	int n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_int(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else
		{
			if (!soap_in_int(soap, tag, &n, "xsd:int"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__AlarmInputChn(struct soap *soap, std::vector<cusdk__AlarmInputChn >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__AlarmInputChn(struct soap *soap, const std::vector<cusdk__AlarmInputChn >*a)
{
	for (std::vector<cusdk__AlarmInputChn >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__AlarmInputChn(struct soap *soap, const char *tag, int id, const std::vector<cusdk__AlarmInputChn >*a, const char *type)
{
	for (std::vector<cusdk__AlarmInputChn >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__AlarmInputChn >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__AlarmInputChn(struct soap *soap, const char *tag, std::vector<cusdk__AlarmInputChn >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__AlarmInputChn(soap, -1)))
		return NULL;
	cusdk__AlarmInputChn n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__AlarmInputChn, SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmInputChn, sizeof(cusdk__AlarmInputChn), 0))
				break;
			if (!soap_in_cusdk__AlarmInputChn(soap, tag, NULL, "cusdk:AlarmInputChn"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__AlarmInputChn(soap, tag, &n, "cusdk:AlarmInputChn"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__AlarmInputChn > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__AlarmInputChn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__AlarmInputChn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__AlarmInputChn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AlarmInputChn >);
		if (size)
			*size = sizeof(std::vector<cusdk__AlarmInputChn >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__AlarmInputChn >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__AlarmInputChn >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__AlarmInputChn >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__AlarmInputChn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__AlarmInputChn > %p -> %p\n", q, p));
	*(std::vector<cusdk__AlarmInputChn >*)p = *(std::vector<cusdk__AlarmInputChn >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__setTemplateOfcusdk__EDevicePri(struct soap *soap, std::set<enum cusdk__EDevicePri >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__setTemplateOfcusdk__EDevicePri(struct soap *soap, const std::set<enum cusdk__EDevicePri >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__setTemplateOfcusdk__EDevicePri(struct soap *soap, const char *tag, int id, const std::set<enum cusdk__EDevicePri >*a, const char *type)
{
	for (std::set<enum cusdk__EDevicePri >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_cusdk__EDevicePri(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::set<enum cusdk__EDevicePri >* SOAP_FMAC4 soap_in_std__setTemplateOfcusdk__EDevicePri(struct soap *soap, const char *tag, std::set<enum cusdk__EDevicePri >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__setTemplateOfcusdk__EDevicePri(soap, -1)))
		return NULL;
	enum cusdk__EDevicePri n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_cusdk__EDevicePri(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__EDevicePri, SOAP_TYPE_std__setTemplateOfcusdk__EDevicePri, sizeof(enum cusdk__EDevicePri), 0))
				break;
			if (!soap_in_cusdk__EDevicePri(soap, tag, NULL, "cusdk:EDevicePri"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__EDevicePri(soap, tag, &n, "cusdk:EDevicePri"))
				break;
			a->insert(a->end(), n);
			soap_flag = 1;
		}
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::set<enum cusdk__EDevicePri > * SOAP_FMAC2 soap_instantiate_std__setTemplateOfcusdk__EDevicePri(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__setTemplateOfcusdk__EDevicePri(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__setTemplateOfcusdk__EDevicePri, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::set<enum cusdk__EDevicePri >);
		if (size)
			*size = sizeof(std::set<enum cusdk__EDevicePri >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::set<enum cusdk__EDevicePri >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::set<enum cusdk__EDevicePri >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::set<enum cusdk__EDevicePri >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__setTemplateOfcusdk__EDevicePri(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::set<enum cusdk__EDevicePri > %p -> %p\n", q, p));
	*(std::set<enum cusdk__EDevicePri >*)p = *(std::set<enum cusdk__EDevicePri >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfcusdk__VideoSrc(struct soap *soap, std::vector<cusdk__VideoSrc >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfcusdk__VideoSrc(struct soap *soap, const std::vector<cusdk__VideoSrc >*a)
{
	for (std::vector<cusdk__VideoSrc >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfcusdk__VideoSrc(struct soap *soap, const char *tag, int id, const std::vector<cusdk__VideoSrc >*a, const char *type)
{
	for (std::vector<cusdk__VideoSrc >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<cusdk__VideoSrc >* SOAP_FMAC4 soap_in_std__vectorTemplateOfcusdk__VideoSrc(struct soap *soap, const char *tag, std::vector<cusdk__VideoSrc >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfcusdk__VideoSrc(soap, -1)))
		return NULL;
	cusdk__VideoSrc n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n.soap_default(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__VideoSrc, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrc, sizeof(cusdk__VideoSrc), 0))
				break;
			if (!soap_in_cusdk__VideoSrc(soap, tag, NULL, "cusdk:VideoSrc"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__VideoSrc(soap, tag, &n, "cusdk:VideoSrc"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<cusdk__VideoSrc > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfcusdk__VideoSrc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfcusdk__VideoSrc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfcusdk__VideoSrc, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrc >);
		if (size)
			*size = sizeof(std::vector<cusdk__VideoSrc >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<cusdk__VideoSrc >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<cusdk__VideoSrc >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<cusdk__VideoSrc >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfcusdk__VideoSrc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<cusdk__VideoSrc > %p -> %p\n", q, p));
	*(std::vector<cusdk__VideoSrc >*)p = *(std::vector<cusdk__VideoSrc >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__setTemplateOfcusdk__EUserPri(struct soap *soap, std::set<enum cusdk__EUserPri >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__setTemplateOfcusdk__EUserPri(struct soap *soap, const std::set<enum cusdk__EUserPri >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__setTemplateOfcusdk__EUserPri(struct soap *soap, const char *tag, int id, const std::set<enum cusdk__EUserPri >*a, const char *type)
{
	for (std::set<enum cusdk__EUserPri >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_cusdk__EUserPri(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::set<enum cusdk__EUserPri >* SOAP_FMAC4 soap_in_std__setTemplateOfcusdk__EUserPri(struct soap *soap, const char *tag, std::set<enum cusdk__EUserPri >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__setTemplateOfcusdk__EUserPri(soap, -1)))
		return NULL;
	enum cusdk__EUserPri n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_cusdk__EUserPri(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cusdk__EUserPri, SOAP_TYPE_std__setTemplateOfcusdk__EUserPri, sizeof(enum cusdk__EUserPri), 0))
				break;
			if (!soap_in_cusdk__EUserPri(soap, tag, NULL, "cusdk:EUserPri"))
				break;
		}
		else
		{
			if (!soap_in_cusdk__EUserPri(soap, tag, &n, "cusdk:EUserPri"))
				break;
			a->insert(a->end(), n);
			soap_flag = 1;
		}
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::set<enum cusdk__EUserPri > * SOAP_FMAC2 soap_instantiate_std__setTemplateOfcusdk__EUserPri(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__setTemplateOfcusdk__EUserPri(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__setTemplateOfcusdk__EUserPri, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::set<enum cusdk__EUserPri >);
		if (size)
			*size = sizeof(std::set<enum cusdk__EUserPri >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::set<enum cusdk__EUserPri >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::set<enum cusdk__EUserPri >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::set<enum cusdk__EUserPri >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__setTemplateOfcusdk__EUserPri(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::set<enum cusdk__EUserPri > %p -> %p\n", q, p));
	*(std::set<enum cusdk__EUserPri >*)p = *(std::set<enum cusdk__EUserPri >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
