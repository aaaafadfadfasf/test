/* soapStub.h
   Generated by gSOAP 2.8.0 from cusdk.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include <set>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_cusdk__EPlayMode
#define SOAP_TYPE_cusdk__EPlayMode (24)
/* cusdk:EPlayMode */
enum cusdk__EPlayMode {cusdk__VideoAudioBoth = 0, cusdk__VideoOnly = 1, cusdk__AudioOnly = 2};
#endif

#ifndef SOAP_TYPE_cusdk__ETransMode
#define SOAP_TYPE_cusdk__ETransMode (25)
/* cusdk:ETransMode */
enum cusdk__ETransMode {cusdk__UDP = 0, cusdk__TCP = 1};
#endif

#ifndef SOAP_TYPE_cusdk__EUserType
#define SOAP_TYPE_cusdk__EUserType (26)
/* cusdk:EUserType */
enum cusdk__EUserType {cusdk__UserTypeInvalid = 0, cusdk__SuperAdmin = 1, cusdk__Admin = 2, cusdk__Operator = 3};
#endif

#ifndef SOAP_TYPE_cusdk__EUserPri
#define SOAP_TYPE_cusdk__EUserPri (27)
/* cusdk:EUserPri */
enum cusdk__EUserPri {cusdk__PriUserCMSRecStart = 0, cusdk__PriUserCMSRecPlay = 1, cusdk__PriUserCMSRecDel = 2, cusdk__PriUserCMSRecDownload = 3, cusdk__PriUserLocalRec = 4, cusdk__PriUserCMSRecPlayOtherDomain = 5, cusdk__PriUserPUCall = 6, cusdk__PriUserAlarmLog = 7};
#endif

#ifndef SOAP_TYPE_cusdk__EDevicePri
#define SOAP_TYPE_cusdk__EDevicePri (28)
/* cusdk:EDevicePri */
enum cusdk__EDevicePri {cusdk__PriPUPtz = 0, cusdk__PriPURecStart = 1, cusdk__PriPURecPlay = 2, cusdk__PriPURecDel = 3, cusdk__PriPURecDownload = 4, cusdk__PriPUConfig = 5, cusdk__PriPUAlarmInput = 6, cusdk__PriPUArmConfig = 7};
#endif

#ifndef SOAP_TYPE_cusdk__EDeviceType
#define SOAP_TYPE_cusdk__EDeviceType (29)
/* cusdk:EDeviceType */
enum cusdk__EDeviceType {cusdk__DevTypeUnknown = 0, cusdk__DevTypeEncoder = 1, cusdk__DevTypePUS = 2, cusdk__DevTypeDecoder = 3, cusdk__DevTypeTVWall = 4, cusdk__DevTypeNVR = 5, cusdk__DevTypeSVR = 6, cusdk__DevAlarmHost = 7};
#endif

#ifndef SOAP_TYPE_cusdk__EPuSubscribeType
#define SOAP_TYPE_cusdk__EPuSubscribeType (30)
/* cusdk:EPuSubscribeType */
enum cusdk__EPuSubscribeType {cusdk__SubscribeOnlineStatus = 0, cusdk__SubscribeConfigStatus = 1, cusdk__SubscribeServiceStatus = 2, cusdk__SubscribeAlarmStatus = 3};
#endif

#ifndef SOAP_TYPE_cusdk__EPtzCmd
#define SOAP_TYPE_cusdk__EPtzCmd (31)
/* cusdk:EPtzCmd */
enum cusdk__EPtzCmd {cusdk__PtzMoveUp = 1, cusdk__PtzMoveDown = 2, cusdk__PtzMoveLeft = 3, cusdk__PtzMoveRight = 4, cusdk__PtzMoveHome = 5, cusdk__PtzMoveStop = 6, cusdk__PtzZoomIn = 7, cusdk__PtzZoomOut = 8, cusdk__PtzZoomStop = 9, cusdk__PtzFocusFar = 10, cusdk__PtzFocusNear = 11, cusdk__PtzFocusAuto = 12, cusdk__PtzFocusStop = 13, cusdk__PtzPresetSave = 14, cusdk__PtzPresetCall = 15, cusdk__PtzChangeVideoSrc = 16, cusdk__PtzBrightUp = 17, cusdk__PtzBrightDown = 18, cusdk__PtzBrightStop = 19, cusdk__PtzCommandNew = 20, cusdk__PtzCommandAppend = 21, cusdk__PtzGotoPoint = 22, cusdk__PtzZoomArea = 23, cusdk__PtzAlecPanSpeed = 24, cusdk__PtzAlecTiltSpeed = 25, cusdk__PtzSonySetBright = 26, cusdk__PtzMatrixSwitch = 27, cusdk__PtzMatrixVideoMix4 = 28, cusdk__PtzMatrixVideoMix9 = 29, cusdk__PtzMatrixVideoMix16 = 30, cusdk__PtzMatrixVideoMixPP = 31, cusdk__PtzZoomAreaStop = 32, cusdk__PtzMenuUp = 33, cusdk__PtzMenuDown = 34, cusdk__PtzMenuLeft = 35, cusdk__PtzMenuRight = 36, cusdk__PtzMenuShow = 37, cusdk__PtzMenuHide = 38, cusdk__PtzMenuEnter = 39, cusdk__PtzMenuCancel = 40, cusdk__PtzPresetDel = 41, cusdk__PtzMatrixSwitchASC = 42, cusdk__PtzMatrixSwitchESC = 43, cusdk__PtzMatrixHoldImage = 44, cusdk__PtzMoveLeftUp = 45, cusdk__PtzMoveLeftDown = 46, cusdk__PtzMoveRightUp = 47, cusdk__PtzMoveRightDown = 48, cusdk__PtzAutoScanStart = 128, cusdk__PtzAutoScanStop = 129, cusdk__PtzPresetScanStart = 130, cusdk__PtzPresetScanStop = 131, cusdk__PtzScanSpeedSet = 132};
#endif

#ifndef SOAP_TYPE_cusdk__EVideoFormat
#define SOAP_TYPE_cusdk__EVideoFormat (32)
/* cusdk:EVideoFormat */
enum cusdk__EVideoFormat {cusdk__H264 = 0, cusdk__MPEG4 = 1};
#endif

#ifndef SOAP_TYPE_cusdk__EVideoSolution
#define SOAP_TYPE_cusdk__EVideoSolution (33)
/* cusdk:EVideoSolution */
enum cusdk__EVideoSolution {cusdk__QCIF = 0, cusdk__CIF = 1, cusdk__QVGA = 2, cusdk__VGA = 3, cusdk__D1 = 4, cusdk__HD720P = 5, cusdk__HD1080A = 6, cusdk__HD1080P = 7};
#endif

#ifndef SOAP_TYPE_cusdk__EUserOrUserGroup
#define SOAP_TYPE_cusdk__EUserOrUserGroup (34)
/* cusdk:EUserOrUserGroup */
enum cusdk__EUserOrUserGroup {cusdk__TypeUser = 0, cusdk__TypeUserGroup = 1};
#endif

#ifndef SOAP_TYPE_cusdk__EAudioFormat
#define SOAP_TYPE_cusdk__EAudioFormat (35)
/* cusdk:EAudioFormat */
enum cusdk__EAudioFormat {cusdk__MP3 = 0};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_cusdk__UserGroup
#define SOAP_TYPE_cusdk__UserGroup (36)
/* cusdk:UserGroup */
class SOAP_CMAC cusdk__UserGroup
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	std::string creator;	/* required element of type xsd:string */
	enum cusdk__EUserType userType;	/* required element of type cusdk:EUserType */
	std::set<enum cusdk__EUserPri >userPri;	/* optional element of type cusdk:EUserPri */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_cusdk__UserGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGroup() { cusdk__UserGroup::soap_default(NULL); }
	virtual ~cusdk__UserGroup() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserInfo
#define SOAP_TYPE_cusdk__UserInfo (38)
/* cusdk:UserInfo */
class SOAP_CMAC cusdk__UserInfo
{
public:
	std::string uuid;	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
	std::string userPassword;	/* required element of type xsd:string */
	std::string domainID;	/* required element of type xsd:string */
	enum cusdk__EUserType userType;	/* required element of type cusdk:EUserType */
	std::set<enum cusdk__EUserPri >userPri;	/* optional element of type cusdk:EUserPri */
	std::string creator;	/* required element of type xsd:string */
	std::string userGroup;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	time_t accountOverdueTime;	/* required element of type xsd:dateTime */
	time_t passwordOverdueTime;	/* required element of type xsd:dateTime */
	bool enable;	/* required element of type xsd:boolean */
	bool allowMultilogin;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_cusdk__UserInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserInfo() { cusdk__UserInfo::soap_default(NULL); }
	virtual ~cusdk__UserInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroup
#define SOAP_TYPE_cusdk__DeviceGroup (40)
/* cusdk:DeviceGroup */
class SOAP_CMAC cusdk__DeviceGroup
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string parentId;	/* required element of type xsd:string */
	std::string domainId;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	bool hasDevice;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_cusdk__DeviceGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroup() { cusdk__DeviceGroup::soap_default(NULL); }
	virtual ~cusdk__DeviceGroup() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderChn
#define SOAP_TYPE_cusdk__EncoderChn (41)
/* cusdk:EncoderChn */
class SOAP_CMAC cusdk__EncoderChn
{
public:
	int id;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_cusdk__EncoderChn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderChn() { cusdk__EncoderChn::soap_default(NULL); }
	virtual ~cusdk__EncoderChn() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevChannel
#define SOAP_TYPE_cusdk__DevChannel (42)
/* cusdk:DevChannel */
class SOAP_CMAC cusdk__DevChannel
{
public:
	std::string devURI;	/* required element of type xsd:string */
	int chnNO;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_cusdk__DevChannel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevChannel() { cusdk__DevChannel::soap_default(NULL); }
	virtual ~cusdk__DevChannel() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrc
#define SOAP_TYPE_cusdk__VideoSrc (43)
/* cusdk:VideoSrc */
class SOAP_CMAC cusdk__VideoSrc
{
public:
	int id;	/* required element of type xsd:int */
	std::string alias;	/* required element of type xsd:string */
	int ptzLevel;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_cusdk__VideoSrc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrc() { cusdk__VideoSrc::soap_default(NULL); }
	virtual ~cusdk__VideoSrc() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AlarmInputChn
#define SOAP_TYPE_cusdk__AlarmInputChn (44)
/* cusdk:AlarmInputChn */
class SOAP_CMAC cusdk__AlarmInputChn
{
public:
	int id;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_cusdk__AlarmInputChn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AlarmInputChn() { cusdk__AlarmInputChn::soap_default(NULL); }
	virtual ~cusdk__AlarmInputChn() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceInfo
#define SOAP_TYPE_cusdk__DeviceInfo (45)
/* cusdk:DeviceInfo */
class SOAP_CMAC cusdk__DeviceInfo
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string domainId;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string alias;	/* required element of type xsd:string */
	enum cusdk__EDeviceType devType;	/* required element of type cusdk:EDeviceType */
	std::string manufacturer;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	std::vector<cusdk__VideoSrc >videoSrcList;	/* optional element of type cusdk:VideoSrc */
	std::set<enum cusdk__EDevicePri >priList;	/* optional element of type cusdk:EDevicePri */
	std::vector<cusdk__AlarmInputChn >alarmInputChnList;	/* optional element of type cusdk:AlarmInputChn */
	int videoSrcNum;	/* required element of type xsd:int */
	int encodeChnNum;	/* required element of type xsd:int */
	int decodeChnNum;	/* required element of type xsd:int */
	int alarmInputNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_cusdk__DeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceInfo() { cusdk__DeviceInfo::soap_default(NULL); }
	virtual ~cusdk__DeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupRelation
#define SOAP_TYPE_cusdk__DeviceGroupRelation (49)
/* cusdk:DeviceGroupRelation */
class SOAP_CMAC cusdk__DeviceGroupRelation
{
public:
	std::string devGroupId;	/* required element of type xsd:string */
	std::string devId;	/* required element of type xsd:string */
	std::vector<int >videoSrcIdList;	/* optional element of type xsd:int */
	std::vector<int >alarmInputChnList;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupRelation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupRelation() { cusdk__DeviceGroupRelation::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupRelation() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AssignVideoSrc
#define SOAP_TYPE_cusdk__AssignVideoSrc (51)
/* cusdk:AssignVideoSrc */
class SOAP_CMAC cusdk__AssignVideoSrc
{
public:
	int vieoSrcId;	/* required element of type xsd:int */
	int ptzLevel;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_cusdk__AssignVideoSrc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AssignVideoSrc() { cusdk__AssignVideoSrc::soap_default(NULL); }
	virtual ~cusdk__AssignVideoSrc() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AssignDeviceInfo
#define SOAP_TYPE_cusdk__AssignDeviceInfo (53)
/* cusdk:AssignDeviceInfo */
class SOAP_CMAC cusdk__AssignDeviceInfo
{
public:
	std::string devId;	/* required element of type xsd:string */
	std::set<enum cusdk__EDevicePri >devPriSet;	/* optional element of type cusdk:EDevicePri */
	std::vector<cusdk__AssignVideoSrc >videoSrcIdList;	/* optional element of type cusdk:AssignVideoSrc */
	std::vector<int >alarmInputChnList;	/* optional element of type cusdk:AssignAlarminputChn */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_cusdk__AssignDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AssignDeviceInfo() { cusdk__AssignDeviceInfo::soap_default(NULL); }
	virtual ~cusdk__AssignDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AuthorizationDeviceInfo
#define SOAP_TYPE_cusdk__AuthorizationDeviceInfo (56)
/* cusdk:AuthorizationDeviceInfo */
class SOAP_CMAC cusdk__AuthorizationDeviceInfo
{
public:
	std::string userName;	/* required element of type xsd:string */
	cusdk__AssignDeviceInfo devInfo;	/* required element of type cusdk:AssignDeviceInfo */
	std::string description;	/* required element of type xsd:string */
	time_t createTime;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_cusdk__AuthorizationDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AuthorizationDeviceInfo() { cusdk__AuthorizationDeviceInfo::soap_default(NULL); }
	virtual ~cusdk__AuthorizationDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify
#define SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify (57)
/* cusdk:VideoSrcAliasChangeNotify */
class SOAP_CMAC cusdk__VideoSrcAliasChangeNotify
{
public:
	std::string devUUID;	/* required element of type xsd:string */
	std::vector<cusdk__VideoSrc >devVideoSrcAlias;	/* optional element of type cusdk:VideoSrc */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_cusdk__VideoSrcAliasChangeNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrcAliasChangeNotify() { cusdk__VideoSrcAliasChangeNotify::soap_default(NULL); }
	virtual ~cusdk__VideoSrcAliasChangeNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevOnlineNotify
#define SOAP_TYPE_cusdk__DevOnlineNotify (58)
/* cusdk:DevOnlineNotify */
class SOAP_CMAC cusdk__DevOnlineNotify
{
public:
	std::string id;	/* required element of type xsd:string */
	bool online;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_cusdk__DevOnlineNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevOnlineNotify() { cusdk__DevOnlineNotify::soap_default(NULL); }
	virtual ~cusdk__DevOnlineNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PuBaseCapSet
#define SOAP_TYPE_cusdk__PuBaseCapSet (59)
/* cusdk:PuBaseCapSet */
class SOAP_CMAC cusdk__PuBaseCapSet
{
public:
	int videoEncNum;	/* required element of type xsd:int */
	int videoDecNum;	/* required element of type xsd:int */
	int audioEncNum;	/* required element of type xsd:int */
	int audioDecNum;	/* required element of type xsd:int */
	int serialPortNum;	/* required element of type xsd:int */
	int inputPinNum;	/* required element of type xsd:int */
	int outputPinNum;	/* required element of type xsd:int */
	int videoInPortNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_cusdk__PuBaseCapSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PuBaseCapSet() { cusdk__PuBaseCapSet::soap_default(NULL); }
	virtual ~cusdk__PuBaseCapSet() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PuExtCap
#define SOAP_TYPE_cusdk__PuExtCap (60)
/* cusdk:PuExtCap */
class SOAP_CMAC cusdk__PuExtCap
{
public:
	int id;	/* required element of type xsd:int */
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_cusdk__PuExtCap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PuExtCap() { cusdk__PuExtCap::soap_default(NULL); }
	virtual ~cusdk__PuExtCap() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__InputPinEnable
#define SOAP_TYPE_cusdk__InputPinEnable (61)
/* cusdk:InputPinEnable */
class SOAP_CMAC cusdk__InputPinEnable
{
public:
	int id;	/* required element of type xsd:int */
	bool value;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_cusdk__InputPinEnable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__InputPinEnable() { cusdk__InputPinEnable::soap_default(NULL); }
	virtual ~cusdk__InputPinEnable() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ChannelVideoFormat
#define SOAP_TYPE_cusdk__ChannelVideoFormat (62)
/* cusdk:ChannelVideoFormat */
class SOAP_CMAC cusdk__ChannelVideoFormat
{
public:
	int id;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_cusdk__ChannelVideoFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ChannelVideoFormat() { cusdk__ChannelVideoFormat::soap_default(NULL); }
	virtual ~cusdk__ChannelVideoFormat() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ChannelVidDynValue
#define SOAP_TYPE_cusdk__ChannelVidDynValue (63)
/* cusdk:ChannelVidDynValue */
class SOAP_CMAC cusdk__ChannelVidDynValue
{
public:
	int id;	/* required element of type xsd:int */
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_cusdk__ChannelVidDynValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ChannelVidDynValue() { cusdk__ChannelVidDynValue::soap_default(NULL); }
	virtual ~cusdk__ChannelVidDynValue() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrcEncoderSet
#define SOAP_TYPE_cusdk__VideoSrcEncoderSet (64)
/* cusdk:VideoSrcEncoderSet */
class SOAP_CMAC cusdk__VideoSrcEncoderSet
{
public:
	int id;	/* required element of type xsd:int */
	std::set<int >value;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_cusdk__VideoSrcEncoderSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrcEncoderSet() { cusdk__VideoSrcEncoderSet::soap_default(NULL); }
	virtual ~cusdk__VideoSrcEncoderSet() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet
#define SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet (66)
/* cusdk:EncoderAvailableVidSrcSet */
class SOAP_CMAC cusdk__EncoderAvailableVidSrcSet
{
public:
	int id;	/* required element of type xsd:int */
	std::set<int >value;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_cusdk__EncoderAvailableVidSrcSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderAvailableVidSrcSet() { cusdk__EncoderAvailableVidSrcSet::soap_default(NULL); }
	virtual ~cusdk__EncoderAvailableVidSrcSet() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrcCamType
#define SOAP_TYPE_cusdk__VideoSrcCamType (67)
/* cusdk:VideoSrcCamType */
class SOAP_CMAC cusdk__VideoSrcCamType
{
public:
	int id;	/* required element of type xsd:int */
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_cusdk__VideoSrcCamType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrcCamType() { cusdk__VideoSrcCamType::soap_default(NULL); }
	virtual ~cusdk__VideoSrcCamType() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VideoSrcCamID
#define SOAP_TYPE_cusdk__VideoSrcCamID (68)
/* cusdk:VideoSrcCamID */
class SOAP_CMAC cusdk__VideoSrcCamID
{
public:
	int id;	/* required element of type xsd:int */
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_cusdk__VideoSrcCamID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VideoSrcCamID() { cusdk__VideoSrcCamID::soap_default(NULL); }
	virtual ~cusdk__VideoSrcCamID() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderBitrate
#define SOAP_TYPE_cusdk__EncoderBitrate (69)
/* cusdk:EncoderBitrate */
class SOAP_CMAC cusdk__EncoderBitrate
{
public:
	int id;	/* required element of type xsd:int */
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_cusdk__EncoderBitrate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderBitrate() { cusdk__EncoderBitrate::soap_default(NULL); }
	virtual ~cusdk__EncoderBitrate() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevConfigNotify
#define SOAP_TYPE_cusdk__DevConfigNotify (70)
/* cusdk:DevConfigNotify */
class SOAP_CMAC cusdk__DevConfigNotify
{
public:
	std::string devURI;	/* required element of type xsd:string */
	std::string devIp;	/* required element of type xsd:string */
	std::string devType;	/* required element of type xsd:string */
	std::string devMode;	/* required element of type xsd:string */
	cusdk__PuBaseCapSet baseCapSet;	/* required element of type cusdk:PuBaseCapSet */
	std::vector<cusdk__PuExtCap >extCapSet;	/* optional element of type cusdk:PuExtCap */
	std::vector<cusdk__InputPinEnable >inputPinEnable;	/* optional element of type cusdk:InputPinEnable */
	std::vector<cusdk__ChannelVideoFormat >chnVidFormat;	/* optional element of type cusdk:ChannelVideoFormat */
	std::vector<cusdk__ChannelVidDynValue >chnVidDynValue;	/* optional element of type cusdk:ChannelVidDynValue */
	std::vector<cusdk__VideoSrcEncoderSet >vidSrcChnSet;	/* optional element of type cusdk:VideoSrcEncoderSet */
	std::vector<cusdk__EncoderAvailableVidSrcSet >chnVidSrcSet;	/* optional element of type cusdk:EncoderAvailableVidSrcSet */
	std::vector<cusdk__VideoSrcCamType >camType;	/* optional element of type cusdk:VideoSrcCamType */
	std::vector<cusdk__VideoSrcCamID >camId;	/* optional element of type cusdk:VideoSrcCamID */
	std::vector<cusdk__EncoderBitrate >bitRate;	/* optional element of type cusdk:EncoderBitrate */
	int freeLicenceNum;	/* required element of type xsd:int */
	int directTransNum;	/* required element of type xsd:int */
	bool isDecCombined;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_cusdk__DevConfigNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevConfigNotify() { cusdk__DevConfigNotify::soap_default(NULL); }
	virtual ~cusdk__DevConfigNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__VidDecoderToPuChn
#define SOAP_TYPE_cusdk__VidDecoderToPuChn (80)
/* cusdk:VidDecoderToPuChn */
class SOAP_CMAC cusdk__VidDecoderToPuChn
{
public:
	int id;	/* required element of type xsd:int */
	cusdk__DevChannel puChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_cusdk__VidDecoderToPuChn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__VidDecoderToPuChn() { cusdk__VidDecoderToPuChn::soap_default(NULL); }
	virtual ~cusdk__VidDecoderToPuChn() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AudDecoderToCuChn
#define SOAP_TYPE_cusdk__AudDecoderToCuChn (81)
/* cusdk:AudDecoderToCuChn */
class SOAP_CMAC cusdk__AudDecoderToCuChn
{
public:
	int id;	/* required element of type xsd:int */
	cusdk__DevChannel cuChn;	/* required element of type cusdk:DevChannel */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_cusdk__AudDecoderToCuChn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AudDecoderToCuChn() { cusdk__AudDecoderToCuChn::soap_default(NULL); }
	virtual ~cusdk__AudDecoderToCuChn() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderStatusInt
#define SOAP_TYPE_cusdk__EncoderStatusInt (82)
/* cusdk:EncoderStatusInt */
class SOAP_CMAC cusdk__EncoderStatusInt
{
public:
	int id;	/* required element of type xsd:int */
	bool value;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_cusdk__EncoderStatusInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderStatusInt() { cusdk__EncoderStatusInt::soap_default(NULL); }
	virtual ~cusdk__EncoderStatusInt() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__EncoderStatusStr
#define SOAP_TYPE_cusdk__EncoderStatusStr (83)
/* cusdk:EncoderStatusStr */
class SOAP_CMAC cusdk__EncoderStatusStr
{
public:
	int id;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_cusdk__EncoderStatusStr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__EncoderStatusStr() { cusdk__EncoderStatusStr::soap_default(NULL); }
	virtual ~cusdk__EncoderStatusStr() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DecoderStatusStr
#define SOAP_TYPE_cusdk__DecoderStatusStr (84)
/* cusdk:DecoderStatusStr */
class SOAP_CMAC cusdk__DecoderStatusStr
{
public:
	int id;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_cusdk__DecoderStatusStr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DecoderStatusStr() { cusdk__DecoderStatusStr::soap_default(NULL); }
	virtual ~cusdk__DecoderStatusStr() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevServiceStatusNotify
#define SOAP_TYPE_cusdk__DevServiceStatusNotify (85)
/* cusdk:DevServiceStatusNotify */
class SOAP_CMAC cusdk__DevServiceStatusNotify
{
public:
	std::string devURI;	/* required element of type xsd:string */
	std::vector<cusdk__VidDecoderToPuChn >decChnVidSrc;	/* optional element of type cusdk:VidDecoderToPuChn */
	std::vector<cusdk__AudDecoderToCuChn >audioCallSrc;	/* optional element of type cusdk:AudDecoderToCuChn */
	std::vector<cusdk__EncoderStatusInt >isPlatPreRec;	/* optional element of type cusdk:EncoderStatusInt */
	std::vector<cusdk__EncoderStatusStr >platRec;	/* optional element of type cusdk:EncoderStatusStr */
	std::vector<cusdk__EncoderStatusInt >isPuPreRec;	/* optional element of type cusdk:EncoderStatusInt */
	std::vector<cusdk__EncoderStatusInt >isPuRec;	/* optional element of type cusdk:EncoderStatusInt */
	std::vector<cusdk__DecoderStatusStr >decPoll;	/* optional element of type cusdk:DecoderStatusStr */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_cusdk__DevServiceStatusNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevServiceStatusNotify() { cusdk__DevServiceStatusNotify::soap_default(NULL); }
	virtual ~cusdk__DevServiceStatusNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevAlarmData
#define SOAP_TYPE_cusdk__DevAlarmData (91)
/* cusdk:DevAlarmData */
class SOAP_CMAC cusdk__DevAlarmData
{
public:
	bool isAlarm;	/* required element of type xsd:boolean */
	std::string time;	/* required element of type xsd:string */
	std::string desc;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_cusdk__DevAlarmData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevAlarmData() { cusdk__DevAlarmData::soap_default(NULL); }
	virtual ~cusdk__DevAlarmData() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AlarmChannelToAlarmData
#define SOAP_TYPE_cusdk__AlarmChannelToAlarmData (92)
/* cusdk:AlarmChannelToAlarmData */
class SOAP_CMAC cusdk__AlarmChannelToAlarmData
{
public:
	int id;	/* required element of type xsd:int */
	cusdk__DevAlarmData data;	/* required element of type cusdk:DevAlarmData */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_cusdk__AlarmChannelToAlarmData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AlarmChannelToAlarmData() { cusdk__AlarmChannelToAlarmData::soap_default(NULL); }
	virtual ~cusdk__AlarmChannelToAlarmData() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DevAlarmNotify
#define SOAP_TYPE_cusdk__DevAlarmNotify (93)
/* cusdk:DevAlarmNotify */
class SOAP_CMAC cusdk__DevAlarmNotify
{
public:
	std::string devURI;	/* required element of type xsd:string */
	std::vector<cusdk__AlarmChannelToAlarmData >alarmVidMove;	/* optional element of type cusdk:AlarmChannelToAlarmData */
	std::vector<cusdk__AlarmChannelToAlarmData >alarmOutPin;	/* optional element of type cusdk:AlarmChannelToAlarmData */
	std::vector<cusdk__AlarmChannelToAlarmData >alarmInPin;	/* optional element of type cusdk:AlarmChannelToAlarmData */
	std::vector<cusdk__AlarmChannelToAlarmData >alarmVidLost;	/* optional element of type cusdk:AlarmChannelToAlarmData */
	std::vector<cusdk__AlarmChannelToAlarmData >alarmInte;	/* optional element of type cusdk:AlarmChannelToAlarmData */
	bool alarmDiskFull;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_cusdk__DevAlarmNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DevAlarmNotify() { cusdk__DevAlarmNotify::soap_default(NULL); }
	virtual ~cusdk__DevAlarmNotify() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__NetworkAddr
#define SOAP_TYPE_cusdk__NetworkAddr (95)
/* cusdk:NetworkAddr */
class SOAP_CMAC cusdk__NetworkAddr
{
public:
	std::string ip;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_cusdk__NetworkAddr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__NetworkAddr() { cusdk__NetworkAddr::soap_default(NULL); }
	virtual ~cusdk__NetworkAddr() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__NatInfo
#define SOAP_TYPE_cusdk__NatInfo (96)
/* cusdk:NatInfo */
class SOAP_CMAC cusdk__NatInfo
{
public:
	std::string natData;	/* required element of type xsd:string */
	cusdk__NetworkAddr localAddr;	/* required element of type cusdk:NetworkAddr */
	cusdk__NetworkAddr natAddr;	/* required element of type cusdk:NetworkAddr */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE_cusdk__NatInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__NatInfo() { cusdk__NatInfo::soap_default(NULL); }
	virtual ~cusdk__NatInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__MediaNetInfo
#define SOAP_TYPE_cusdk__MediaNetInfo (97)
/* cusdk:MediaNetInfo */
class SOAP_CMAC cusdk__MediaNetInfo
{
public:
	cusdk__NatInfo videoRtpNatInfo;	/* required element of type cusdk:NatInfo */
	cusdk__NatInfo videoRtcpNatInfo;	/* required element of type cusdk:NatInfo */
	cusdk__NatInfo audioRtpNatInfo;	/* required element of type cusdk:NatInfo */
	cusdk__NatInfo audioRtcpNatInfo;	/* required element of type cusdk:NatInfo */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE_cusdk__MediaNetInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__MediaNetInfo() { cusdk__MediaNetInfo::soap_default(NULL); }
	virtual ~cusdk__MediaNetInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__OrderMediaFormat
#define SOAP_TYPE_cusdk__OrderMediaFormat (98)
/* cusdk:OrderMediaFormat */
class SOAP_CMAC cusdk__OrderMediaFormat
{
public:
	bool needTransMediaFormat;	/* required element of type xsd:boolean */
	enum cusdk__EVideoFormat dstVideoFormat;	/* required element of type cusdk:EVideoFormat */
	enum cusdk__EVideoSolution dstSolution;	/* required element of type cusdk:EVideoSolution */
	int dstFrameRate;	/* required element of type xsd:int */
	int dstBitRate;	/* required element of type xsd:int */
	enum cusdk__EAudioFormat dstAudioFormat;	/* required element of type cusdk:EAudioFormat */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE_cusdk__OrderMediaFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__OrderMediaFormat() { cusdk__OrderMediaFormat::soap_default(NULL); }
	virtual ~cusdk__OrderMediaFormat() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BaseReq
#define SOAP_TYPE_cusdk__BaseReq (99)
/* cusdk:BaseReq */
class SOAP_CMAC cusdk__BaseReq
{
public:
	std::string session;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE_cusdk__BaseReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BaseReq() { cusdk__BaseReq::soap_default(NULL); }
	virtual ~cusdk__BaseReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__BaseRsp
#define SOAP_TYPE_cusdk__BaseRsp (100)
/* cusdk:BaseRsp */
class SOAP_CMAC cusdk__BaseRsp
{
public:
	long errorCode;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE_cusdk__BaseRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__BaseRsp() { cusdk__BaseRsp::soap_default(NULL); }
	virtual ~cusdk__BaseRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__STUNServerInfo
#define SOAP_TYPE_cusdk__STUNServerInfo (101)
/* cusdk:STUNServerInfo */
class SOAP_CMAC cusdk__STUNServerInfo
{
public:
	std::string ip;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE_cusdk__STUNServerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__STUNServerInfo() { cusdk__STUNServerInfo::soap_default(NULL); }
	virtual ~cusdk__STUNServerInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LoginReq
#define SOAP_TYPE_cusdk__LoginReq (102)
/* cusdk:LoginReq */
class SOAP_CMAC cusdk__LoginReq
{
public:
	std::string userName;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
	std::string cusdkVersion;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE_cusdk__LoginReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LoginReq() { cusdk__LoginReq::soap_default(NULL); }
	virtual ~cusdk__LoginReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LoginRsp
#define SOAP_TYPE_cusdk__LoginRsp (103)
/* cusdk:LoginRsp */
class SOAP_CMAC cusdk__LoginRsp : public cusdk__BaseRsp
{
public:
	std::string session;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string cmsVersion;	/* required element of type xsd:string */
	cusdk__STUNServerInfo stunInfo;	/* required element of type cusdk:STUNServerInfo */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE_cusdk__LoginRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LoginRsp() { cusdk__LoginRsp::soap_default(NULL); }
	virtual ~cusdk__LoginRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__login
#define SOAP_TYPE_cusdk__login (106)
/* cusdk:login */
struct cusdk__login
{
public:
	cusdk__LoginReq loginReq;	/* required element of type cusdk:LoginReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__LogoutReq
#define SOAP_TYPE_cusdk__LogoutReq (107)
/* cusdk:LogoutReq */
class SOAP_CMAC cusdk__LogoutReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE_cusdk__LogoutReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LogoutReq() { cusdk__LogoutReq::soap_default(NULL); }
	virtual ~cusdk__LogoutReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__LogoutRsp
#define SOAP_TYPE_cusdk__LogoutRsp (108)
/* cusdk:LogoutRsp */
class SOAP_CMAC cusdk__LogoutRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 108; } /* = unique id SOAP_TYPE_cusdk__LogoutRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__LogoutRsp() { cusdk__LogoutRsp::soap_default(NULL); }
	virtual ~cusdk__LogoutRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__logout
#define SOAP_TYPE_cusdk__logout (111)
/* cusdk:logout */
struct cusdk__logout
{
public:
	cusdk__LogoutReq logoutReq;	/* required element of type cusdk:LogoutReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PuStatusSubscription
#define SOAP_TYPE_cusdk__PuStatusSubscription (112)
/* cusdk:PuStatusSubscription */
class SOAP_CMAC cusdk__PuStatusSubscription
{
public:
	std::string devURI;	/* required element of type xsd:string */
	std::set<enum cusdk__EPuSubscribeType >subscribeTypes;	/* optional element of type cusdk:EPuSubscribeType */
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE_cusdk__PuStatusSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PuStatusSubscription() { cusdk__PuStatusSubscription::soap_default(NULL); }
	virtual ~cusdk__PuStatusSubscription() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SubscribePuStatusReq
#define SOAP_TYPE_cusdk__SubscribePuStatusReq (114)
/* cusdk:SubscribePuStatusReq */
class SOAP_CMAC cusdk__SubscribePuStatusReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__PuStatusSubscription >subscriptionList;	/* optional element of type cusdk:PuStatusSubscription */
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE_cusdk__SubscribePuStatusReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SubscribePuStatusReq() { cusdk__SubscribePuStatusReq::soap_default(NULL); }
	virtual ~cusdk__SubscribePuStatusReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SubscribePuStatusRsp
#define SOAP_TYPE_cusdk__SubscribePuStatusRsp (116)
/* cusdk:SubscribePuStatusRsp */
class SOAP_CMAC cusdk__SubscribePuStatusRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__PuStatusSubscription >failedList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:PuStatusSubscription */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE_cusdk__SubscribePuStatusRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SubscribePuStatusRsp() { cusdk__SubscribePuStatusRsp::soap_default(NULL); }
	virtual ~cusdk__SubscribePuStatusRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SubscribePuStatus
#define SOAP_TYPE_cusdk__SubscribePuStatus (119)
/* cusdk:SubscribePuStatus */
struct cusdk__SubscribePuStatus
{
public:
	cusdk__SubscribePuStatusReq subscribePuStatusReq;	/* required element of type cusdk:SubscribePuStatusReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UnsubscribePuStatusReq
#define SOAP_TYPE_cusdk__UnsubscribePuStatusReq (120)
/* cusdk:UnsubscribePuStatusReq */
class SOAP_CMAC cusdk__UnsubscribePuStatusReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__PuStatusSubscription >subscriptionList;	/* optional element of type cusdk:PuStatusSubscription */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE_cusdk__UnsubscribePuStatusReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnsubscribePuStatusReq() { cusdk__UnsubscribePuStatusReq::soap_default(NULL); }
	virtual ~cusdk__UnsubscribePuStatusReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnsubscribePuStatusRsp
#define SOAP_TYPE_cusdk__UnsubscribePuStatusRsp (121)
/* cusdk:UnsubscribePuStatusRsp */
class SOAP_CMAC cusdk__UnsubscribePuStatusRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__PuStatusSubscription >failedList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:PuStatusSubscription */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_cusdk__UnsubscribePuStatusRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UnsubscribePuStatusRsp() { cusdk__UnsubscribePuStatusRsp::soap_default(NULL); }
	virtual ~cusdk__UnsubscribePuStatusRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UnsubscribePuStatus
#define SOAP_TYPE_cusdk__UnsubscribePuStatus (124)
/* cusdk:UnsubscribePuStatus */
struct cusdk__UnsubscribePuStatus
{
public:
	cusdk__UnsubscribePuStatusReq unsubscribePuStatusReq;	/* required element of type cusdk:UnsubscribePuStatusReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceFullInfo
#define SOAP_TYPE_cusdk__DeviceFullInfo (125)
/* cusdk:DeviceFullInfo */
class SOAP_CMAC cusdk__DeviceFullInfo : public cusdk__DeviceInfo
{
public:
	std::vector<cusdk__DeviceGroupRelation >devGroupToChannel;	/* optional element of type cusdk:DeviceGroupRelation */
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE_cusdk__DeviceFullInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceFullInfo() { cusdk__DeviceFullInfo::soap_default(NULL); }
	virtual ~cusdk__DeviceFullInfo() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNotifyReq
#define SOAP_TYPE_cusdk__GetNotifyReq (127)
/* cusdk:GetNotifyReq */
class SOAP_CMAC cusdk__GetNotifyReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE_cusdk__GetNotifyReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetNotifyReq() { cusdk__GetNotifyReq::soap_default(NULL); }
	virtual ~cusdk__GetNotifyReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNotifyRsp
#define SOAP_TYPE_cusdk__GetNotifyRsp (128)
/* cusdk:GetNotifyRsp */
class SOAP_CMAC cusdk__GetNotifyRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__DeviceFullInfo >deviceAddNotify;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceFullInfo */
	std::vector<std::string >deviceDelNotify;	/* optional element of type xsd:string */
	std::vector<cusdk__DeviceFullInfo >deviceModNotify;	/* optional element of type cusdk:DeviceFullInfo */
	std::vector<cusdk__VideoSrcAliasChangeNotify >videoSrcAliasChangeNotify;	/* optional element of type cusdk:VideoSrcAliasChangeNotify */
	std::vector<cusdk__DeviceGroup >deviceGroupAddNotify;	/* optional element of type cusdk:DeviceGroup */
	std::vector<std::string >deviceGroupDelNotify;	/* optional element of type xsd:string */
	std::vector<cusdk__DeviceGroup >deviceGroupModNotify;	/* optional element of type cusdk:DeviceGroup */
	std::vector<cusdk__DevOnlineNotify >devOnlineNotify;	/* optional element of type cusdk:DevOnlineNotify */
	std::vector<cusdk__DevConfigNotify >devConfigNotify;	/* optional element of type cusdk:DevConfigNotify */
	std::vector<cusdk__DevServiceStatusNotify >devServiceStatusNotify;	/* optional element of type cusdk:DevServiceStatusNotify */
	std::vector<cusdk__DevAlarmNotify >devAlarmNotify;	/* optional element of type cusdk:DevAlarmNotify */
	std::vector<int >seqMarks;	/* optional element of type xsd:int */
	bool hasDataLeft;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE_cusdk__GetNotifyRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetNotifyRsp() { cusdk__GetNotifyRsp::soap_default(NULL); }
	virtual ~cusdk__GetNotifyRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetNotify
#define SOAP_TYPE_cusdk__GetNotify (140)
/* cusdk:GetNotify */
struct cusdk__GetNotify
{
public:
	cusdk__GetNotifyReq req;	/* required element of type cusdk:GetNotifyReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCUIListReq
#define SOAP_TYPE_cusdk__GetCUIListReq (141)
/* cusdk:GetCUIListReq */
class SOAP_CMAC cusdk__GetCUIListReq : public cusdk__BaseReq
{
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE_cusdk__GetCUIListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCUIListReq() { cusdk__GetCUIListReq::soap_default(NULL); }
	virtual ~cusdk__GetCUIListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCUIListRsp
#define SOAP_TYPE_cusdk__GetCUIListRsp (142)
/* cusdk:GetCUIListRsp */
class SOAP_CMAC cusdk__GetCUIListRsp : public cusdk__BaseRsp
{
public:
	std::vector<std::string >cuiList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE_cusdk__GetCUIListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetCUIListRsp() { cusdk__GetCUIListRsp::soap_default(NULL); }
	virtual ~cusdk__GetCUIListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetCUIList
#define SOAP_TYPE_cusdk__GetCUIList (145)
/* cusdk:GetCUIList */
struct cusdk__GetCUIList
{
public:
	cusdk__GetCUIListReq req;	/* required element of type cusdk:GetCUIListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupStreamReq
#define SOAP_TYPE_cusdk__SetupStreamReq (146)
/* cusdk:SetupStreamReq */
class SOAP_CMAC cusdk__SetupStreamReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
	std::string devId;	/* required element of type xsd:string */
	int devChnId;	/* required element of type xsd:int */
	enum cusdk__EPlayMode playMode;	/* required element of type cusdk:EPlayMode */
	enum cusdk__ETransMode transMode;	/* required element of type cusdk:ETransMode */
	std::vector<cusdk__MediaNetInfo >localNetInfoList;	/* optional element of type cusdk:MediaNetInfo */
	cusdk__OrderMediaFormat mediaInfo;	/* required element of type cusdk:OrderMediaFormat */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE_cusdk__SetupStreamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetupStreamReq() { cusdk__SetupStreamReq::soap_default(NULL); }
	virtual ~cusdk__SetupStreamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupStreamRsp
#define SOAP_TYPE_cusdk__SetupStreamRsp (148)
/* cusdk:SetupStreamRsp */
class SOAP_CMAC cusdk__SetupStreamRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__MediaNetInfo >remoteNetInfoList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:MediaNetInfo */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE_cusdk__SetupStreamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetupStreamRsp() { cusdk__SetupStreamRsp::soap_default(NULL); }
	virtual ~cusdk__SetupStreamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetupStream
#define SOAP_TYPE_cusdk__SetupStream (151)
/* cusdk:SetupStream */
struct cusdk__SetupStream
{
public:
	cusdk__SetupStreamReq req;	/* required element of type cusdk:SetupStreamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayStreamReq
#define SOAP_TYPE_cusdk__PlayStreamReq (152)
/* cusdk:PlayStreamReq */
class SOAP_CMAC cusdk__PlayStreamReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE_cusdk__PlayStreamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PlayStreamReq() { cusdk__PlayStreamReq::soap_default(NULL); }
	virtual ~cusdk__PlayStreamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayStreamRsp
#define SOAP_TYPE_cusdk__PlayStreamRsp (153)
/* cusdk:PlayStreamRsp */
class SOAP_CMAC cusdk__PlayStreamRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE_cusdk__PlayStreamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PlayStreamRsp() { cusdk__PlayStreamRsp::soap_default(NULL); }
	virtual ~cusdk__PlayStreamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PlayStream
#define SOAP_TYPE_cusdk__PlayStream (156)
/* cusdk:PlayStream */
struct cusdk__PlayStream
{
public:
	cusdk__PlayStreamReq req;	/* required element of type cusdk:PlayStreamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__StopStreamReq
#define SOAP_TYPE_cusdk__StopStreamReq (157)
/* cusdk:StopStreamReq */
class SOAP_CMAC cusdk__StopStreamReq : public cusdk__BaseReq
{
public:
	int playId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE_cusdk__StopStreamReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopStreamReq() { cusdk__StopStreamReq::soap_default(NULL); }
	virtual ~cusdk__StopStreamReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopStreamRsp
#define SOAP_TYPE_cusdk__StopStreamRsp (158)
/* cusdk:StopStreamRsp */
class SOAP_CMAC cusdk__StopStreamRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE_cusdk__StopStreamRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__StopStreamRsp() { cusdk__StopStreamRsp::soap_default(NULL); }
	virtual ~cusdk__StopStreamRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__StopStream
#define SOAP_TYPE_cusdk__StopStream (161)
/* cusdk:StopStream */
struct cusdk__StopStream
{
public:
	cusdk__StopStreamReq req;	/* required element of type cusdk:StopStreamReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzCtrlReq
#define SOAP_TYPE_cusdk__PtzCtrlReq (162)
/* cusdk:PtzCtrlReq */
class SOAP_CMAC cusdk__PtzCtrlReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	enum cusdk__EPtzCmd ptzCmd;	/* required element of type cusdk:EPtzCmd */
	std::vector<int >ptzParam;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE_cusdk__PtzCtrlReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzCtrlReq() { cusdk__PtzCtrlReq::soap_default(NULL); }
	virtual ~cusdk__PtzCtrlReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzCtrlRsp
#define SOAP_TYPE_cusdk__PtzCtrlRsp (163)
/* cusdk:PtzCtrlRsp */
class SOAP_CMAC cusdk__PtzCtrlRsp : public cusdk__BaseRsp
{
public:
	std::string errorDesc;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE_cusdk__PtzCtrlRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzCtrlRsp() { cusdk__PtzCtrlRsp::soap_default(NULL); }
	virtual ~cusdk__PtzCtrlRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzCtrl
#define SOAP_TYPE_cusdk__PtzCtrl (166)
/* cusdk:PtzCtrl */
struct cusdk__PtzCtrl
{
public:
	cusdk__PtzCtrlReq req;	/* required element of type cusdk:PtzCtrlReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzLockReq
#define SOAP_TYPE_cusdk__PtzLockReq (167)
/* cusdk:PtzLockReq */
class SOAP_CMAC cusdk__PtzLockReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	time_t beginTime;	/* required element of type xsd:dateTime */
	time_t endTime;	/* required element of type xsd:dateTime */
	std::string password;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE_cusdk__PtzLockReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzLockReq() { cusdk__PtzLockReq::soap_default(NULL); }
	virtual ~cusdk__PtzLockReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzLockRsp
#define SOAP_TYPE_cusdk__PtzLockRsp (168)
/* cusdk:PtzLockRsp */
class SOAP_CMAC cusdk__PtzLockRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE_cusdk__PtzLockRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzLockRsp() { cusdk__PtzLockRsp::soap_default(NULL); }
	virtual ~cusdk__PtzLockRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzLock
#define SOAP_TYPE_cusdk__PtzLock (171)
/* cusdk:PtzLock */
struct cusdk__PtzLock
{
public:
	cusdk__PtzLockReq req;	/* required element of type cusdk:PtzLockReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzUnlockReq
#define SOAP_TYPE_cusdk__PtzUnlockReq (172)
/* cusdk:PtzUnlockReq */
class SOAP_CMAC cusdk__PtzUnlockReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	std::string password;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE_cusdk__PtzUnlockReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzUnlockReq() { cusdk__PtzUnlockReq::soap_default(NULL); }
	virtual ~cusdk__PtzUnlockReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzUnlockRsp
#define SOAP_TYPE_cusdk__PtzUnlockRsp (173)
/* cusdk:PtzUnlockRsp */
class SOAP_CMAC cusdk__PtzUnlockRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE_cusdk__PtzUnlockRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__PtzUnlockRsp() { cusdk__PtzUnlockRsp::soap_default(NULL); }
	virtual ~cusdk__PtzUnlockRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__PtzUnlock
#define SOAP_TYPE_cusdk__PtzUnlock (176)
/* cusdk:PtzUnlock */
struct cusdk__PtzUnlock
{
public:
	cusdk__PtzUnlockReq req;	/* required element of type cusdk:PtzUnlockReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SendTransDataReq
#define SOAP_TYPE_cusdk__SendTransDataReq (177)
/* cusdk:SendTransDataReq */
class SOAP_CMAC cusdk__SendTransDataReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
	int videoSrcId;	/* required element of type xsd:int */
	std::string hexTransData;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE_cusdk__SendTransDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SendTransDataReq() { cusdk__SendTransDataReq::soap_default(NULL); }
	virtual ~cusdk__SendTransDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SendTransDataRsp
#define SOAP_TYPE_cusdk__SendTransDataRsp (178)
/* cusdk:SendTransDataRsp */
class SOAP_CMAC cusdk__SendTransDataRsp : public cusdk__BaseRsp
{
public:
	std::string errorDesc;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE_cusdk__SendTransDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SendTransDataRsp() { cusdk__SendTransDataRsp::soap_default(NULL); }
	virtual ~cusdk__SendTransDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SendTransData
#define SOAP_TYPE_cusdk__SendTransData (181)
/* cusdk:SendTransData */
struct cusdk__SendTransData
{
public:
	cusdk__SendTransDataReq req;	/* required element of type cusdk:SendTransDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserInfoReq
#define SOAP_TYPE_cusdk__GetUserInfoReq (182)
/* cusdk:GetUserInfoReq */
class SOAP_CMAC cusdk__GetUserInfoReq : public cusdk__BaseReq
{
public:
	std::string userName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE_cusdk__GetUserInfoReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserInfoReq() { cusdk__GetUserInfoReq::soap_default(NULL); }
	virtual ~cusdk__GetUserInfoReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserInfoRsp
#define SOAP_TYPE_cusdk__GetUserInfoRsp (183)
/* cusdk:GetUserInfoRsp */
class SOAP_CMAC cusdk__GetUserInfoRsp : public cusdk__BaseRsp
{
public:
	cusdk__UserInfo userInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:UserInfo */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE_cusdk__GetUserInfoRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserInfoRsp() { cusdk__GetUserInfoRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserInfoRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserInfo
#define SOAP_TYPE_cusdk__GetUserInfo (186)
/* cusdk:GetUserInfo */
struct cusdk__GetUserInfo
{
public:
	cusdk__GetUserInfoReq req;	/* required element of type cusdk:GetUserInfoReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupInfoReq
#define SOAP_TYPE_cusdk__GetUserGroupInfoReq (187)
/* cusdk:GetUserGroupInfoReq */
class SOAP_CMAC cusdk__GetUserGroupInfoReq : public cusdk__BaseReq
{
public:
	std::string userGroupId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE_cusdk__GetUserGroupInfoReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserGroupInfoReq() { cusdk__GetUserGroupInfoReq::soap_default(NULL); }
	virtual ~cusdk__GetUserGroupInfoReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupInfoRsp
#define SOAP_TYPE_cusdk__GetUserGroupInfoRsp (188)
/* cusdk:GetUserGroupInfoRsp */
class SOAP_CMAC cusdk__GetUserGroupInfoRsp : public cusdk__BaseRsp
{
public:
	cusdk__UserGroup userGroupInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:UserGroup */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE_cusdk__GetUserGroupInfoRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserGroupInfoRsp() { cusdk__GetUserGroupInfoRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserGroupInfoRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupInfo
#define SOAP_TYPE_cusdk__GetUserGroupInfo (191)
/* cusdk:GetUserGroupInfo */
struct cusdk__GetUserGroupInfo
{
public:
	cusdk__GetUserGroupInfoReq req;	/* required element of type cusdk:GetUserGroupInfoReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDataReq
#define SOAP_TYPE_cusdk__GetUserDataReq (192)
/* cusdk:GetUserDataReq */
class SOAP_CMAC cusdk__GetUserDataReq : public cusdk__BaseReq
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE_cusdk__GetUserDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDataReq() { cusdk__GetUserDataReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDataRsp
#define SOAP_TYPE_cusdk__GetUserDataRsp (193)
/* cusdk:GetUserDataRsp */
class SOAP_CMAC cusdk__GetUserDataRsp : public cusdk__BaseRsp
{
public:
	std::string value;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE_cusdk__GetUserDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDataRsp() { cusdk__GetUserDataRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserData
#define SOAP_TYPE_cusdk__GetUserData (196)
/* cusdk:GetUserData */
struct cusdk__GetUserData
{
public:
	cusdk__GetUserDataReq req;	/* required element of type cusdk:GetUserDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__SetUserDataReq
#define SOAP_TYPE_cusdk__SetUserDataReq (197)
/* cusdk:SetUserDataReq */
class SOAP_CMAC cusdk__SetUserDataReq : public cusdk__BaseReq
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE_cusdk__SetUserDataReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetUserDataReq() { cusdk__SetUserDataReq::soap_default(NULL); }
	virtual ~cusdk__SetUserDataReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetUserDataRsp
#define SOAP_TYPE_cusdk__SetUserDataRsp (198)
/* cusdk:SetUserDataRsp */
class SOAP_CMAC cusdk__SetUserDataRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE_cusdk__SetUserDataRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__SetUserDataRsp() { cusdk__SetUserDataRsp::soap_default(NULL); }
	virtual ~cusdk__SetUserDataRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__SetUserData
#define SOAP_TYPE_cusdk__SetUserData (201)
/* cusdk:SetUserData */
struct cusdk__SetUserData
{
public:
	cusdk__SetUserDataReq req;	/* required element of type cusdk:SetUserDataReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq
#define SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq (202)
/* cusdk:GetUserDevGroupByGroupReq */
class SOAP_CMAC cusdk__GetUserDevGroupByGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string parentDevGroupId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE_cusdk__GetUserDevGroupByGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevGroupByGroupReq() { cusdk__GetUserDevGroupByGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDevGroupByGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp
#define SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp (203)
/* cusdk:GetUserDevGroupByGroupRsp */
class SOAP_CMAC cusdk__GetUserDevGroupByGroupRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__DeviceGroup >devGroupList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceGroup */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE_cusdk__GetUserDevGroupByGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevGroupByGroupRsp() { cusdk__GetUserDevGroupByGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDevGroupByGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupByGroup
#define SOAP_TYPE_cusdk__GetUserDevGroupByGroup (206)
/* cusdk:GetUserDevGroupByGroup */
struct cusdk__GetUserDevGroupByGroup
{
public:
	cusdk__GetUserDevGroupByGroupReq req;	/* required element of type cusdk:GetUserDevGroupByGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevByGroupReq
#define SOAP_TYPE_cusdk__GetUserDevByGroupReq (207)
/* cusdk:GetUserDevByGroupReq */
class SOAP_CMAC cusdk__GetUserDevByGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string devGroupId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE_cusdk__GetUserDevByGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevByGroupReq() { cusdk__GetUserDevByGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDevByGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevByGroupRsp
#define SOAP_TYPE_cusdk__GetUserDevByGroupRsp (208)
/* cusdk:GetUserDevByGroupRsp */
class SOAP_CMAC cusdk__GetUserDevByGroupRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__DeviceInfo >devList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceInfo */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE_cusdk__GetUserDevByGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevByGroupRsp() { cusdk__GetUserDevByGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDevByGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevByGroup
#define SOAP_TYPE_cusdk__GetUserDevByGroup (212)
/* cusdk:GetUserDevByGroup */
struct cusdk__GetUserDevByGroup
{
public:
	cusdk__GetUserDevByGroupReq req;	/* required element of type cusdk:GetUserDevByGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupReq
#define SOAP_TYPE_cusdk__GetUserDevGroupReq (213)
/* cusdk:GetUserDevGroupReq */
class SOAP_CMAC cusdk__GetUserDevGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE_cusdk__GetUserDevGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevGroupReq() { cusdk__GetUserDevGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDevGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroupRsp
#define SOAP_TYPE_cusdk__GetUserDevGroupRsp (214)
/* cusdk:GetUserDevGroupRsp */
class SOAP_CMAC cusdk__GetUserDevGroupRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__DeviceGroup >devGroupList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceGroup */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE_cusdk__GetUserDevGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevGroupRsp() { cusdk__GetUserDevGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDevGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevGroup
#define SOAP_TYPE_cusdk__GetUserDevGroup (217)
/* cusdk:GetUserDevGroup */
struct cusdk__GetUserDevGroup
{
public:
	cusdk__GetUserDevGroupReq req;	/* required element of type cusdk:GetUserDevGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDomainDevGroupReq
#define SOAP_TYPE_cusdk__GetDomainDevGroupReq (218)
/* cusdk:GetDomainDevGroupReq */
class SOAP_CMAC cusdk__GetDomainDevGroupReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	std::string domainId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE_cusdk__GetDomainDevGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDomainDevGroupReq() { cusdk__GetDomainDevGroupReq::soap_default(NULL); }
	virtual ~cusdk__GetDomainDevGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDomainDevGroupRsp
#define SOAP_TYPE_cusdk__GetDomainDevGroupRsp (219)
/* cusdk:GetDomainDevGroupRsp */
class SOAP_CMAC cusdk__GetDomainDevGroupRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__DeviceGroup >devGroupList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceGroup */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE_cusdk__GetDomainDevGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDomainDevGroupRsp() { cusdk__GetDomainDevGroupRsp::soap_default(NULL); }
	virtual ~cusdk__GetDomainDevGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDomainDevGroup
#define SOAP_TYPE_cusdk__GetDomainDevGroup (222)
/* cusdk:GetDomainDevGroup */
struct cusdk__GetDomainDevGroup
{
public:
	cusdk__GetDomainDevGroupReq req;	/* required element of type cusdk:GetDomainDevGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevReq
#define SOAP_TYPE_cusdk__GetUserDevReq (223)
/* cusdk:GetUserDevReq */
class SOAP_CMAC cusdk__GetUserDevReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE_cusdk__GetUserDevReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevReq() { cusdk__GetUserDevReq::soap_default(NULL); }
	virtual ~cusdk__GetUserDevReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevRsp
#define SOAP_TYPE_cusdk__GetUserDevRsp (224)
/* cusdk:GetUserDevRsp */
class SOAP_CMAC cusdk__GetUserDevRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__DeviceInfo >devList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceInfo */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE_cusdk__GetUserDevRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserDevRsp() { cusdk__GetUserDevRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserDevRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDev
#define SOAP_TYPE_cusdk__GetUserDev (227)
/* cusdk:GetUserDev */
struct cusdk__GetUserDev
{
public:
	cusdk__GetUserDevReq req;	/* required element of type cusdk:GetUserDevReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDevByDomainReq
#define SOAP_TYPE_cusdk__GetDevByDomainReq (228)
/* cusdk:GetDevByDomainReq */
class SOAP_CMAC cusdk__GetDevByDomainReq : public cusdk__BaseReq
{
public:
	std::string domainId;	/* required element of type xsd:string */
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 228; } /* = unique id SOAP_TYPE_cusdk__GetDevByDomainReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDevByDomainReq() { cusdk__GetDevByDomainReq::soap_default(NULL); }
	virtual ~cusdk__GetDevByDomainReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDevByDomainRsp
#define SOAP_TYPE_cusdk__GetDevByDomainRsp (229)
/* cusdk:GetDevByDomainRsp */
class SOAP_CMAC cusdk__GetDevByDomainRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__DeviceInfo >devList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceInfo */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 229; } /* = unique id SOAP_TYPE_cusdk__GetDevByDomainRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDevByDomainRsp() { cusdk__GetDevByDomainRsp::soap_default(NULL); }
	virtual ~cusdk__GetDevByDomainRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserDevByDomain
#define SOAP_TYPE_cusdk__GetUserDevByDomain (232)
/* cusdk:GetUserDevByDomain */
struct cusdk__GetUserDevByDomain
{
public:
	cusdk__GetDevByDomainReq req;	/* required element of type cusdk:GetDevByDomainReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq
#define SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq (233)
/* cusdk:GetDeviceGroupDeviceRelationsReq */
class SOAP_CMAC cusdk__GetDeviceGroupDeviceRelationsReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 233; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupDeviceRelationsReq() { cusdk__GetDeviceGroupDeviceRelationsReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupDeviceRelationsReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp
#define SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp (234)
/* cusdk:GetDeviceGroupDeviceRelationsRsp */
class SOAP_CMAC cusdk__GetDeviceGroupDeviceRelationsRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__DeviceGroupRelation >devGroupRelationList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:DeviceGroupRelation */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 234; } /* = unique id SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelationsRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceGroupDeviceRelationsRsp() { cusdk__GetDeviceGroupDeviceRelationsRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceGroupDeviceRelationsRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations
#define SOAP_TYPE_cusdk__GetDeviceGroupDeviceRelations (237)
/* cusdk:GetDeviceGroupDeviceRelations */
struct cusdk__GetDeviceGroupDeviceRelations
{
public:
	cusdk__GetDeviceGroupDeviceRelationsReq req;	/* required element of type cusdk:GetDeviceGroupDeviceRelationsReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateDeviceGroupReq
#define SOAP_TYPE_cusdk__CreateDeviceGroupReq (238)
/* cusdk:CreateDeviceGroupReq */
class SOAP_CMAC cusdk__CreateDeviceGroupReq : public cusdk__BaseReq
{
public:
	cusdk__DeviceGroup deviceGroupInfo;	/* required element of type cusdk:DeviceGroup */
public:
	virtual int soap_type() const { return 238; } /* = unique id SOAP_TYPE_cusdk__CreateDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateDeviceGroupReq() { cusdk__CreateDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__CreateDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateDeviceGroupRsp
#define SOAP_TYPE_cusdk__CreateDeviceGroupRsp (239)
/* cusdk:CreateDeviceGroupRsp */
class SOAP_CMAC cusdk__CreateDeviceGroupRsp : public cusdk__BaseRsp
{
public:
	std::string deviceGroupId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 239; } /* = unique id SOAP_TYPE_cusdk__CreateDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateDeviceGroupRsp() { cusdk__CreateDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__CreateDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateDeviceGroup
#define SOAP_TYPE_cusdk__CreateDeviceGroup (242)
/* cusdk:CreateDeviceGroup */
struct cusdk__CreateDeviceGroup
{
public:
	cusdk__CreateDeviceGroupReq req;	/* required element of type cusdk:CreateDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelDeviceGroupReq
#define SOAP_TYPE_cusdk__DelDeviceGroupReq (243)
/* cusdk:DelDeviceGroupReq */
class SOAP_CMAC cusdk__DelDeviceGroupReq : public cusdk__BaseReq
{
public:
	std::string deviceGroupId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 243; } /* = unique id SOAP_TYPE_cusdk__DelDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelDeviceGroupReq() { cusdk__DelDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__DelDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelDeviceGroupRsp
#define SOAP_TYPE_cusdk__DelDeviceGroupRsp (244)
/* cusdk:DelDeviceGroupRsp */
class SOAP_CMAC cusdk__DelDeviceGroupRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 244; } /* = unique id SOAP_TYPE_cusdk__DelDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelDeviceGroupRsp() { cusdk__DelDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__DelDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelDeviceGroup
#define SOAP_TYPE_cusdk__DelDeviceGroup (247)
/* cusdk:DelDeviceGroup */
struct cusdk__DelDeviceGroup
{
public:
	cusdk__DelDeviceGroupReq req;	/* required element of type cusdk:DelDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyDeviceGroupReq
#define SOAP_TYPE_cusdk__ModifyDeviceGroupReq (248)
/* cusdk:ModifyDeviceGroupReq */
class SOAP_CMAC cusdk__ModifyDeviceGroupReq : public cusdk__BaseReq
{
public:
	cusdk__DeviceGroup deviceGroupInfo;	/* required element of type cusdk:DeviceGroup */
public:
	virtual int soap_type() const { return 248; } /* = unique id SOAP_TYPE_cusdk__ModifyDeviceGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyDeviceGroupReq() { cusdk__ModifyDeviceGroupReq::soap_default(NULL); }
	virtual ~cusdk__ModifyDeviceGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyDeviceGroupRsp
#define SOAP_TYPE_cusdk__ModifyDeviceGroupRsp (249)
/* cusdk:ModifyDeviceGroupRsp */
class SOAP_CMAC cusdk__ModifyDeviceGroupRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 249; } /* = unique id SOAP_TYPE_cusdk__ModifyDeviceGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyDeviceGroupRsp() { cusdk__ModifyDeviceGroupRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyDeviceGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyDeviceGroup
#define SOAP_TYPE_cusdk__ModifyDeviceGroup (252)
/* cusdk:ModifyDeviceGroup */
struct cusdk__ModifyDeviceGroup
{
public:
	cusdk__ModifyDeviceGroupReq req;	/* required element of type cusdk:ModifyDeviceGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq
#define SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq (253)
/* cusdk:DeviceGroupAddDeviceReq */
class SOAP_CMAC cusdk__DeviceGroupAddDeviceReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__DeviceGroupRelation >relationList;	/* optional element of type cusdk:DeviceGroupRelation */
public:
	virtual int soap_type() const { return 253; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupAddDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupAddDeviceReq() { cusdk__DeviceGroupAddDeviceReq::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupAddDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp
#define SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp (254)
/* cusdk:DeviceGroupAddDeviceRsp */
class SOAP_CMAC cusdk__DeviceGroupAddDeviceRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 254; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupAddDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupAddDeviceRsp() { cusdk__DeviceGroupAddDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupAddDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupAddDevice
#define SOAP_TYPE_cusdk__DeviceGroupAddDevice (257)
/* cusdk:DeviceGroupAddDevice */
struct cusdk__DeviceGroupAddDevice
{
public:
	cusdk__DeviceGroupAddDeviceReq req;	/* required element of type cusdk:DeviceGroupAddDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq
#define SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq (258)
/* cusdk:DeviceGroupDelDeviceReq */
class SOAP_CMAC cusdk__DeviceGroupDelDeviceReq : public cusdk__BaseReq
{
public:
	std::vector<cusdk__DeviceGroupRelation >relationList;	/* optional element of type cusdk:DeviceGroupRelation */
public:
	virtual int soap_type() const { return 258; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupDelDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupDelDeviceReq() { cusdk__DeviceGroupDelDeviceReq::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupDelDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp
#define SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp (259)
/* cusdk:DeviceGroupDelDeviceRsp */
class SOAP_CMAC cusdk__DeviceGroupDelDeviceRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 259; } /* = unique id SOAP_TYPE_cusdk__DeviceGroupDelDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DeviceGroupDelDeviceRsp() { cusdk__DeviceGroupDelDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__DeviceGroupDelDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DeviceGroupDelDevice
#define SOAP_TYPE_cusdk__DeviceGroupDelDevice (262)
/* cusdk:DeviceGroupDelDevice */
struct cusdk__DeviceGroupDelDevice
{
public:
	cusdk__DeviceGroupDelDeviceReq req;	/* required element of type cusdk:DeviceGroupDelDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserListReq
#define SOAP_TYPE_cusdk__GetUserListReq (263)
/* cusdk:GetUserListReq */
class SOAP_CMAC cusdk__GetUserListReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE_cusdk__GetUserListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserListReq() { cusdk__GetUserListReq::soap_default(NULL); }
	virtual ~cusdk__GetUserListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserListRsp
#define SOAP_TYPE_cusdk__GetUserListRsp (264)
/* cusdk:GetUserListRsp */
class SOAP_CMAC cusdk__GetUserListRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__UserInfo >userInfoList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:UserInfo */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 264; } /* = unique id SOAP_TYPE_cusdk__GetUserListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserListRsp() { cusdk__GetUserListRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserList
#define SOAP_TYPE_cusdk__GetUserList (268)
/* cusdk:GetUserList */
struct cusdk__GetUserList
{
public:
	cusdk__GetUserListReq req;	/* required element of type cusdk:GetUserListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupListReq
#define SOAP_TYPE_cusdk__GetUserGroupListReq (269)
/* cusdk:GetUserGroupListReq */
class SOAP_CMAC cusdk__GetUserGroupListReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 269; } /* = unique id SOAP_TYPE_cusdk__GetUserGroupListReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserGroupListReq() { cusdk__GetUserGroupListReq::soap_default(NULL); }
	virtual ~cusdk__GetUserGroupListReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupListRsp
#define SOAP_TYPE_cusdk__GetUserGroupListRsp (270)
/* cusdk:GetUserGroupListRsp */
class SOAP_CMAC cusdk__GetUserGroupListRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__UserGroup >userGroupList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:UserGroup */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 270; } /* = unique id SOAP_TYPE_cusdk__GetUserGroupListRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetUserGroupListRsp() { cusdk__GetUserGroupListRsp::soap_default(NULL); }
	virtual ~cusdk__GetUserGroupListRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetUserGroupList
#define SOAP_TYPE_cusdk__GetUserGroupList (274)
/* cusdk:GetUserGroupList */
struct cusdk__GetUserGroupList
{
public:
	cusdk__GetUserGroupListReq req;	/* required element of type cusdk:GetUserGroupListReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserGroupReq
#define SOAP_TYPE_cusdk__CreateUserGroupReq (275)
/* cusdk:CreateUserGroupReq */
class SOAP_CMAC cusdk__CreateUserGroupReq : public cusdk__BaseReq
{
public:
	cusdk__UserGroup userGroupInfo;	/* required element of type cusdk:UserGroup */
public:
	virtual int soap_type() const { return 275; } /* = unique id SOAP_TYPE_cusdk__CreateUserGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateUserGroupReq() { cusdk__CreateUserGroupReq::soap_default(NULL); }
	virtual ~cusdk__CreateUserGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserGroupRsp
#define SOAP_TYPE_cusdk__CreateUserGroupRsp (276)
/* cusdk:CreateUserGroupRsp */
class SOAP_CMAC cusdk__CreateUserGroupRsp : public cusdk__BaseRsp
{
public:
	std::string userGroupId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 276; } /* = unique id SOAP_TYPE_cusdk__CreateUserGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateUserGroupRsp() { cusdk__CreateUserGroupRsp::soap_default(NULL); }
	virtual ~cusdk__CreateUserGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserGroup
#define SOAP_TYPE_cusdk__CreateUserGroup (279)
/* cusdk:CreateUserGroup */
struct cusdk__CreateUserGroup
{
public:
	cusdk__CreateUserGroupReq req;	/* required element of type cusdk:CreateUserGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserGroupReq
#define SOAP_TYPE_cusdk__DelUserGroupReq (280)
/* cusdk:DelUserGroupReq */
class SOAP_CMAC cusdk__DelUserGroupReq : public cusdk__BaseReq
{
public:
	std::string userGroupId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 280; } /* = unique id SOAP_TYPE_cusdk__DelUserGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserGroupReq() { cusdk__DelUserGroupReq::soap_default(NULL); }
	virtual ~cusdk__DelUserGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserGroupRsp
#define SOAP_TYPE_cusdk__DelUserGroupRsp (281)
/* cusdk:DelUserGroupRsp */
class SOAP_CMAC cusdk__DelUserGroupRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 281; } /* = unique id SOAP_TYPE_cusdk__DelUserGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserGroupRsp() { cusdk__DelUserGroupRsp::soap_default(NULL); }
	virtual ~cusdk__DelUserGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserGroup
#define SOAP_TYPE_cusdk__DelUserGroup (284)
/* cusdk:DelUserGroup */
struct cusdk__DelUserGroup
{
public:
	cusdk__DelUserGroupReq req;	/* required element of type cusdk:DelUserGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserGroupReq
#define SOAP_TYPE_cusdk__ModifyUserGroupReq (285)
/* cusdk:ModifyUserGroupReq */
class SOAP_CMAC cusdk__ModifyUserGroupReq : public cusdk__BaseReq
{
public:
	cusdk__UserGroup userGroupInfo;	/* required element of type cusdk:UserGroup */
public:
	virtual int soap_type() const { return 285; } /* = unique id SOAP_TYPE_cusdk__ModifyUserGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyUserGroupReq() { cusdk__ModifyUserGroupReq::soap_default(NULL); }
	virtual ~cusdk__ModifyUserGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserGroupRsp
#define SOAP_TYPE_cusdk__ModifyUserGroupRsp (286)
/* cusdk:ModifyUserGroupRsp */
class SOAP_CMAC cusdk__ModifyUserGroupRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 286; } /* = unique id SOAP_TYPE_cusdk__ModifyUserGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyUserGroupRsp() { cusdk__ModifyUserGroupRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyUserGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserGroup
#define SOAP_TYPE_cusdk__ModifyUserGroup (289)
/* cusdk:ModifyUserGroup */
struct cusdk__ModifyUserGroup
{
public:
	cusdk__ModifyUserGroupReq req;	/* required element of type cusdk:ModifyUserGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserReq
#define SOAP_TYPE_cusdk__CreateUserReq (290)
/* cusdk:CreateUserReq */
class SOAP_CMAC cusdk__CreateUserReq : public cusdk__BaseReq
{
public:
	cusdk__UserInfo userInfo;	/* required element of type cusdk:UserInfo */
public:
	virtual int soap_type() const { return 290; } /* = unique id SOAP_TYPE_cusdk__CreateUserReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateUserReq() { cusdk__CreateUserReq::soap_default(NULL); }
	virtual ~cusdk__CreateUserReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUserRsp
#define SOAP_TYPE_cusdk__CreateUserRsp (291)
/* cusdk:CreateUserRsp */
class SOAP_CMAC cusdk__CreateUserRsp : public cusdk__BaseRsp
{
public:
	std::string userId;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 291; } /* = unique id SOAP_TYPE_cusdk__CreateUserRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__CreateUserRsp() { cusdk__CreateUserRsp::soap_default(NULL); }
	virtual ~cusdk__CreateUserRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__CreateUser
#define SOAP_TYPE_cusdk__CreateUser (294)
/* cusdk:CreateUser */
struct cusdk__CreateUser
{
public:
	cusdk__CreateUserReq req;	/* required element of type cusdk:CreateUserReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserReq
#define SOAP_TYPE_cusdk__DelUserReq (295)
/* cusdk:DelUserReq */
class SOAP_CMAC cusdk__DelUserReq : public cusdk__BaseReq
{
public:
	std::string userId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 295; } /* = unique id SOAP_TYPE_cusdk__DelUserReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserReq() { cusdk__DelUserReq::soap_default(NULL); }
	virtual ~cusdk__DelUserReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUserRsp
#define SOAP_TYPE_cusdk__DelUserRsp (296)
/* cusdk:DelUserRsp */
class SOAP_CMAC cusdk__DelUserRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 296; } /* = unique id SOAP_TYPE_cusdk__DelUserRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelUserRsp() { cusdk__DelUserRsp::soap_default(NULL); }
	virtual ~cusdk__DelUserRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelUser
#define SOAP_TYPE_cusdk__DelUser (299)
/* cusdk:DelUser */
struct cusdk__DelUser
{
public:
	cusdk__DelUserReq req;	/* required element of type cusdk:DelUserReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserReq
#define SOAP_TYPE_cusdk__ModifyUserReq (300)
/* cusdk:ModifyUserReq */
class SOAP_CMAC cusdk__ModifyUserReq : public cusdk__BaseReq
{
public:
	cusdk__UserInfo userInfo;	/* required element of type cusdk:UserInfo */
public:
	virtual int soap_type() const { return 300; } /* = unique id SOAP_TYPE_cusdk__ModifyUserReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyUserReq() { cusdk__ModifyUserReq::soap_default(NULL); }
	virtual ~cusdk__ModifyUserReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUserRsp
#define SOAP_TYPE_cusdk__ModifyUserRsp (301)
/* cusdk:ModifyUserRsp */
class SOAP_CMAC cusdk__ModifyUserRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 301; } /* = unique id SOAP_TYPE_cusdk__ModifyUserRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyUserRsp() { cusdk__ModifyUserRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyUserRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyUser
#define SOAP_TYPE_cusdk__ModifyUser (304)
/* cusdk:ModifyUser */
struct cusdk__ModifyUser
{
public:
	cusdk__ModifyUserReq req;	/* required element of type cusdk:ModifyUserReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGetDeviceByGroupReq
#define SOAP_TYPE_cusdk__UserGetDeviceByGroupReq (305)
/* cusdk:UserGetDeviceByGroupReq */
class SOAP_CMAC cusdk__UserGetDeviceByGroupReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::string deviceGroupId;	/* required element of type xsd:string */
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 305; } /* = unique id SOAP_TYPE_cusdk__UserGetDeviceByGroupReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGetDeviceByGroupReq() { cusdk__UserGetDeviceByGroupReq::soap_default(NULL); }
	virtual ~cusdk__UserGetDeviceByGroupReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp
#define SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp (306)
/* cusdk:UserGetDeviceByGroupRsp */
class SOAP_CMAC cusdk__UserGetDeviceByGroupRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__AssignDeviceInfo >deviceList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:AssignDeviceInfo */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 306; } /* = unique id SOAP_TYPE_cusdk__UserGetDeviceByGroupRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserGetDeviceByGroupRsp() { cusdk__UserGetDeviceByGroupRsp::soap_default(NULL); }
	virtual ~cusdk__UserGetDeviceByGroupRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserGetDeviceByGroup
#define SOAP_TYPE_cusdk__UserGetDeviceByGroup (310)
/* cusdk:UserGetDeviceByGroup */
struct cusdk__UserGetDeviceByGroup
{
public:
	cusdk__UserGetDeviceByGroupReq req;	/* required element of type cusdk:UserGetDeviceByGroupReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddDeviceReq
#define SOAP_TYPE_cusdk__UserAddDeviceReq (311)
/* cusdk:UserAddDeviceReq */
class SOAP_CMAC cusdk__UserAddDeviceReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::vector<cusdk__AssignDeviceInfo >deviceList;	/* optional element of type cusdk:AssignDeviceInfo */
public:
	virtual int soap_type() const { return 311; } /* = unique id SOAP_TYPE_cusdk__UserAddDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserAddDeviceReq() { cusdk__UserAddDeviceReq::soap_default(NULL); }
	virtual ~cusdk__UserAddDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddDeviceRsp
#define SOAP_TYPE_cusdk__UserAddDeviceRsp (312)
/* cusdk:UserAddDeviceRsp */
class SOAP_CMAC cusdk__UserAddDeviceRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE_cusdk__UserAddDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserAddDeviceRsp() { cusdk__UserAddDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__UserAddDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserAddDevice
#define SOAP_TYPE_cusdk__UserAddDevice (315)
/* cusdk:UserAddDevice */
struct cusdk__UserAddDevice
{
public:
	cusdk__UserAddDeviceReq req;	/* required element of type cusdk:UserAddDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelDeviceReq
#define SOAP_TYPE_cusdk__UserDelDeviceReq (316)
/* cusdk:UserDelDeviceReq */
class SOAP_CMAC cusdk__UserDelDeviceReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::vector<cusdk__AssignDeviceInfo >deviceList;	/* optional element of type cusdk:AssignDeviceInfo */
public:
	virtual int soap_type() const { return 316; } /* = unique id SOAP_TYPE_cusdk__UserDelDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserDelDeviceReq() { cusdk__UserDelDeviceReq::soap_default(NULL); }
	virtual ~cusdk__UserDelDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelDeviceRsp
#define SOAP_TYPE_cusdk__UserDelDeviceRsp (317)
/* cusdk:UserDelDeviceRsp */
class SOAP_CMAC cusdk__UserDelDeviceRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE_cusdk__UserDelDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserDelDeviceRsp() { cusdk__UserDelDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__UserDelDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserDelDevice
#define SOAP_TYPE_cusdk__UserDelDevice (320)
/* cusdk:UserDelDevice */
struct cusdk__UserDelDevice
{
public:
	cusdk__UserDelDeviceReq req;	/* required element of type cusdk:UserDelDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__UserModifyDeviceReq
#define SOAP_TYPE_cusdk__UserModifyDeviceReq (321)
/* cusdk:UserModifyDeviceReq */
class SOAP_CMAC cusdk__UserModifyDeviceReq : public cusdk__BaseReq
{
public:
	std::string id;	/* required element of type xsd:string */
	enum cusdk__EUserOrUserGroup type;	/* required element of type cusdk:EUserOrUserGroup */
	std::vector<cusdk__AssignDeviceInfo >deviceList;	/* optional element of type cusdk:AssignDeviceInfo */
public:
	virtual int soap_type() const { return 321; } /* = unique id SOAP_TYPE_cusdk__UserModifyDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserModifyDeviceReq() { cusdk__UserModifyDeviceReq::soap_default(NULL); }
	virtual ~cusdk__UserModifyDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserModifyDeviceRsp
#define SOAP_TYPE_cusdk__UserModifyDeviceRsp (322)
/* cusdk:UserModifyDeviceRsp */
class SOAP_CMAC cusdk__UserModifyDeviceRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE_cusdk__UserModifyDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__UserModifyDeviceRsp() { cusdk__UserModifyDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__UserModifyDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__UserModifyDevice
#define SOAP_TYPE_cusdk__UserModifyDevice (325)
/* cusdk:UserModifyDevice */
struct cusdk__UserModifyDevice
{
public:
	cusdk__UserModifyDeviceReq req;	/* required element of type cusdk:UserModifyDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAuthorizationDeviceReq
#define SOAP_TYPE_cusdk__GetAuthorizationDeviceReq (326)
/* cusdk:GetAuthorizationDeviceReq */
class SOAP_CMAC cusdk__GetAuthorizationDeviceReq : public cusdk__BaseReq
{
public:
	int beginIndex;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 326; } /* = unique id SOAP_TYPE_cusdk__GetAuthorizationDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAuthorizationDeviceReq() { cusdk__GetAuthorizationDeviceReq::soap_default(NULL); }
	virtual ~cusdk__GetAuthorizationDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp
#define SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp (327)
/* cusdk:GetAuthorizationDeviceRsp */
class SOAP_CMAC cusdk__GetAuthorizationDeviceRsp : public cusdk__BaseRsp
{
public:
	std::vector<cusdk__AuthorizationDeviceInfo >authorizedDeviceList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type cusdk:AuthorizationDeviceInfo */
	int totalNum;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE_cusdk__GetAuthorizationDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetAuthorizationDeviceRsp() { cusdk__GetAuthorizationDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__GetAuthorizationDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetAuthorizationDevice
#define SOAP_TYPE_cusdk__GetAuthorizationDevice (331)
/* cusdk:GetAuthorizationDevice */
struct cusdk__GetAuthorizationDevice
{
public:
	cusdk__GetAuthorizationDeviceReq req;	/* required element of type cusdk:GetAuthorizationDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__AddAuthorizationDeviceReq
#define SOAP_TYPE_cusdk__AddAuthorizationDeviceReq (332)
/* cusdk:AddAuthorizationDeviceReq */
class SOAP_CMAC cusdk__AddAuthorizationDeviceReq : public cusdk__BaseReq
{
public:
	cusdk__AuthorizationDeviceInfo authorizedDev;	/* required element of type cusdk:AuthorizationDeviceInfo */
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE_cusdk__AddAuthorizationDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AddAuthorizationDeviceReq() { cusdk__AddAuthorizationDeviceReq::soap_default(NULL); }
	virtual ~cusdk__AddAuthorizationDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp
#define SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp (333)
/* cusdk:AddAuthorizationDeviceRsp */
class SOAP_CMAC cusdk__AddAuthorizationDeviceRsp : public cusdk__BaseRsp
{
public:
	time_t createTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE_cusdk__AddAuthorizationDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__AddAuthorizationDeviceRsp() { cusdk__AddAuthorizationDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__AddAuthorizationDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__AddAuthorizationDevice
#define SOAP_TYPE_cusdk__AddAuthorizationDevice (336)
/* cusdk:AddAuthorizationDevice */
struct cusdk__AddAuthorizationDevice
{
public:
	cusdk__AddAuthorizationDeviceReq req;	/* required element of type cusdk:AddAuthorizationDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__DelAuthorizationDeviceReq
#define SOAP_TYPE_cusdk__DelAuthorizationDeviceReq (337)
/* cusdk:DelAuthorizationDeviceReq */
class SOAP_CMAC cusdk__DelAuthorizationDeviceReq : public cusdk__BaseReq
{
public:
	cusdk__AuthorizationDeviceInfo authorizedDev;	/* required element of type cusdk:AuthorizationDeviceInfo */
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE_cusdk__DelAuthorizationDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelAuthorizationDeviceReq() { cusdk__DelAuthorizationDeviceReq::soap_default(NULL); }
	virtual ~cusdk__DelAuthorizationDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp
#define SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp (338)
/* cusdk:DelAuthorizationDeviceRsp */
class SOAP_CMAC cusdk__DelAuthorizationDeviceRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE_cusdk__DelAuthorizationDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__DelAuthorizationDeviceRsp() { cusdk__DelAuthorizationDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__DelAuthorizationDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__DelAuthorizationDevice
#define SOAP_TYPE_cusdk__DelAuthorizationDevice (341)
/* cusdk:DelAuthorizationDevice */
struct cusdk__DelAuthorizationDevice
{
public:
	cusdk__DelAuthorizationDeviceReq req;	/* required element of type cusdk:DelAuthorizationDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq
#define SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq (342)
/* cusdk:ModifyAuthorizationDeviceReq */
class SOAP_CMAC cusdk__ModifyAuthorizationDeviceReq : public cusdk__BaseReq
{
public:
	cusdk__AuthorizationDeviceInfo authorizedDev;	/* required element of type cusdk:AuthorizationDeviceInfo */
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE_cusdk__ModifyAuthorizationDeviceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyAuthorizationDeviceReq() { cusdk__ModifyAuthorizationDeviceReq::soap_default(NULL); }
	virtual ~cusdk__ModifyAuthorizationDeviceReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp
#define SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp (343)
/* cusdk:ModifyAuthorizationDeviceRsp */
class SOAP_CMAC cusdk__ModifyAuthorizationDeviceRsp : public cusdk__BaseRsp
{
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE_cusdk__ModifyAuthorizationDeviceRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__ModifyAuthorizationDeviceRsp() { cusdk__ModifyAuthorizationDeviceRsp::soap_default(NULL); }
	virtual ~cusdk__ModifyAuthorizationDeviceRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__ModifyAuthorizationDevice
#define SOAP_TYPE_cusdk__ModifyAuthorizationDevice (346)
/* cusdk:ModifyAuthorizationDevice */
struct cusdk__ModifyAuthorizationDevice
{
public:
	cusdk__ModifyAuthorizationDeviceReq req;	/* required element of type cusdk:ModifyAuthorizationDeviceReq */
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceBaseInfoReq
#define SOAP_TYPE_cusdk__GetDeviceBaseInfoReq (347)
/* cusdk:GetDeviceBaseInfoReq */
class SOAP_CMAC cusdk__GetDeviceBaseInfoReq : public cusdk__BaseReq
{
public:
	std::string devId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 347; } /* = unique id SOAP_TYPE_cusdk__GetDeviceBaseInfoReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceBaseInfoReq() { cusdk__GetDeviceBaseInfoReq::soap_default(NULL); }
	virtual ~cusdk__GetDeviceBaseInfoReq() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp
#define SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp (348)
/* cusdk:GetDeviceBaseInfoRsp */
class SOAP_CMAC cusdk__GetDeviceBaseInfoRsp : public cusdk__BaseRsp
{
public:
	cusdk__DeviceInfo devInfo;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cusdk:DeviceInfo */
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE_cusdk__GetDeviceBaseInfoRsp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cusdk__GetDeviceBaseInfoRsp() { cusdk__GetDeviceBaseInfoRsp::soap_default(NULL); }
	virtual ~cusdk__GetDeviceBaseInfoRsp() { }
};
#endif

#ifndef SOAP_TYPE_cusdk__GetDeviceBaseInfo
#define SOAP_TYPE_cusdk__GetDeviceBaseInfo (351)
/* cusdk:GetDeviceBaseInfo */
struct cusdk__GetDeviceBaseInfo
{
public:
	cusdk__GetDeviceBaseInfoReq req;	/* required element of type cusdk:GetDeviceBaseInfoReq */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (352)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (353)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (355)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (358)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (359)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (10)
typedef std::string xsd__string;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (11)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (12)
typedef std::string xsd__dateTime;
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (14)
typedef float xsd__float;
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (15)
typedef int xsd__int;
#endif

#ifndef SOAP_TYPE_time_duration
#define SOAP_TYPE_time_duration (16)
typedef int time_duration;
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (18)
typedef bool xsd__boolean;
#endif

#ifndef SOAP_TYPE_xsd__positiveInteger
#define SOAP_TYPE_xsd__positiveInteger (23)
typedef ULONG64 xsd__positiveInteger;
#endif

#ifndef SOAP_TYPE_cusdk__AssignAlarminputChn
#define SOAP_TYPE_cusdk__AssignAlarminputChn (52)
typedef int cusdk__AssignAlarminputChn;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
