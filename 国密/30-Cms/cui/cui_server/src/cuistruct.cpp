//This file is automatically generated by C++ Program
#include "cuistruct.h"
#include <string>
#include "system/converthelper/toxml.h"
#include "system/converthelper/tostruct.h"
#include "system/converthelper/adpfromstdsettovector.h"

const std::string CCuiCuLoginReq::ToXml()const
{
    TiXmlElement xmlNode("CCuiCuLoginReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuiCuLoginReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuiCuLoginReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuiCuLoginReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCuLoginReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!clientIp.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"clientIp","string",clientIp);
    }

    if(!serviceIp.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"serviceIp","string",serviceIp);
    }

    if(!hostIp.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"hostIp","string",hostIp);
    }

    if(!webCUClientIP.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"webCUClientIP","string",webCUClientIP);
    }

    if(!clientType.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"clientType","string",clientType);
    }

}
void CCuiCuLoginReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCuLoginReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuiCuLoginReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuiCuLoginReq();

    CCuLoginReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCuLoginReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"clientIp",clientIp);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"serviceIp",serviceIp);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"hostIp",hostIp);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"webCUClientIP",webCUClientIP);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"clientType",clientType);

}

const std::string CCuiCuLoginRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuiCuLoginRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuiCuLoginRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuiCuLoginRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuiCuLoginRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCuLoginRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"stunInfo","CSTUNServerInfo",stunInfo);

    if(!cuVersion.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"cuVersion","string",cuVersion);
    }

    if(!cuUpdateUrl.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"cuUpdateUrl","string",cuUpdateUrl);
    }

    if(!serverDataVersion.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"serverDataVersion","string",serverDataVersion);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"userLockRemainTime","s32",userLockRemainTime);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"passwordRemainTime","s32",passwordRemainTime);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"isSecureEnabled","bool",isSecureEnabled);

}
void CCuiCuLoginRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCuLoginRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuiCuLoginRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuiCuLoginRsp();

    CCuLoginRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCuLoginRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"stunInfo",stunInfo);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"cuVersion",cuVersion);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"cuUpdateUrl",cuUpdateUrl);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"serverDataVersion",serverDataVersion);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"userLockRemainTime",userLockRemainTime);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"passwordRemainTime",passwordRemainTime);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"isSecureEnabled",isSecureEnabled);

}

const std::string CCuDeviceGroupRelation::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceGroupRelation");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceGroupRelation::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceGroupRelation");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceGroupRelation::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    if(!devGroupId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"devGroupId","string",devGroupId);
    }

    if(!devId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"devId","string",devId);
    }

    ConvertHelper::ToXml::AddContainer(xmlNode,videoSrcIdList,"videoSrcIdList","int");

    ConvertHelper::ToXml::AddContainer(xmlNode,alarmInputChnList,"alarmInputChnList","int");

}
void CCuDeviceGroupRelation::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CMS_ASSERT(0&&"error xml format, not root of class");
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceGroupRelation::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceGroupRelation();

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"devGroupId",devGroupId);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"devId",devId);

    ConvertHelper::ToStruct::ParseContainer(xmlNode,videoSrcIdList,"videoSrcIdList","int");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,alarmInputChnList,"alarmInputChnList","int");

}

const std::string CCuDeviceFullInfo::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceFullInfo");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceFullInfo::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceFullInfo");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceFullInfo::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CDeviceInfo::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,devGroupToChannel,"devGroupToChannel","CCuDeviceGroupRelation");

}
void CCuDeviceFullInfo::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CDeviceInfo::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceFullInfo::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceFullInfo();

    CDeviceInfo::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CDeviceInfo")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,devGroupToChannel,"devGroupToChannel","CCuDeviceGroupRelation");

}

const std::string CInviteStopNotify::ToXml()const
{
    TiXmlElement xmlNode("CInviteStopNotify");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CInviteStopNotify::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CInviteStopNotify");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CInviteStopNotify::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","int",playId);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"errorCode","int",errorCode);

}
void CInviteStopNotify::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CMS_ASSERT(0&&"error xml format, not root of class");
        return;
    }
    FromXml(*pRoot);
}
void CInviteStopNotify::FromXml(const TiXmlNode& xmlNode)
{
    *this = CInviteStopNotify();

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"errorCode",errorCode);

}

const std::string CCuUserInfo::ToXml()const
{
    TiXmlElement xmlNode("CCuUserInfo");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserInfo::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserInfo");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserInfo::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CUserInfo::ToXmlWithoutClassNameNode(xmlNode);

    if(!domainID.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"domainID","string",domainID);
    }

}
void CCuUserInfo::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CUserInfo::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserInfo::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserInfo();

    CUserInfo::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CUserInfo")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"domainID",domainID);

}

const std::string CGetNotifyReq::ToXml()const
{
    TiXmlElement xmlNode("CGetNotifyReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CGetNotifyReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CGetNotifyReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CGetNotifyReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"timeoutSeconds","int",timeoutSeconds);

}
void CGetNotifyReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CGetNotifyReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CGetNotifyReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"timeoutSeconds",timeoutSeconds);

}

const std::string CCuExportFailNotify::ToXml()const
{
    TiXmlElement xmlNode("CCuExportFailNotify");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuExportFailNotify::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuExportFailNotify");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuExportFailNotify::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    if(!exportFileUrl.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"exportFileUrl","string",exportFileUrl);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"errorCode","int",errorCode);

}
void CCuExportFailNotify::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CMS_ASSERT(0&&"error xml format, not root of class");
        return;
    }
    FromXml(*pRoot);
}
void CCuExportFailNotify::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuExportFailNotify();

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"exportFileUrl",exportFileUrl);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"errorCode",errorCode);

}

const std::string TServiceStatus::ToXml()const
{
    TiXmlElement xmlNode("TServiceStatus");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void TServiceStatus::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("TServiceStatus");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void TServiceStatus::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    ConvertHelper::ToXml::AddChildNode(xmlNode,"nServiceType","int",nServiceType);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"bInService","bool",bInService);

}
void TServiceStatus::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CMS_ASSERT(0&&"error xml format, not root of class");
        return;
    }
    FromXml(*pRoot);
}
void TServiceStatus::FromXml(const TiXmlNode& xmlNode)
{
    *this = TServiceStatus();

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"nServiceType",nServiceType);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"bInService",bInService);

}

const std::string CCuPuTransparentQryNtfReq::ToXml()const
{
    TiXmlElement xmlNode("CCuPuTransparentQryNtfReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuPuTransparentQryNtfReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuPuTransparentQryNtfReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuPuTransparentQryNtfReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CPuTransparentQryNtfReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"devChn","TChannel",devChn);

    if(!srvName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"srvName","string",srvName);
    }

}
void CCuPuTransparentQryNtfReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CPuTransparentQryNtfReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuPuTransparentQryNtfReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuPuTransparentQryNtfReq();

    CPuTransparentQryNtfReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CPuTransparentQryNtfReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"devChn",devChn);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"srvName",srvName);

}

const std::string CCuStartEncoderTransNtfReq::ToXml()const
{
    TiXmlElement xmlNode("CCuStartEncoderTransNtfReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuStartEncoderTransNtfReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuStartEncoderTransNtfReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuStartEncoderTransNtfReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"clientEncChnId","int",clientEncChnId);

    ConvertHelper::ToXml::AddContainer(xmlNode,tMediaDescList,"tMediaDescList","TMediaDesc");

    ConvertHelper::ToXml::AddMap(xmlNode,tExtInfo,"tExtInfo","std::basic_string<char>","std::basic_string<char>");

}
void CCuStartEncoderTransNtfReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuStartEncoderTransNtfReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuStartEncoderTransNtfReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"clientEncChnId",clientEncChnId);

    ConvertHelper::ToStruct::ParseContainer(xmlNode,tMediaDescList,"tMediaDescList","TMediaDesc");

    ConvertHelper::ToStruct::ParseMap(xmlNode,tExtInfo,"tExtInfo","std::basic_string<char>","std::basic_string<char>");

}

const std::string CCuStartEncoderTransNtfRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuStartEncoderTransNtfRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuStartEncoderTransNtfRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuStartEncoderTransNtfRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuStartEncoderTransNtfRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuStartEncoderTransNtfRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuStartEncoderTransNtfRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuStartEncoderTransNtfRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCertificateQryReq::ToXml()const
{
    TiXmlElement xmlNode("CCertificateQryReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCertificateQryReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCertificateQryReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCertificateQryReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!moduleId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"moduleId","string",moduleId);
    }

    if(!id.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"id","string",id);
    }

}
void CCertificateQryReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCertificateQryReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCertificateQryReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"moduleId",moduleId);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"id",id);

}

const std::string CCertificateQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCertificateQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCertificateQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCertificateQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCertificateQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    if(!signatureCert.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"signatureCert","string",signatureCert);
    }

    if(!encryptCert.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"encryptCert","string",encryptCert);
    }

}
void CCertificateQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCertificateQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCertificateQryRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"signatureCert",signatureCert);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"encryptCert",encryptCert);

}

const std::string CCuNotifyPool::ToXml()const
{
    TiXmlElement xmlNode("CCuNotifyPool");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuNotifyPool::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuNotifyPool");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuNotifyPool::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    ConvertHelper::ToXml::AddContainer(xmlNode,deviceAddNotify,"deviceAddNotify","CDeviceInfo");

    ConvertHelper::ToXml::AddContainer(xmlNode,deviceDelNotify,"deviceDelNotify","std::basic_string<char>");

    ConvertHelper::ToXml::AddContainer(xmlNode,CapChangeNotify,"CapChangeNotify","CDeviceCapIndexNameModNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,deviceGroupAddNotify,"deviceGroupAddNotify","CDeviceGroupAddNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,deviceGroupDelNotify,"deviceGroupDelNotify","std::basic_string<char>");

    ConvertHelper::ToXml::AddContainer(xmlNode,deviceGroupModNotify,"deviceGroupModNotify","CDeviceGroupModNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,devOnlineNotify,"devOnlineNotify","CPuStatusNtyReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,devConfigNotify,"devConfigNotify","CPuConfigNtyReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,devServiceStatusNotify,"devServiceStatusNotify","CPuServiceStatusNtyReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,devAlarmNotify,"devAlarmNotify","CPuAlarmStatusNtyReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,devTransdataNotify,"devTransdataNotify","CPuTransDataStatusNtyReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,devGpsNotify,"devGpsNotify","CPuGpsNtyReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,inviteStopNotify,"inviteStopNotify","CInviteStopNotify");

    ConvertHelper::ToXml::AddContainer(xmlNode,tvWallStatusNotify,"tvWallStatusNotify","CTvWallStatusNtyReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,userAddNotify,"userAddNotify","CCuUserInfo");

    ConvertHelper::ToXml::AddContainer(xmlNode,userDelNotify,"userDelNotify","std::basic_string<char>");

    ConvertHelper::ToXml::AddContainer(xmlNode,userModNotify,"userModNotify","CCuUserInfo");

    ConvertHelper::ToXml::AddContainer(xmlNode,tvWallAddNotify,"tvWallAddNotify","CTvwallAddNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,tvWallDelNotify,"tvWallDelNotify","std::basic_string<char>");

    ConvertHelper::ToXml::AddContainer(xmlNode,tvWallModNotify,"tvWallModNotify","CTvwallModNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,userGroupAddNotify,"userGroupAddNotify","CUserGroupAddNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,userGroupDelNotify,"userGroupDelNotify","std::basic_string<char>");

    ConvertHelper::ToXml::AddContainer(xmlNode,userGroupModNotify,"userGroupModNotify","CUserGroupModNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,devGroupDevAddNotify,"devGroupDevAddNotify","CDeviceGroupDeviceAddNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,devGroupDevDelNotify,"devGroupDevDelNotify","CDeviceGroupDeviceDelNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,alarmLinkModNotify,"alarmLinkModNotify","CAlarmLinkModNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,exportFailNotify,"exportFailNotify","CCuExportFailNotify");

    ConvertHelper::ToXml::AddContainer(xmlNode,stunUpdateNotify,"stunUpdateNotify","CStunUpdateReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,serviceStatusNotify,"serviceStatusNotify","TServiceStatus");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapAddNotify,"mapAddNotify","CMapAddNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapModNotify,"mapModNotify","CMapModNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapDelNotify,"mapDelNotify","CMapDelNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapLayerAddNotify,"mapLayerAddNotify","CMapLayerAddNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapLayerModNotify,"mapLayerModNotify","CMapLayerModNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapLayerDelNotify,"mapLayerDelNotify","CMapLayerDelNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapAreaAddNotify,"mapAreaAddNotify","CMapAreaAddNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapAreaModNotify,"mapAreaModNotify","CMapAreaModNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapAreaDelNotify,"mapAreaDelNotify","CMapAreaDelNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapElementAddNotify,"mapElementAddNotify","CMapElementAddNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapElementModNotify,"mapElementModNotify","CMapElementModNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapElementDelNotify,"mapElementDelNotify","CMapElementDelNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,mapTransparentNotify,"mapTransparentNotify","CCuPuTransparentQryNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,gbGbsGbPDCLProgressNotify,"gbGbsGbPDCLProgressNotify","CGbsGbPDCLProgressNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,alarmEventNotify,"alarmEventNotify","CAlarmEventNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,startEncoderTransNotify,"startEncoderTransNotify","CCuStartEncoderTransNtfReq");

    ConvertHelper::ToXml::AddContainer(xmlNode,seqMarks,"seqMarks","int");

    ConvertHelper::ToXml::AddChildNode(xmlNode,"hasDataLeft","bool",hasDataLeft);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"seqMarksSize","int",seqMarksSize);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"maxSeqMarksSize","int",maxSeqMarksSize);

}
void CCuNotifyPool::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CMS_ASSERT(0&&"error xml format, not root of class");
        return;
    }
    FromXml(*pRoot);
}
void CCuNotifyPool::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuNotifyPool();

    ConvertHelper::ToStruct::ParseContainer(xmlNode,deviceAddNotify,"deviceAddNotify","CDeviceInfo");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,deviceDelNotify,"deviceDelNotify","std::basic_string<char>");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,CapChangeNotify,"CapChangeNotify","CDeviceCapIndexNameModNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,deviceGroupAddNotify,"deviceGroupAddNotify","CDeviceGroupAddNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,deviceGroupDelNotify,"deviceGroupDelNotify","std::basic_string<char>");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,deviceGroupModNotify,"deviceGroupModNotify","CDeviceGroupModNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,devOnlineNotify,"devOnlineNotify","CPuStatusNtyReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,devConfigNotify,"devConfigNotify","CPuConfigNtyReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,devServiceStatusNotify,"devServiceStatusNotify","CPuServiceStatusNtyReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,devAlarmNotify,"devAlarmNotify","CPuAlarmStatusNtyReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,devTransdataNotify,"devTransdataNotify","CPuTransDataStatusNtyReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,devGpsNotify,"devGpsNotify","CPuGpsNtyReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,inviteStopNotify,"inviteStopNotify","CInviteStopNotify");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,tvWallStatusNotify,"tvWallStatusNotify","CTvWallStatusNtyReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,userAddNotify,"userAddNotify","CCuUserInfo");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,userDelNotify,"userDelNotify","std::basic_string<char>");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,userModNotify,"userModNotify","CCuUserInfo");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,tvWallAddNotify,"tvWallAddNotify","CTvwallAddNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,tvWallDelNotify,"tvWallDelNotify","std::basic_string<char>");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,tvWallModNotify,"tvWallModNotify","CTvwallModNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,userGroupAddNotify,"userGroupAddNotify","CUserGroupAddNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,userGroupDelNotify,"userGroupDelNotify","std::basic_string<char>");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,userGroupModNotify,"userGroupModNotify","CUserGroupModNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,devGroupDevAddNotify,"devGroupDevAddNotify","CDeviceGroupDeviceAddNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,devGroupDevDelNotify,"devGroupDevDelNotify","CDeviceGroupDeviceDelNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,alarmLinkModNotify,"alarmLinkModNotify","CAlarmLinkModNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,exportFailNotify,"exportFailNotify","CCuExportFailNotify");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,stunUpdateNotify,"stunUpdateNotify","CStunUpdateReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,serviceStatusNotify,"serviceStatusNotify","TServiceStatus");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapAddNotify,"mapAddNotify","CMapAddNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapModNotify,"mapModNotify","CMapModNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapDelNotify,"mapDelNotify","CMapDelNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapLayerAddNotify,"mapLayerAddNotify","CMapLayerAddNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapLayerModNotify,"mapLayerModNotify","CMapLayerModNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapLayerDelNotify,"mapLayerDelNotify","CMapLayerDelNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapAreaAddNotify,"mapAreaAddNotify","CMapAreaAddNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapAreaModNotify,"mapAreaModNotify","CMapAreaModNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapAreaDelNotify,"mapAreaDelNotify","CMapAreaDelNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapElementAddNotify,"mapElementAddNotify","CMapElementAddNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapElementModNotify,"mapElementModNotify","CMapElementModNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapElementDelNotify,"mapElementDelNotify","CMapElementDelNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapTransparentNotify,"mapTransparentNotify","CCuPuTransparentQryNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,gbGbsGbPDCLProgressNotify,"gbGbsGbPDCLProgressNotify","CGbsGbPDCLProgressNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,alarmEventNotify,"alarmEventNotify","CAlarmEventNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,startEncoderTransNotify,"startEncoderTransNotify","CCuStartEncoderTransNtfReq");

    ConvertHelper::ToStruct::ParseContainer(xmlNode,seqMarks,"seqMarks","int");

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"hasDataLeft",hasDataLeft);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"seqMarksSize",seqMarksSize);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"maxSeqMarksSize",maxSeqMarksSize);

}

const std::string CGetNotifyRsp::ToXml()const
{
    TiXmlElement xmlNode("CGetNotifyRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CGetNotifyRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CGetNotifyRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CGetNotifyRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"notifyPool","CCuNotifyPool",notifyPool);

}
void CGetNotifyRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CGetNotifyRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CGetNotifyRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"notifyPool",notifyPool);

}

const std::string CCUQueryResultBase::ToXml()const
{
    TiXmlElement xmlNode("CCUQueryResultBase");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCUQueryResultBase::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCUQueryResultBase");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCUQueryResultBase::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"totalEntryNum","int",totalEntryNum);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"actualResultNum","int",actualResultNum);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"allVidSrcNum","int",allVidSrcNum);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"onlineVidSrcNum","int",onlineVidSrcNum);

}
void CCUQueryResultBase::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCUQueryResultBase::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCUQueryResultBase();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"totalEntryNum",totalEntryNum);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"actualResultNum",actualResultNum);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"allVidSrcNum",allVidSrcNum);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"onlineVidSrcNum",onlineVidSrcNum);

}

const std::string CCULongQueryResultBase::ToXml()const
{
    TiXmlElement xmlNode("CCULongQueryResultBase");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCULongQueryResultBase::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCULongQueryResultBase");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCULongQueryResultBase::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    if(!queryHandle.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"queryHandle","string",queryHandle);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"hasLeft","bool",hasLeft);

}
void CCULongQueryResultBase::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCULongQueryResultBase::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCULongQueryResultBase();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"queryHandle",queryHandle);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"hasLeft",hasLeft);

}

const std::string CCuQueryUserRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuQueryUserRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuQueryUserRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuQueryUserRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuQueryUserRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CCuUserInfo");

}
void CCuQueryUserRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuQueryUserRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuQueryUserRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CCuUserInfo");

}

const std::string CCuUserGroupQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuUserGroupQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserGroupQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserGroupQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserGroupQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CUserGroupInfo");

}
void CCuUserGroupQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserGroupQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserGroupQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CUserGroupInfo");

}

const std::string CCuUserDeviceGroupInfo::ToXml()const
{
    TiXmlElement xmlNode("CCuUserDeviceGroupInfo");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserDeviceGroupInfo::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserDeviceGroupInfo");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserDeviceGroupInfo::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CDeviceGroupInfo::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"groupHasDev","bool",groupHasDev);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"emptyDevGroup","bool",emptyDevGroup);

}
void CCuUserDeviceGroupInfo::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CDeviceGroupInfo::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserDeviceGroupInfo::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserDeviceGroupInfo();

    CDeviceGroupInfo::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CDeviceGroupInfo")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"groupHasDev",groupHasDev);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"emptyDevGroup",emptyDevGroup);

}

const std::string CCuUserDevGroupQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuUserDevGroupQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserDevGroupQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserDevGroupQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserDevGroupQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CCuUserDeviceGroupInfo");

}
void CCuUserDevGroupQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserDevGroupQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserDevGroupQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CCuUserDeviceGroupInfo");

}

const std::string CCuUserDevFullInfoQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuUserDevFullInfoQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserDevFullInfoQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserDevFullInfoQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserDevFullInfoQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    if(!queryHint.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"queryHint","string",queryHint);
    }

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","TDevicefullinfoAndPrivilege");

}
void CCuUserDevFullInfoQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserDevFullInfoQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserDevFullInfoQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"queryHint",queryHint);

    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","TDevicefullinfoAndPrivilege");

}

const std::string CNotifySubscription::ToXml()const
{
    TiXmlElement xmlNode("CNotifySubscription");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CNotifySubscription::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CNotifySubscription");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CNotifySubscription::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    if(!devURI.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"devURI","string",devURI);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"subscribeNotifyType","int",subscribeNotifyType);

    ConvertHelper::ToXml::AddContainer(xmlNode,subscribeTypes,"subscribeTypes","int");

}
void CNotifySubscription::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CMS_ASSERT(0&&"error xml format, not root of class");
        return;
    }
    FromXml(*pRoot);
}
void CNotifySubscription::FromXml(const TiXmlNode& xmlNode)
{
    *this = CNotifySubscription();

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"devURI",devURI);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"subscribeNotifyType",subscribeNotifyType);

    using namespace ConvertHelper::ToStruct;
    CAdpFromStdSetToVector< int > adp_subscribeTypes = CreateAdpFromStdSetToVector(subscribeTypes);
    ConvertHelper::ToStruct::ParseContainer(xmlNode,adp_subscribeTypes,"subscribeTypes","int");

}

const std::string CCuSubscribeNotifyReq::ToXml()const
{
    TiXmlElement xmlNode("CCuSubscribeNotifyReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuSubscribeNotifyReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuSubscribeNotifyReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuSubscribeNotifyReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,subscriptionList,"subscriptionList","CNotifySubscription");

}
void CCuSubscribeNotifyReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuSubscribeNotifyReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuSubscribeNotifyReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,subscriptionList,"subscriptionList","CNotifySubscription");

}

const std::string CCuSubscribeNotifyRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuSubscribeNotifyRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuSubscribeNotifyRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuSubscribeNotifyRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuSubscribeNotifyRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,failedList,"failedList","CNotifySubscription");

}
void CCuSubscribeNotifyRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuSubscribeNotifyRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuSubscribeNotifyRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,failedList,"failedList","CNotifySubscription");

}

const std::string CCuUnSubscribeNotifyReq::ToXml()const
{
    TiXmlElement xmlNode("CCuUnSubscribeNotifyReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUnSubscribeNotifyReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUnSubscribeNotifyReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUnSubscribeNotifyReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,unsubscriptionList,"unsubscriptionList","CNotifySubscription");

}
void CCuUnSubscribeNotifyReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUnSubscribeNotifyReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUnSubscribeNotifyReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,unsubscriptionList,"unsubscriptionList","CNotifySubscription");

}

const std::string CCuUnSubscribeNotifyRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuUnSubscribeNotifyRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUnSubscribeNotifyRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUnSubscribeNotifyRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUnSubscribeNotifyRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,failedList,"failedList","CNotifySubscription");

}
void CCuUnSubscribeNotifyRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUnSubscribeNotifyRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUnSubscribeNotifyRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,failedList,"failedList","CNotifySubscription");

}

const std::string CCuQryDevGroupOfDevInfoRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuQryDevGroupOfDevInfoRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuQryDevGroupOfDevInfoRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuQryDevGroupOfDevInfoRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuQryDevGroupOfDevInfoRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CDeviceGroupDeviceInfo");

}
void CCuQryDevGroupOfDevInfoRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuQryDevGroupOfDevInfoRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuQryDevGroupOfDevInfoRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CDeviceGroupDeviceInfo");

}

const std::string CCuDeviceGroupAddDeviceReq::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceGroupAddDeviceReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceGroupAddDeviceReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceGroupAddDeviceReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceGroupAddDeviceReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CDeviceGroupDeviceInfo");

    if(!srcDevTreeId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"srcDevTreeId","string",srcDevTreeId);
    }

    if(!dstDevTreeId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"dstDevTreeId","string",dstDevTreeId);
    }

}
void CCuDeviceGroupAddDeviceReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceGroupAddDeviceReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceGroupAddDeviceReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CDeviceGroupDeviceInfo");

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"srcDevTreeId",srcDevTreeId);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"dstDevTreeId",dstDevTreeId);

}

const std::string CCuDeviceGroupAddDeviceRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceGroupAddDeviceRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceGroupAddDeviceRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceGroupAddDeviceRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceGroupAddDeviceRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuDeviceGroupAddDeviceRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceGroupAddDeviceRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceGroupAddDeviceRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuDeviceGroupDelDeviceReq::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceGroupDelDeviceReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceGroupDelDeviceReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceGroupDelDeviceReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceGroupDelDeviceReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CDeviceGroupDeviceInfo");

    if(!devTreeId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"devTreeId","string",devTreeId);
    }

}
void CCuDeviceGroupDelDeviceReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceGroupDelDeviceReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceGroupDelDeviceReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CDeviceGroupDeviceInfo");

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"devTreeId",devTreeId);

}

const std::string CCuDeviceGroupDelDeviceRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceGroupDelDeviceRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceGroupDelDeviceRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceGroupDelDeviceRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceGroupDelDeviceRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuDeviceGroupDelDeviceRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceGroupDelDeviceRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceGroupDelDeviceRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuGetUserDeviceRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuGetUserDeviceRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuGetUserDeviceRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuGetUserDeviceRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuGetUserDeviceRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CUserDeviceInfo");

}
void CCuGetUserDeviceRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuGetUserDeviceRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuGetUserDeviceRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CUserDeviceInfo");

}

const std::string CCuGetUserGroupDeviceRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuGetUserGroupDeviceRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuGetUserGroupDeviceRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuGetUserGroupDeviceRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuGetUserGroupDeviceRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CUserGroupDeviceInfo");

}
void CCuGetUserGroupDeviceRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuGetUserGroupDeviceRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuGetUserGroupDeviceRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CUserGroupDeviceInfo");

}

const std::string CCuUserAddDeviceReq::ToXml()const
{
    TiXmlElement xmlNode("CCuUserAddDeviceReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserAddDeviceReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserAddDeviceReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserAddDeviceReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CUserDeviceInfo");

}
void CCuUserAddDeviceReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserAddDeviceReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserAddDeviceReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CUserDeviceInfo");

}

const std::string CCuUserDelDeviceReq::ToXml()const
{
    TiXmlElement xmlNode("CCuUserDelDeviceReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserDelDeviceReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserDelDeviceReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserDelDeviceReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CUserDeviceInfo");

}
void CCuUserDelDeviceReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserDelDeviceReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserDelDeviceReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CUserDeviceInfo");

}

const std::string CCuUserModDeviceReq::ToXml()const
{
    TiXmlElement xmlNode("CCuUserModDeviceReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserModDeviceReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserModDeviceReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserModDeviceReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CUserDeviceInfo");

}
void CCuUserModDeviceReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserModDeviceReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserModDeviceReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CUserDeviceInfo");

}

const std::string CCuUserGroupAddDeviceReq::ToXml()const
{
    TiXmlElement xmlNode("CCuUserGroupAddDeviceReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserGroupAddDeviceReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserGroupAddDeviceReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserGroupAddDeviceReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CUserGroupDeviceInfo");

}
void CCuUserGroupAddDeviceReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserGroupAddDeviceReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserGroupAddDeviceReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CUserGroupDeviceInfo");

}

const std::string CCuUserGroupDelDeviceReq::ToXml()const
{
    TiXmlElement xmlNode("CCuUserGroupDelDeviceReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserGroupDelDeviceReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserGroupDelDeviceReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserGroupDelDeviceReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CUserGroupDeviceInfo");

}
void CCuUserGroupDelDeviceReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserGroupDelDeviceReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserGroupDelDeviceReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CUserGroupDeviceInfo");

}

const std::string CCuUserGroupModDeviceReq::ToXml()const
{
    TiXmlElement xmlNode("CCuUserGroupModDeviceReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserGroupModDeviceReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserGroupModDeviceReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserGroupModDeviceReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CUserGroupDeviceInfo");

}
void CCuUserGroupModDeviceReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserGroupModDeviceReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserGroupModDeviceReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CUserGroupDeviceInfo");

}

const std::string CCuGetAuthorizationDeviceRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuGetAuthorizationDeviceRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuGetAuthorizationDeviceRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuGetAuthorizationDeviceRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuGetAuthorizationDeviceRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CTempAuthorizationInfo");

}
void CCuGetAuthorizationDeviceRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuGetAuthorizationDeviceRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuGetAuthorizationDeviceRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CTempAuthorizationInfo");

}

const std::string CCuGetDeviceBaseInfoRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuGetDeviceBaseInfoRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuGetDeviceBaseInfoRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuGetDeviceBaseInfoRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuGetDeviceBaseInfoRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CDeviceInfo");

}
void CCuGetDeviceBaseInfoRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuGetDeviceBaseInfoRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuGetDeviceBaseInfoRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CDeviceInfo");

}

const std::string CCuPlayStreamReq::ToXml()const
{
    TiXmlElement xmlNode("CCuPlayStreamReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuPlayStreamReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuPlayStreamReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuPlayStreamReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","s32",playId);

}
void CCuPlayStreamReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuPlayStreamReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuPlayStreamReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

}

const std::string CCuStopStreamReq::ToXml()const
{
    TiXmlElement xmlNode("CCuStopStreamReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuStopStreamReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuStopStreamReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuStopStreamReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","s32",playId);

}
void CCuStopStreamReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuStopStreamReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuStopStreamReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

}

const std::string CCuStopInviteRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuStopInviteRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuStopInviteRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuStopInviteRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuStopInviteRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuStopInviteRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuStopInviteRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuStopInviteRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuSetupPlayPlatformRecordReq::ToXml()const
{
    TiXmlElement xmlNode("CCuSetupPlayPlatformRecordReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuSetupPlayPlatformRecordReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuSetupPlayPlatformRecordReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuSetupPlayPlatformRecordReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"cReq","CInviteReq",cReq);

    if(!recordDomainName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"recordDomainName","string",recordDomainName);
    }

}
void CCuSetupPlayPlatformRecordReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuSetupPlayPlatformRecordReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuSetupPlayPlatformRecordReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"cReq",cReq);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"recordDomainName",recordDomainName);

}

const std::string CCuPlayPlatformRecordReq::ToXml()const
{
    TiXmlElement xmlNode("CCuPlayPlatformRecordReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuPlayPlatformRecordReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuPlayPlatformRecordReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuPlayPlatformRecordReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","s32",playId);

}
void CCuPlayPlatformRecordReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuPlayPlatformRecordReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuPlayPlatformRecordReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

}

const std::string CCuPlayPlatformRecordRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuPlayPlatformRecordRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuPlayPlatformRecordRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuPlayPlatformRecordRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuPlayPlatformRecordRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuPlayPlatformRecordRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuPlayPlatformRecordRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuPlayPlatformRecordRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuDownloadPlatformRecordReq::ToXml()const
{
    TiXmlElement xmlNode("CCuDownloadPlatformRecordReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDownloadPlatformRecordReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDownloadPlatformRecordReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDownloadPlatformRecordReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"cReq","CInviteReq",cReq);

    if(!recordDomainName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"recordDomainName","string",recordDomainName);
    }

}
void CCuDownloadPlatformRecordReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDownloadPlatformRecordReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDownloadPlatformRecordReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"cReq",cReq);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"recordDomainName",recordDomainName);

}

const std::string CCuStartDownloadPlatformRecordReq::ToXml()const
{
    TiXmlElement xmlNode("CCuStartDownloadPlatformRecordReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuStartDownloadPlatformRecordReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuStartDownloadPlatformRecordReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuStartDownloadPlatformRecordReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","s32",playId);

}
void CCuStartDownloadPlatformRecordReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuStartDownloadPlatformRecordReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuStartDownloadPlatformRecordReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

}

const std::string CCuStopDownloadPlatformRecordReq::ToXml()const
{
    TiXmlElement xmlNode("CCuStopDownloadPlatformRecordReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuStopDownloadPlatformRecordReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuStopDownloadPlatformRecordReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuStopDownloadPlatformRecordReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","s32",playId);

}
void CCuStopDownloadPlatformRecordReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuStopDownloadPlatformRecordReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuStopDownloadPlatformRecordReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

}

const std::string CCuStopPlatformRecordReq::ToXml()const
{
    TiXmlElement xmlNode("CCuStopPlatformRecordReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuStopPlatformRecordReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuStopPlatformRecordReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuStopPlatformRecordReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","s32",playId);

}
void CCuStopPlatformRecordReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuStopPlatformRecordReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuStopPlatformRecordReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

}

const std::string CCuRcsQueryNruRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuRcsQueryNruRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuRcsQueryNruRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuRcsQueryNruRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuRcsQueryNruRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,nruInfos,"nruInfos","TNruInfo");

}
void CCuRcsQueryNruRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuRcsQueryNruRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuRcsQueryNruRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,nruInfos,"nruInfos","TNruInfo");

}

const std::string CCuRcsQueryPuChnBindingRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuRcsQueryPuChnBindingRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuRcsQueryPuChnBindingRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuRcsQueryPuChnBindingRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuRcsQueryPuChnBindingRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,puChnList,"puChnList","TChannel");

}
void CCuRcsQueryPuChnBindingRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuRcsQueryPuChnBindingRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuRcsQueryPuChnBindingRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,puChnList,"puChnList","TChannel");

}

const std::string CCuRcsQueryRecordDaysReq::ToXml()const
{
    TiXmlElement xmlNode("CCuRcsQueryRecordDaysReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuRcsQueryRecordDaysReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuRcsQueryRecordDaysReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuRcsQueryRecordDaysReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!req.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"req","string",req);
    }

    if(!recordDomainName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"recordDomainName","string",recordDomainName);
    }

}
void CCuRcsQueryRecordDaysReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuRcsQueryRecordDaysReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuRcsQueryRecordDaysReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"req",req);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"recordDomainName",recordDomainName);

}

const std::string CCuRcsQueryRecordReq::ToXml()const
{
    TiXmlElement xmlNode("CCuRcsQueryRecordReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuRcsQueryRecordReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuRcsQueryRecordReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuRcsQueryRecordReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"req","CTransparentData",req);

    if(!recordDomainName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"recordDomainName","string",recordDomainName);
    }

}
void CCuRcsQueryRecordReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuRcsQueryRecordReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuRcsQueryRecordReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"req",req);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"recordDomainName",recordDomainName);

}

const std::string CCuRcsQueryRecordRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuRcsQueryRecordRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuRcsQueryRecordRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuRcsQueryRecordRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuRcsQueryRecordRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    if(!domainName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"domainName","string",domainName);
    }

    ConvertHelper::ToXml::AddContainer(xmlNode,recDurationList,"recDurationList","TRecDuration");

}
void CCuRcsQueryRecordRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuRcsQueryRecordRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuRcsQueryRecordRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"domainName",domainName);

    ConvertHelper::ToStruct::ParseContainer(xmlNode,recDurationList,"recDurationList","TRecDuration");

}

const std::string CCuVcrCtrlReq::ToXml()const
{
    TiXmlElement xmlNode("CCuVcrCtrlReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuVcrCtrlReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuVcrCtrlReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuVcrCtrlReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CVcrCtrlReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","int",playId);

}
void CCuVcrCtrlReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CVcrCtrlReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuVcrCtrlReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuVcrCtrlReq();

    CVcrCtrlReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CVcrCtrlReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

}

const std::string CCuRcsQueryRecordParamRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuRcsQueryRecordParamRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuRcsQueryRecordParamRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuRcsQueryRecordParamRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuRcsQueryRecordParamRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,recordParamList,"recordParamList","TRecordParam");

}
void CCuRcsQueryRecordParamRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuRcsQueryRecordParamRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuRcsQueryRecordParamRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,recordParamList,"recordParamList","TRecordParam");

}

const std::string CCuDomainRelationQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDomainRelationQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDomainRelationQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDomainRelationQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDomainRelationQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CDomainRelationInfo");

}
void CCuDomainRelationQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDomainRelationQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDomainRelationQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CDomainRelationInfo");

}

const std::string CCuTvwallQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuTvwallQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuTvwallQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuTvwallQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuTvwallQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CTvwallInfo");

}
void CCuTvwallQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuTvwallQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuTvwallQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CTvwallInfo");

}

const std::string CCuTvWallSchemeQueryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuTvWallSchemeQueryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuTvWallSchemeQueryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuTvWallSchemeQueryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuTvWallSchemeQueryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,schemeList,"schemeList","std::basic_string<char>");

}
void CCuTvWallSchemeQueryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuTvWallSchemeQueryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuTvWallSchemeQueryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,schemeList,"schemeList","std::basic_string<char>");

}

const std::string CCuMapQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuMapQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuMapQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuMapQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuMapQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,mapInfos,"mapInfos","MapInfo");

}
void CCuMapQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuMapQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuMapQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapInfos,"mapInfos","MapInfo");

}

const std::string CCuMapElementQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuMapElementQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuMapElementQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuMapElementQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuMapElementQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,mapElements,"mapElements","MapElement");

}
void CCuMapElementQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuMapElementQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuMapElementQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapElements,"mapElements","MapElement");

}

const std::string CCuMapElementSearchRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuMapElementSearchRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuMapElementSearchRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuMapElementSearchRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuMapElementSearchRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,mapElements,"mapElements","MapElement");

}
void CCuMapElementSearchRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuMapElementSearchRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuMapElementSearchRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,mapElements,"mapElements","MapElement");

}

const std::string CCuAlarmLinkQueryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuAlarmLinkQueryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuAlarmLinkQueryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuAlarmLinkQueryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuAlarmLinkQueryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,cfgList,"cfgList","TAlarmLinkage");

}
void CCuAlarmLinkQueryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuAlarmLinkQueryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuAlarmLinkQueryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,cfgList,"cfgList","TAlarmLinkage");

}

const std::string CCuOperateLogQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuOperateLogQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuOperateLogQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuOperateLogQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuOperateLogQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","TOperateLogInfo");

}
void CCuOperateLogQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuOperateLogQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuOperateLogQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","TOperateLogInfo");

}

const std::string CCuGpsTraceQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuGpsTraceQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuGpsTraceQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuGpsTraceQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuGpsTraceQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","TGpsStatus");

}
void CCuGpsTraceQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuGpsTraceQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuGpsTraceQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","TGpsStatus");

}

const std::string CCuDeviceLogQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceLogQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceLogQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceLogQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceLogQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","TDeviceLogInfo");

}
void CCuDeviceLogQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceLogQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceLogQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","TDeviceLogInfo");

}

const std::string CCuAlarmLogQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuAlarmLogQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuAlarmLogQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuAlarmLogQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuAlarmLogQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","TAlarmLogInfo");

}
void CCuAlarmLogQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuAlarmLogQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuAlarmLogQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","TAlarmLogInfo");

}

const std::string CCuUserCustomDataQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuUserCustomDataQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserCustomDataQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserCustomDataQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserCustomDataQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","TUserCustomDataInfo");

}
void CCuUserCustomDataQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserCustomDataQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserCustomDataQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","TUserCustomDataInfo");

}

const std::string CCuRcsQueryDiskInfoRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuRcsQueryDiskInfoRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuRcsQueryDiskInfoRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuRcsQueryDiskInfoRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuRcsQueryDiskInfoRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,diskInfoList,"diskInfoList","TDiskInfo");

}
void CCuRcsQueryDiskInfoRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuRcsQueryDiskInfoRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuRcsQueryDiskInfoRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,diskInfoList,"diskInfoList","TDiskInfo");

}

const std::string CCuChangePasswordReq::ToXml()const
{
    TiXmlElement xmlNode("CCuChangePasswordReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuChangePasswordReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuChangePasswordReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuChangePasswordReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!oldPassword.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"oldPassword","string",oldPassword);
    }

    if(!newPassword.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"newPassword","string",newPassword);
    }

    if(!passwordOverdueTime.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"passwordOverdueTime","string",passwordOverdueTime);
    }

}
void CCuChangePasswordReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuChangePasswordReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuChangePasswordReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"oldPassword",oldPassword);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"newPassword",newPassword);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"passwordOverdueTime",passwordOverdueTime);

}

const std::string CCuMapAreaQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuMapAreaQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuMapAreaQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuMapAreaQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuMapAreaQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,results,"results","MapArea");

}
void CCuMapAreaQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuMapAreaQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuMapAreaQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,results,"results","MapArea");

}

const std::string CCuElementImageQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuElementImageQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuElementImageQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuElementImageQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuElementImageQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,imageUrlList,"imageUrlList","std::basic_string<char>");

}
void CCuElementImageQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuElementImageQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuElementImageQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,imageUrlList,"imageUrlList","std::basic_string<char>");

}

const std::string CCuPuRecQryReq::ToXml()const
{
    TiXmlElement xmlNode("CCuPuRecQryReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuPuRecQryReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuPuRecQryReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuPuRecQryReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CPuRecQryReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!queryHandle.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"queryHandle","string",queryHandle);
    }

}
void CCuPuRecQryReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CPuRecQryReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuPuRecQryReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuPuRecQryReq();

    CPuRecQryReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CPuRecQryReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"queryHandle",queryHandle);

}

const std::string CCuPuRecQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuPuRecQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuPuRecQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuPuRecQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuPuRecQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCULongQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"puChn","TChannel",puChn);

    ConvertHelper::ToXml::AddContainer(xmlNode,recInfoList,"recInfoList","TPuRecInfo");

    ConvertHelper::ToXml::AddChildNode(xmlNode,"isUseVSIPTimeAsGMTTime","bool",isUseVSIPTimeAsGMTTime);

}
void CCuPuRecQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCULongQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuPuRecQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuPuRecQryRsp();

    CCULongQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCULongQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"puChn",puChn);

    ConvertHelper::ToStruct::ParseContainer(xmlNode,recInfoList,"recInfoList","TPuRecInfo");

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"isUseVSIPTimeAsGMTTime",isUseVSIPTimeAsGMTTime);

}

const std::string CDeviceRecordSvrQryReq::ToXml()const
{
    TiXmlElement xmlNode("CDeviceRecordSvrQryReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CDeviceRecordSvrQryReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CDeviceRecordSvrQryReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CDeviceRecordSvrQryReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

}
void CDeviceRecordSvrQryReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CDeviceRecordSvrQryReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CDeviceRecordSvrQryReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
}

const std::string CDeviceRecordSvrQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CDeviceRecordSvrQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CDeviceRecordSvrQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CDeviceRecordSvrQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CDeviceRecordSvrQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,uriList,"uriList","std::basic_string<char>");

}
void CDeviceRecordSvrQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CDeviceRecordSvrQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CDeviceRecordSvrQryRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,uriList,"uriList","std::basic_string<char>");

}

const std::string CCuPlaybackProgressQueryReq::ToXml()const
{
    TiXmlElement xmlNode("CCuPlaybackProgressQueryReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuPlaybackProgressQueryReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuPlaybackProgressQueryReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuPlaybackProgressQueryReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!playbackSessUri.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"playbackSessUri","string",playbackSessUri);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","int",playId);

}
void CCuPlaybackProgressQueryReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuPlaybackProgressQueryReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuPlaybackProgressQueryReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playbackSessUri",playbackSessUri);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

}

const std::string CCuPlaybackProgressQueryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuPlaybackProgressQueryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuPlaybackProgressQueryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuPlaybackProgressQueryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuPlaybackProgressQueryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"curPlayTime","u32",curPlayTime);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"totalPlayTime","u32",totalPlayTime);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"startPlayTime","u32",startPlayTime);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"isPlayFinished","bool",isPlayFinished);

}
void CCuPlaybackProgressQueryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuPlaybackProgressQueryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuPlaybackProgressQueryRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"curPlayTime",curPlayTime);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"totalPlayTime",totalPlayTime);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"startPlayTime",startPlayTime);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"isPlayFinished",isPlayFinished);

}

const std::string CCuVideosourcePresetcfgQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuVideosourcePresetcfgQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuVideosourcePresetcfgQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuVideosourcePresetcfgQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuVideosourcePresetcfgQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","TVideosourcePresetCfgInfo");

}
void CCuVideosourcePresetcfgQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuVideosourcePresetcfgQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuVideosourcePresetcfgQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","TVideosourcePresetCfgInfo");

}

const std::string CCuGetExportProcessReq::ToXml()const
{
    TiXmlElement xmlNode("CCuGetExportProcessReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuGetExportProcessReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuGetExportProcessReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuGetExportProcessReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!exportFileUrl.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"exportFileUrl","string",exportFileUrl);
    }

}
void CCuGetExportProcessReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuGetExportProcessReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuGetExportProcessReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"exportFileUrl",exportFileUrl);

}

const std::string CCuGetExportProcessRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuGetExportProcessRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuGetExportProcessRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuGetExportProcessRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuGetExportProcessRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"percent","int",percent);

}
void CCuGetExportProcessRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuGetExportProcessRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuGetExportProcessRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"percent",percent);

}

const std::string CCuStopExportReq::ToXml()const
{
    TiXmlElement xmlNode("CCuStopExportReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuStopExportReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuStopExportReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuStopExportReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!exportFileUrl.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"exportFileUrl","string",exportFileUrl);
    }

}
void CCuStopExportReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuStopExportReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuStopExportReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"exportFileUrl",exportFileUrl);

}

const std::string CCuStopExportRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuStopExportRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuStopExportRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuStopExportRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuStopExportRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuStopExportRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuStopExportRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuStopExportRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuFileExportStartExReq::ToXml()const
{
    TiXmlElement xmlNode("CCuFileExportStartExReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileExportStartExReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileExportStartExReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileExportStartExReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!srvName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"srvName","string",srvName);
    }

    if(!fileReceiverUri.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"fileReceiverUri","string",fileReceiverUri);
    }

    if(!fileSenderUri.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"fileSenderUri","string",fileSenderUri);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"fileToken","CTransparentData",fileToken);

    if(!fileCharacterset.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"fileCharacterset","string",fileCharacterset);
    }

    if(!fileTimeZone.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"fileTimeZone","string",fileTimeZone);
    }

    ConvertHelper::ToXml::AddContainer(xmlNode,customParams,"customParams","std::basic_string<char>");

}
void CCuFileExportStartExReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileExportStartExReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileExportStartExReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"srvName",srvName);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"fileReceiverUri",fileReceiverUri);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"fileSenderUri",fileSenderUri);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"fileToken",fileToken);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"fileCharacterset",fileCharacterset);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"fileTimeZone",fileTimeZone);

    ConvertHelper::ToStruct::ParseContainer(xmlNode,customParams,"customParams","std::basic_string<char>");

}

const std::string CCuFileExportStartExRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuFileExportStartExRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileExportStartExRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileExportStartExRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileExportStartExRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    if(!fileURL.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"fileURL","string",fileURL);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

    if(!taskType.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"taskType","string",taskType);
    }

}
void CCuFileExportStartExRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileExportStartExRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileExportStartExRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"fileURL",fileURL);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskType",taskType);

}

const std::string CCuFileExportGetProcessExReq::ToXml()const
{
    TiXmlElement xmlNode("CCuFileExportGetProcessExReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileExportGetProcessExReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileExportGetProcessExReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileExportGetProcessExReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

    if(!taskType.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"taskType","string",taskType);
    }

}
void CCuFileExportGetProcessExReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileExportGetProcessExReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileExportGetProcessExReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskType",taskType);

}

const std::string CCuFileExportGetProcessExRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuFileExportGetProcessExRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileExportGetProcessExRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileExportGetProcessExRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileExportGetProcessExRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"percent","int",percent);

}
void CCuFileExportGetProcessExRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileExportGetProcessExRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileExportGetProcessExRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"percent",percent);

}

const std::string CCuFileExportStopExReq::ToXml()const
{
    TiXmlElement xmlNode("CCuFileExportStopExReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileExportStopExReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileExportStopExReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileExportStopExReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

}
void CCuFileExportStopExReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileExportStopExReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileExportStopExReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

}

const std::string CCuFileExportStopExRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuFileExportStopExRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileExportStopExRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileExportStopExRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileExportStopExRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuFileExportStopExRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileExportStopExRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileExportStopExRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuFileImportStartExReq::ToXml()const
{
    TiXmlElement xmlNode("CCuFileImportStartExReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileImportStartExReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileImportStartExReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileImportStartExReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!srvName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"srvName","string",srvName);
    }

    if(!fileReceiverUri.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"fileReceiverUri","string",fileReceiverUri);
    }

    if(!fileSenderUri.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"fileSenderUri","string",fileSenderUri);
    }

    if(!fileToken.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"fileToken","string",fileToken);
    }

}
void CCuFileImportStartExReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileImportStartExReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileImportStartExReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"srvName",srvName);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"fileReceiverUri",fileReceiverUri);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"fileSenderUri",fileSenderUri);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"fileToken",fileToken);

}

const std::string CCuFileImportStartExRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuFileImportStartExRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileImportStartExRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileImportStartExRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileImportStartExRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    if(!dirURL.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"dirURL","string",dirURL);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

}
void CCuFileImportStartExRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileImportStartExRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileImportStartExRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"dirURL",dirURL);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

}

const std::string CCuFileImportSetProcessExReq::ToXml()const
{
    TiXmlElement xmlNode("CCuFileImportSetProcessExReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileImportSetProcessExReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileImportSetProcessExReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileImportSetProcessExReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"progress","int",progress);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"total","int",total);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

}
void CCuFileImportSetProcessExReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileImportSetProcessExReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileImportSetProcessExReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"progress",progress);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"total",total);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

}

const std::string CCuFileImportSetProcessExRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuFileImportSetProcessExRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileImportSetProcessExRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileImportSetProcessExRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileImportSetProcessExRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuFileImportSetProcessExRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileImportSetProcessExRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileImportSetProcessExRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuFileImportStopExReq::ToXml()const
{
    TiXmlElement xmlNode("CCuFileImportStopExReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileImportStopExReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileImportStopExReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileImportStopExReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"cancelImport","bool",cancelImport);

}
void CCuFileImportStopExReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileImportStopExReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileImportStopExReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"cancelImport",cancelImport);

}

const std::string CCuFileImportStopExRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuFileImportStopExRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuFileImportStopExRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuFileImportStopExRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuFileImportStopExRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuFileImportStopExRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuFileImportStopExRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuFileImportStopExRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuTaskStartReq::ToXml()const
{
    TiXmlElement xmlNode("CCuTaskStartReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuTaskStartReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuTaskStartReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuTaskStartReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"playId","int",playId);

}
void CCuTaskStartReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuTaskStartReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuTaskStartReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"playId",playId);

}

const std::string CCuUpdateCUPropertyReq::ToXml()const
{
    TiXmlElement xmlNode("CCuUpdateCUPropertyReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUpdateCUPropertyReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUpdateCUPropertyReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUpdateCUPropertyReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!clientLocalIp.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"clientLocalIp","string",clientLocalIp);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"PlatNatMode","int",PlatNatMode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"clientSupCuiTransPlatRec","bool",clientSupCuiTransPlatRec);

}
void CCuUpdateCUPropertyReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUpdateCUPropertyReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUpdateCUPropertyReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"clientLocalIp",clientLocalIp);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"PlatNatMode",PlatNatMode);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"clientSupCuiTransPlatRec",clientSupCuiTransPlatRec);

}

const std::string CCuUpdateCUPropertyRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuUpdateCUPropertyRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUpdateCUPropertyRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUpdateCUPropertyRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUpdateCUPropertyRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"ClientNat","int",ClientNat);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"PlatNat","int",PlatNat);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"CuPunchAddr","TNetAddr",CuPunchAddr);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"cuiSupTransPlatRec","bool",cuiSupTransPlatRec);

}
void CCuUpdateCUPropertyRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUpdateCUPropertyRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUpdateCUPropertyRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"ClientNat",ClientNat);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"PlatNat",PlatNat);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"CuPunchAddr",CuPunchAddr);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"cuiSupTransPlatRec",cuiSupTransPlatRec);

}

const std::string CCuQueryCAPSDeviceListRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuQueryCAPSDeviceListRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuQueryCAPSDeviceListRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuQueryCAPSDeviceListRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuQueryCAPSDeviceListRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,devList,"devList","CWechatDevice");

}
void CCuQueryCAPSDeviceListRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuQueryCAPSDeviceListRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuQueryCAPSDeviceListRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,devList,"devList","CWechatDevice");

}

const std::string CCuOffLineDevQryReq::ToXml()const
{
    TiXmlElement xmlNode("CCuOffLineDevQryReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuOffLineDevQryReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuOffLineDevQryReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuOffLineDevQryReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    COffLineDevQryReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!cuQueryTag.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"cuQueryTag","string",cuQueryTag);
    }

}
void CCuOffLineDevQryReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        COffLineDevQryReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuOffLineDevQryReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuOffLineDevQryReq();

    COffLineDevQryReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "COffLineDevQryReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"cuQueryTag",cuQueryTag);

}

const std::string CCuOffLineDevQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuOffLineDevQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuOffLineDevQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuOffLineDevQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuOffLineDevQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,devVideoSrcList,"devVideoSrcList","TDeviceVideoSrcId");

    ConvertHelper::ToXml::AddChildNode(xmlNode,"onlineVideoSrcNum","int",onlineVideoSrcNum);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"offlineDevNum","int",offlineDevNum);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"idleDevNum","int",idleDevNum);

    if(!domainName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"domainName","string",domainName);
    }

}
void CCuOffLineDevQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuOffLineDevQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuOffLineDevQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,devVideoSrcList,"devVideoSrcList","TDeviceVideoSrcId");

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"onlineVideoSrcNum",onlineVideoSrcNum);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"offlineDevNum",offlineDevNum);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"idleDevNum",idleDevNum);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"domainName",domainName);

}

const std::string CCuDeviceAutoAssignToUserQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceAutoAssignToUserQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceAutoAssignToUserQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceAutoAssignToUserQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceAutoAssignToUserQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,devAutoAssignInfo,"devAutoAssignInfo","CDeviceAutoAssignInfo");

}
void CCuDeviceAutoAssignToUserQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceAutoAssignToUserQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceAutoAssignToUserQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,devAutoAssignInfo,"devAutoAssignInfo","CDeviceAutoAssignInfo");

}

const std::string CCuDeviceAutoAssignToUserGroupQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceAutoAssignToUserGroupQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceAutoAssignToUserGroupQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceAutoAssignToUserGroupQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceAutoAssignToUserGroupQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,devAutoAssignInfo,"devAutoAssignInfo","CDeviceAutoAssignInfo");

}
void CCuDeviceAutoAssignToUserGroupQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceAutoAssignToUserGroupQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceAutoAssignToUserGroupQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,devAutoAssignInfo,"devAutoAssignInfo","CDeviceAutoAssignInfo");

}

const std::string CCuDevTreeQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDevTreeQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDevTreeQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDevTreeQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDevTreeQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CDevTreeInfo");

}
void CCuDevTreeQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDevTreeQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDevTreeQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CDevTreeInfo");

}

const std::string CCuDeviceGrpPathQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceGrpPathQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceGrpPathQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceGrpPathQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceGrpPathQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CDeviceGroupInfo");

}
void CCuDeviceGrpPathQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceGrpPathQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceGrpPathQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CDeviceGroupInfo");

}

const std::string CCuDPSSearchReq::ToXml()const
{
    TiXmlElement xmlNode("CCuDPSSearchReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDPSSearchReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDPSSearchReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDPSSearchReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!keywords.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"keywords","string",keywords);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"maxResultItemNum","int",maxResultItemNum);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"maxSearchTimeMSec","int",maxSearchTimeMSec);

}
void CCuDPSSearchReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDPSSearchReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDPSSearchReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"keywords",keywords);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"maxResultItemNum",maxResultItemNum);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"maxSearchTimeMSec",maxSearchTimeMSec);

}

const std::string CCuDPSSearchRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDPSSearchRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDPSSearchRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDPSSearchRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDPSSearchRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

    if(!taskType.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"taskType","string",taskType);
    }

}
void CCuDPSSearchRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDPSSearchRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDPSSearchRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskType",taskType);

}

const std::string CCuDPSGetResultReq::ToXml()const
{
    TiXmlElement xmlNode("CCuDPSGetResultReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDPSGetResultReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDPSGetResultReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDPSGetResultReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CQueryReqBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

}
void CCuDPSGetResultReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CQueryReqBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDPSGetResultReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDPSGetResultReq();

    CQueryReqBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CQueryReqBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

}

const std::string CCuDPSGetResultRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDPSGetResultRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDPSGetResultRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDPSGetResultRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDPSGetResultRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,resultList,"resultList","CDPSSearchResult");

    ConvertHelper::ToXml::AddChildNode(xmlNode,"lastPage","bool",lastPage);

}
void CCuDPSGetResultRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDPSGetResultRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDPSGetResultRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,resultList,"resultList","CDPSSearchResult");

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"lastPage",lastPage);

}

const std::string CCuDPSGetResultByGroupReq::ToXml()const
{
    TiXmlElement xmlNode("CCuDPSGetResultByGroupReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDPSGetResultByGroupReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDPSGetResultByGroupReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDPSGetResultByGroupReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CQueryReqBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

    if(!deviceGroupId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"deviceGroupId","string",deviceGroupId);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"type","int",type);

}
void CCuDPSGetResultByGroupReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CQueryReqBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDPSGetResultByGroupReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDPSGetResultByGroupReq();

    CQueryReqBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CQueryReqBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"deviceGroupId",deviceGroupId);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"type",type);

}

const std::string CCuDPSGetResultByGroupRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDPSGetResultByGroupRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDPSGetResultByGroupRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDPSGetResultByGroupRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDPSGetResultByGroupRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,resultList,"resultList","CDPSSearchResult");

    ConvertHelper::ToXml::AddChildNode(xmlNode,"lastPage","bool",lastPage);

}
void CCuDPSGetResultByGroupRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDPSGetResultByGroupRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDPSGetResultByGroupRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,resultList,"resultList","CDPSSearchResult");

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"lastPage",lastPage);

}

const std::string CCuDPSSearchStopReq::ToXml()const
{
    TiXmlElement xmlNode("CCuDPSSearchStopReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDPSSearchStopReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDPSSearchStopReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDPSSearchStopReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"taskNo","u32",taskNo);

}
void CCuDPSSearchStopReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDPSSearchStopReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDPSSearchStopReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"taskNo",taskNo);

}

const std::string CCuDPSSearchStopRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDPSSearchStopRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDPSSearchStopRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDPSSearchStopRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDPSSearchStopRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuDPSSearchStopRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDPSSearchStopRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDPSSearchStopRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuGetDevInfoAndStatusReq::ToXml()const
{
    TiXmlElement xmlNode("CCuGetDevInfoAndStatusReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuGetDevInfoAndStatusReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuGetDevInfoAndStatusReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuGetDevInfoAndStatusReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,devIdList,"devIdList","std::basic_string<char>");

}
void CCuGetDevInfoAndStatusReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuGetDevInfoAndStatusReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuGetDevInfoAndStatusReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,devIdList,"devIdList","std::basic_string<char>");

}

const std::string TDeviceInfoAndStatus::ToXml()const
{
    TiXmlElement xmlNode("TDeviceInfoAndStatus");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void TDeviceInfoAndStatus::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("TDeviceInfoAndStatus");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void TDeviceInfoAndStatus::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    ConvertHelper::ToXml::AddChildNode(xmlNode,"devInfo","TDevicefullinfoAndPrivilege",devInfo);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"isOnline","bool",isOnline);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"devConfig","TPuConfig",devConfig);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"serviceStatus","TPuServiceStatus",serviceStatus);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"alarmStatus","TPuAlarmStatus",alarmStatus);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"isDevInfoValid","bool",isDevInfoValid);

}
void TDeviceInfoAndStatus::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CMS_ASSERT(0&&"error xml format, not root of class");
        return;
    }
    FromXml(*pRoot);
}
void TDeviceInfoAndStatus::FromXml(const TiXmlNode& xmlNode)
{
    *this = TDeviceInfoAndStatus();

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"devInfo",devInfo);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"isOnline",isOnline);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"devConfig",devConfig);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"serviceStatus",serviceStatus);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"alarmStatus",alarmStatus);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"isDevInfoValid",isDevInfoValid);

}

const std::string CCuGetDevInfoAndStatusRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuGetDevInfoAndStatusRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuGetDevInfoAndStatusRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuGetDevInfoAndStatusRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuGetDevInfoAndStatusRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,devInfoList,"devInfoList","TDeviceInfoAndStatus");

}
void CCuGetDevInfoAndStatusRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuGetDevInfoAndStatusRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuGetDevInfoAndStatusRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,devInfoList,"devInfoList","TDeviceInfoAndStatus");

}

const std::string CCuUserDevGrpVidsrcQryReq::ToXml()const
{
    TiXmlElement xmlNode("CCuUserDevGrpVidsrcQryReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserDevGrpVidsrcQryReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserDevGrpVidsrcQryReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserDevGrpVidsrcQryReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CUserDevGrpVidsrcQryReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!queryTag2.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"queryTag2","string",queryTag2);
    }

}
void CCuUserDevGrpVidsrcQryReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CUserDevGrpVidsrcQryReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserDevGrpVidsrcQryReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserDevGrpVidsrcQryReq();

    CUserDevGrpVidsrcQryReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CUserDevGrpVidsrcQryReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"queryTag2",queryTag2);

}

const std::string CCuUserDevGrpVidsrcQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuUserDevGrpVidsrcQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuUserDevGrpVidsrcQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuUserDevGrpVidsrcQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuUserDevGrpVidsrcQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CUserDevGrpVidsrcQryNtfReq::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"errorCode","int",errorCode);

}
void CCuUserDevGrpVidsrcQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CUserDevGrpVidsrcQryNtfReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuUserDevGrpVidsrcQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuUserDevGrpVidsrcQryRsp();

    CUserDevGrpVidsrcQryNtfReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CUserDevGrpVidsrcQryNtfReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"errorCode",errorCode);

}

const std::string CCuBatOptReq::ToXml()const
{
    TiXmlElement xmlNode("CCuBatOptReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuBatOptReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuBatOptReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuBatOptReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!treeId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"treeId","string",treeId);
    }

    if(!groupId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"groupId","string",groupId);
    }

    if(!userName.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"userName","string",userName);
    }

    if(!userId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"userId","string",userId);
    }

    ConvertHelper::ToXml::AddChildNode(xmlNode,"optType","int",optType);

    ConvertHelper::ToXml::AddChildNode(xmlNode,"recursive","bool",recursive);

    ConvertHelper::ToXml::AddContainer(xmlNode,paramList,"paramList","std::basic_string<char>");

}
void CCuBatOptReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuBatOptReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuBatOptReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"treeId",treeId);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"groupId",groupId);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"userName",userName);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"userId",userId);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"optType",optType);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"recursive",recursive);

    ConvertHelper::ToStruct::ParseContainer(xmlNode,paramList,"paramList","std::basic_string<char>");

}

const std::string CCuBatOptRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuBatOptRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuBatOptRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuBatOptRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuBatOptRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

}
void CCuBatOptRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuBatOptRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuBatOptRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
}

const std::string CCuVidsrcInfoQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuVidsrcInfoQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuVidsrcInfoQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuVidsrcInfoQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuVidsrcInfoQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,resultList,"resultList","CDevVidSrcInfo");

}
void CCuVidsrcInfoQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuVidsrcInfoQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuVidsrcInfoQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,resultList,"resultList","CDevVidSrcInfo");

}

const std::string CCuDeviceGroupDeviceQry4GbRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceGroupDeviceQry4GbRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceGroupDeviceQry4GbRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceGroupDeviceQry4GbRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceGroupDeviceQry4GbRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CDeviceGroupDeviceInfo4Gb");

}
void CCuDeviceGroupDeviceQry4GbRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceGroupDeviceQry4GbRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceGroupDeviceQry4GbRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CDeviceGroupDeviceInfo4Gb");

}

const std::string CCuDeviceGbinfoQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDeviceGbinfoQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDeviceGbinfoQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDeviceGbinfoQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDeviceGbinfoQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainer(xmlNode,infos,"infos","CDeviceFullGbInfo");

}
void CCuDeviceGbinfoQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDeviceGbinfoQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDeviceGbinfoQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainer(xmlNode,infos,"infos","CDeviceFullGbInfo");

}

const std::string CCuDevgrpGbinfoQryRsp::ToXml()const
{
    TiXmlElement xmlNode("CCuDevgrpGbinfoQryRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CCuDevgrpGbinfoQryRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CCuDevgrpGbinfoQryRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CCuDevgrpGbinfoQryRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CCUQueryResultBase::ToXmlWithoutClassNameNode(xmlNode);

    ConvertHelper::ToXml::AddContainerInContainer(xmlNode,infos,"infos","std::vector<CDeviceGroupInfo>");

}
void CCuDevgrpGbinfoQryRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CCUQueryResultBase::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CCuDevgrpGbinfoQryRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CCuDevgrpGbinfoQryRsp();

    CCUQueryResultBase::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CCUQueryResultBase")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseContainerInContainer(xmlNode,infos,"infos","std::vector<CDeviceGroupInfo>");

}

const std::string CSecurityAuthorizationFirstReq::ToXml()const
{
    TiXmlElement xmlNode("CSecurityAuthorizationFirstReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CSecurityAuthorizationFirstReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CSecurityAuthorizationFirstReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CSecurityAuthorizationFirstReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!algorithm.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"algorithm","string",algorithm);
    }

}
void CSecurityAuthorizationFirstReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CSecurityAuthorizationFirstReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CSecurityAuthorizationFirstReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"algorithm",algorithm);

}

const std::string CSecurityAuthorizationFirstRsp::ToXml()const
{
    TiXmlElement xmlNode("CSecurityAuthorizationFirstRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CSecurityAuthorizationFirstRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CSecurityAuthorizationFirstRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CSecurityAuthorizationFirstRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    if(!random1.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"random1","string",random1);
    }

    if(!algorithm.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"algorithm","string",algorithm);
    }

}
void CSecurityAuthorizationFirstRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CSecurityAuthorizationFirstRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CSecurityAuthorizationFirstRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"random1",random1);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"algorithm",algorithm);

}

const std::string CSecurityAuthorizationSecondReq::ToXml()const
{
    TiXmlElement xmlNode("CSecurityAuthorizationSecondReq");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CSecurityAuthorizationSecondReq::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CSecurityAuthorizationSecondReq");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CSecurityAuthorizationSecondReq::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventReq::ToXmlWithoutClassNameNode(xmlNode);

    if(!random1.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"random1","string",random1);
    }

    if(!random2.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"random2","string",random2);
    }

    if(!serverId.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"serverId","string",serverId);
    }

    if(!signature1.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"signature1","string",signature1);
    }

    if(!algorithm.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"algorithm","string",algorithm);
    }

}
void CSecurityAuthorizationSecondReq::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventReq::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CSecurityAuthorizationSecondReq::FromXml(const TiXmlNode& xmlNode)
{
    *this = CSecurityAuthorizationSecondReq();

    CEventReq::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventReq")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"random1",random1);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"random2",random2);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"serverId",serverId);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"signature1",signature1);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"algorithm",algorithm);

}

const std::string CSecurityAuthorizationSecondRsp::ToXml()const
{
    TiXmlElement xmlNode("CSecurityAuthorizationSecondRsp");
    ToXmlWithoutClassNameNode(xmlNode);
    TiXmlPrinter printer;
    printer.SetStreamPrinting();
    xmlNode.Accept(&printer);
    return printer.Str();
}
void CSecurityAuthorizationSecondRsp::ToXml(TiXmlDocument& xmlDoc)const
{
    TiXmlElement* pclass_nameNode = new TiXmlElement("CSecurityAuthorizationSecondRsp");
    xmlDoc.LinkEndChild(pclass_nameNode);
    ToXmlWithoutClassNameNode(*pclass_nameNode);
}
void CSecurityAuthorizationSecondRsp::ToXmlWithoutClassNameNode(TiXmlNode& xmlNode)const
{
    CEventRsp::ToXmlWithoutClassNameNode(xmlNode);

    if(!random1.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"random1","string",random1);
    }

    if(!random2.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"random2","string",random2);
    }

    if(!cryptkey.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"cryptkey","string",cryptkey);
    }

    if(!signature2.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"signature2","string",signature2);
    }

    if(!algorithm.empty())
    {
        ConvertHelper::ToXml::AddChildNode(xmlNode,"algorithm","string",algorithm);
    }

}
void CSecurityAuthorizationSecondRsp::FromXml(const std::string& xml_string)
{
    TiXmlDocument xmlNode;
    xmlNode.Parse(xml_string.c_str());
    if (xmlNode.Error())
    {
        CMS_ASSERT(0&&"error Parse xml string, maybe not integrated");
        return;
    }

    TiXmlNode* pRoot = xmlNode.RootElement();
    if(!pRoot)
    {
        CEventRsp::FromXml(xml_string);
        return;
    }
    FromXml(*pRoot);
}
void CSecurityAuthorizationSecondRsp::FromXml(const TiXmlNode& xmlNode)
{
    *this = CSecurityAuthorizationSecondRsp();

    CEventRsp::FromXml(xmlNode);
    if(xmlNode.ValueStr() == "CEventRsp")
    {
        return;
    }
    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"random1",random1);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"random2",random2);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"cryptkey",cryptkey);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"signature2",signature2);

    ConvertHelper::ToStruct::ParseChildNode(xmlNode,"algorithm",algorithm);

}

//end of file