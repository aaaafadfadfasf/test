事务轮询机制优化

20140508-fanxg

###背景：
ospext中对所有事务都会分批轮询，当事务数达到上千时，轮询就会消耗较多的cpu。


###分析：
其实并不是所有事务在所有状态都需要轮询，一旦事务进入稳定状态后通常是不需要轮询的。
所以我们只需要轮询非稳态的事务，通常在同一时刻，处于非稳态的事务较少，这样就大大
降低事务的轮询数量，从而较少cpu的消耗。


###ospext修改方案：
1. 事务类中增加一个虚函数virtual bool IsNotNeedPollState(){return false;} ，该函数中列出
不需要轮询的状态，上层的事务需要实现该函数。如果不实现默认轮询事务的所有状态。
2. 事务管理类中新增一个轮询事务列表，定时器只轮询该列表，而不是轮询所有的事务。轮询算法不变。
3. 轮询列表中事务的添加和删除由CTask::NextState()函数内部通过IsNotNeedPollState()驱动，上层不感知


###上层修改方案：
1. 上层事务类中只要增加virtual bool IsNotNeedPollState()函数的实现，覆盖掉基类的实现。其他不需要做改动。
2. 各模块先考虑持久事务优化(比如：模块登录事务，订阅事务，交换事务等等)，瞬时事务通常会很快消失，先不考虑。


###测试方案
需要给出优化前和优化后的cpu数据对比
1. 使用5000个vmt通过同一个pui注册平台，注册成功后记录pui和cmu的cpu数据。(分别使用优化前后的两个版本测)